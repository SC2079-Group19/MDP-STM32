
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800accc  0800accc  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800accc  0800accc  0001accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acd4  0800acd4  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acd4  0800acd4  0001acd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800acdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002019c  2**0
                  CONTENTS
 10 .bss          00005104  2000019c  2000019c  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200052a0  200052a0  0002019c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c5d1  00000000  00000000  0002020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c4d  00000000  00000000  0003c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001930  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013bb  00000000  00000000  00041d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005059  00000000  00000000  0004311b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c95b  00000000  00000000  00048174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbd0c  00000000  00000000  00064acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007048  00000000  00000000  001407dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00147824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000019c 	.word	0x2000019c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fc4 	.word	0x08009fc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	08009fc4 	.word	0x08009fc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f001 fc61 	bl	8001e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f91b 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 fb6b 	bl	8000c54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800057e:	f000 fb3f 	bl	8000c00 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000582:	f000 f973 	bl	800086c <MX_I2C1_Init>
  MX_TIM8_Init();
 8000586:	f000 fa91 	bl	8000aac <MX_TIM8_Init>
  MX_TIM2_Init();
 800058a:	f000 fa3b 	bl	8000a04 <MX_TIM2_Init>
  MX_TIM1_Init();
 800058e:	f000 f99b 	bl	80008c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000592:	f008 ffb3 	bl	80094fc <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000596:	2300      	movs	r3, #0
 8000598:	2203      	movs	r2, #3
 800059a:	2100      	movs	r1, #0
 800059c:	4859      	ldr	r0, [pc, #356]	; (8000704 <main+0x198>)
 800059e:	f008 fca3 	bl	8008ee8 <ICM20948_init>

  // accelerometer

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005a2:	210c      	movs	r1, #12
 80005a4:	4858      	ldr	r0, [pc, #352]	; (8000708 <main+0x19c>)
 80005a6:	f003 fd63 	bl	8004070 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4857      	ldr	r0, [pc, #348]	; (800070c <main+0x1a0>)
 80005ae:	f003 fd5f 	bl	8004070 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80005b2:	2104      	movs	r1, #4
 80005b4:	4855      	ldr	r0, [pc, #340]	; (800070c <main+0x1a0>)
 80005b6:	f003 fd5b 	bl	8004070 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005ba:	213c      	movs	r1, #60	; 0x3c
 80005bc:	4854      	ldr	r0, [pc, #336]	; (8000710 <main+0x1a4>)
 80005be:	f003 fec5 	bl	800434c <HAL_TIM_Encoder_Start>

  __RESET_SERVO_TURN(&htim1);
 80005c2:	4b51      	ldr	r3, [pc, #324]	; (8000708 <main+0x19c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2292      	movs	r2, #146	; 0x92
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
 80005ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ce:	f001 fc75 	bl	8001ebc <HAL_Delay>

  // TODO:pid controller

  // command queue initialization
  curCmd.index = 100;
 80005d2:	4b50      	ldr	r3, [pc, #320]	; (8000714 <main+0x1a8>)
 80005d4:	2264      	movs	r2, #100	; 0x64
 80005d6:	701a      	strb	r2, [r3, #0]
  curCmd.val = 0;
 80005d8:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <main+0x1a8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 80005de:	4b4e      	ldr	r3, [pc, #312]	; (8000718 <main+0x1ac>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 80005e4:	4b4c      	ldr	r3, [pc, #304]	; (8000718 <main+0x1ac>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 80005ea:	4b4c      	ldr	r3, [pc, #304]	; (800071c <main+0x1b0>)
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <main+0x1ac>)
 80005f0:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	e00c      	b.n	8000612 <main+0xa6>
  {
    Command cmd;
    cmd.index = 100;
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000600:	4a45      	ldr	r2, [pc, #276]	; (8000718 <main+0x1ac>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3301      	adds	r3, #1
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b42      	ldr	r3, [pc, #264]	; (800071c <main+0x1b0>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4293      	cmp	r3, r2
 800061c:	dbec      	blt.n	80005f8 <main+0x8c>
  }

  // overwrite curCmd for debugging individual task
  curCmd.index = 1;
 800061e:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <main+0x1a8>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
  curCmd.val = 00;
 8000624:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <main+0x1a8>)
 8000626:	2200      	movs	r2, #0
 8000628:	805a      	strh	r2, [r3, #2]

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 800062a:	4b3d      	ldr	r3, [pc, #244]	; (8000720 <main+0x1b4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b29b      	uxth	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	493c      	ldr	r1, [pc, #240]	; (8000724 <main+0x1b8>)
 8000634:	483c      	ldr	r0, [pc, #240]	; (8000728 <main+0x1bc>)
 8000636:	f004 fea2 	bl	800537e <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <main+0x19c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2292      	movs	r2, #146	; 0x92
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
 8000642:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000646:	f001 fc39 	bl	8001ebc <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800064a:	f005 fe75 	bl	8006338 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 800064e:	4a37      	ldr	r2, [pc, #220]	; (800072c <main+0x1c0>)
 8000650:	2100      	movs	r1, #0
 8000652:	4837      	ldr	r0, [pc, #220]	; (8000730 <main+0x1c4>)
 8000654:	f005 feba 	bl	80063cc <osThreadNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a36      	ldr	r2, [pc, #216]	; (8000734 <main+0x1c8>)
 800065c:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 800065e:	4a36      	ldr	r2, [pc, #216]	; (8000738 <main+0x1cc>)
 8000660:	2100      	movs	r1, #0
 8000662:	4836      	ldr	r0, [pc, #216]	; (800073c <main+0x1d0>)
 8000664:	f005 feb2 	bl	80063cc <osThreadNew>
 8000668:	4603      	mov	r3, r0
 800066a:	4a35      	ldr	r2, [pc, #212]	; (8000740 <main+0x1d4>)
 800066c:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 800066e:	4a35      	ldr	r2, [pc, #212]	; (8000744 <main+0x1d8>)
 8000670:	2100      	movs	r1, #0
 8000672:	4835      	ldr	r0, [pc, #212]	; (8000748 <main+0x1dc>)
 8000674:	f005 feaa 	bl	80063cc <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a34      	ldr	r2, [pc, #208]	; (800074c <main+0x1e0>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 800067e:	4a34      	ldr	r2, [pc, #208]	; (8000750 <main+0x1e4>)
 8000680:	2100      	movs	r1, #0
 8000682:	4834      	ldr	r0, [pc, #208]	; (8000754 <main+0x1e8>)
 8000684:	f005 fea2 	bl	80063cc <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <main+0x1ec>)
 800068c:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 800068e:	4a33      	ldr	r2, [pc, #204]	; (800075c <main+0x1f0>)
 8000690:	2100      	movs	r1, #0
 8000692:	4833      	ldr	r0, [pc, #204]	; (8000760 <main+0x1f4>)
 8000694:	f005 fe9a 	bl	80063cc <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a32      	ldr	r2, [pc, #200]	; (8000764 <main+0x1f8>)
 800069c:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 800069e:	4a32      	ldr	r2, [pc, #200]	; (8000768 <main+0x1fc>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4832      	ldr	r0, [pc, #200]	; (800076c <main+0x200>)
 80006a4:	f005 fe92 	bl	80063cc <osThreadNew>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <main+0x204>)
 80006ac:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 80006ae:	4a31      	ldr	r2, [pc, #196]	; (8000774 <main+0x208>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4831      	ldr	r0, [pc, #196]	; (8000778 <main+0x20c>)
 80006b4:	f005 fe8a 	bl	80063cc <osThreadNew>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a30      	ldr	r2, [pc, #192]	; (800077c <main+0x210>)
 80006bc:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80006be:	4a30      	ldr	r2, [pc, #192]	; (8000780 <main+0x214>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4830      	ldr	r0, [pc, #192]	; (8000784 <main+0x218>)
 80006c4:	f005 fe82 	bl	80063cc <osThreadNew>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a2f      	ldr	r2, [pc, #188]	; (8000788 <main+0x21c>)
 80006cc:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 80006ce:	4a2f      	ldr	r2, [pc, #188]	; (800078c <main+0x220>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	482f      	ldr	r0, [pc, #188]	; (8000790 <main+0x224>)
 80006d4:	f005 fe7a 	bl	80063cc <osThreadNew>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a2e      	ldr	r2, [pc, #184]	; (8000794 <main+0x228>)
 80006dc:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 80006de:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <main+0x22c>)
 80006e0:	2100      	movs	r1, #0
 80006e2:	482e      	ldr	r0, [pc, #184]	; (800079c <main+0x230>)
 80006e4:	f005 fe72 	bl	80063cc <osThreadNew>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a2d      	ldr	r2, [pc, #180]	; (80007a0 <main+0x234>)
 80006ec:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <main+0x238>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	482d      	ldr	r0, [pc, #180]	; (80007a8 <main+0x23c>)
 80006f4:	f005 fe6a 	bl	80063cc <osThreadNew>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <main+0x240>)
 80006fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006fe:	f005 fe3f 	bl	8006380 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x196>
 8000704:	200001b8 	.word	0x200001b8
 8000708:	2000020c 	.word	0x2000020c
 800070c:	2000029c 	.word	0x2000029c
 8000710:	20000254 	.word	0x20000254
 8000714:	20000394 	.word	0x20000394
 8000718:	20000360 	.word	0x20000360
 800071c:	20000001 	.word	0x20000001
 8000720:	20000000 	.word	0x20000000
 8000724:	20000354 	.word	0x20000354
 8000728:	200002e4 	.word	0x200002e4
 800072c:	0800a090 	.word	0x0800a090
 8000730:	08000d85 	.word	0x08000d85
 8000734:	20000328 	.word	0x20000328
 8000738:	0800a0b4 	.word	0x0800a0b4
 800073c:	08000e85 	.word	0x08000e85
 8000740:	2000032c 	.word	0x2000032c
 8000744:	0800a0d8 	.word	0x0800a0d8
 8000748:	08000f11 	.word	0x08000f11
 800074c:	20000330 	.word	0x20000330
 8000750:	0800a0fc 	.word	0x0800a0fc
 8000754:	08000f85 	.word	0x08000f85
 8000758:	20000334 	.word	0x20000334
 800075c:	0800a120 	.word	0x0800a120
 8000760:	08001051 	.word	0x08001051
 8000764:	20000338 	.word	0x20000338
 8000768:	0800a144 	.word	0x0800a144
 800076c:	0800111d 	.word	0x0800111d
 8000770:	2000033c 	.word	0x2000033c
 8000774:	0800a168 	.word	0x0800a168
 8000778:	080011e9 	.word	0x080011e9
 800077c:	20000340 	.word	0x20000340
 8000780:	0800a18c 	.word	0x0800a18c
 8000784:	080012b5 	.word	0x080012b5
 8000788:	20000344 	.word	0x20000344
 800078c:	0800a1b0 	.word	0x0800a1b0
 8000790:	08001381 	.word	0x08001381
 8000794:	20000348 	.word	0x20000348
 8000798:	0800a1d4 	.word	0x0800a1d4
 800079c:	08001391 	.word	0x08001391
 80007a0:	2000034c 	.word	0x2000034c
 80007a4:	0800a1f8 	.word	0x0800a1f8
 80007a8:	080013a1 	.word	0x080013a1
 80007ac:	20000350 	.word	0x20000350

080007b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f008 ff7c 	bl	80096bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xb4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xb4>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xb4>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <SystemClock_Config+0xb8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SystemClock_Config+0xb8>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fe81 	bl	8003528 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800082c:	f001 f848 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000830:	230f      	movs	r3, #15
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f003 f8e4 	bl	8003a18 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000856:	f001 f833 	bl	80018c0 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C1_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_I2C1_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C1_Init+0x50>)
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x58>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_I2C1_Init+0x50>)
 800088a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_I2C1_Init+0x50>)
 80008aa:	f001 fe55 	bl	8002558 <HAL_I2C_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f001 f804 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001b8 	.word	0x200001b8
 80008c0:	40005400 	.word	0x40005400
 80008c4:	000186a0 	.word	0x000186a0

080008c8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b096      	sub	sp, #88	; 0x58
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2220      	movs	r2, #32
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f008 fedb 	bl	80096bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <MX_TIM1_Init+0x134>)
 8000908:	4a3d      	ldr	r2, [pc, #244]	; (8000a00 <MX_TIM1_Init+0x138>)
 800090a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_TIM1_Init+0x134>)
 800090e:	22a0      	movs	r2, #160	; 0xa0
 8000910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <MX_TIM1_Init+0x134>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <MX_TIM1_Init+0x134>)
 800091a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b36      	ldr	r3, [pc, #216]	; (80009fc <MX_TIM1_Init+0x134>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000926:	4b35      	ldr	r3, [pc, #212]	; (80009fc <MX_TIM1_Init+0x134>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800092c:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_TIM1_Init+0x134>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000932:	4832      	ldr	r0, [pc, #200]	; (80009fc <MX_TIM1_Init+0x134>)
 8000934:	f003 fa82 	bl	8003e3c <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800093e:	f000 ffbf 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000948:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800094c:	4619      	mov	r1, r3
 800094e:	482b      	ldr	r0, [pc, #172]	; (80009fc <MX_TIM1_Init+0x134>)
 8000950:	f003 ff54 	bl	80047fc <HAL_TIM_ConfigClockSource>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800095a:	f000 ffb1 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800095e:	4827      	ldr	r0, [pc, #156]	; (80009fc <MX_TIM1_Init+0x134>)
 8000960:	f003 fb2c 	bl	8003fbc <HAL_TIM_PWM_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800096a:	f000 ffa9 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097a:	4619      	mov	r1, r3
 800097c:	481f      	ldr	r0, [pc, #124]	; (80009fc <MX_TIM1_Init+0x134>)
 800097e:	f004 fb3d 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000988:	f000 ff9a 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098c:	2360      	movs	r3, #96	; 0x60
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	220c      	movs	r2, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <MX_TIM1_Init+0x134>)
 80009ae:	f003 fe63 	bl	8004678 <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80009b8:	f000 ff82 	bl	80018c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_TIM1_Init+0x134>)
 80009e0:	f004 fb88 	bl	80050f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80009ea:	f000 ff69 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_TIM1_Init+0x134>)
 80009f0:	f001 f8a4 	bl	8001b3c <HAL_TIM_MspPostInit>
}
 80009f4:	bf00      	nop
 80009f6:	3758      	adds	r7, #88	; 0x58
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000020c 	.word	0x2000020c
 8000a00:	40010000 	.word	0x40010000

08000a04 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2224      	movs	r2, #36	; 0x24
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f008 fe52 	bl	80096bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000a58:	230a      	movs	r3, #10
 8000a5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000a68:	230a      	movs	r3, #10
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a74:	f003 fbc4 	bl	8004200 <HAL_TIM_Encoder_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a7e:	f000 ff1f 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a90:	f004 fab4 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a9a:	f000 ff11 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000254 	.word	0x20000254

08000aac <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fde9 	bl	80096bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000aec:	4a43      	ldr	r2, [pc, #268]	; (8000bfc <MX_TIM8_Init+0x150>)
 8000aee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000afc:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000afe:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b3c      	ldr	r3, [pc, #240]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b16:	4838      	ldr	r0, [pc, #224]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b18:	f003 f990 	bl	8003e3c <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000b22:	f000 fecd 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b30:	4619      	mov	r1, r3
 8000b32:	4831      	ldr	r0, [pc, #196]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b34:	f003 fe62 	bl	80047fc <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000b3e:	f000 febf 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b42:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b44:	f003 fa3a 	bl	8003fbc <HAL_TIM_PWM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000b4e:	f000 feb7 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b62:	f004 fa4b 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b6c:	f000 fea8 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000b96:	f003 fd6f 	bl	8004678 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000ba0:	f000 fe8e 	bl	80018c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000bae:	f003 fd63 	bl	8004678 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000bb8:	f000 fe82 	bl	80018c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_TIM8_Init+0x14c>)
 8000be0:	f004 fa88 	bl	80050f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000bea:	f000 fe69 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3758      	adds	r7, #88	; 0x58
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000029c 	.word	0x2000029c
 8000bfc:	40010400 	.word	0x40010400

08000c00 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART3_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART3_UART_Init+0x4c>)
 8000c38:	f004 fac2 	bl	80051c0 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 fe3d 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200002e4 	.word	0x200002e4
 8000c50:	40004800 	.word	0x40004800

08000c54 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a30      	ldr	r2, [pc, #192]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000cac:	f043 0304 	orr.w	r3, r3, #4
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_GPIO_Init+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000ce0:	481c      	ldr	r0, [pc, #112]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000ce2:	f001 fc1f 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	213c      	movs	r1, #60	; 0x3c
 8000cea:	481b      	ldr	r0, [pc, #108]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000cec:	f001 fc1a 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin;
 8000cf0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <MX_GPIO_Init+0x100>)
 8000d0a:	f001 fa6f 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000d26:	f001 fa61 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 8000d2a:	2330      	movs	r3, #48	; 0x30
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_GPIO_Init+0x104>)
 8000d42:	f001 fa53 	bl	80021ec <HAL_GPIO_Init>
}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40020000 	.word	0x40020000

08000d5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  HAL_UART_Transmit(&huart3, (uint8_t *)aRxBuffer, 10, 0xffff);
 8000d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d68:	220a      	movs	r2, #10
 8000d6a:	4904      	ldr	r1, [pc, #16]	; (8000d7c <HAL_UART_RxCpltCallback+0x20>)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <HAL_UART_RxCpltCallback+0x24>)
 8000d6e:	f004 fa74 	bl	800525a <HAL_UART_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000354 	.word	0x20000354
 8000d80:	200002e4 	.word	0x200002e4

08000d84 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b090      	sub	sp, #64	; 0x40
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  int cnt1 = 0, cnt2 = 0, diff = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d90:	2300      	movs	r3, #0
 8000d92:	633b      	str	r3, [r7, #48]	; 0x30
 8000d94:	2300      	movs	r3, #0
 8000d96:	63bb      	str	r3, [r7, #56]	; 0x38

  uint32_t tick = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <runEncoder+0xf4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  tick = HAL_GetTick();
 8000da4:	f001 f87e 	bl	8001ea4 <HAL_GetTick>
 8000da8:	6378      	str	r0, [r7, #52]	; 0x34

  // uint8_t encoderBuffer[20];
  uint8_t speedBuffer[20];
  uint8_t directionBuffer[10];
  uint16_t dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <runEncoder+0xf4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	bf0c      	ite	eq
 8000db8:	2301      	moveq	r3, #1
 8000dba:	2300      	movne	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* Infinite loop */

  for (;;)
  {
    // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
    if (HAL_GetTick() - tick > 1000L)
 8000dc0:	f001 f870 	bl	8001ea4 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dce:	d94e      	bls.n	8000e6e <runEncoder+0xea>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <runEncoder+0xf4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	633b      	str	r3, [r7, #48]	; 0x30
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <runEncoder+0xf4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d110      	bne.n	8000e08 <runEncoder+0x84>
      {
        if (cnt2 < cnt1)
 8000de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dea:	429a      	cmp	r2, r3
 8000dec:	da04      	bge.n	8000df8 <runEncoder+0x74>
        {
          diff = cnt1 - cnt2;
 8000dee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000df6:	e017      	b.n	8000e28 <runEncoder+0xa4>
        }
        else
          diff = (65535 - cnt2) + cnt1;
 8000df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfa:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000dfe:	33ff      	adds	r3, #255	; 0xff
 8000e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e02:	4413      	add	r3, r2
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e06:	e00f      	b.n	8000e28 <runEncoder+0xa4>
      }
      else
      {
        if (cnt2 > cnt1)
 8000e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	dd04      	ble.n	8000e1a <runEncoder+0x96>
        {
          diff = cnt2 - cnt1;
 8000e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e18:	e006      	b.n	8000e28 <runEncoder+0xa4>
        }
        else
          diff = (65535 - cnt1) + cnt2;
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000e20:	33ff      	adds	r3, #255	; 0xff
 8000e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e24:	4413      	add	r3, r2
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
      }

      // display on oled
      sprintf(speedBuffer, "Speed:%5d\0", diff);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e2e:	4913      	ldr	r1, [pc, #76]	; (8000e7c <runEncoder+0xf8>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f008 fc23 	bl	800967c <siprintf>
      OLED_ShowString(0, 0, speedBuffer);
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f008 fb2a 	bl	8009498 <OLED_ShowString>
      sprintf(directionBuffer, "Dir:%5d\0", dir);
 8000e44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <runEncoder+0xfc>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f008 fc15 	bl	800967c <siprintf>
      OLED_ShowString(0, 15, directionBuffer);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	461a      	mov	r2, r3
 8000e58:	210f      	movs	r1, #15
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f008 fb1c 	bl	8009498 <OLED_ShowString>

      // OLED_Refresh_Gram();
      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <runEncoder+0xf4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
      tick = HAL_GetTick();
 8000e68:	f001 f81c 	bl	8001ea4 <HAL_GetTick>
 8000e6c:	6378      	str	r0, [r7, #52]	; 0x34
    }

    osDelay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f005 fb3e 	bl	80064f0 <osDelay>
    if (HAL_GetTick() - tick > 1000L)
 8000e74:	e7a4      	b.n	8000dc0 <runEncoder+0x3c>
 8000e76:	bf00      	nop
 8000e78:	20000254 	.word	0x20000254
 8000e7c:	0800a044 	.word	0x0800a044
 8000e80:	0800a050 	.word	0x0800a050

08000e84 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af04      	add	r7, sp, #16
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for (;;)
  {

    __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8000e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	2302      	movs	r3, #2
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <runOledTask+0x7c>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	2237      	movs	r2, #55	; 0x37
 8000e9e:	21d0      	movs	r1, #208	; 0xd0
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <runOledTask+0x80>)
 8000ea2:	f001 fd97 	bl	80029d4 <HAL_I2C_Mem_Read>
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <runOledTask+0x7c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <runOledTask+0x7c>)
 8000eb0:	785b      	ldrb	r3, [r3, #1]
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <runOledTask+0x84>)
 8000eba:	801a      	strh	r2, [r3, #0]
    OLED_ShowNumber(0, 40, gyroZ, 5, 12);
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <runOledTask+0x84>)
 8000ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2305      	movs	r3, #5
 8000eca:	2128      	movs	r1, #40	; 0x28
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f008 fa75 	bl	80093bc <OLED_ShowNumber>

    ICM20948_readAccelerometer_allAxises(&hi2c1, 0, ACCEL_FULL_SCALE_2G, readAccData);
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <runOledTask+0x88>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <runOledTask+0x80>)
 8000eda:	f008 f88e 	bl	8008ffa <ICM20948_readAccelerometer_allAxises>
    OLED_ShowNumber(80, 40, readAccData[2], 5, 12);
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <runOledTask+0x88>)
 8000ee0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2305      	movs	r3, #5
 8000eec:	2128      	movs	r1, #40	; 0x28
 8000eee:	2050      	movs	r0, #80	; 0x50
 8000ef0:	f008 fa64 	bl	80093bc <OLED_ShowNumber>

    OLED_Refresh_Gram();
 8000ef4:	f008 f8d2 	bl	800909c <OLED_Refresh_Gram>
    osDelay(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f005 faf9 	bl	80064f0 <osDelay>
    __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8000efe:	e7c5      	b.n	8000e8c <runOledTask+0x8>
 8000f00:	200003ac 	.word	0x200003ac
 8000f04:	200001b8 	.word	0x200001b8
 8000f08:	200003ae 	.word	0x200003ae
 8000f0c:	200003b0 	.word	0x200003b0

08000f10 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for (;;)
  {

    if (curTask != TASK_MOVE_FOREWARD)
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <runFWTask+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <runFWTask+0x18>
      osDelay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f005 fae5 	bl	80064f0 <osDelay>
 8000f26:	e7f7      	b.n	8000f18 <runFWTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <runFWTask+0x64>)
 8000f2a:	211e      	movs	r1, #30
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f008 fab3 	bl	8009498 <OLED_ShowString>
      // __SET_MOTOR_DIRECTION(DIR_FORWARD);
      // __RESET_SERVO_TURN(&htim1);
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <runFWTask+0x68>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f38:	230c      	movs	r3, #12
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	2132      	movs	r1, #50	; 0x32
 8000f40:	2000      	movs	r0, #0
 8000f42:	f008 fa3b 	bl	80093bc <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8000f46:	f000 ffad 	bl	8001ea4 <HAL_GetTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <runFWTask+0x6c>)
 8000f50:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 8000f52:	bf00      	nop
 8000f54:	f000 ffa6 	bl	8001ea4 <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <runFWTask+0x6c>)
 8000f5c:	8812      	ldrh	r2, [r2, #0]
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <runFWTask+0x70>)
 8000f62:	8812      	ldrh	r2, [r2, #0]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d3f5      	bcc.n	8000f54 <runFWTask+0x44>
      {
        // __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
      }

      osDelay(100);
 8000f68:	2064      	movs	r0, #100	; 0x64
 8000f6a:	f005 fac1 	bl	80064f0 <osDelay>
    if (curTask != TASK_MOVE_FOREWARD)
 8000f6e:	e7d3      	b.n	8000f18 <runFWTask+0x8>
 8000f70:	20000138 	.word	0x20000138
 8000f74:	0800a05c 	.word	0x0800a05c
 8000f78:	2000020c 	.word	0x2000020c
 8000f7c:	200003b6 	.word	0x200003b6
 8000f80:	2000013a 	.word	0x2000013a

08000f84 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <runBWTask+0xa8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d003      	beq.n	8000f9c <runBWTask+0x18>
      osDelay(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f005 faab 	bl	80064f0 <osDelay>
 8000f9a:	e7f7      	b.n	8000f8c <runBWTask+0x8>

    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8000f9c:	4a24      	ldr	r2, [pc, #144]	; (8001030 <runBWTask+0xac>)
 8000f9e:	211e      	movs	r1, #30
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f008 fa79 	bl	8009498 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4822      	ldr	r0, [pc, #136]	; (8001034 <runBWTask+0xb0>)
 8000fac:	f001 faba 	bl	8002524 <HAL_GPIO_WritePin>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	481f      	ldr	r0, [pc, #124]	; (8001034 <runBWTask+0xb0>)
 8000fb6:	f001 fab5 	bl	8002524 <HAL_GPIO_WritePin>
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	481d      	ldr	r0, [pc, #116]	; (8001034 <runBWTask+0xb0>)
 8000fc0:	f001 fab0 	bl	8002524 <HAL_GPIO_WritePin>
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	481a      	ldr	r0, [pc, #104]	; (8001034 <runBWTask+0xb0>)
 8000fca:	f001 faab 	bl	8002524 <HAL_GPIO_WritePin>
      __RESET_SERVO_TURN(&htim1);
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <runBWTask+0xb4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2292      	movs	r2, #146	; 0x92
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fda:	f000 ff6f 	bl	8001ebc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <runBWTask+0xb4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2305      	movs	r3, #5
 8000fea:	2132      	movs	r1, #50	; 0x32
 8000fec:	2000      	movs	r0, #0
 8000fee:	f008 f9e5 	bl	80093bc <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8000ff2:	f000 ff57 	bl	8001ea4 <HAL_GetTick>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <runBWTask+0xb8>)
 8000ffc:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 8000ffe:	e009      	b.n	8001014 <runBWTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <runBWTask+0xbc>)
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <runBWTask+0xc0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <runBWTask+0xc4>)
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <runBWTask+0xc0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8001014:	f000 ff46 	bl	8001ea4 <HAL_GetTick>
 8001018:	4603      	mov	r3, r0
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <runBWTask+0xb8>)
 800101c:	8812      	ldrh	r2, [r2, #0]
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <runBWTask+0xc8>)
 8001022:	8812      	ldrh	r2, [r2, #0]
 8001024:	4293      	cmp	r3, r2
 8001026:	d3eb      	bcc.n	8001000 <runBWTask+0x7c>
    if (curTask != TASK_MOVE_BACKWARD)
 8001028:	e7b0      	b.n	8000f8c <runBWTask+0x8>
 800102a:	bf00      	nop
 800102c:	20000138 	.word	0x20000138
 8001030:	0800a05c 	.word	0x0800a05c
 8001034:	40020000 	.word	0x40020000
 8001038:	2000020c 	.word	0x2000020c
 800103c:	200003b6 	.word	0x200003b6
 8001040:	20000002 	.word	0x20000002
 8001044:	2000029c 	.word	0x2000029c
 8001048:	20000004 	.word	0x20000004
 800104c:	2000013a 	.word	0x2000013a

08001050 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <runFLTask+0xa8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d003      	beq.n	8001068 <runFLTask+0x18>
      osDelay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f005 fa45 	bl	80064f0 <osDelay>
 8001066:	e7f7      	b.n	8001058 <runFLTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8001068:	4a24      	ldr	r2, [pc, #144]	; (80010fc <runFLTask+0xac>)
 800106a:	211e      	movs	r1, #30
 800106c:	2000      	movs	r0, #0
 800106e:	f008 fa13 	bl	8009498 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8001072:	2200      	movs	r2, #0
 8001074:	2104      	movs	r1, #4
 8001076:	4822      	ldr	r0, [pc, #136]	; (8001100 <runFLTask+0xb0>)
 8001078:	f001 fa54 	bl	8002524 <HAL_GPIO_WritePin>
 800107c:	2201      	movs	r2, #1
 800107e:	2108      	movs	r1, #8
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <runFLTask+0xb0>)
 8001082:	f001 fa4f 	bl	8002524 <HAL_GPIO_WritePin>
 8001086:	2200      	movs	r2, #0
 8001088:	2120      	movs	r1, #32
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <runFLTask+0xb0>)
 800108c:	f001 fa4a 	bl	8002524 <HAL_GPIO_WritePin>
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	481a      	ldr	r0, [pc, #104]	; (8001100 <runFLTask+0xb0>)
 8001096:	f001 fa45 	bl	8002524 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 0);
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <runFLTask+0xb4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2269      	movs	r2, #105	; 0x69
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010a6:	f000 ff09 	bl	8001ebc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <runFLTask+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b0:	230c      	movs	r3, #12
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2305      	movs	r3, #5
 80010b6:	2132      	movs	r1, #50	; 0x32
 80010b8:	2000      	movs	r0, #0
 80010ba:	f008 f97f 	bl	80093bc <OLED_ShowNumber>
      startTick = HAL_GetTick();
 80010be:	f000 fef1 	bl	8001ea4 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <runFLTask+0xb8>)
 80010c8:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 80010ca:	e009      	b.n	80010e0 <runFLTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <runFLTask+0xbc>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <runFLTask+0xc0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <runFLTask+0xc4>)
 80010d8:	881a      	ldrh	r2, [r3, #0]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <runFLTask+0xc0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 80010e0:	f000 fee0 	bl	8001ea4 <HAL_GetTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <runFLTask+0xb8>)
 80010e8:	8812      	ldrh	r2, [r2, #0]
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <runFLTask+0xc8>)
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d3eb      	bcc.n	80010cc <runFLTask+0x7c>
    if (curTask != TASK_FL)
 80010f4:	e7b0      	b.n	8001058 <runFLTask+0x8>
 80010f6:	bf00      	nop
 80010f8:	20000138 	.word	0x20000138
 80010fc:	0800a05c 	.word	0x0800a05c
 8001100:	40020000 	.word	0x40020000
 8001104:	2000020c 	.word	0x2000020c
 8001108:	200003b6 	.word	0x200003b6
 800110c:	20000002 	.word	0x20000002
 8001110:	2000029c 	.word	0x2000029c
 8001114:	20000004 	.word	0x20000004
 8001118:	2000013a 	.word	0x2000013a

0800111c <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <runFRTask+0xa8>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d003      	beq.n	8001134 <runFRTask+0x18>
      osDelay(100);
 800112c:	2064      	movs	r0, #100	; 0x64
 800112e:	f005 f9df 	bl	80064f0 <osDelay>
 8001132:	e7f7      	b.n	8001124 <runFRTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8001134:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <runFRTask+0xac>)
 8001136:	211e      	movs	r1, #30
 8001138:	2000      	movs	r0, #0
 800113a:	f008 f9ad 	bl	8009498 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 800113e:	2200      	movs	r2, #0
 8001140:	2104      	movs	r1, #4
 8001142:	4822      	ldr	r0, [pc, #136]	; (80011cc <runFRTask+0xb0>)
 8001144:	f001 f9ee 	bl	8002524 <HAL_GPIO_WritePin>
 8001148:	2201      	movs	r2, #1
 800114a:	2108      	movs	r1, #8
 800114c:	481f      	ldr	r0, [pc, #124]	; (80011cc <runFRTask+0xb0>)
 800114e:	f001 f9e9 	bl	8002524 <HAL_GPIO_WritePin>
 8001152:	2200      	movs	r2, #0
 8001154:	2120      	movs	r1, #32
 8001156:	481d      	ldr	r0, [pc, #116]	; (80011cc <runFRTask+0xb0>)
 8001158:	f001 f9e4 	bl	8002524 <HAL_GPIO_WritePin>
 800115c:	2201      	movs	r2, #1
 800115e:	2110      	movs	r1, #16
 8001160:	481a      	ldr	r0, [pc, #104]	; (80011cc <runFRTask+0xb0>)
 8001162:	f001 f9df 	bl	8002524 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 1);
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <runFRTask+0xb4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	22d2      	movs	r2, #210	; 0xd2
 800116c:	641a      	str	r2, [r3, #64]	; 0x40
 800116e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001172:	f000 fea3 	bl	8001ebc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <runFRTask+0xb4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800117c:	230c      	movs	r3, #12
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2305      	movs	r3, #5
 8001182:	2132      	movs	r1, #50	; 0x32
 8001184:	2000      	movs	r0, #0
 8001186:	f008 f919 	bl	80093bc <OLED_ShowNumber>
      startTick = HAL_GetTick();
 800118a:	f000 fe8b 	bl	8001ea4 <HAL_GetTick>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <runFRTask+0xb8>)
 8001194:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 8001196:	e009      	b.n	80011ac <runFRTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <runFRTask+0xbc>)
 800119a:	881a      	ldrh	r2, [r3, #0]
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <runFRTask+0xc0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <runFRTask+0xc4>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <runFRTask+0xc0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 80011ac:	f000 fe7a 	bl	8001ea4 <HAL_GetTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <runFRTask+0xb8>)
 80011b4:	8812      	ldrh	r2, [r2, #0]
 80011b6:	1a9b      	subs	r3, r3, r2
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <runFRTask+0xc8>)
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	4293      	cmp	r3, r2
 80011be:	d3eb      	bcc.n	8001198 <runFRTask+0x7c>
    if (curTask != TASK_FR)
 80011c0:	e7b0      	b.n	8001124 <runFRTask+0x8>
 80011c2:	bf00      	nop
 80011c4:	20000138 	.word	0x20000138
 80011c8:	0800a05c 	.word	0x0800a05c
 80011cc:	40020000 	.word	0x40020000
 80011d0:	2000020c 	.word	0x2000020c
 80011d4:	200003b6 	.word	0x200003b6
 80011d8:	20000002 	.word	0x20000002
 80011dc:	2000029c 	.word	0x2000029c
 80011e0:	20000004 	.word	0x20000004
 80011e4:	2000013a 	.word	0x2000013a

080011e8 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 80011f0:	4b27      	ldr	r3, [pc, #156]	; (8001290 <runBLTask+0xa8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d003      	beq.n	8001200 <runBLTask+0x18>
      osDelay(100);
 80011f8:	2064      	movs	r0, #100	; 0x64
 80011fa:	f005 f979 	bl	80064f0 <osDelay>
 80011fe:	e7f7      	b.n	80011f0 <runBLTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 8001200:	4a24      	ldr	r2, [pc, #144]	; (8001294 <runBLTask+0xac>)
 8001202:	211e      	movs	r1, #30
 8001204:	2000      	movs	r0, #0
 8001206:	f008 f947 	bl	8009498 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800120a:	2201      	movs	r2, #1
 800120c:	2104      	movs	r1, #4
 800120e:	4822      	ldr	r0, [pc, #136]	; (8001298 <runBLTask+0xb0>)
 8001210:	f001 f988 	bl	8002524 <HAL_GPIO_WritePin>
 8001214:	2200      	movs	r2, #0
 8001216:	2108      	movs	r1, #8
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <runBLTask+0xb0>)
 800121a:	f001 f983 	bl	8002524 <HAL_GPIO_WritePin>
 800121e:	2201      	movs	r2, #1
 8001220:	2120      	movs	r1, #32
 8001222:	481d      	ldr	r0, [pc, #116]	; (8001298 <runBLTask+0xb0>)
 8001224:	f001 f97e 	bl	8002524 <HAL_GPIO_WritePin>
 8001228:	2200      	movs	r2, #0
 800122a:	2110      	movs	r1, #16
 800122c:	481a      	ldr	r0, [pc, #104]	; (8001298 <runBLTask+0xb0>)
 800122e:	f001 f979 	bl	8002524 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 0);
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <runBLTask+0xb4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2269      	movs	r2, #105	; 0x69
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
 800123a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800123e:	f000 fe3d 	bl	8001ebc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <runBLTask+0xb4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001248:	230c      	movs	r3, #12
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2305      	movs	r3, #5
 800124e:	2132      	movs	r1, #50	; 0x32
 8001250:	2000      	movs	r0, #0
 8001252:	f008 f8b3 	bl	80093bc <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8001256:	f000 fe25 	bl	8001ea4 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <runBLTask+0xb8>)
 8001260:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 8001262:	e009      	b.n	8001278 <runBLTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <runBLTask+0xbc>)
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <runBLTask+0xc0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <runBLTask+0xc4>)
 8001270:	881a      	ldrh	r2, [r3, #0]
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <runBLTask+0xc0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8001278:	f000 fe14 	bl	8001ea4 <HAL_GetTick>
 800127c:	4603      	mov	r3, r0
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <runBLTask+0xb8>)
 8001280:	8812      	ldrh	r2, [r2, #0]
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <runBLTask+0xc8>)
 8001286:	8812      	ldrh	r2, [r2, #0]
 8001288:	4293      	cmp	r3, r2
 800128a:	d3eb      	bcc.n	8001264 <runBLTask+0x7c>
    if (curTask != TASK_BL)
 800128c:	e7b0      	b.n	80011f0 <runBLTask+0x8>
 800128e:	bf00      	nop
 8001290:	20000138 	.word	0x20000138
 8001294:	0800a05c 	.word	0x0800a05c
 8001298:	40020000 	.word	0x40020000
 800129c:	2000020c 	.word	0x2000020c
 80012a0:	200003b6 	.word	0x200003b6
 80012a4:	20000002 	.word	0x20000002
 80012a8:	2000029c 	.word	0x2000029c
 80012ac:	20000004 	.word	0x20000004
 80012b0:	2000013a 	.word	0x2000013a

080012b4 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <runBRTask+0xa8>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b05      	cmp	r3, #5
 80012c2:	d003      	beq.n	80012cc <runBRTask+0x18>
      osDelay(100);
 80012c4:	2064      	movs	r0, #100	; 0x64
 80012c6:	f005 f913 	bl	80064f0 <osDelay>
 80012ca:	e7f7      	b.n	80012bc <runBRTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 80012cc:	4a24      	ldr	r2, [pc, #144]	; (8001360 <runBRTask+0xac>)
 80012ce:	211e      	movs	r1, #30
 80012d0:	2000      	movs	r0, #0
 80012d2:	f008 f8e1 	bl	8009498 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2104      	movs	r1, #4
 80012da:	4822      	ldr	r0, [pc, #136]	; (8001364 <runBRTask+0xb0>)
 80012dc:	f001 f922 	bl	8002524 <HAL_GPIO_WritePin>
 80012e0:	2200      	movs	r2, #0
 80012e2:	2108      	movs	r1, #8
 80012e4:	481f      	ldr	r0, [pc, #124]	; (8001364 <runBRTask+0xb0>)
 80012e6:	f001 f91d 	bl	8002524 <HAL_GPIO_WritePin>
 80012ea:	2201      	movs	r2, #1
 80012ec:	2120      	movs	r1, #32
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <runBRTask+0xb0>)
 80012f0:	f001 f918 	bl	8002524 <HAL_GPIO_WritePin>
 80012f4:	2200      	movs	r2, #0
 80012f6:	2110      	movs	r1, #16
 80012f8:	481a      	ldr	r0, [pc, #104]	; (8001364 <runBRTask+0xb0>)
 80012fa:	f001 f913 	bl	8002524 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 1);
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <runBRTask+0xb4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	22d2      	movs	r2, #210	; 0xd2
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
 8001306:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800130a:	f000 fdd7 	bl	8001ebc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <runBRTask+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001314:	230c      	movs	r3, #12
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2305      	movs	r3, #5
 800131a:	2132      	movs	r1, #50	; 0x32
 800131c:	2000      	movs	r0, #0
 800131e:	f008 f84d 	bl	80093bc <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8001322:	f000 fdbf 	bl	8001ea4 <HAL_GetTick>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <runBRTask+0xb8>)
 800132c:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 800132e:	e009      	b.n	8001344 <runBRTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <runBRTask+0xbc>)
 8001332:	881a      	ldrh	r2, [r3, #0]
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <runBRTask+0xc0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <runBRTask+0xc4>)
 800133c:	881a      	ldrh	r2, [r3, #0]
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <runBRTask+0xc0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8001344:	f000 fdae 	bl	8001ea4 <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <runBRTask+0xb8>)
 800134c:	8812      	ldrh	r2, [r2, #0]
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <runBRTask+0xc8>)
 8001352:	8812      	ldrh	r2, [r2, #0]
 8001354:	4293      	cmp	r3, r2
 8001356:	d3eb      	bcc.n	8001330 <runBRTask+0x7c>
    if (curTask != TASK_BR)
 8001358:	e7b0      	b.n	80012bc <runBRTask+0x8>
 800135a:	bf00      	nop
 800135c:	20000138 	.word	0x20000138
 8001360:	0800a05c 	.word	0x0800a05c
 8001364:	40020000 	.word	0x40020000
 8001368:	2000020c 	.word	0x2000020c
 800136c:	200003b6 	.word	0x200003b6
 8001370:	20000002 	.word	0x20000002
 8001374:	2000029c 	.word	0x2000029c
 8001378:	20000004 	.word	0x20000004
 800137c:	2000013a 	.word	0x2000013a

08001380 <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f005 f8b1 	bl	80064f0 <osDelay>
 800138e:	e7fb      	b.n	8001388 <runADCTask+0x8>

08001390 <runMoveDistTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f005 f8a9 	bl	80064f0 <osDelay>
 800139e:	e7fb      	b.n	8001398 <runMoveDistTask+0x8>

080013a0 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 80013a8:	4bc6      	ldr	r3, [pc, #792]	; (80016c4 <runCmdTask+0x324>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	2b63      	cmp	r3, #99	; 0x63
 80013b0:	f200 8257 	bhi.w	8001862 <runCmdTask+0x4c2>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <runCmdTask+0x1c>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	0800154d 	.word	0x0800154d
 80013c0:	0800154d 	.word	0x0800154d
 80013c4:	08001569 	.word	0x08001569
 80013c8:	08001569 	.word	0x08001569
 80013cc:	08001569 	.word	0x08001569
 80013d0:	08001569 	.word	0x08001569
 80013d4:	08001739 	.word	0x08001739
 80013d8:	08001747 	.word	0x08001747
 80013dc:	08001755 	.word	0x08001755
 80013e0:	08001763 	.word	0x08001763
 80013e4:	08001771 	.word	0x08001771
 80013e8:	08001771 	.word	0x08001771
 80013ec:	08001863 	.word	0x08001863
 80013f0:	08001863 	.word	0x08001863
 80013f4:	08001863 	.word	0x08001863
 80013f8:	08001863 	.word	0x08001863
 80013fc:	08001863 	.word	0x08001863
 8001400:	08001863 	.word	0x08001863
 8001404:	08001863 	.word	0x08001863
 8001408:	08001863 	.word	0x08001863
 800140c:	08001863 	.word	0x08001863
 8001410:	08001863 	.word	0x08001863
 8001414:	08001863 	.word	0x08001863
 8001418:	08001863 	.word	0x08001863
 800141c:	08001863 	.word	0x08001863
 8001420:	08001863 	.word	0x08001863
 8001424:	08001863 	.word	0x08001863
 8001428:	08001863 	.word	0x08001863
 800142c:	08001863 	.word	0x08001863
 8001430:	08001863 	.word	0x08001863
 8001434:	08001863 	.word	0x08001863
 8001438:	08001863 	.word	0x08001863
 800143c:	08001863 	.word	0x08001863
 8001440:	08001863 	.word	0x08001863
 8001444:	08001863 	.word	0x08001863
 8001448:	08001863 	.word	0x08001863
 800144c:	08001863 	.word	0x08001863
 8001450:	08001863 	.word	0x08001863
 8001454:	08001863 	.word	0x08001863
 8001458:	08001863 	.word	0x08001863
 800145c:	08001863 	.word	0x08001863
 8001460:	08001863 	.word	0x08001863
 8001464:	08001863 	.word	0x08001863
 8001468:	08001863 	.word	0x08001863
 800146c:	08001863 	.word	0x08001863
 8001470:	08001863 	.word	0x08001863
 8001474:	08001863 	.word	0x08001863
 8001478:	08001863 	.word	0x08001863
 800147c:	08001863 	.word	0x08001863
 8001480:	08001863 	.word	0x08001863
 8001484:	08001863 	.word	0x08001863
 8001488:	08001863 	.word	0x08001863
 800148c:	08001863 	.word	0x08001863
 8001490:	08001863 	.word	0x08001863
 8001494:	08001863 	.word	0x08001863
 8001498:	08001863 	.word	0x08001863
 800149c:	08001863 	.word	0x08001863
 80014a0:	08001863 	.word	0x08001863
 80014a4:	08001863 	.word	0x08001863
 80014a8:	08001863 	.word	0x08001863
 80014ac:	08001863 	.word	0x08001863
 80014b0:	08001863 	.word	0x08001863
 80014b4:	08001863 	.word	0x08001863
 80014b8:	08001863 	.word	0x08001863
 80014bc:	08001863 	.word	0x08001863
 80014c0:	08001863 	.word	0x08001863
 80014c4:	08001863 	.word	0x08001863
 80014c8:	08001863 	.word	0x08001863
 80014cc:	08001863 	.word	0x08001863
 80014d0:	08001863 	.word	0x08001863
 80014d4:	08001863 	.word	0x08001863
 80014d8:	08001863 	.word	0x08001863
 80014dc:	08001863 	.word	0x08001863
 80014e0:	08001863 	.word	0x08001863
 80014e4:	08001863 	.word	0x08001863
 80014e8:	08001863 	.word	0x08001863
 80014ec:	08001863 	.word	0x08001863
 80014f0:	08001863 	.word	0x08001863
 80014f4:	08001863 	.word	0x08001863
 80014f8:	08001863 	.word	0x08001863
 80014fc:	08001863 	.word	0x08001863
 8001500:	08001863 	.word	0x08001863
 8001504:	08001863 	.word	0x08001863
 8001508:	08001863 	.word	0x08001863
 800150c:	08001863 	.word	0x08001863
 8001510:	08001863 	.word	0x08001863
 8001514:	08001863 	.word	0x08001863
 8001518:	080017b9 	.word	0x080017b9
 800151c:	080017b9 	.word	0x080017b9
 8001520:	08001863 	.word	0x08001863
 8001524:	08001863 	.word	0x08001863
 8001528:	08001863 	.word	0x08001863
 800152c:	08001863 	.word	0x08001863
 8001530:	08001863 	.word	0x08001863
 8001534:	08001863 	.word	0x08001863
 8001538:	08001863 	.word	0x08001863
 800153c:	08001863 	.word	0x08001863
 8001540:	08001863 	.word	0x08001863
 8001544:	08001863 	.word	0x08001863
 8001548:	08001863 	.word	0x08001863
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
    case 2: // BW
      curTask = curCmd.index == 1 ? TASK_MOVE_FOREWARD : TASK_MOVE_BACKWARD;
 800154c:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <runCmdTask+0x324>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <runCmdTask+0x328>)
 800155e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <runCmdTask+0x324>)
 8001562:	2263      	movs	r2, #99	; 0x63
 8001564:	701a      	strb	r2, [r3, #0]
      break;
 8001566:	e17d      	b.n	8001864 <runCmdTask+0x4c4>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8001568:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <runCmdTask+0x324>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4a57      	ldr	r2, [pc, #348]	; (80016cc <runCmdTask+0x32c>)
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	3304      	adds	r3, #4
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80016d0 <runCmdTask+0x330>
 800157c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dd01      	ble.n	800158a <runCmdTask+0x1ea>
 8001586:	23d2      	movs	r3, #210	; 0xd2
 8001588:	e01c      	b.n	80015c4 <runCmdTask+0x224>
 800158a:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <runCmdTask+0x324>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4a4f      	ldr	r2, [pc, #316]	; (80016cc <runCmdTask+0x32c>)
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	3304      	adds	r3, #4
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80016d4 <runCmdTask+0x334>
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d501      	bpl.n	80015ac <runCmdTask+0x20c>
 80015a8:	2369      	movs	r3, #105	; 0x69
 80015aa:	e00b      	b.n	80015c4 <runCmdTask+0x224>
 80015ac:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <runCmdTask+0x324>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <runCmdTask+0x32c>)
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	3304      	adds	r3, #4
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c0:	ee17 3a90 	vmov	r3, s15
 80015c4:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <runCmdTask+0x338>)
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ce:	f004 ff8f 	bl	80064f0 <osDelay>
 80015d2:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <runCmdTask+0x324>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <runCmdTask+0x32c>)
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	3308      	adds	r3, #8
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3e      	ldr	r2, [pc, #248]	; (80016dc <runCmdTask+0x33c>)
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <runCmdTask+0x324>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4a38      	ldr	r2, [pc, #224]	; (80016cc <runCmdTask+0x32c>)
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	330c      	adds	r3, #12
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	2104      	movs	r1, #4
 8001600:	4837      	ldr	r0, [pc, #220]	; (80016e0 <runCmdTask+0x340>)
 8001602:	f000 ff8f 	bl	8002524 <HAL_GPIO_WritePin>
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <runCmdTask+0x324>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4a30      	ldr	r2, [pc, #192]	; (80016cc <runCmdTask+0x32c>)
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	330c      	adds	r3, #12
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	2108      	movs	r1, #8
 8001622:	482f      	ldr	r0, [pc, #188]	; (80016e0 <runCmdTask+0x340>)
 8001624:	f000 ff7e 	bl	8002524 <HAL_GPIO_WritePin>
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <runCmdTask+0x324>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <runCmdTask+0x32c>)
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	330c      	adds	r3, #12
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	2120      	movs	r1, #32
 8001644:	4826      	ldr	r0, [pc, #152]	; (80016e0 <runCmdTask+0x340>)
 8001646:	f000 ff6d 	bl	8002524 <HAL_GPIO_WritePin>
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <runCmdTask+0x324>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <runCmdTask+0x32c>)
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	330c      	adds	r3, #12
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf14      	ite	ne
 800165c:	2301      	movne	r3, #1
 800165e:	2300      	moveq	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	2110      	movs	r1, #16
 8001666:	481e      	ldr	r0, [pc, #120]	; (80016e0 <runCmdTask+0x340>)
 8001668:	f000 ff5c 	bl	8002524 <HAL_GPIO_WritePin>
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <runCmdTask+0x324>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4a16      	ldr	r2, [pc, #88]	; (80016cc <runCmdTask+0x32c>)
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <runCmdTask+0x344>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <runCmdTask+0x324>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <runCmdTask+0x32c>)
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	3302      	adds	r3, #2
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <runCmdTask+0x344>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <runCmdTask+0x348>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <runCmdTask+0x348>)
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	429a      	cmp	r2, r3
 800169c:	d12e      	bne.n	80016fc <runCmdTask+0x35c>
      {
        __CLEAR_CURCMD(curCmd);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <runCmdTask+0x324>)
 80016a0:	2264      	movs	r2, #100	; 0x64
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <runCmdTask+0x324>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <runCmdTask+0x34c>)
 80016ac:	210f      	movs	r1, #15
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <runCmdTask+0x350>)
 80016b0:	f007 ffb0 	bl	8009614 <sniprintf>
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	2206      	movs	r2, #6
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <runCmdTask+0x354>)
 80016bc:	480e      	ldr	r0, [pc, #56]	; (80016f8 <runCmdTask+0x358>)
 80016be:	f003 fdcc 	bl	800525a <HAL_UART_Transmit>
 80016c2:	e035      	b.n	8001730 <runCmdTask+0x390>
 80016c4:	20000394 	.word	0x20000394
 80016c8:	20000138 	.word	0x20000138
 80016cc:	20000008 	.word	0x20000008
 80016d0:	43520000 	.word	0x43520000
 80016d4:	42d20000 	.word	0x42d20000
 80016d8:	2000020c 	.word	0x2000020c
 80016dc:	200003a8 	.word	0x200003a8
 80016e0:	40020000 	.word	0x40020000
 80016e4:	2000029c 	.word	0x2000029c
 80016e8:	20000360 	.word	0x20000360
 80016ec:	0800a060 	.word	0x0800a060
 80016f0:	20000398 	.word	0x20000398
 80016f4:	0800a068 	.word	0x0800a068
 80016f8:	200002e4 	.word	0x200002e4
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <runCmdTask+0x4cc>)
 80016fe:	785b      	ldrb	r3, [r3, #1]
 8001700:	4a5b      	ldr	r2, [pc, #364]	; (8001870 <runCmdTask+0x4d0>)
 8001702:	495a      	ldr	r1, [pc, #360]	; (800186c <runCmdTask+0x4cc>)
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b57      	ldr	r3, [pc, #348]	; (800186c <runCmdTask+0x4cc>)
 800170e:	785b      	ldrb	r3, [r3, #1]
 8001710:	3301      	adds	r3, #1
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <runCmdTask+0x4cc>)
 8001714:	7892      	ldrb	r2, [r2, #2]
 8001716:	fb93 f1f2 	sdiv	r1, r3, r2
 800171a:	fb01 f202 	mul.w	r2, r1, r2
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b52      	ldr	r3, [pc, #328]	; (800186c <runCmdTask+0x4cc>)
 8001724:	705a      	strb	r2, [r3, #1]
 8001726:	4a53      	ldr	r2, [pc, #332]	; (8001874 <runCmdTask+0x4d4>)
 8001728:	210f      	movs	r1, #15
 800172a:	4853      	ldr	r0, [pc, #332]	; (8001878 <runCmdTask+0x4d8>)
 800172c:	f007 ff72 	bl	8009614 <sniprintf>
      __PEND_CURCMD(curCmd);
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <runCmdTask+0x4d0>)
 8001732:	2263      	movs	r2, #99	; 0x63
 8001734:	701a      	strb	r2, [r3, #0]
      break;
 8001736:	e095      	b.n	8001864 <runCmdTask+0x4c4>
    case 7: // FL
      curTask = TASK_FL;
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <runCmdTask+0x4dc>)
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800173e:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <runCmdTask+0x4d0>)
 8001740:	2263      	movs	r2, #99	; 0x63
 8001742:	701a      	strb	r2, [r3, #0]
      break;
 8001744:	e08e      	b.n	8001864 <runCmdTask+0x4c4>
    case 8: // FR
      curTask = TASK_FR;
 8001746:	4b4d      	ldr	r3, [pc, #308]	; (800187c <runCmdTask+0x4dc>)
 8001748:	2203      	movs	r2, #3
 800174a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800174c:	4b48      	ldr	r3, [pc, #288]	; (8001870 <runCmdTask+0x4d0>)
 800174e:	2263      	movs	r2, #99	; 0x63
 8001750:	701a      	strb	r2, [r3, #0]
      break;
 8001752:	e087      	b.n	8001864 <runCmdTask+0x4c4>
    case 9: // BL
      curTask = TASK_BL;
 8001754:	4b49      	ldr	r3, [pc, #292]	; (800187c <runCmdTask+0x4dc>)
 8001756:	2204      	movs	r2, #4
 8001758:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <runCmdTask+0x4d0>)
 800175c:	2263      	movs	r2, #99	; 0x63
 800175e:	701a      	strb	r2, [r3, #0]
      break;
 8001760:	e080      	b.n	8001864 <runCmdTask+0x4c4>
    case 10: // BR
      curTask = TASK_BR;
 8001762:	4b46      	ldr	r3, [pc, #280]	; (800187c <runCmdTask+0x4dc>)
 8001764:	2205      	movs	r2, #5
 8001766:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <runCmdTask+0x4d0>)
 800176a:	2263      	movs	r2, #99	; 0x63
 800176c:	701a      	strb	r2, [r3, #0]
      break;
 800176e:	e079      	b.n	8001864 <runCmdTask+0x4c4>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <runCmdTask+0x4d0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0b      	cmp	r3, #11
 8001776:	d004      	beq.n	8001782 <runCmdTask+0x3e2>
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <runCmdTask+0x4e0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	22d2      	movs	r2, #210	; 0xd2
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
 8001780:	e003      	b.n	800178a <runCmdTask+0x3ea>
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <runCmdTask+0x4e0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2269      	movs	r2, #105	; 0x69
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
 800178a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800178e:	f000 fb95 	bl	8001ebc <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8001792:	4b37      	ldr	r3, [pc, #220]	; (8001870 <runCmdTask+0x4d0>)
 8001794:	2264      	movs	r2, #100	; 0x64
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <runCmdTask+0x4d0>)
 800179a:	2200      	movs	r2, #0
 800179c:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 800179e:	4a39      	ldr	r2, [pc, #228]	; (8001884 <runCmdTask+0x4e4>)
 80017a0:	210f      	movs	r1, #15
 80017a2:	4835      	ldr	r0, [pc, #212]	; (8001878 <runCmdTask+0x4d8>)
 80017a4:	f007 ff36 	bl	8009614 <sniprintf>
 80017a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ac:	2206      	movs	r2, #6
 80017ae:	4936      	ldr	r1, [pc, #216]	; (8001888 <runCmdTask+0x4e8>)
 80017b0:	4836      	ldr	r0, [pc, #216]	; (800188c <runCmdTask+0x4ec>)
 80017b2:	f003 fd52 	bl	800525a <HAL_UART_Transmit>
      break;
 80017b6:	e055      	b.n	8001864 <runCmdTask+0x4c4>
    //   curTask = TASK_FASTESTPATH_V2;
    //   __PEND_CURCMD(curCmd);
    //   break;
    case 88: // Axxx, rotate left by xxx degree
    case 89: // Cxxx, rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <runCmdTask+0x4d0>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b58      	cmp	r3, #88	; 0x58
 80017be:	d004      	beq.n	80017ca <runCmdTask+0x42a>
 80017c0:	4b2f      	ldr	r3, [pc, #188]	; (8001880 <runCmdTask+0x4e0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	22d2      	movs	r2, #210	; 0xd2
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
 80017c8:	e003      	b.n	80017d2 <runCmdTask+0x432>
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <runCmdTask+0x4e0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2269      	movs	r2, #105	; 0x69
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
 80017d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017d6:	f000 fb71 	bl	8001ebc <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80017da:	2200      	movs	r2, #0
 80017dc:	2104      	movs	r1, #4
 80017de:	482c      	ldr	r0, [pc, #176]	; (8001890 <runCmdTask+0x4f0>)
 80017e0:	f000 fea0 	bl	8002524 <HAL_GPIO_WritePin>
 80017e4:	2201      	movs	r2, #1
 80017e6:	2108      	movs	r1, #8
 80017e8:	4829      	ldr	r0, [pc, #164]	; (8001890 <runCmdTask+0x4f0>)
 80017ea:	f000 fe9b 	bl	8002524 <HAL_GPIO_WritePin>
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	4827      	ldr	r0, [pc, #156]	; (8001890 <runCmdTask+0x4f0>)
 80017f4:	f000 fe96 	bl	8002524 <HAL_GPIO_WritePin>
 80017f8:	2201      	movs	r2, #1
 80017fa:	2110      	movs	r1, #16
 80017fc:	4824      	ldr	r0, [pc, #144]	; (8001890 <runCmdTask+0x4f0>)
 80017fe:	f000 fe91 	bl	8002524 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <runCmdTask+0x4d0>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b58      	cmp	r3, #88	; 0x58
 8001808:	d113      	bne.n	8001832 <runCmdTask+0x492>
      {
        targetAngle = curCmd.val;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <runCmdTask+0x4d0>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <runCmdTask+0x4f4>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 800, 1200);
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <runCmdTask+0x4f8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <runCmdTask+0x4f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
 8001830:	e013      	b.n	800185a <runCmdTask+0x4ba>
      }
      else
      {
        targetAngle = -curCmd.val;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <runCmdTask+0x4d0>)
 8001834:	885b      	ldrh	r3, [r3, #2]
 8001836:	425b      	negs	r3, r3
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <runCmdTask+0x4f4>)
 8001842:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <runCmdTask+0x4f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800184e:	635a      	str	r2, [r3, #52]	; 0x34
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <runCmdTask+0x4f8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <runCmdTask+0x4d0>)
 800185c:	2263      	movs	r2, #99	; 0x63
 800185e:	701a      	strb	r2, [r3, #0]
      // RobotTurn(&targetAngle);
      break;
 8001860:	e000      	b.n	8001864 <runCmdTask+0x4c4>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8001862:	bf00      	nop
    }
    osDelay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f004 fe43 	bl	80064f0 <osDelay>
    switch (curCmd.index)
 800186a:	e59d      	b.n	80013a8 <runCmdTask+0x8>
 800186c:	20000360 	.word	0x20000360
 8001870:	20000394 	.word	0x20000394
 8001874:	0800a070 	.word	0x0800a070
 8001878:	20000398 	.word	0x20000398
 800187c:	20000138 	.word	0x20000138
 8001880:	2000020c 	.word	0x2000020c
 8001884:	0800a060 	.word	0x0800a060
 8001888:	0800a068 	.word	0x0800a068
 800188c:	200002e4 	.word	0x200002e4
 8001890:	40020000 	.word	0x40020000
 8001894:	200003a8 	.word	0x200003a8
 8001898:	2000029c 	.word	0x2000029c

0800189c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018ae:	f000 fae5 	bl	8001e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40000800 	.word	0x40000800

080018c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <Error_Handler+0x8>
	...

080018cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_MspInit+0x54>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_MspInit+0x54>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_MspInit+0x54>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_MspInit+0x54>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_MspInit+0x54>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_MspInit+0x54>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	210f      	movs	r1, #15
 800190e:	f06f 0001 	mvn.w	r0, #1
 8001912:	f000 fbaf 	bl	8002074 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_I2C_MspInit+0x84>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12c      	bne.n	80019a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_I2C_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001974:	2304      	movs	r3, #4
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	480c      	ldr	r0, [pc, #48]	; (80019b0 <HAL_I2C_MspInit+0x8c>)
 8001980:	f000 fc34 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_I2C_MspInit+0x88>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_I2C_MspInit+0x88>)
 800198e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400

080019b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_TIM_Base_MspInit+0xac>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80019f2:	e030      	b.n	8001a56 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_TIM_Base_MspInit+0xb4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12b      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_TIM_Base_MspInit+0xb0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001a36:	23c0      	movs	r3, #192	; 0xc0
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a46:	2303      	movs	r3, #3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <HAL_TIM_Base_MspInit+0xb8>)
 8001a52:	f000 fbcb 	bl	80021ec <HAL_GPIO_Init>
}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40010400 	.word	0x40010400
 8001a6c:	40020800 	.word	0x40020800

08001a70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d14a      	bne.n	8001b28 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001b04:	f000 fb72 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001b24:	f000 fb62 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400

08001b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_TIM_MspPostInit+0x68>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11e      	bne.n	8001b9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_TIM_MspPostInit+0x70>)
 8001b98:	f000 fb28 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_UART_MspInit+0x94>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d134      	bne.n	8001c3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_UART_MspInit+0x98>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_UART_MspInit+0x9c>)
 8001c28:	f000 fae0 	bl	80021ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2105      	movs	r1, #5
 8001c30:	2027      	movs	r0, #39	; 0x27
 8001c32:	f000 fa1f 	bl	8002074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c36:	2027      	movs	r0, #39	; 0x27
 8001c38:	f000 fa38 	bl	80020ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004800 	.word	0x40004800
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020800 	.word	0x40020800

08001c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	; 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	201e      	movs	r0, #30
 8001c66:	f000 fa05 	bl	8002074 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c6a:	201e      	movs	r0, #30
 8001c6c:	f000 fa1e 	bl	80020ac <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_InitTick+0xa0>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_InitTick+0xa0>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_InitTick+0xa0>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c8c:	f107 0210 	add.w	r2, r7, #16
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 f89e 	bl	8003dd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c9c:	f002 f874 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8001ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <HAL_InitTick+0xa4>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	3b01      	subs	r3, #1
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <HAL_InitTick+0xac>)
 8001cb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001cb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cbc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001cd2:	f002 f8b3 	bl	8003e3c <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <HAL_InitTick+0xa8>)
 8001cde:	f002 f8fd 	bl	8003edc <HAL_TIM_Base_Start_IT>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	200003b8 	.word	0x200003b8
 8001cfc:	40000800 	.word	0x40000800

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM4_IRQHandler+0x10>)
 8001d32:	f002 fb99 	bl	8004468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200003b8 	.word	0x200003b8

08001d40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART3_IRQHandler+0x10>)
 8001d46:	f003 fb4b 	bl	80053e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200002e4 	.word	0x200002e4

08001d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <_sbrk+0x5c>)
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <_sbrk+0x60>)
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d68:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_sbrk+0x64>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <_sbrk+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d207      	bcs.n	8001d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d84:	f007 fca2 	bl	80096cc <__errno>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d92:	e009      	b.n	8001da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <_sbrk+0x64>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <_sbrk+0x64>)
 8001da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20020000 	.word	0x20020000
 8001db4:	00000400 	.word	0x00000400
 8001db8:	20000400 	.word	0x20000400
 8001dbc:	200052a0 	.word	0x200052a0

08001dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <SystemInit+0x20>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <SystemInit+0x20>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dea:	490e      	ldr	r1, [pc, #56]	; (8001e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e00:	4c0b      	ldr	r4, [pc, #44]	; (8001e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e0e:	f7ff ffd7 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e12:	f007 fc61 	bl	80096d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e16:	f7fe fba9 	bl	800056c <main>
  bx  lr    
 8001e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e24:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8001e28:	0800acdc 	.word	0x0800acdc
  ldr r2, =_sbss
 8001e2c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001e30:	200052a0 	.word	0x200052a0

08001e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e34:	e7fe      	b.n	8001e34 <ADC_IRQHandler>
	...

08001e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <HAL_Init+0x40>)
 8001e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_Init+0x40>)
 8001e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_Init+0x40>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e60:	2003      	movs	r0, #3
 8001e62:	f000 f8fc 	bl	800205e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e66:	200f      	movs	r0, #15
 8001e68:	f7ff fef2 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6c:	f7ff fd2e 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000144 	.word	0x20000144
 8001ea0:	20000404 	.word	0x20000404

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000404 	.word	0x20000404

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffee 	bl	8001ea4 <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000144 	.word	0x20000144

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ff4c 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002086:	f7ff ff61 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 800208a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	6978      	ldr	r0, [r7, #20]
 8002092:	f7ff ffb1 	bl	8001ff8 <NVIC_EncodePriority>
 8002096:	4602      	mov	r2, r0
 8002098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff80 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020a4:	bf00      	nop
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff54 	bl	8001f68 <__NVIC_EnableIRQ>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020d6:	f7ff fee5 	bl	8001ea4 <HAL_GetTick>
 80020da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d008      	beq.n	80020fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e052      	b.n	80021a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0216 	bic.w	r2, r2, #22
 8002108:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002118:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_DMA_Abort+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0208 	bic.w	r2, r2, #8
 8002138:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214a:	e013      	b.n	8002174 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800214c:	f7ff feaa 	bl	8001ea4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b05      	cmp	r3, #5
 8002158:	d90c      	bls.n	8002174 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2220      	movs	r2, #32
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2203      	movs	r2, #3
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e015      	b.n	80021a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1e4      	bne.n	800214c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	223f      	movs	r2, #63	; 0x3f
 8002188:	409a      	lsls	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d004      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00c      	b.n	80021e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2205      	movs	r2, #5
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e16b      	b.n	80024e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 815a 	bne.w	80024da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80b4 	beq.w	80024da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a5f      	ldr	r2, [pc, #380]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x314>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_GPIO_Init+0x318>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	; (8002508 <HAL_GPIO_Init+0x31c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_GPIO_Init+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_GPIO_Init+0x324>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x328>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_GPIO_Init+0x334>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae90 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e12b      	b.n	80027c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff f9d0 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2224      	movs	r2, #36	; 0x24
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025bc:	f001 fbe4 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 80025c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a81      	ldr	r2, [pc, #516]	; (80027cc <HAL_I2C_Init+0x274>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d807      	bhi.n	80025dc <HAL_I2C_Init+0x84>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a80      	ldr	r2, [pc, #512]	; (80027d0 <HAL_I2C_Init+0x278>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e006      	b.n	80025ea <HAL_I2C_Init+0x92>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a7d      	ldr	r2, [pc, #500]	; (80027d4 <HAL_I2C_Init+0x27c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	bf94      	ite	ls
 80025e4:	2301      	movls	r3, #1
 80025e6:	2300      	movhi	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0e7      	b.n	80027c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a78      	ldr	r2, [pc, #480]	; (80027d8 <HAL_I2C_Init+0x280>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_I2C_Init+0x274>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d802      	bhi.n	800262c <HAL_I2C_Init+0xd4>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	e009      	b.n	8002640 <HAL_I2C_Init+0xe8>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_I2C_Init+0x284>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	3301      	adds	r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	430b      	orrs	r3, r1
 8002646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	495c      	ldr	r1, [pc, #368]	; (80027cc <HAL_I2C_Init+0x274>)
 800265c:	428b      	cmp	r3, r1
 800265e:	d819      	bhi.n	8002694 <HAL_I2C_Init+0x13c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e59      	subs	r1, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fbb1 f3f3 	udiv	r3, r1, r3
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002674:	400b      	ands	r3, r1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_I2C_Init+0x138>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e59      	subs	r1, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fbb1 f3f3 	udiv	r3, r1, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	e051      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002690:	2304      	movs	r3, #4
 8002692:	e04f      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <HAL_I2C_Init+0x168>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1e58      	subs	r0, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	440b      	add	r3, r1
 80026aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e012      	b.n	80026e6 <HAL_I2C_Init+0x18e>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1e58      	subs	r0, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	0099      	lsls	r1, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x196>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e022      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <HAL_I2C_Init+0x1bc>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1e58      	subs	r0, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6859      	ldr	r1, [r3, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	440b      	add	r3, r1
 8002704:	fbb0 f3f3 	udiv	r3, r0, r3
 8002708:	3301      	adds	r3, #1
 800270a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002712:	e00f      	b.n	8002734 <HAL_I2C_Init+0x1dc>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	6809      	ldr	r1, [r1, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6911      	ldr	r1, [r2, #16]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68d2      	ldr	r2, [r2, #12]
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	000186a0 	.word	0x000186a0
 80027d0:	001e847f 	.word	0x001e847f
 80027d4:	003d08ff 	.word	0x003d08ff
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	10624dd3 	.word	0x10624dd3

080027e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027fa:	f7ff fb53 	bl	8001ea4 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 80d9 	bne.w	80029c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	2319      	movs	r3, #25
 8002814:	2201      	movs	r2, #1
 8002816:	496d      	ldr	r1, [pc, #436]	; (80029cc <HAL_I2C_Mem_Write+0x1ec>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fc7f 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
 8002826:	e0cc      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Write+0x56>
 8002832:	2302      	movs	r3, #2
 8002834:	e0c5      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d007      	beq.n	800285c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2221      	movs	r2, #33	; 0x21
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a4d      	ldr	r2, [pc, #308]	; (80029d0 <HAL_I2C_Mem_Write+0x1f0>)
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289e:	88f8      	ldrh	r0, [r7, #6]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fab6 	bl	8002e20 <I2C_RequestMemoryWrite>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d052      	beq.n	8002960 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e081      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fd00 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06b      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d11b      	bne.n	8002960 <HAL_I2C_Mem_Write+0x180>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d017      	beq.n	8002960 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1aa      	bne.n	80028be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fcec 	bl	800334a <I2C_WaitOnBTFFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2b04      	cmp	r3, #4
 800297e:	d107      	bne.n	8002990 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e016      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	e000      	b.n	80029c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
  }
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	00100002 	.word	0x00100002
 80029d0:	ffff0000 	.word	0xffff0000

080029d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	; 0x30
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	4608      	mov	r0, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	817b      	strh	r3, [r7, #10]
 80029e6:	460b      	mov	r3, r1
 80029e8:	813b      	strh	r3, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ee:	f7ff fa59 	bl	8001ea4 <HAL_GetTick>
 80029f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 8208 	bne.w	8002e12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2319      	movs	r3, #25
 8002a08:	2201      	movs	r2, #1
 8002a0a:	497b      	ldr	r1, [pc, #492]	; (8002bf8 <HAL_I2C_Mem_Read+0x224>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fb85 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e1fb      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Mem_Read+0x56>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e1f4      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d007      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2222      	movs	r2, #34	; 0x22
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	; (8002bfc <HAL_I2C_Mem_Read+0x228>)
 8002a90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a92:	88f8      	ldrh	r0, [r7, #6]
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fa52 	bl	8002f4c <I2C_RequestMemoryRead>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1b0      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d113      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e184      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d11b      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e164      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d11b      	bne.n	8002b62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	e144      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b78:	e138      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	f200 80f1 	bhi.w	8002d66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d123      	bne.n	8002bd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fc1b 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e139      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd2:	e10b      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d14e      	bne.n	8002c7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	2200      	movs	r2, #0
 8002be4:	4906      	ldr	r1, [pc, #24]	; (8002c00 <HAL_I2C_Mem_Read+0x22c>)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fa98 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e10e      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
 8002bf6:	bf00      	nop
 8002bf8:	00100002 	.word	0x00100002
 8002bfc:	ffff0000 	.word	0xffff0000
 8002c00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c78:	e0b8      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2200      	movs	r2, #0
 8002c82:	4966      	ldr	r1, [pc, #408]	; (8002e1c <HAL_I2C_Mem_Read+0x448>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fa49 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0bf      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cdc:	2200      	movs	r2, #0
 8002cde:	494f      	ldr	r1, [pc, #316]	; (8002e1c <HAL_I2C_Mem_Read+0x448>)
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa1b 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e091      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d64:	e042      	b.n	8002dec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb2e 	bl	80033cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e04c      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d118      	bne.n	8002dec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f aec2 	bne.w	8002b7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	00010004 	.word	0x00010004

08002e20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f960 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00d      	beq.n	8002e7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e70:	d103      	bne.n	8002e7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e05f      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	6a3a      	ldr	r2, [r7, #32]
 8002e92:	492d      	ldr	r1, [pc, #180]	; (8002f48 <I2C_RequestMemoryWrite+0x128>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f998 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04c      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebc:	6a39      	ldr	r1, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa02 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d107      	bne.n	8002ee2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e02b      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eec:	893b      	ldrh	r3, [r7, #8]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]
 8002ef6:	e021      	b.n	8002f3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f9dc 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e005      	b.n	8002f3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f32:	893b      	ldrh	r3, [r7, #8]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f8c2 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fac:	d103      	bne.n	8002fb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0aa      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	4952      	ldr	r1, [pc, #328]	; (8003118 <I2C_RequestMemoryRead+0x1cc>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f8fa 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e097      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f964 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	2b04      	cmp	r3, #4
 800300c:	d107      	bne.n	800301e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e076      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003028:	893b      	ldrh	r3, [r7, #8]
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]
 8003032:	e021      	b.n	8003078 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	b29b      	uxth	r3, r3
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	6a39      	ldr	r1, [r7, #32]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f93e 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b04      	cmp	r3, #4
 8003058:	d107      	bne.n	800306a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003068:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e050      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800306e:	893b      	ldrh	r3, [r7, #8]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	6a39      	ldr	r1, [r7, #32]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f923 	bl	80032c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	2b04      	cmp	r3, #4
 800308e:	d107      	bne.n	80030a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e035      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f82b 	bl	800311c <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030da:	d103      	bne.n	80030e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e013      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030e8:	897b      	ldrh	r3, [r7, #10]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	6a3a      	ldr	r2, [r7, #32]
 80030fc:	4906      	ldr	r1, [pc, #24]	; (8003118 <I2C_RequestMemoryRead+0x1cc>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f863 	bl	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010002 	.word	0x00010002

0800311c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312c:	e025      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003134:	d021      	beq.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7fe feb5 	bl	8001ea4 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d116      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0220 	orr.w	r2, r3, #32
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e023      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	e00c      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d0b6      	beq.n	800312e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d8:	e051      	b.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d123      	bne.n	8003232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e046      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003238:	d021      	beq.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fe33 	bl	8001ea4 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d116      	bne.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e020      	b.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10c      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e00b      	b.n	80032ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d18d      	bne.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	e02d      	b.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f8ce 	bl	8003478 <I2C_IsAcknowledgeFailed>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e02d      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fdd9 	bl	8001ea4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d1ca      	bne.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003356:	e02d      	b.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f88d 	bl	8003478 <I2C_IsAcknowledgeFailed>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e02d      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800336e:	d021      	beq.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003370:	f7fe fd98 	bl	8001ea4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d302      	bcc.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d1ca      	bne.n	8003358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033d8:	e042      	b.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d119      	bne.n	800341c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e029      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341c:	f7fe fd42 	bl	8001ea4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	429a      	cmp	r2, r3
 800342a:	d302      	bcc.n	8003432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d1b5      	bne.n	80033da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d11b      	bne.n	80034c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_PWR_EnableBkUpAccess+0x24>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80034ea:	687b      	ldr	r3, [r7, #4]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	420e0020 	.word	0x420e0020
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_PWR_DisableBkUpAccess+0x24>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003512:	687b      	ldr	r3, [r7, #4]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	420e0020 	.word	0x420e0020
 8003524:	40007000 	.word	0x40007000

08003528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e267      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d075      	beq.n	8003632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003546:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00c      	beq.n	800356c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4b85      	ldr	r3, [pc, #532]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b82      	ldr	r3, [pc, #520]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b7e      	ldr	r3, [pc, #504]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05b      	beq.n	8003630 <HAL_RCC_OscConfig+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d157      	bne.n	8003630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e242      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x74>
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a75      	ldr	r2, [pc, #468]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b70      	ldr	r3, [pc, #448]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6f      	ldr	r2, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6c      	ldr	r2, [pc, #432]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 80035c0:	4b69      	ldr	r3, [pc, #420]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a68      	ldr	r2, [pc, #416]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a65      	ldr	r2, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe fc60 	bl	8001ea4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7fe fc5c 	bl	8001ea4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e207      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b5b      	ldr	r3, [pc, #364]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xc0>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fc4c 	bl	8001ea4 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe fc48 	bl	8001ea4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1f3      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b51      	ldr	r3, [pc, #324]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0xe8>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1c7      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4937      	ldr	r1, [pc, #220]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e03a      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_RCC_OscConfig+0x244>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe fc01 	bl	8001ea4 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7fe fbfd 	bl	8001ea4 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e1a8      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4925      	ldr	r1, [pc, #148]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_OscConfig+0x244>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe fbe0 	bl	8001ea4 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fe fbdc 	bl	8001ea4 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e187      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d036      	beq.n	8003780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_RCC_OscConfig+0x248>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fbc0 	bl	8001ea4 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7fe fbbc 	bl	8001ea4 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e167      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x240>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x200>
 8003746:	e01b      	b.n	8003780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003748:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_OscConfig+0x248>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fba9 	bl	8001ea4 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e00e      	b.n	8003774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7fe fba5 	bl	8001ea4 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d907      	bls.n	8003774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e150      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
 8003768:	40023800 	.word	0x40023800
 800376c:	42470000 	.word	0x42470000
 8003770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ea      	bne.n	8003756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8097 	beq.w	80038bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003792:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b7d      	ldr	r3, [pc, #500]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a7c      	ldr	r2, [pc, #496]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
 80037ae:	4b7a      	ldr	r3, [pc, #488]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	4b77      	ldr	r3, [pc, #476]	; (800399c <HAL_RCC_OscConfig+0x474>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d118      	bne.n	80037fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ca:	4b74      	ldr	r3, [pc, #464]	; (800399c <HAL_RCC_OscConfig+0x474>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	; (800399c <HAL_RCC_OscConfig+0x474>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fe fb65 	bl	8001ea4 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fe fb61 	bl	8001ea4 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e10c      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCC_OscConfig+0x474>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x2ea>
 8003804:	4b64      	ldr	r3, [pc, #400]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a63      	ldr	r2, [pc, #396]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	e01c      	b.n	800384c <HAL_RCC_OscConfig+0x324>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b05      	cmp	r3, #5
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x30c>
 800381a:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5e      	ldr	r2, [pc, #376]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	4b5c      	ldr	r3, [pc, #368]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a5b      	ldr	r2, [pc, #364]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0x324>
 8003834:	4b58      	ldr	r3, [pc, #352]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	4b55      	ldr	r3, [pc, #340]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4a54      	ldr	r2, [pc, #336]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 0304 	bic.w	r3, r3, #4
 800384a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe fb26 	bl	8001ea4 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fe fb22 	bl	8001ea4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0cb      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	4b49      	ldr	r3, [pc, #292]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0ee      	beq.n	800385c <HAL_RCC_OscConfig+0x334>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003880:	f7fe fb10 	bl	8001ea4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fe fb0c 	bl	8001ea4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0b5      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ee      	bne.n	8003888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d105      	bne.n	80038bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b0:	4b39      	ldr	r3, [pc, #228]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a38      	ldr	r2, [pc, #224]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a1 	beq.w	8003a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c6:	4b34      	ldr	r3, [pc, #208]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d05c      	beq.n	800398c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d141      	bne.n	800395e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <HAL_RCC_OscConfig+0x478>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fe fae0 	bl	8001ea4 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fe fadc 	bl	8001ea4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e087      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	491b      	ldr	r1, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x478>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fe fab5 	bl	8001ea4 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fab1 	bl	8001ea4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e05c      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x416>
 800395c:	e054      	b.n	8003a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_RCC_OscConfig+0x478>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe fa9e 	bl	8001ea4 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe fa9a 	bl	8001ea4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e045      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCC_OscConfig+0x470>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x444>
 800398a:	e03d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e038      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
 8003998:	40023800 	.word	0x40023800
 800399c:	40007000 	.word	0x40007000
 80039a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x4ec>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d028      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d121      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d11a      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	3b01      	subs	r3, #1
 80039ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800

08003a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0cc      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d90c      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b63      	ldr	r3, [pc, #396]	; (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0b8      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a6c:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a58      	ldr	r2, [pc, #352]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a84:	4b53      	ldr	r3, [pc, #332]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a52      	ldr	r2, [pc, #328]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	494d      	ldr	r1, [pc, #308]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d044      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d119      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e07f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b3f      	ldr	r3, [pc, #252]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e067      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b37      	ldr	r3, [pc, #220]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4934      	ldr	r1, [pc, #208]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fe f9cc 	bl	8001ea4 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fe f9c8 	bl	8001ea4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e04f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d20c      	bcs.n	8003b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e032      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4916      	ldr	r1, [pc, #88]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	490e      	ldr	r1, [pc, #56]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9e:	f000 f821 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	490a      	ldr	r1, [pc, #40]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	5ccb      	ldrb	r3, [r1, r3]
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe f846 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023c00 	.word	0x40023c00
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	0800a21c 	.word	0x0800a21c
 8003bdc:	2000013c 	.word	0x2000013c
 8003be0:	20000140 	.word	0x20000140

08003be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b090      	sub	sp, #64	; 0x40
 8003bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfc:	4b59      	ldr	r3, [pc, #356]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d00d      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x40>
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	f200 80a1 	bhi.w	8003d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x34>
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c16:	e09b      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c1c:	e09b      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c1e:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c22:	e098      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c24:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c2e:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d028      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	2200      	movs	r2, #0
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	627a      	str	r2, [r7, #36]	; 0x24
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c50:	fb03 f201 	mul.w	r2, r3, r1
 8003c54:	2300      	movs	r3, #0
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a43      	ldr	r2, [pc, #268]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c64:	460a      	mov	r2, r1
 8003c66:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6a:	4413      	add	r3, r2
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	2200      	movs	r2, #0
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	61fa      	str	r2, [r7, #28]
 8003c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c7e:	f7fc faf7 	bl	8000270 <__aeabi_uldivmod>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4613      	mov	r3, r2
 8003c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c8a:	e053      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c8c:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	2200      	movs	r2, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	617a      	str	r2, [r7, #20]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c9e:	f04f 0b00 	mov.w	fp, #0
 8003ca2:	4652      	mov	r2, sl
 8003ca4:	465b      	mov	r3, fp
 8003ca6:	f04f 0000 	mov.w	r0, #0
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	0159      	lsls	r1, r3, #5
 8003cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb4:	0150      	lsls	r0, r2, #5
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	ebb2 080a 	subs.w	r8, r2, sl
 8003cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cda:	eb63 0509 	sbc.w	r5, r3, r9
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	00eb      	lsls	r3, r5, #3
 8003ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cec:	00e2      	lsls	r2, r4, #3
 8003cee:	4614      	mov	r4, r2
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	eb14 030a 	adds.w	r3, r4, sl
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	eb45 030b 	adc.w	r3, r5, fp
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	028b      	lsls	r3, r1, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d14:	4621      	mov	r1, r4
 8003d16:	028a      	lsls	r2, r1, #10
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	60fa      	str	r2, [r7, #12]
 8003d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d28:	f7fc faa2 	bl	8000270 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3740      	adds	r7, #64	; 0x40
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	017d7840 	.word	0x017d7840

08003d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2000013c 	.word	0x2000013c

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d8c:	f7ff fff0 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0a9b      	lsrs	r3, r3, #10
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4903      	ldr	r1, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	0800a22c 	.word	0x0800a22c

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003db4:	f7ff ffdc 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0b5b      	lsrs	r3, r3, #13
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4903      	ldr	r1, [pc, #12]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	0800a22c 	.word	0x0800a22c

08003dd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	220f      	movs	r2, #15
 8003de6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003de8:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <HAL_RCC_GetClockConfig+0x5c>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_RCC_GetClockConfig+0x5c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_RCC_GetClockConfig+0x5c>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	08db      	lsrs	r3, r3, #3
 8003e12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <HAL_RCC_GetClockConfig+0x60>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0207 	and.w	r2, r3, #7
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	601a      	str	r2, [r3, #0]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40023c00 	.word	0x40023c00

08003e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e041      	b.n	8003ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd fda6 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 fdae 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d001      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e04e      	b.n	8003f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d01d      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1c      	ldr	r2, [pc, #112]	; (8003fac <HAL_TIM_Base_Start_IT+0xd0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d010      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	e007      	b.n	8003f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40010400 	.word	0x40010400
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40001800 	.word	0x40001800

08003fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e041      	b.n	8004052 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f839 	bl	800405a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	f000 fcee 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d109      	bne.n	8004094 <HAL_TIM_PWM_Start+0x24>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e022      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b04      	cmp	r3, #4
 8004098:	d109      	bne.n	80040ae <HAL_TIM_PWM_Start+0x3e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e015      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d109      	bne.n	80040c8 <HAL_TIM_PWM_Start+0x58>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b01      	cmp	r3, #1
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e008      	b.n	80040da <HAL_TIM_PWM_Start+0x6a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e07c      	b.n	80041dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0x82>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	e013      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d104      	bne.n	8004102 <HAL_TIM_PWM_Start+0x92>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004100:	e00b      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	e003      	b.n	800411a <HAL_TIM_PWM_Start+0xaa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 ff44 	bl	8004fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <HAL_TIM_PWM_Start+0x174>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIM_PWM_Start+0xcc>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2c      	ldr	r2, [pc, #176]	; (80041e8 <HAL_TIM_PWM_Start+0x178>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d101      	bne.n	8004140 <HAL_TIM_PWM_Start+0xd0>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <HAL_TIM_PWM_Start+0xd2>
 8004140:	2300      	movs	r3, #0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a22      	ldr	r2, [pc, #136]	; (80041e4 <HAL_TIM_PWM_Start+0x174>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d01d      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_TIM_PWM_Start+0x17c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <HAL_TIM_PWM_Start+0x180>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_TIM_PWM_Start+0x184>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <HAL_TIM_PWM_Start+0x178>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_TIM_PWM_Start+0x188>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x136>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_TIM_PWM_Start+0x18c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d111      	bne.n	80041ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d010      	beq.n	80041da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	e007      	b.n	80041da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40010000 	.word	0x40010000
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40014000 	.word	0x40014000
 80041fc:	40001800 	.word	0x40001800

08004200 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e097      	b.n	8004344 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fd fc21 	bl	8001a70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004244:	f023 0307 	bic.w	r3, r3, #7
 8004248:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f000 fbc1 	bl	80049dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4313      	orrs	r3, r2
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042a0:	f023 030c 	bic.w	r3, r3, #12
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	4313      	orrs	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	011a      	lsls	r2, r3, #4
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	031b      	lsls	r3, r3, #12
 80042d0:	4313      	orrs	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4313      	orrs	r3, r2
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004364:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800436c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004374:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d110      	bne.n	800439e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d102      	bne.n	8004388 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004382:	7b7b      	ldrb	r3, [r7, #13]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e069      	b.n	8004460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800439c:	e031      	b.n	8004402 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d110      	bne.n	80043c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043a4:	7bbb      	ldrb	r3, [r7, #14]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d102      	bne.n	80043b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043aa:	7b3b      	ldrb	r3, [r7, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d001      	beq.n	80043b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e055      	b.n	8004460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c4:	e01d      	b.n	8004402 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d108      	bne.n	80043de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043cc:	7bbb      	ldrb	r3, [r7, #14]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d105      	bne.n	80043de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d2:	7b7b      	ldrb	r3, [r7, #13]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d102      	bne.n	80043de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043d8:	7b3b      	ldrb	r3, [r7, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03e      	b.n	8004460 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_TIM_Encoder_Start+0xc4>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d008      	beq.n	8004420 <HAL_TIM_Encoder_Start+0xd4>
 800440e:	e00f      	b.n	8004430 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2201      	movs	r2, #1
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fdc9 	bl	8004fb0 <TIM_CCxChannelCmd>
      break;
 800441e:	e016      	b.n	800444e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2201      	movs	r2, #1
 8004426:	2104      	movs	r1, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fdc1 	bl	8004fb0 <TIM_CCxChannelCmd>
      break;
 800442e:	e00e      	b.n	800444e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2201      	movs	r2, #1
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fdb9 	bl	8004fb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2201      	movs	r2, #1
 8004444:	2104      	movs	r1, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fdb2 	bl	8004fb0 <TIM_CCxChannelCmd>
      break;
 800444c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0202 	mvn.w	r2, #2
 8004494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa77 	bl	800499e <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa69 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fa7a 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0204 	mvn.w	r2, #4
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2202      	movs	r2, #2
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa4d 	bl	800499e <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa3f 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fa50 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b08      	cmp	r3, #8
 8004524:	d122      	bne.n	800456c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b08      	cmp	r3, #8
 8004532:	d11b      	bne.n	800456c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0208 	mvn.w	r2, #8
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa23 	bl	800499e <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa15 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa26 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d122      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b10      	cmp	r3, #16
 8004586:	d11b      	bne.n	80045c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0210 	mvn.w	r2, #16
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2208      	movs	r2, #8
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9f9 	bl	800499e <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9eb 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f9fc 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d10e      	bne.n	80045ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0201 	mvn.w	r2, #1
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd f958 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b80      	cmp	r3, #128	; 0x80
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fdca 	bl	80051ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f9c1 	bl	80049c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b20      	cmp	r3, #32
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0220 	mvn.w	r2, #32
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fd94 	bl	8005198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004692:	2302      	movs	r3, #2
 8004694:	e0ae      	b.n	80047f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	f200 809f 	bhi.w	80047e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	080047e5 	.word	0x080047e5
 80046b4:	080047e5 	.word	0x080047e5
 80046b8:	080047e5 	.word	0x080047e5
 80046bc:	08004721 	.word	0x08004721
 80046c0:	080047e5 	.word	0x080047e5
 80046c4:	080047e5 	.word	0x080047e5
 80046c8:	080047e5 	.word	0x080047e5
 80046cc:	08004763 	.word	0x08004763
 80046d0:	080047e5 	.word	0x080047e5
 80046d4:	080047e5 	.word	0x080047e5
 80046d8:	080047e5 	.word	0x080047e5
 80046dc:	080047a3 	.word	0x080047a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fa18 	bl	8004b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	619a      	str	r2, [r3, #24]
      break;
 800471e:	e064      	b.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fa68 	bl	8004bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800473a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	619a      	str	r2, [r3, #24]
      break;
 8004760:	e043      	b.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fabd 	bl	8004ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0208 	orr.w	r2, r2, #8
 800477c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0204 	bic.w	r2, r2, #4
 800478c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69d9      	ldr	r1, [r3, #28]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	61da      	str	r2, [r3, #28]
      break;
 80047a0:	e023      	b.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fb11 	bl	8004dd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	021a      	lsls	r2, r3, #8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	61da      	str	r2, [r3, #28]
      break;
 80047e2:	e002      	b.n	80047ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	75fb      	strb	r3, [r7, #23]
      break;
 80047e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIM_ConfigClockSource+0x1c>
 8004814:	2302      	movs	r3, #2
 8004816:	e0b4      	b.n	8004982 <HAL_TIM_ConfigClockSource+0x186>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004850:	d03e      	beq.n	80048d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004856:	f200 8087 	bhi.w	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485e:	f000 8086 	beq.w	800496e <HAL_TIM_ConfigClockSource+0x172>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d87f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b70      	cmp	r3, #112	; 0x70
 800486a:	d01a      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xa6>
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d87b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b60      	cmp	r3, #96	; 0x60
 8004872:	d050      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x11a>
 8004874:	2b60      	cmp	r3, #96	; 0x60
 8004876:	d877      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004878:	2b50      	cmp	r3, #80	; 0x50
 800487a:	d03c      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xfa>
 800487c:	2b50      	cmp	r3, #80	; 0x50
 800487e:	d873      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d058      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x13a>
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d86f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004888:	2b30      	cmp	r3, #48	; 0x30
 800488a:	d064      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 800488c:	2b30      	cmp	r3, #48	; 0x30
 800488e:	d86b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d060      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d867      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05c      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 800489c:	2b10      	cmp	r3, #16
 800489e:	d05a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	e062      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f000 fb5d 	bl	8004f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	609a      	str	r2, [r3, #8]
      break;
 80048ce:	e04f      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6899      	ldr	r1, [r3, #8]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f000 fb46 	bl	8004f70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f2:	609a      	str	r2, [r3, #8]
      break;
 80048f4:	e03c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	461a      	mov	r2, r3
 8004904:	f000 faba 	bl	8004e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2150      	movs	r1, #80	; 0x50
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fb13 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004914:	e02c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	461a      	mov	r2, r3
 8004924:	f000 fad9 	bl	8004eda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2160      	movs	r1, #96	; 0x60
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb03 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004934:	e01c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 fa9a 	bl	8004e7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	4618      	mov	r0, r3
 8004950:	f000 faf3 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004954:	e00c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 faea 	bl	8004f3a <TIM_ITRx_SetConfig>
      break;
 8004966:	e003      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e000      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800496e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a40      	ldr	r2, [pc, #256]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fa:	d00f      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3d      	ldr	r2, [pc, #244]	; (8004af4 <TIM_Base_SetConfig+0x118>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <TIM_Base_SetConfig+0x11c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d007      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <TIM_Base_SetConfig+0x120>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d003      	beq.n	8004a1c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3a      	ldr	r2, [pc, #232]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d108      	bne.n	8004a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2f      	ldr	r2, [pc, #188]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d027      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2c      	ldr	r2, [pc, #176]	; (8004af4 <TIM_Base_SetConfig+0x118>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d023      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <TIM_Base_SetConfig+0x11c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <TIM_Base_SetConfig+0x120>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d017      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <TIM_Base_SetConfig+0x128>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <TIM_Base_SetConfig+0x12c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00f      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <TIM_Base_SetConfig+0x130>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <TIM_Base_SetConfig+0x134>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <TIM_Base_SetConfig+0x138>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <TIM_Base_SetConfig+0x13c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <TIM_Base_SetConfig+0x114>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0xf8>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <TIM_Base_SetConfig+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40010000 	.word	0x40010000
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	40001800 	.word	0x40001800
 8004b14:	40001c00 	.word	0x40001c00
 8004b18:	40002000 	.word	0x40002000

08004b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f023 0302 	bic.w	r3, r3, #2
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a20      	ldr	r2, [pc, #128]	; (8004bf4 <TIM_OC1_SetConfig+0xd8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_OC1_SetConfig+0x64>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <TIM_OC1_SetConfig+0xdc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10c      	bne.n	8004b9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f023 0308 	bic.w	r3, r3, #8
 8004b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <TIM_OC1_SetConfig+0xd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC1_SetConfig+0x8e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <TIM_OC1_SetConfig+0xdc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d111      	bne.n	8004bce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	621a      	str	r2, [r3, #32]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40010400 	.word	0x40010400

08004bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f023 0210 	bic.w	r2, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0320 	bic.w	r3, r3, #32
 8004c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <TIM_OC2_SetConfig+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_OC2_SetConfig+0x68>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <TIM_OC2_SetConfig+0xe8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10d      	bne.n	8004c80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <TIM_OC2_SetConfig+0xe4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_OC2_SetConfig+0x94>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <TIM_OC2_SetConfig+0xe8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d113      	bne.n	8004cb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40010400 	.word	0x40010400

08004ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <TIM_OC3_SetConfig+0xe0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_OC3_SetConfig+0x66>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <TIM_OC3_SetConfig+0xe4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10d      	bne.n	8004d6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	021b      	lsls	r3, r3, #8
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_OC3_SetConfig+0xe0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_OC3_SetConfig+0x92>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC3_SetConfig+0xe4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	031b      	lsls	r3, r3, #12
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <TIM_OC4_SetConfig+0xa4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC4_SetConfig+0x68>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a11      	ldr	r2, [pc, #68]	; (8004e78 <TIM_OC4_SetConfig+0xa8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d109      	bne.n	8004e4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	019b      	lsls	r3, r3, #6
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400

08004e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 030a 	bic.w	r3, r3, #10
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b087      	sub	sp, #28
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0210 	bic.w	r2, r3, #16
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b085      	sub	sp, #20
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f043 0307 	orr.w	r3, r3, #7
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e05a      	b.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005060:	d01d      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a17      	ldr	r2, [pc, #92]	; (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10c      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40000c00 	.word	0x40000c00
 80050e8:	40010400 	.word	0x40010400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40001800 	.word	0x40001800

080050f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800510c:	2302      	movs	r3, #2
 800510e:	e03d      	b.n	800518c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e03f      	b.n	8005252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fce2 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fddf 	bl	8005dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b08a      	sub	sp, #40	; 0x28
 800525e:	af02      	add	r7, sp, #8
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	603b      	str	r3, [r7, #0]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	d17c      	bne.n	8005374 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_UART_Transmit+0x2c>
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e075      	b.n	8005376 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_UART_Transmit+0x3e>
 8005294:	2302      	movs	r3, #2
 8005296:	e06e      	b.n	8005376 <HAL_UART_Transmit+0x11c>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2221      	movs	r2, #33	; 0x21
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ae:	f7fc fdf9 	bl	8001ea4 <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c8:	d108      	bne.n	80052dc <HAL_UART_Transmit+0x82>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e003      	b.n	80052e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052ec:	e02a      	b.n	8005344 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fb1f 	bl	800593c <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e036      	b.n	8005376 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800531c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	3302      	adds	r3, #2
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	e007      	b.n	8005336 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	3301      	adds	r3, #1
 8005334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1cf      	bne.n	80052ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 faef 	bl	800593c <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e006      	b.n	8005376 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	d11d      	bne.n	80053d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Receive_IT+0x26>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e016      	b.n	80053d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UART_Receive_IT+0x38>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e00f      	b.n	80053d6 <HAL_UART_Receive_IT+0x58>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fb24 	bl	8005a18 <UART_Start_Receive_IT>
 80053d0:	4603      	mov	r3, r0
 80053d2:	e000      	b.n	80053d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b0ba      	sub	sp, #232	; 0xe8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800541e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10f      	bne.n	8005446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <HAL_UART_IRQHandler+0x66>
 8005432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fc07 	bl	8005c52 <UART_Receive_IT>
      return;
 8005444:	e256      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80de 	beq.w	800560c <HAL_UART_IRQHandler+0x22c>
 8005450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 80d1 	beq.w	800560c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800546a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_UART_IRQHandler+0xae>
 8005476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f043 0201 	orr.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_UART_IRQHandler+0xd2>
 800549a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0202 	orr.w	r2, r3, #2
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xf6>
 80054be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d011      	beq.n	8005506 <HAL_UART_IRQHandler+0x126>
 80054e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d105      	bne.n	80054fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0208 	orr.w	r2, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 81ed 	beq.w	80058ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_UART_IRQHandler+0x14e>
 800551c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fb92 	bl	8005c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <HAL_UART_IRQHandler+0x17a>
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d04f      	beq.n	80055fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa9a 	bl	8005a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d141      	bne.n	80055f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005584:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800559a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800559e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1d9      	bne.n	800556e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4a7d      	ldr	r2, [pc, #500]	; (80057bc <HAL_UART_IRQHandler+0x3dc>)
 80055c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fc fdea 	bl	80021a8 <HAL_DMA_Abort_IT>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00e      	b.n	8005608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f990 	bl	8005910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e00a      	b.n	8005608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f98c 	bl	8005910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e006      	b.n	8005608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f988 	bl	8005910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005606:	e170      	b.n	80058ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	bf00      	nop
    return;
 800560a:	e16e      	b.n	80058ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 814a 	bne.w	80058aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8143 	beq.w	80058aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 813c 	beq.w	80058aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	f040 80b4 	bne.w	80057c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8140 	beq.w	80058ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005676:	429a      	cmp	r2, r3
 8005678:	f080 8139 	bcs.w	80058ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005682:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568e:	f000 8088 	beq.w	80057a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	330c      	adds	r3, #12
 80056ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d9      	bne.n	8005692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005702:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005706:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800570a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e1      	bne.n	80056de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800572a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800573e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800574c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e3      	bne.n	800571a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f023 0310 	bic.w	r3, r3, #16
 8005776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005784:	65ba      	str	r2, [r7, #88]	; 0x58
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800578a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e3      	bne.n	8005760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	4618      	mov	r0, r3
 800579e:	f7fc fc93 	bl	80020c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8b6 	bl	8005924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057b8:	e099      	b.n	80058ee <HAL_UART_IRQHandler+0x50e>
 80057ba:	bf00      	nop
 80057bc:	08005b5b 	.word	0x08005b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 808b 	beq.w	80058f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 8086 	beq.w	80058f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800580a:	647a      	str	r2, [r7, #68]	; 0x44
 800580c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e3      	bne.n	80057e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	623b      	str	r3, [r7, #32]
   return(result);
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3314      	adds	r3, #20
 800583e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005842:	633a      	str	r2, [r7, #48]	; 0x30
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e3      	bne.n	800581e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	60fb      	str	r3, [r7, #12]
   return(result);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0310 	bic.w	r3, r3, #16
 800587a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005888:	61fa      	str	r2, [r7, #28]
 800588a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	617b      	str	r3, [r7, #20]
   return(result);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800589c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058a0:	4619      	mov	r1, r3
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f83e 	bl	8005924 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058a8:	e023      	b.n	80058f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_UART_IRQHandler+0x4ea>
 80058b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f95d 	bl	8005b82 <UART_Transmit_IT>
    return;
 80058c8:	e014      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00e      	beq.n	80058f4 <HAL_UART_IRQHandler+0x514>
 80058d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f99d 	bl	8005c22 <UART_EndTransmit_IT>
    return;
 80058e8:	e004      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
    return;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
      return;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_UART_IRQHandler+0x514>
      return;
 80058f2:	bf00      	nop
  }
}
 80058f4:	37e8      	adds	r7, #232	; 0xe8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b090      	sub	sp, #64	; 0x40
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594c:	e050      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005954:	d04c      	beq.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <UART_WaitOnFlagUntilTimeout+0x30>
 800595c:	f7fc faa2 	bl	8001ea4 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005968:	429a      	cmp	r2, r3
 800596a:	d241      	bcs.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800598c:	637a      	str	r2, [r7, #52]	; 0x34
 800598e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c0:	623a      	str	r2, [r7, #32]
 80059c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	69f9      	ldr	r1, [r7, #28]
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e5      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e00f      	b.n	8005a10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d09f      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3740      	adds	r7, #64	; 0x40
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	88fa      	ldrh	r2, [r7, #6]
 8005a36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2222      	movs	r2, #34	; 0x22
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0220 	orr.w	r2, r2, #32
 8005a84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b095      	sub	sp, #84	; 0x54
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005abc:	643a      	str	r2, [r7, #64]	; 0x40
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d119      	bne.n	8005b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f023 0310 	bic.w	r3, r3, #16
 8005b22:	647b      	str	r3, [r7, #68]	; 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b2c:	61ba      	str	r2, [r7, #24]
 8005b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6979      	ldr	r1, [r7, #20]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e5      	bne.n	8005b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b4e:	bf00      	nop
 8005b50:	3754      	adds	r7, #84	; 0x54
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff fecb 	bl	8005910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b21      	cmp	r3, #33	; 0x21
 8005b94:	d13e      	bne.n	8005c14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	d114      	bne.n	8005bca <UART_Transmit_IT+0x48>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d110      	bne.n	8005bca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	1c9a      	adds	r2, r3, #2
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	621a      	str	r2, [r3, #32]
 8005bc8:	e008      	b.n	8005bdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6211      	str	r1, [r2, #32]
 8005bd4:	781a      	ldrb	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4619      	mov	r1, r3
 8005bea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fe5a 	bl	80058fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b08c      	sub	sp, #48	; 0x30
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b22      	cmp	r3, #34	; 0x22
 8005c64:	f040 80ab 	bne.w	8005dbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c70:	d117      	bne.n	8005ca2 <UART_Receive_IT+0x50>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d113      	bne.n	8005ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	1c9a      	adds	r2, r3, #2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005ca0:	e026      	b.n	8005cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb4:	d007      	beq.n	8005cc6 <UART_Receive_IT+0x74>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <UART_Receive_IT+0x82>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	e008      	b.n	8005ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d15a      	bne.n	8005dba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0220 	bic.w	r2, r2, #32
 8005d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d135      	bne.n	8005db0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f023 0310 	bic.w	r3, r3, #16
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6a:	623a      	str	r2, [r7, #32]
 8005d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	69f9      	ldr	r1, [r7, #28]
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d10a      	bne.n	8005da2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fdbb 	bl	8005924 <HAL_UARTEx_RxEventCallback>
 8005dae:	e002      	b.n	8005db6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fa ffd3 	bl	8000d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e002      	b.n	8005dc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3730      	adds	r7, #48	; 0x30
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dcc:	b0c0      	sub	sp, #256	; 0x100
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	68d9      	ldr	r1, [r3, #12]
 8005de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	ea40 0301 	orr.w	r3, r0, r1
 8005df0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e20:	f021 010c 	bic.w	r1, r1, #12
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e42:	6999      	ldr	r1, [r3, #24]
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	ea40 0301 	orr.w	r3, r0, r1
 8005e4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b8f      	ldr	r3, [pc, #572]	; (8006094 <UART_SetConfig+0x2cc>)
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d005      	beq.n	8005e68 <UART_SetConfig+0xa0>
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b8d      	ldr	r3, [pc, #564]	; (8006098 <UART_SetConfig+0x2d0>)
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d104      	bne.n	8005e72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e68:	f7fd ffa2 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8005e6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e70:	e003      	b.n	8005e7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e72:	f7fd ff89 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8005e76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e84:	f040 810c 	bne.w	80060a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	1891      	adds	r1, r2, r2
 8005ea0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eaa:	4621      	mov	r1, r4
 8005eac:	eb12 0801 	adds.w	r8, r2, r1
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	eb43 0901 	adc.w	r9, r3, r1
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eca:	4690      	mov	r8, r2
 8005ecc:	4699      	mov	r9, r3
 8005ece:	4623      	mov	r3, r4
 8005ed0:	eb18 0303 	adds.w	r3, r8, r3
 8005ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ed8:	462b      	mov	r3, r5
 8005eda:	eb49 0303 	adc.w	r3, r9, r3
 8005ede:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ef2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	18db      	adds	r3, r3, r3
 8005efa:	653b      	str	r3, [r7, #80]	; 0x50
 8005efc:	4613      	mov	r3, r2
 8005efe:	eb42 0303 	adc.w	r3, r2, r3
 8005f02:	657b      	str	r3, [r7, #84]	; 0x54
 8005f04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f0c:	f7fa f9b0 	bl	8000270 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4b61      	ldr	r3, [pc, #388]	; (800609c <UART_SetConfig+0x2d4>)
 8005f16:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	011c      	lsls	r4, r3, #4
 8005f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f30:	4642      	mov	r2, r8
 8005f32:	464b      	mov	r3, r9
 8005f34:	1891      	adds	r1, r2, r2
 8005f36:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f38:	415b      	adcs	r3, r3
 8005f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f40:	4641      	mov	r1, r8
 8005f42:	eb12 0a01 	adds.w	sl, r2, r1
 8005f46:	4649      	mov	r1, r9
 8005f48:	eb43 0b01 	adc.w	fp, r3, r1
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f60:	4692      	mov	sl, r2
 8005f62:	469b      	mov	fp, r3
 8005f64:	4643      	mov	r3, r8
 8005f66:	eb1a 0303 	adds.w	r3, sl, r3
 8005f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	eb4b 0303 	adc.w	r3, fp, r3
 8005f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	18db      	adds	r3, r3, r3
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
 8005f92:	4613      	mov	r3, r2
 8005f94:	eb42 0303 	adc.w	r3, r2, r3
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fa2:	f7fa f965 	bl	8000270 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	4b3b      	ldr	r3, [pc, #236]	; (800609c <UART_SetConfig+0x2d4>)
 8005fae:	fba3 2301 	umull	r2, r3, r3, r1
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	2264      	movs	r2, #100	; 0x64
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	1acb      	subs	r3, r1, r3
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <UART_SetConfig+0x2d4>)
 8005fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fd0:	441c      	add	r4, r3
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fe0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	464b      	mov	r3, r9
 8005fe8:	1891      	adds	r1, r2, r2
 8005fea:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fec:	415b      	adcs	r3, r3
 8005fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ff0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	1851      	adds	r1, r2, r1
 8005ff8:	6339      	str	r1, [r7, #48]	; 0x30
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	414b      	adcs	r3, r1
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800600c:	4659      	mov	r1, fp
 800600e:	00cb      	lsls	r3, r1, #3
 8006010:	4651      	mov	r1, sl
 8006012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006016:	4651      	mov	r1, sl
 8006018:	00ca      	lsls	r2, r1, #3
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	4603      	mov	r3, r0
 8006020:	4642      	mov	r2, r8
 8006022:	189b      	adds	r3, r3, r2
 8006024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006028:	464b      	mov	r3, r9
 800602a:	460a      	mov	r2, r1
 800602c:	eb42 0303 	adc.w	r3, r2, r3
 8006030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006040:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006048:	460b      	mov	r3, r1
 800604a:	18db      	adds	r3, r3, r3
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
 800604e:	4613      	mov	r3, r2
 8006050:	eb42 0303 	adc.w	r3, r2, r3
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006056:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800605a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800605e:	f7fa f907 	bl	8000270 <__aeabi_uldivmod>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <UART_SetConfig+0x2d4>)
 8006068:	fba3 1302 	umull	r1, r3, r3, r2
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	2164      	movs	r1, #100	; 0x64
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	3332      	adds	r3, #50	; 0x32
 800607a:	4a08      	ldr	r2, [pc, #32]	; (800609c <UART_SetConfig+0x2d4>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f003 0207 	and.w	r2, r3, #7
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4422      	add	r2, r4
 800608e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006090:	e106      	b.n	80062a0 <UART_SetConfig+0x4d8>
 8006092:	bf00      	nop
 8006094:	40011000 	.word	0x40011000
 8006098:	40011400 	.word	0x40011400
 800609c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060b2:	4642      	mov	r2, r8
 80060b4:	464b      	mov	r3, r9
 80060b6:	1891      	adds	r1, r2, r2
 80060b8:	6239      	str	r1, [r7, #32]
 80060ba:	415b      	adcs	r3, r3
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060c2:	4641      	mov	r1, r8
 80060c4:	1854      	adds	r4, r2, r1
 80060c6:	4649      	mov	r1, r9
 80060c8:	eb43 0501 	adc.w	r5, r3, r1
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	f04f 0300 	mov.w	r3, #0
 80060d4:	00eb      	lsls	r3, r5, #3
 80060d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060da:	00e2      	lsls	r2, r4, #3
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	4643      	mov	r3, r8
 80060e2:	18e3      	adds	r3, r4, r3
 80060e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060e8:	464b      	mov	r3, r9
 80060ea:	eb45 0303 	adc.w	r3, r5, r3
 80060ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800610e:	4629      	mov	r1, r5
 8006110:	008b      	lsls	r3, r1, #2
 8006112:	4621      	mov	r1, r4
 8006114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006118:	4621      	mov	r1, r4
 800611a:	008a      	lsls	r2, r1, #2
 800611c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006120:	f7fa f8a6 	bl	8000270 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4b60      	ldr	r3, [pc, #384]	; (80062ac <UART_SetConfig+0x4e4>)
 800612a:	fba3 2302 	umull	r2, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	011c      	lsls	r4, r3, #4
 8006132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006136:	2200      	movs	r2, #0
 8006138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800613c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006140:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	1891      	adds	r1, r2, r2
 800614a:	61b9      	str	r1, [r7, #24]
 800614c:	415b      	adcs	r3, r3
 800614e:	61fb      	str	r3, [r7, #28]
 8006150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006154:	4641      	mov	r1, r8
 8006156:	1851      	adds	r1, r2, r1
 8006158:	6139      	str	r1, [r7, #16]
 800615a:	4649      	mov	r1, r9
 800615c:	414b      	adcs	r3, r1
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800616c:	4659      	mov	r1, fp
 800616e:	00cb      	lsls	r3, r1, #3
 8006170:	4651      	mov	r1, sl
 8006172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006176:	4651      	mov	r1, sl
 8006178:	00ca      	lsls	r2, r1, #3
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	4603      	mov	r3, r0
 8006180:	4642      	mov	r2, r8
 8006182:	189b      	adds	r3, r3, r2
 8006184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006188:	464b      	mov	r3, r9
 800618a:	460a      	mov	r2, r1
 800618c:	eb42 0303 	adc.w	r3, r2, r3
 8006190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	67bb      	str	r3, [r7, #120]	; 0x78
 800619e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061ac:	4649      	mov	r1, r9
 80061ae:	008b      	lsls	r3, r1, #2
 80061b0:	4641      	mov	r1, r8
 80061b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b6:	4641      	mov	r1, r8
 80061b8:	008a      	lsls	r2, r1, #2
 80061ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061be:	f7fa f857 	bl	8000270 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	4b38      	ldr	r3, [pc, #224]	; (80062ac <UART_SetConfig+0x4e4>)
 80061ca:	fba3 2301 	umull	r2, r3, r3, r1
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2264      	movs	r2, #100	; 0x64
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	1acb      	subs	r3, r1, r3
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	3332      	adds	r3, #50	; 0x32
 80061dc:	4a33      	ldr	r2, [pc, #204]	; (80062ac <UART_SetConfig+0x4e4>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061e8:	441c      	add	r4, r3
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ee:	2200      	movs	r2, #0
 80061f0:	673b      	str	r3, [r7, #112]	; 0x70
 80061f2:	677a      	str	r2, [r7, #116]	; 0x74
 80061f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	1891      	adds	r1, r2, r2
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	415b      	adcs	r3, r3
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006208:	4641      	mov	r1, r8
 800620a:	1851      	adds	r1, r2, r1
 800620c:	6039      	str	r1, [r7, #0]
 800620e:	4649      	mov	r1, r9
 8006210:	414b      	adcs	r3, r1
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006220:	4659      	mov	r1, fp
 8006222:	00cb      	lsls	r3, r1, #3
 8006224:	4651      	mov	r1, sl
 8006226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800622a:	4651      	mov	r1, sl
 800622c:	00ca      	lsls	r2, r1, #3
 800622e:	4610      	mov	r0, r2
 8006230:	4619      	mov	r1, r3
 8006232:	4603      	mov	r3, r0
 8006234:	4642      	mov	r2, r8
 8006236:	189b      	adds	r3, r3, r2
 8006238:	66bb      	str	r3, [r7, #104]	; 0x68
 800623a:	464b      	mov	r3, r9
 800623c:	460a      	mov	r2, r1
 800623e:	eb42 0303 	adc.w	r3, r2, r3
 8006242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	663b      	str	r3, [r7, #96]	; 0x60
 800624e:	667a      	str	r2, [r7, #100]	; 0x64
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800625c:	4649      	mov	r1, r9
 800625e:	008b      	lsls	r3, r1, #2
 8006260:	4641      	mov	r1, r8
 8006262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006266:	4641      	mov	r1, r8
 8006268:	008a      	lsls	r2, r1, #2
 800626a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800626e:	f7f9 ffff 	bl	8000270 <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <UART_SetConfig+0x4e4>)
 8006278:	fba3 1302 	umull	r1, r3, r3, r2
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	2164      	movs	r1, #100	; 0x64
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	3332      	adds	r3, #50	; 0x32
 800628a:	4a08      	ldr	r2, [pc, #32]	; (80062ac <UART_SetConfig+0x4e4>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f003 020f 	and.w	r2, r3, #15
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4422      	add	r2, r4
 800629e:	609a      	str	r2, [r3, #8]
}
 80062a0:	bf00      	nop
 80062a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ac:	51eb851f 	.word	0x51eb851f

080062b0 <__NVIC_SetPriority>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	6039      	str	r1, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	db0a      	blt.n	80062da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	490c      	ldr	r1, [pc, #48]	; (80062fc <__NVIC_SetPriority+0x4c>)
 80062ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ce:	0112      	lsls	r2, r2, #4
 80062d0:	b2d2      	uxtb	r2, r2
 80062d2:	440b      	add	r3, r1
 80062d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80062d8:	e00a      	b.n	80062f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	4908      	ldr	r1, [pc, #32]	; (8006300 <__NVIC_SetPriority+0x50>)
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	3b04      	subs	r3, #4
 80062e8:	0112      	lsls	r2, r2, #4
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	440b      	add	r3, r1
 80062ee:	761a      	strb	r2, [r3, #24]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	e000e100 	.word	0xe000e100
 8006300:	e000ed00 	.word	0xe000ed00

08006304 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <SysTick_Handler+0x1c>)
 800630a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800630c:	f001 fcfe 	bl	8007d0c <xTaskGetSchedulerState>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d001      	beq.n	800631a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006316:	f002 fae7 	bl	80088e8 <xPortSysTickHandler>
  }
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	e000e010 	.word	0xe000e010

08006324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006328:	2100      	movs	r1, #0
 800632a:	f06f 0004 	mvn.w	r0, #4
 800632e:	f7ff ffbf 	bl	80062b0 <__NVIC_SetPriority>
#endif
}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800633e:	f3ef 8305 	mrs	r3, IPSR
 8006342:	603b      	str	r3, [r7, #0]
  return(result);
 8006344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800634a:	f06f 0305 	mvn.w	r3, #5
 800634e:	607b      	str	r3, [r7, #4]
 8006350:	e00c      	b.n	800636c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <osKernelInitialize+0x44>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <osKernelInitialize+0x44>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006360:	2300      	movs	r3, #0
 8006362:	607b      	str	r3, [r7, #4]
 8006364:	e002      	b.n	800636c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800636a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800636c:	687b      	ldr	r3, [r7, #4]
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000408 	.word	0x20000408

08006380 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006386:	f3ef 8305 	mrs	r3, IPSR
 800638a:	603b      	str	r3, [r7, #0]
  return(result);
 800638c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006392:	f06f 0305 	mvn.w	r3, #5
 8006396:	607b      	str	r3, [r7, #4]
 8006398:	e010      	b.n	80063bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800639a:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <osKernelStart+0x48>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d109      	bne.n	80063b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063a2:	f7ff ffbf 	bl	8006324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063a6:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <osKernelStart+0x48>)
 80063a8:	2202      	movs	r2, #2
 80063aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063ac:	f001 f866 	bl	800747c <vTaskStartScheduler>
      stat = osOK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	607b      	str	r3, [r7, #4]
 80063b4:	e002      	b.n	80063bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063bc:	687b      	ldr	r3, [r7, #4]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000408 	.word	0x20000408

080063cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	; 0x38
 80063d0:	af04      	add	r7, sp, #16
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063dc:	f3ef 8305 	mrs	r3, IPSR
 80063e0:	617b      	str	r3, [r7, #20]
  return(result);
 80063e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d17e      	bne.n	80064e6 <osThreadNew+0x11a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d07b      	beq.n	80064e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063f2:	2318      	movs	r3, #24
 80063f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d045      	beq.n	8006492 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <osThreadNew+0x48>
        name = attr->name;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <osThreadNew+0x6e>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b38      	cmp	r3, #56	; 0x38
 800642c:	d805      	bhi.n	800643a <osThreadNew+0x6e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <osThreadNew+0x72>
        return (NULL);
 800643a:	2300      	movs	r3, #0
 800643c:	e054      	b.n	80064e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00e      	beq.n	8006474 <osThreadNew+0xa8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b5b      	cmp	r3, #91	; 0x5b
 800645c:	d90a      	bls.n	8006474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006462:	2b00      	cmp	r3, #0
 8006464:	d006      	beq.n	8006474 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <osThreadNew+0xa8>
        mem = 1;
 800646e:	2301      	movs	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	e010      	b.n	8006496 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10c      	bne.n	8006496 <osThreadNew+0xca>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d108      	bne.n	8006496 <osThreadNew+0xca>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <osThreadNew+0xca>
          mem = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e001      	b.n	8006496 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d110      	bne.n	80064be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064a4:	9202      	str	r2, [sp, #8]
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fe0c 	bl	80070d0 <xTaskCreateStatic>
 80064b8:	4603      	mov	r3, r0
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	e013      	b.n	80064e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d110      	bne.n	80064e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fe57 	bl	800718a <xTaskCreate>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d001      	beq.n	80064e6 <osThreadNew+0x11a>
            hTask = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064e6:	693b      	ldr	r3, [r7, #16]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3728      	adds	r7, #40	; 0x28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f8:	f3ef 8305 	mrs	r3, IPSR
 80064fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80064fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <osDelay+0x1c>
    stat = osErrorISR;
 8006504:	f06f 0305 	mvn.w	r3, #5
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e007      	b.n	800651c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d002      	beq.n	800651c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 ff7c 	bl	8007414 <vTaskDelay>
    }
  }

  return (stat);
 800651c:	68fb      	ldr	r3, [r7, #12]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <vApplicationGetIdleTaskMemory+0x2c>)
 8006538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4a06      	ldr	r2, [pc, #24]	; (8006558 <vApplicationGetIdleTaskMemory+0x30>)
 800653e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2280      	movs	r2, #128	; 0x80
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	2000040c 	.word	0x2000040c
 8006558:	20000468 	.word	0x20000468

0800655c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4a07      	ldr	r2, [pc, #28]	; (8006588 <vApplicationGetTimerTaskMemory+0x2c>)
 800656c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a06      	ldr	r2, [pc, #24]	; (800658c <vApplicationGetTimerTaskMemory+0x30>)
 8006572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800657a:	601a      	str	r2, [r3, #0]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	20000668 	.word	0x20000668
 800658c:	200006c4 	.word	0x200006c4

08006590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f103 0208 	add.w	r2, r3, #8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f103 0208 	add.w	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f103 0208 	add.w	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006648:	d103      	bne.n	8006652 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	e00c      	b.n	800666c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3308      	adds	r3, #8
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e002      	b.n	8006660 <vListInsert+0x2e>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	d2f6      	bcs.n	800665a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
}
 8006698:	bf00      	nop
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6892      	ldr	r2, [r2, #8]
 80066ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6852      	ldr	r2, [r2, #4]
 80066c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d103      	bne.n	80066d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006722:	f002 f84f 	bl	80087c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	3b01      	subs	r3, #1
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d114      	bne.n	80067a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01a      	beq.n	80067b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3310      	adds	r3, #16
 8006784:	4618      	mov	r0, r3
 8006786:	f001 f903 	bl	8007990 <xTaskRemoveFromEventList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <xQueueGenericReset+0xcc>)
 8006792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	e009      	b.n	80067b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3310      	adds	r3, #16
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fef2 	bl	8006590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3324      	adds	r3, #36	; 0x24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff feed 	bl	8006590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067b6:	f002 f835 	bl	8008824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067ba:	2301      	movs	r3, #1
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08e      	sub	sp, #56	; 0x38
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <xQueueGenericCreateStatic+0x52>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <xQueueGenericCreateStatic+0x56>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <xQueueGenericCreateStatic+0x58>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	623b      	str	r3, [r7, #32]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <xQueueGenericCreateStatic+0x7e>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <xQueueGenericCreateStatic+0x82>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericCreateStatic+0x84>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	61fb      	str	r3, [r7, #28]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006866:	2350      	movs	r3, #80	; 0x50
 8006868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b50      	cmp	r3, #80	; 0x50
 800686e:	d00a      	beq.n	8006886 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	61bb      	str	r3, [r7, #24]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006886:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00d      	beq.n	80068ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800689a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f805 	bl	80068b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3730      	adds	r7, #48	; 0x30
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068e6:	2101      	movs	r1, #1
 80068e8:	69b8      	ldr	r0, [r7, #24]
 80068ea:	f7ff ff05 	bl	80066f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08e      	sub	sp, #56	; 0x38
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800690e:	2300      	movs	r3, #0
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueGenericSend+0x32>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <xQueueGenericSend+0x40>
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <xQueueGenericSend+0x44>
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <xQueueGenericSend+0x46>
 8006944:	2300      	movs	r3, #0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <xQueueGenericSend+0x60>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d103      	bne.n	800696e <xQueueGenericSend+0x6e>
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <xQueueGenericSend+0x72>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <xQueueGenericSend+0x74>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <xQueueGenericSend+0x8e>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	623b      	str	r3, [r7, #32]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800698e:	f001 f9bd 	bl	8007d0c <xTaskGetSchedulerState>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <xQueueGenericSend+0x9e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <xQueueGenericSend+0xa2>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <xQueueGenericSend+0xa4>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <xQueueGenericSend+0xbe>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	61fb      	str	r3, [r7, #28]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069be:	f001 ff01 	bl	80087c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <xQueueGenericSend+0xd4>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d129      	bne.n	8006a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069da:	f000 fa0b 	bl	8006df4 <prvCopyDataToQueue>
 80069de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d010      	beq.n	8006a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	3324      	adds	r3, #36	; 0x24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 ffcf 	bl	8007990 <xTaskRemoveFromEventList>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069f8:	4b3f      	ldr	r3, [pc, #252]	; (8006af8 <xQueueGenericSend+0x1f8>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	e00a      	b.n	8006a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a10:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <xQueueGenericSend+0x1f8>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a20:	f001 ff00 	bl	8008824 <vPortExitCritical>
				return pdPASS;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e063      	b.n	8006af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a2e:	f001 fef9 	bl	8008824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e05c      	b.n	8006af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a3c:	f107 0314 	add.w	r3, r7, #20
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f809 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a4a:	f001 feeb 	bl	8008824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a4e:	f000 fd7b 	bl	8007548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a52:	f001 feb7 	bl	80087c4 <vPortEnterCritical>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a62:	d103      	bne.n	8006a6c <xQueueGenericSend+0x16c>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a78:	d103      	bne.n	8006a82 <xQueueGenericSend+0x182>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a82:	f001 fecf 	bl	8008824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a86:	1d3a      	adds	r2, r7, #4
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fff8 	bl	8007a84 <xTaskCheckForTimeOut>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d124      	bne.n	8006ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9c:	f000 faa2 	bl	8006fe4 <prvIsQueueFull>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	3310      	adds	r3, #16
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 ff1e 	bl	80078f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab6:	f000 fa2d 	bl	8006f14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aba:	f000 fd53 	bl	8007564 <xTaskResumeAll>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f47f af7c 	bne.w	80069be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <xQueueGenericSend+0x1f8>)
 8006ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	e772      	b.n	80069be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ada:	f000 fa1b 	bl	8006f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ade:	f000 fd41 	bl	8007564 <xTaskResumeAll>
 8006ae2:	e76c      	b.n	80069be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ae6:	f000 fa15 	bl	8006f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aea:	f000 fd3b 	bl	8007564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3738      	adds	r7, #56	; 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b090      	sub	sp, #64	; 0x40
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <xQueueGenericSendFromISR+0x3c>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <xQueueGenericSendFromISR+0x40>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <xQueueGenericSendFromISR+0x42>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSendFromISR+0x6a>
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <xQueueGenericSendFromISR+0x6e>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <xQueueGenericSendFromISR+0x70>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	623b      	str	r3, [r7, #32]
}
 8006b82:	bf00      	nop
 8006b84:	e7fe      	b.n	8006b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b86:	f001 feff 	bl	8008988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61fa      	str	r2, [r7, #28]
 8006ba0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <xQueueGenericSendFromISR+0xbc>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d12f      	bne.n	8006c18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bce:	f000 f911 	bl	8006df4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bda:	d112      	bne.n	8006c02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d016      	beq.n	8006c12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	3324      	adds	r3, #36	; 0x24
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fed1 	bl	8007990 <xTaskRemoveFromEventList>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00e      	beq.n	8006c12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	e007      	b.n	8006c12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c06:	3301      	adds	r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	b25a      	sxtb	r2, r3
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c12:	2301      	movs	r3, #1
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c16:	e001      	b.n	8006c1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3740      	adds	r7, #64	; 0x40
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	; 0x30
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <xQueueReceive+0x30>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	623b      	str	r3, [r7, #32]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d103      	bne.n	8006c72 <xQueueReceive+0x3e>
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <xQueueReceive+0x42>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <xQueueReceive+0x44>
 8006c76:	2300      	movs	r3, #0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <xQueueReceive+0x5e>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	61fb      	str	r3, [r7, #28]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c92:	f001 f83b 	bl	8007d0c <xTaskGetSchedulerState>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <xQueueReceive+0x6e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueReceive+0x72>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueReceive+0x74>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xQueueReceive+0x8e>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	61bb      	str	r3, [r7, #24]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cc2:	f001 fd7f 	bl	80087c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01f      	beq.n	8006d12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd6:	f000 f8f7 	bl	8006ec8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	1e5a      	subs	r2, r3, #1
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00f      	beq.n	8006d0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	3310      	adds	r3, #16
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fe4e 	bl	8007990 <xTaskRemoveFromEventList>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cfa:	4b3d      	ldr	r3, [pc, #244]	; (8006df0 <xQueueReceive+0x1bc>)
 8006cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d0a:	f001 fd8b 	bl	8008824 <vPortExitCritical>
				return pdPASS;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e069      	b.n	8006de6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d103      	bne.n	8006d20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d18:	f001 fd84 	bl	8008824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e062      	b.n	8006de6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d26:	f107 0310 	add.w	r3, r7, #16
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fe94 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d34:	f001 fd76 	bl	8008824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d38:	f000 fc06 	bl	8007548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d3c:	f001 fd42 	bl	80087c4 <vPortEnterCritical>
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4c:	d103      	bne.n	8006d56 <xQueueReceive+0x122>
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d62:	d103      	bne.n	8006d6c <xQueueReceive+0x138>
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d6c:	f001 fd5a 	bl	8008824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d70:	1d3a      	adds	r2, r7, #4
 8006d72:	f107 0310 	add.w	r3, r7, #16
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fe83 	bl	8007a84 <xTaskCheckForTimeOut>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d123      	bne.n	8006dcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d86:	f000 f917 	bl	8006fb8 <prvIsQueueEmpty>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d017      	beq.n	8006dc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	3324      	adds	r3, #36	; 0x24
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4611      	mov	r1, r2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fda9 	bl	80078f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da0:	f000 f8b8 	bl	8006f14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006da4:	f000 fbde 	bl	8007564 <xTaskResumeAll>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d189      	bne.n	8006cc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <xQueueReceive+0x1bc>)
 8006db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	e780      	b.n	8006cc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc2:	f000 f8a7 	bl	8006f14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dc6:	f000 fbcd 	bl	8007564 <xTaskResumeAll>
 8006dca:	e77a      	b.n	8006cc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dce:	f000 f8a1 	bl	8006f14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dd2:	f000 fbc7 	bl	8007564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd8:	f000 f8ee 	bl	8006fb8 <prvIsQueueEmpty>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f43f af6f 	beq.w	8006cc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3730      	adds	r7, #48	; 0x30
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d14d      	bne.n	8006eb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 ff92 	bl	8007d48 <xTaskPriorityDisinherit>
 8006e24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	e043      	b.n	8006eb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d119      	bne.n	8006e68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6858      	ldr	r0, [r3, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	f002 fc70 	bl	8009724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d32b      	bcc.n	8006eb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	e026      	b.n	8006eb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68d8      	ldr	r0, [r3, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	461a      	mov	r2, r3
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	f002 fc56 	bl	8009724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	425b      	negs	r3, r3
 8006e82:	441a      	add	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d207      	bcs.n	8006ea4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	425b      	negs	r3, r3
 8006e9e:	441a      	add	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d105      	bne.n	8006eb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ebe:	697b      	ldr	r3, [r7, #20]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d018      	beq.n	8006f0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	441a      	add	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d303      	bcc.n	8006efc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68d9      	ldr	r1, [r3, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	461a      	mov	r2, r3
 8006f06:	6838      	ldr	r0, [r7, #0]
 8006f08:	f002 fc0c 	bl	8009724 <memcpy>
	}
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f1c:	f001 fc52 	bl	80087c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f28:	e011      	b.n	8006f4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d012      	beq.n	8006f58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fd2a 	bl	8007990 <xTaskRemoveFromEventList>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f42:	f000 fe01 	bl	8007b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dce9      	bgt.n	8006f2a <prvUnlockQueue+0x16>
 8006f56:	e000      	b.n	8006f5a <prvUnlockQueue+0x46>
					break;
 8006f58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	22ff      	movs	r2, #255	; 0xff
 8006f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f62:	f001 fc5f 	bl	8008824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f66:	f001 fc2d 	bl	80087c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f72:	e011      	b.n	8006f98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d012      	beq.n	8006fa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3310      	adds	r3, #16
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fd05 	bl	8007990 <xTaskRemoveFromEventList>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f8c:	f000 fddc 	bl	8007b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dce9      	bgt.n	8006f74 <prvUnlockQueue+0x60>
 8006fa0:	e000      	b.n	8006fa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	22ff      	movs	r2, #255	; 0xff
 8006fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fac:	f001 fc3a 	bl	8008824 <vPortExitCritical>
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fc0:	f001 fc00 	bl	80087c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e001      	b.n	8006fd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fd6:	f001 fc25 	bl	8008824 <vPortExitCritical>

	return xReturn;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fec:	f001 fbea 	bl	80087c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d102      	bne.n	8007002 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e001      	b.n	8007006 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007006:	f001 fc0d 	bl	8008824 <vPortExitCritical>

	return xReturn;
 800700a:	68fb      	ldr	r3, [r7, #12]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e014      	b.n	800704e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007024:	4a0f      	ldr	r2, [pc, #60]	; (8007064 <vQueueAddToRegistry+0x50>)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007030:	490c      	ldr	r1, [pc, #48]	; (8007064 <vQueueAddToRegistry+0x50>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800703a:	4a0a      	ldr	r2, [pc, #40]	; (8007064 <vQueueAddToRegistry+0x50>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007046:	e006      	b.n	8007056 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b07      	cmp	r3, #7
 8007052:	d9e7      	bls.n	8007024 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007054:	bf00      	nop
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20000ac4 	.word	0x20000ac4

08007068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007068:	b580      	push	{r7, lr}
 800706a:	b086      	sub	sp, #24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007078:	f001 fba4 	bl	80087c4 <vPortEnterCritical>
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007082:	b25b      	sxtb	r3, r3
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007088:	d103      	bne.n	8007092 <vQueueWaitForMessageRestricted+0x2a>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007098:	b25b      	sxtb	r3, r3
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709e:	d103      	bne.n	80070a8 <vQueueWaitForMessageRestricted+0x40>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070a8:	f001 fbbc 	bl	8008824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	3324      	adds	r3, #36	; 0x24
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fc3b 	bl	8007938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f7ff ff26 	bl	8006f14 <prvUnlockQueue>
	}
 80070c8:	bf00      	nop
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	; 0x38
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	623b      	str	r3, [r7, #32]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <xTaskCreateStatic+0x46>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	61fb      	str	r3, [r7, #28]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007116:	235c      	movs	r3, #92	; 0x5c
 8007118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b5c      	cmp	r3, #92	; 0x5c
 800711e:	d00a      	beq.n	8007136 <xTaskCreateStatic+0x66>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	61bb      	str	r3, [r7, #24]
}
 8007132:	bf00      	nop
 8007134:	e7fe      	b.n	8007134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01e      	beq.n	800717c <xTaskCreateStatic+0xac>
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	2b00      	cmp	r3, #0
 8007142:	d01b      	beq.n	800717c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800714c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	2202      	movs	r2, #2
 8007152:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007156:	2300      	movs	r3, #0
 8007158:	9303      	str	r3, [sp, #12]
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	9302      	str	r3, [sp, #8]
 800715e:	f107 0314 	add.w	r3, r7, #20
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f850 	bl	8007214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007176:	f000 f8dd 	bl	8007334 <prvAddNewTaskToReadyList>
 800717a:	e001      	b.n	8007180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007180:	697b      	ldr	r3, [r7, #20]
	}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800718a:	b580      	push	{r7, lr}
 800718c:	b08c      	sub	sp, #48	; 0x30
 800718e:	af04      	add	r7, sp, #16
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	603b      	str	r3, [r7, #0]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 fc32 	bl	8008a08 <pvPortMalloc>
 80071a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00e      	beq.n	80071ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071ac:	205c      	movs	r0, #92	; 0x5c
 80071ae:	f001 fc2b 	bl	8008a08 <pvPortMalloc>
 80071b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
 80071c0:	e005      	b.n	80071ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071c2:	6978      	ldr	r0, [r7, #20]
 80071c4:	f001 fcec 	bl	8008ba0 <vPortFree>
 80071c8:	e001      	b.n	80071ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d017      	beq.n	8007204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071dc:	88fa      	ldrh	r2, [r7, #6]
 80071de:	2300      	movs	r3, #0
 80071e0:	9303      	str	r3, [sp, #12]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	9302      	str	r3, [sp, #8]
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f80e 	bl	8007214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f8:	69f8      	ldr	r0, [r7, #28]
 80071fa:	f000 f89b 	bl	8007334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071fe:	2301      	movs	r3, #1
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e002      	b.n	800720a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800720a:	69bb      	ldr	r3, [r7, #24]
	}
 800720c:	4618      	mov	r0, r3
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	461a      	mov	r2, r3
 800722c:	21a5      	movs	r1, #165	; 0xa5
 800722e:	f002 fa45 	bl	80096bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800723c:	3b01      	subs	r3, #1
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01f      	beq.n	80072b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
 8007276:	e012      	b.n	800729e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	7819      	ldrb	r1, [r3, #0]
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	3334      	adds	r3, #52	; 0x34
 8007288:	460a      	mov	r2, r1
 800728a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3301      	adds	r3, #1
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b0f      	cmp	r3, #15
 80072a2:	d9e9      	bls.n	8007278 <prvInitialiseNewTask+0x64>
 80072a4:	e000      	b.n	80072a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80072a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072b0:	e003      	b.n	80072ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	2b37      	cmp	r3, #55	; 0x37
 80072be:	d901      	bls.n	80072c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072c0:	2337      	movs	r3, #55	; 0x37
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	2200      	movs	r2, #0
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	3304      	adds	r3, #4
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff f978 	bl	80065d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	3318      	adds	r3, #24
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff f973 	bl	80065d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	2200      	movs	r2, #0
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	69b8      	ldr	r0, [r7, #24]
 8007314:	f001 f928 	bl	8008568 <pxPortInitialiseStack>
 8007318:	4602      	mov	r2, r0
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007328:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800732a:	bf00      	nop
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800733c:	f001 fa42 	bl	80087c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007340:	4b2d      	ldr	r3, [pc, #180]	; (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 8007348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800734a:	4b2c      	ldr	r3, [pc, #176]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007352:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007358:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d110      	bne.n	8007382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007360:	f000 fc16 	bl	8007b90 <prvInitialiseTaskLists>
 8007364:	e00d      	b.n	8007382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007366:	4b26      	ldr	r3, [pc, #152]	; (8007400 <prvAddNewTaskToReadyList+0xcc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800736e:	4b23      	ldr	r3, [pc, #140]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	429a      	cmp	r2, r3
 800737a:	d802      	bhi.n	8007382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800737c:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007382:	4b20      	ldr	r3, [pc, #128]	; (8007404 <prvAddNewTaskToReadyList+0xd0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3301      	adds	r3, #1
 8007388:	4a1e      	ldr	r2, [pc, #120]	; (8007404 <prvAddNewTaskToReadyList+0xd0>)
 800738a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800738c:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <prvAddNewTaskToReadyList+0xd0>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <prvAddNewTaskToReadyList+0xd4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d903      	bls.n	80073a8 <prvAddNewTaskToReadyList+0x74>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a4:	4a18      	ldr	r2, [pc, #96]	; (8007408 <prvAddNewTaskToReadyList+0xd4>)
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4a15      	ldr	r2, [pc, #84]	; (800740c <prvAddNewTaskToReadyList+0xd8>)
 80073b6:	441a      	add	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7ff f913 	bl	80065ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073c4:	f001 fa2e 	bl	8008824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073c8:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <prvAddNewTaskToReadyList+0xcc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <prvAddNewTaskToReadyList+0xc8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d207      	bcs.n	80073ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073de:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <prvAddNewTaskToReadyList+0xdc>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000fd8 	.word	0x20000fd8
 80073fc:	20000b04 	.word	0x20000b04
 8007400:	20000fe4 	.word	0x20000fe4
 8007404:	20000ff4 	.word	0x20000ff4
 8007408:	20000fe0 	.word	0x20000fe0
 800740c:	20000b08 	.word	0x20000b08
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <vTaskDelay+0x60>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <vTaskDelay+0x30>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60bb      	str	r3, [r7, #8]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007444:	f000 f880 	bl	8007548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fcea 	bl	8007e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007450:	f000 f888 	bl	8007564 <xTaskResumeAll>
 8007454:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d107      	bne.n	800746c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <vTaskDelay+0x64>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800746c:	bf00      	nop
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20001000 	.word	0x20001000
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800748a:	463a      	mov	r2, r7
 800748c:	1d39      	adds	r1, r7, #4
 800748e:	f107 0308 	add.w	r3, r7, #8
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff f848 	bl	8006528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	9202      	str	r2, [sp, #8]
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	2300      	movs	r3, #0
 80074a8:	460a      	mov	r2, r1
 80074aa:	4921      	ldr	r1, [pc, #132]	; (8007530 <vTaskStartScheduler+0xb4>)
 80074ac:	4821      	ldr	r0, [pc, #132]	; (8007534 <vTaskStartScheduler+0xb8>)
 80074ae:	f7ff fe0f 	bl	80070d0 <xTaskCreateStatic>
 80074b2:	4603      	mov	r3, r0
 80074b4:	4a20      	ldr	r2, [pc, #128]	; (8007538 <vTaskStartScheduler+0xbc>)
 80074b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074b8:	4b1f      	ldr	r3, [pc, #124]	; (8007538 <vTaskStartScheduler+0xbc>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	e001      	b.n	80074ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d102      	bne.n	80074d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074d0:	f000 fcfc 	bl	8007ecc <xTimerCreateTimerTask>
 80074d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d116      	bne.n	800750a <vTaskStartScheduler+0x8e>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	613b      	str	r3, [r7, #16]
}
 80074ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074f0:	4b12      	ldr	r3, [pc, #72]	; (800753c <vTaskStartScheduler+0xc0>)
 80074f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074f8:	4b11      	ldr	r3, [pc, #68]	; (8007540 <vTaskStartScheduler+0xc4>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <vTaskStartScheduler+0xc8>)
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007504:	f001 f8bc 	bl	8008680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007508:	e00e      	b.n	8007528 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007510:	d10a      	bne.n	8007528 <vTaskStartScheduler+0xac>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60fb      	str	r3, [r7, #12]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vTaskStartScheduler+0xaa>
}
 8007528:	bf00      	nop
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	0800a078 	.word	0x0800a078
 8007534:	08007b61 	.word	0x08007b61
 8007538:	20000ffc 	.word	0x20000ffc
 800753c:	20000ff8 	.word	0x20000ff8
 8007540:	20000fe4 	.word	0x20000fe4
 8007544:	20000fdc 	.word	0x20000fdc

08007548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <vTaskSuspendAll+0x18>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a03      	ldr	r2, [pc, #12]	; (8007560 <vTaskSuspendAll+0x18>)
 8007554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007556:	bf00      	nop
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	20001000 	.word	0x20001000

08007564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800756a:	2300      	movs	r3, #0
 800756c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800756e:	2300      	movs	r3, #0
 8007570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007572:	4b42      	ldr	r3, [pc, #264]	; (800767c <xTaskResumeAll+0x118>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10a      	bne.n	8007590 <xTaskResumeAll+0x2c>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	603b      	str	r3, [r7, #0]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007590:	f001 f918 	bl	80087c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007594:	4b39      	ldr	r3, [pc, #228]	; (800767c <xTaskResumeAll+0x118>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3b01      	subs	r3, #1
 800759a:	4a38      	ldr	r2, [pc, #224]	; (800767c <xTaskResumeAll+0x118>)
 800759c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800759e:	4b37      	ldr	r3, [pc, #220]	; (800767c <xTaskResumeAll+0x118>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d162      	bne.n	800766c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075a6:	4b36      	ldr	r3, [pc, #216]	; (8007680 <xTaskResumeAll+0x11c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d05e      	beq.n	800766c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075ae:	e02f      	b.n	8007610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b0:	4b34      	ldr	r3, [pc, #208]	; (8007684 <xTaskResumeAll+0x120>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3318      	adds	r3, #24
 80075bc:	4618      	mov	r0, r3
 80075be:	f7ff f871 	bl	80066a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff f86c 	bl	80066a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4b2d      	ldr	r3, [pc, #180]	; (8007688 <xTaskResumeAll+0x124>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d903      	bls.n	80075e0 <xTaskResumeAll+0x7c>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a2a      	ldr	r2, [pc, #168]	; (8007688 <xTaskResumeAll+0x124>)
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4a27      	ldr	r2, [pc, #156]	; (800768c <xTaskResumeAll+0x128>)
 80075ee:	441a      	add	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7fe fff7 	bl	80065ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007600:	4b23      	ldr	r3, [pc, #140]	; (8007690 <xTaskResumeAll+0x12c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <xTaskResumeAll+0x130>)
 800760c:	2201      	movs	r2, #1
 800760e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007610:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <xTaskResumeAll+0x120>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1cb      	bne.n	80075b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800761e:	f000 fb55 	bl	8007ccc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007622:	4b1d      	ldr	r3, [pc, #116]	; (8007698 <xTaskResumeAll+0x134>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d010      	beq.n	8007650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800762e:	f000 f847 	bl	80076c0 <xTaskIncrementTick>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007638:	4b16      	ldr	r3, [pc, #88]	; (8007694 <xTaskResumeAll+0x130>)
 800763a:	2201      	movs	r2, #1
 800763c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3b01      	subs	r3, #1
 8007642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f1      	bne.n	800762e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800764a:	4b13      	ldr	r3, [pc, #76]	; (8007698 <xTaskResumeAll+0x134>)
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007650:	4b10      	ldr	r3, [pc, #64]	; (8007694 <xTaskResumeAll+0x130>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800765c:	4b0f      	ldr	r3, [pc, #60]	; (800769c <xTaskResumeAll+0x138>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800766c:	f001 f8da 	bl	8008824 <vPortExitCritical>

	return xAlreadyYielded;
 8007670:	68bb      	ldr	r3, [r7, #8]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20001000 	.word	0x20001000
 8007680:	20000fd8 	.word	0x20000fd8
 8007684:	20000f98 	.word	0x20000f98
 8007688:	20000fe0 	.word	0x20000fe0
 800768c:	20000b08 	.word	0x20000b08
 8007690:	20000b04 	.word	0x20000b04
 8007694:	20000fec 	.word	0x20000fec
 8007698:	20000fe8 	.word	0x20000fe8
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <xTaskGetTickCount+0x1c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076ac:	687b      	ldr	r3, [r7, #4]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000fdc 	.word	0x20000fdc

080076c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ca:	4b4f      	ldr	r3, [pc, #316]	; (8007808 <xTaskIncrementTick+0x148>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f040 808f 	bne.w	80077f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076d4:	4b4d      	ldr	r3, [pc, #308]	; (800780c <xTaskIncrementTick+0x14c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3301      	adds	r3, #1
 80076da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076dc:	4a4b      	ldr	r2, [pc, #300]	; (800780c <xTaskIncrementTick+0x14c>)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d120      	bne.n	800772a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076e8:	4b49      	ldr	r3, [pc, #292]	; (8007810 <xTaskIncrementTick+0x150>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <xTaskIncrementTick+0x48>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	603b      	str	r3, [r7, #0]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskIncrementTick+0x46>
 8007708:	4b41      	ldr	r3, [pc, #260]	; (8007810 <xTaskIncrementTick+0x150>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	4b41      	ldr	r3, [pc, #260]	; (8007814 <xTaskIncrementTick+0x154>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a3f      	ldr	r2, [pc, #252]	; (8007810 <xTaskIncrementTick+0x150>)
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4a3f      	ldr	r2, [pc, #252]	; (8007814 <xTaskIncrementTick+0x154>)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	4b3e      	ldr	r3, [pc, #248]	; (8007818 <xTaskIncrementTick+0x158>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a3d      	ldr	r2, [pc, #244]	; (8007818 <xTaskIncrementTick+0x158>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	f000 fad1 	bl	8007ccc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800772a:	4b3c      	ldr	r3, [pc, #240]	; (800781c <xTaskIncrementTick+0x15c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	429a      	cmp	r2, r3
 8007732:	d349      	bcc.n	80077c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007734:	4b36      	ldr	r3, [pc, #216]	; (8007810 <xTaskIncrementTick+0x150>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800773e:	4b37      	ldr	r3, [pc, #220]	; (800781c <xTaskIncrementTick+0x15c>)
 8007740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007744:	601a      	str	r2, [r3, #0]
					break;
 8007746:	e03f      	b.n	80077c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007748:	4b31      	ldr	r3, [pc, #196]	; (8007810 <xTaskIncrementTick+0x150>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d203      	bcs.n	8007768 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007760:	4a2e      	ldr	r2, [pc, #184]	; (800781c <xTaskIncrementTick+0x15c>)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007766:	e02f      	b.n	80077c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	3304      	adds	r3, #4
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe ff99 	bl	80066a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3318      	adds	r3, #24
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe ff90 	bl	80066a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4b25      	ldr	r3, [pc, #148]	; (8007820 <xTaskIncrementTick+0x160>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d903      	bls.n	8007798 <xTaskIncrementTick+0xd8>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a22      	ldr	r2, [pc, #136]	; (8007820 <xTaskIncrementTick+0x160>)
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4a1f      	ldr	r2, [pc, #124]	; (8007824 <xTaskIncrementTick+0x164>)
 80077a6:	441a      	add	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f7fe ff1b 	bl	80065ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <xTaskIncrementTick+0x168>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d3b8      	bcc.n	8007734 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077c6:	e7b5      	b.n	8007734 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077c8:	4b17      	ldr	r3, [pc, #92]	; (8007828 <xTaskIncrementTick+0x168>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	4915      	ldr	r1, [pc, #84]	; (8007824 <xTaskIncrementTick+0x164>)
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d901      	bls.n	80077e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077e4:	4b11      	ldr	r3, [pc, #68]	; (800782c <xTaskIncrementTick+0x16c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e004      	b.n	80077fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <xTaskIncrementTick+0x170>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a0d      	ldr	r2, [pc, #52]	; (8007830 <xTaskIncrementTick+0x170>)
 80077fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077fc:	697b      	ldr	r3, [r7, #20]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20001000 	.word	0x20001000
 800780c:	20000fdc 	.word	0x20000fdc
 8007810:	20000f90 	.word	0x20000f90
 8007814:	20000f94 	.word	0x20000f94
 8007818:	20000ff0 	.word	0x20000ff0
 800781c:	20000ff8 	.word	0x20000ff8
 8007820:	20000fe0 	.word	0x20000fe0
 8007824:	20000b08 	.word	0x20000b08
 8007828:	20000b04 	.word	0x20000b04
 800782c:	20000fec 	.word	0x20000fec
 8007830:	20000fe8 	.word	0x20000fe8

08007834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800783a:	4b28      	ldr	r3, [pc, #160]	; (80078dc <vTaskSwitchContext+0xa8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007842:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <vTaskSwitchContext+0xac>)
 8007844:	2201      	movs	r2, #1
 8007846:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007848:	e041      	b.n	80078ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800784a:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <vTaskSwitchContext+0xac>)
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007850:	4b24      	ldr	r3, [pc, #144]	; (80078e4 <vTaskSwitchContext+0xb0>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e010      	b.n	800787a <vTaskSwitchContext+0x46>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <vTaskSwitchContext+0x40>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	607b      	str	r3, [r7, #4]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <vTaskSwitchContext+0x3e>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3b01      	subs	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	491b      	ldr	r1, [pc, #108]	; (80078e8 <vTaskSwitchContext+0xb4>)
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0e4      	beq.n	8007858 <vTaskSwitchContext+0x24>
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <vTaskSwitchContext+0xb4>)
 800789a:	4413      	add	r3, r2
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	605a      	str	r2, [r3, #4]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	3308      	adds	r3, #8
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d104      	bne.n	80078be <vTaskSwitchContext+0x8a>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	605a      	str	r2, [r3, #4]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	4a09      	ldr	r2, [pc, #36]	; (80078ec <vTaskSwitchContext+0xb8>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	4a06      	ldr	r2, [pc, #24]	; (80078e4 <vTaskSwitchContext+0xb0>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6013      	str	r3, [r2, #0]
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	20001000 	.word	0x20001000
 80078e0:	20000fec 	.word	0x20000fec
 80078e4:	20000fe0 	.word	0x20000fe0
 80078e8:	20000b08 	.word	0x20000b08
 80078ec:	20000b04 	.word	0x20000b04

080078f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60fb      	str	r3, [r7, #12]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <vTaskPlaceOnEventList+0x44>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3318      	adds	r3, #24
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fe fe87 	bl	8006632 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007924:	2101      	movs	r1, #1
 8007926:	6838      	ldr	r0, [r7, #0]
 8007928:	f000 fa7c 	bl	8007e24 <prvAddCurrentTaskToDelayedList>
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000b04 	.word	0x20000b04

08007938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	617b      	str	r3, [r7, #20]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vTaskPlaceOnEventListRestricted+0x54>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3318      	adds	r3, #24
 8007966:	4619      	mov	r1, r3
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7fe fe3e 	bl	80065ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007978:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	68b8      	ldr	r0, [r7, #8]
 800797e:	f000 fa51 	bl	8007e24 <prvAddCurrentTaskToDelayedList>
	}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000b04 	.word	0x20000b04

08007990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	3318      	adds	r3, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fe6f 	bl	80066a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c6:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <xTaskRemoveFromEventList+0xb0>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d11d      	bne.n	8007a0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe fe66 	bl	80066a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079dc:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <xTaskRemoveFromEventList+0xb4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d903      	bls.n	80079ec <xTaskRemoveFromEventList+0x5c>
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <xTaskRemoveFromEventList+0xb4>)
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <xTaskRemoveFromEventList+0xb8>)
 80079fa:	441a      	add	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe fdf1 	bl	80065ea <vListInsertEnd>
 8007a08:	e005      	b.n	8007a16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3318      	adds	r3, #24
 8007a0e:	4619      	mov	r1, r3
 8007a10:	480e      	ldr	r0, [pc, #56]	; (8007a4c <xTaskRemoveFromEventList+0xbc>)
 8007a12:	f7fe fdea 	bl	80065ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <xTaskRemoveFromEventList+0xc0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d905      	bls.n	8007a30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <xTaskRemoveFromEventList+0xc4>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e001      	b.n	8007a34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a34:	697b      	ldr	r3, [r7, #20]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20001000 	.word	0x20001000
 8007a44:	20000fe0 	.word	0x20000fe0
 8007a48:	20000b08 	.word	0x20000b08
 8007a4c:	20000f98 	.word	0x20000f98
 8007a50:	20000b04 	.word	0x20000b04
 8007a54:	20000fec 	.word	0x20000fec

08007a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <vTaskInternalSetTimeOutState+0x24>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <vTaskInternalSetTimeOutState+0x28>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	20000ff0 	.word	0x20000ff0
 8007a80:	20000fdc 	.word	0x20000fdc

08007a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ac6:	f000 fe7d 	bl	80087c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007aca:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <xTaskCheckForTimeOut+0xbc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ae2:	d102      	bne.n	8007aea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	e023      	b.n	8007b32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <xTaskCheckForTimeOut+0xc0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d007      	beq.n	8007b06 <xTaskCheckForTimeOut+0x82>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d302      	bcc.n	8007b06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	61fb      	str	r3, [r7, #28]
 8007b04:	e015      	b.n	8007b32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d20b      	bcs.n	8007b28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff ff9b 	bl	8007a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e004      	b.n	8007b32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b32:	f000 fe77 	bl	8008824 <vPortExitCritical>

	return xReturn;
 8007b36:	69fb      	ldr	r3, [r7, #28]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	20000fdc 	.word	0x20000fdc
 8007b44:	20000ff0 	.word	0x20000ff0

08007b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b4c:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <vTaskMissedYield+0x14>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	20000fec 	.word	0x20000fec

08007b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b68:	f000 f852 	bl	8007c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <prvIdleTask+0x28>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d9f9      	bls.n	8007b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <prvIdleTask+0x2c>)
 8007b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b84:	e7f0      	b.n	8007b68 <prvIdleTask+0x8>
 8007b86:	bf00      	nop
 8007b88:	20000b08 	.word	0x20000b08
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
 8007b9a:	e00c      	b.n	8007bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <prvInitialiseTaskLists+0x60>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fcf0 	bl	8006590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b37      	cmp	r3, #55	; 0x37
 8007bba:	d9ef      	bls.n	8007b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bbc:	480d      	ldr	r0, [pc, #52]	; (8007bf4 <prvInitialiseTaskLists+0x64>)
 8007bbe:	f7fe fce7 	bl	8006590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bc2:	480d      	ldr	r0, [pc, #52]	; (8007bf8 <prvInitialiseTaskLists+0x68>)
 8007bc4:	f7fe fce4 	bl	8006590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bc8:	480c      	ldr	r0, [pc, #48]	; (8007bfc <prvInitialiseTaskLists+0x6c>)
 8007bca:	f7fe fce1 	bl	8006590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bce:	480c      	ldr	r0, [pc, #48]	; (8007c00 <prvInitialiseTaskLists+0x70>)
 8007bd0:	f7fe fcde 	bl	8006590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bd4:	480b      	ldr	r0, [pc, #44]	; (8007c04 <prvInitialiseTaskLists+0x74>)
 8007bd6:	f7fe fcdb 	bl	8006590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <prvInitialiseTaskLists+0x78>)
 8007bdc:	4a05      	ldr	r2, [pc, #20]	; (8007bf4 <prvInitialiseTaskLists+0x64>)
 8007bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <prvInitialiseTaskLists+0x7c>)
 8007be2:	4a05      	ldr	r2, [pc, #20]	; (8007bf8 <prvInitialiseTaskLists+0x68>)
 8007be4:	601a      	str	r2, [r3, #0]
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000b08 	.word	0x20000b08
 8007bf4:	20000f68 	.word	0x20000f68
 8007bf8:	20000f7c 	.word	0x20000f7c
 8007bfc:	20000f98 	.word	0x20000f98
 8007c00:	20000fac 	.word	0x20000fac
 8007c04:	20000fc4 	.word	0x20000fc4
 8007c08:	20000f90 	.word	0x20000f90
 8007c0c:	20000f94 	.word	0x20000f94

08007c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c16:	e019      	b.n	8007c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c18:	f000 fdd4 	bl	80087c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1c:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <prvCheckTasksWaitingTermination+0x50>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fd3b 	bl	80066a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <prvCheckTasksWaitingTermination+0x54>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <prvCheckTasksWaitingTermination+0x54>)
 8007c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <prvCheckTasksWaitingTermination+0x58>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <prvCheckTasksWaitingTermination+0x58>)
 8007c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c42:	f000 fdef 	bl	8008824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f810 	bl	8007c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <prvCheckTasksWaitingTermination+0x58>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e1      	bne.n	8007c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000fac 	.word	0x20000fac
 8007c64:	20000fd8 	.word	0x20000fd8
 8007c68:	20000fc0 	.word	0x20000fc0

08007c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d108      	bne.n	8007c90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 ff8c 	bl	8008ba0 <vPortFree>
				vPortFree( pxTCB );
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 ff89 	bl	8008ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c8e:	e018      	b.n	8007cc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d103      	bne.n	8007ca2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 ff80 	bl	8008ba0 <vPortFree>
	}
 8007ca0:	e00f      	b.n	8007cc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d00a      	beq.n	8007cc2 <prvDeleteTCB+0x56>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	60fb      	str	r3, [r7, #12]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <prvDeleteTCB+0x54>
	}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cd2:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <prvResetNextTaskUnblockTime+0x38>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <prvResetNextTaskUnblockTime+0x3c>)
 8007cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ce4:	e008      	b.n	8007cf8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce6:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <prvResetNextTaskUnblockTime+0x38>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4a04      	ldr	r2, [pc, #16]	; (8007d08 <prvResetNextTaskUnblockTime+0x3c>)
 8007cf6:	6013      	str	r3, [r2, #0]
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	20000f90 	.word	0x20000f90
 8007d08:	20000ff8 	.word	0x20000ff8

08007d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d12:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <xTaskGetSchedulerState+0x34>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	e008      	b.n	8007d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d20:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <xTaskGetSchedulerState+0x38>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	607b      	str	r3, [r7, #4]
 8007d2c:	e001      	b.n	8007d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d32:	687b      	ldr	r3, [r7, #4]
	}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000fe4 	.word	0x20000fe4
 8007d44:	20001000 	.word	0x20001000

08007d48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d056      	beq.n	8007e0c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d5e:	4b2e      	ldr	r3, [pc, #184]	; (8007e18 <xTaskPriorityDisinherit+0xd0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d00a      	beq.n	8007d7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60fb      	str	r3, [r7, #12]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60bb      	str	r3, [r7, #8]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	1e5a      	subs	r2, r3, #1
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d02c      	beq.n	8007e0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d128      	bne.n	8007e0c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fc70 	bl	80066a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <xTaskPriorityDisinherit+0xd4>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <xTaskPriorityDisinherit+0xa4>
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	4a0c      	ldr	r2, [pc, #48]	; (8007e1c <xTaskPriorityDisinherit+0xd4>)
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <xTaskPriorityDisinherit+0xd8>)
 8007dfa:	441a      	add	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fe fbf1 	bl	80065ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e0c:	697b      	ldr	r3, [r7, #20]
	}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000b04 	.word	0x20000b04
 8007e1c:	20000fe0 	.word	0x20000fe0
 8007e20:	20000b08 	.word	0x20000b08

08007e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e34:	4b20      	ldr	r3, [pc, #128]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fc32 	bl	80066a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e46:	d10a      	bne.n	8007e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3304      	adds	r3, #4
 8007e54:	4619      	mov	r1, r3
 8007e56:	4819      	ldr	r0, [pc, #100]	; (8007ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8007e58:	f7fe fbc7 	bl	80065ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e5c:	e026      	b.n	8007eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d209      	bcs.n	8007e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e76:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f7fe fbd5 	bl	8006632 <vListInsert>
}
 8007e88:	e010      	b.n	8007eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3304      	adds	r3, #4
 8007e94:	4619      	mov	r1, r3
 8007e96:	4610      	mov	r0, r2
 8007e98:	f7fe fbcb 	bl	8006632 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d202      	bcs.n	8007eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ea6:	4a08      	ldr	r2, [pc, #32]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6013      	str	r3, [r2, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000fdc 	.word	0x20000fdc
 8007eb8:	20000b04 	.word	0x20000b04
 8007ebc:	20000fc4 	.word	0x20000fc4
 8007ec0:	20000f94 	.word	0x20000f94
 8007ec4:	20000f90 	.word	0x20000f90
 8007ec8:	20000ff8 	.word	0x20000ff8

08007ecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08a      	sub	sp, #40	; 0x28
 8007ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ed6:	f000 fb07 	bl	80084e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007eda:	4b1c      	ldr	r3, [pc, #112]	; (8007f4c <xTimerCreateTimerTask+0x80>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d021      	beq.n	8007f26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007eea:	1d3a      	adds	r2, r7, #4
 8007eec:	f107 0108 	add.w	r1, r7, #8
 8007ef0:	f107 030c 	add.w	r3, r7, #12
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fb31 	bl	800655c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	9202      	str	r2, [sp, #8]
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	2302      	movs	r3, #2
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	460a      	mov	r2, r1
 8007f0c:	4910      	ldr	r1, [pc, #64]	; (8007f50 <xTimerCreateTimerTask+0x84>)
 8007f0e:	4811      	ldr	r0, [pc, #68]	; (8007f54 <xTimerCreateTimerTask+0x88>)
 8007f10:	f7ff f8de 	bl	80070d0 <xTaskCreateStatic>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <xTimerCreateTimerTask+0x8c>)
 8007f18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f1a:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <xTimerCreateTimerTask+0x8c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f22:	2301      	movs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	613b      	str	r3, [r7, #16]
}
 8007f3e:	bf00      	nop
 8007f40:	e7fe      	b.n	8007f40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f42:	697b      	ldr	r3, [r7, #20]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20001034 	.word	0x20001034
 8007f50:	0800a080 	.word	0x0800a080
 8007f54:	08008091 	.word	0x08008091
 8007f58:	20001038 	.word	0x20001038

08007f5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	623b      	str	r3, [r7, #32]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f8a:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <xTimerGenericCommand+0x98>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d02a      	beq.n	8007fe8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	dc18      	bgt.n	8007fd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007fa4:	f7ff feb2 	bl	8007d0c <xTaskGetSchedulerState>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d109      	bne.n	8007fc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007fae:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <xTimerGenericCommand+0x98>)
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	f107 0110 	add.w	r1, r7, #16
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fba:	f7fe fca1 	bl	8006900 <xQueueGenericSend>
 8007fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8007fc0:	e012      	b.n	8007fe8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <xTimerGenericCommand+0x98>)
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	f107 0110 	add.w	r1, r7, #16
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f7fe fc97 	bl	8006900 <xQueueGenericSend>
 8007fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8007fd4:	e008      	b.n	8007fe8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fd6:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <xTimerGenericCommand+0x98>)
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	f107 0110 	add.w	r1, r7, #16
 8007fde:	2300      	movs	r3, #0
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	f7fe fd8b 	bl	8006afc <xQueueGenericSendFromISR>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3728      	adds	r7, #40	; 0x28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20001034 	.word	0x20001034

08007ff8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b088      	sub	sp, #32
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008002:	4b22      	ldr	r3, [pc, #136]	; (800808c <prvProcessExpiredTimer+0x94>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	3304      	adds	r3, #4
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fb47 	bl	80066a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d022      	beq.n	800806a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	699a      	ldr	r2, [r3, #24]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	18d1      	adds	r1, r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	6978      	ldr	r0, [r7, #20]
 8008032:	f000 f8d1 	bl	80081d8 <prvInsertTimerInActiveList>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01f      	beq.n	800807c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800803c:	2300      	movs	r3, #0
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	2300      	movs	r3, #0
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	2100      	movs	r1, #0
 8008046:	6978      	ldr	r0, [r7, #20]
 8008048:	f7ff ff88 	bl	8007f5c <xTimerGenericCommand>
 800804c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d113      	bne.n	800807c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008070:	f023 0301 	bic.w	r3, r3, #1
 8008074:	b2da      	uxtb	r2, r3
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	6978      	ldr	r0, [r7, #20]
 8008082:	4798      	blx	r3
}
 8008084:	bf00      	nop
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	2000102c 	.word	0x2000102c

08008090 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008098:	f107 0308 	add.w	r3, r7, #8
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f857 	bl	8008150 <prvGetNextExpireTime>
 80080a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4619      	mov	r1, r3
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f803 	bl	80080b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080ae:	f000 f8d5 	bl	800825c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080b2:	e7f1      	b.n	8008098 <prvTimerTask+0x8>

080080b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080be:	f7ff fa43 	bl	8007548 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f866 	bl	8008198 <prvSampleTimeNow>
 80080cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d130      	bne.n	8008136 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <prvProcessTimerOrBlockTask+0x3c>
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d806      	bhi.n	80080f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080e2:	f7ff fa3f 	bl	8007564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff85 	bl	8007ff8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080ee:	e024      	b.n	800813a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <prvProcessTimerOrBlockTask+0x90>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <prvProcessTimerOrBlockTask+0x50>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <prvProcessTimerOrBlockTask+0x52>
 8008104:	2300      	movs	r3, #0
 8008106:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <prvProcessTimerOrBlockTask+0x94>)
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	f7fe ffa7 	bl	8007068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800811a:	f7ff fa23 	bl	8007564 <xTaskResumeAll>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008124:	4b09      	ldr	r3, [pc, #36]	; (800814c <prvProcessTimerOrBlockTask+0x98>)
 8008126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	f3bf 8f6f 	isb	sy
}
 8008134:	e001      	b.n	800813a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008136:	f7ff fa15 	bl	8007564 <xTaskResumeAll>
}
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20001030 	.word	0x20001030
 8008148:	20001034 	.word	0x20001034
 800814c:	e000ed04 	.word	0xe000ed04

08008150 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008158:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <prvGetNextExpireTime+0x44>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <prvGetNextExpireTime+0x16>
 8008162:	2201      	movs	r2, #1
 8008164:	e000      	b.n	8008168 <prvGetNextExpireTime+0x18>
 8008166:	2200      	movs	r2, #0
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d105      	bne.n	8008180 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <prvGetNextExpireTime+0x44>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e001      	b.n	8008184 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000102c 	.word	0x2000102c

08008198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081a0:	f7ff fa7e 	bl	80076a0 <xTaskGetTickCount>
 80081a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <prvSampleTimeNow+0x3c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d205      	bcs.n	80081bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80081b0:	f000 f936 	bl	8008420 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081c2:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <prvSampleTimeNow+0x3c>)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081c8:	68fb      	ldr	r3, [r7, #12]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	2000103c 	.word	0x2000103c

080081d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d812      	bhi.n	8008224 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e01b      	b.n	800824a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <prvInsertTimerInActiveList+0x7c>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3304      	adds	r3, #4
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7fe fa08 	bl	8006632 <vListInsert>
 8008222:	e012      	b.n	800824a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d206      	bcs.n	800823a <prvInsertTimerInActiveList+0x62>
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	429a      	cmp	r2, r3
 8008232:	d302      	bcc.n	800823a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008234:	2301      	movs	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e007      	b.n	800824a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <prvInsertTimerInActiveList+0x80>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3304      	adds	r3, #4
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7fe f9f4 	bl	8006632 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800824a:	697b      	ldr	r3, [r7, #20]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20001030 	.word	0x20001030
 8008258:	2000102c 	.word	0x2000102c

0800825c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	; 0x38
 8008260:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008262:	e0ca      	b.n	80083fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	da18      	bge.n	800829c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800826a:	1d3b      	adds	r3, r7, #4
 800826c:	3304      	adds	r3, #4
 800826e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	61fb      	str	r3, [r7, #28]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008292:	6850      	ldr	r0, [r2, #4]
 8008294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008296:	6892      	ldr	r2, [r2, #8]
 8008298:	4611      	mov	r1, r2
 800829a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f2c0 80ab 	blt.w	80083fa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	3304      	adds	r3, #4
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe f9f5 	bl	80066a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082ba:	463b      	mov	r3, r7
 80082bc:	4618      	mov	r0, r3
 80082be:	f7ff ff6b 	bl	8008198 <prvSampleTimeNow>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	f200 8096 	bhi.w	80083f8 <prvProcessReceivedCommands+0x19c>
 80082cc:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <prvProcessReceivedCommands+0x78>)
 80082ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d2:	bf00      	nop
 80082d4:	080082fd 	.word	0x080082fd
 80082d8:	080082fd 	.word	0x080082fd
 80082dc:	080082fd 	.word	0x080082fd
 80082e0:	08008371 	.word	0x08008371
 80082e4:	08008385 	.word	0x08008385
 80082e8:	080083cf 	.word	0x080083cf
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	080082fd 	.word	0x080082fd
 80082f4:	08008371 	.word	0x08008371
 80082f8:	08008385 	.word	0x08008385
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008302:	f043 0301 	orr.w	r3, r3, #1
 8008306:	b2da      	uxtb	r2, r3
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	18d1      	adds	r1, r2, r3
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800831c:	f7ff ff5c 	bl	80081d8 <prvInsertTimerInActiveList>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d069      	beq.n	80083fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800832c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d05e      	beq.n	80083fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	441a      	add	r2, r3
 8008344:	2300      	movs	r3, #0
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	2300      	movs	r3, #0
 800834a:	2100      	movs	r1, #0
 800834c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834e:	f7ff fe05 	bl	8007f5c <xTimerGenericCommand>
 8008352:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d14f      	bne.n	80083fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	61bb      	str	r3, [r7, #24]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008376:	f023 0301 	bic.w	r3, r3, #1
 800837a:	b2da      	uxtb	r2, r3
 800837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008382:	e03a      	b.n	80083fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	617b      	str	r3, [r7, #20]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	18d1      	adds	r1, r2, r3
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083c8:	f7ff ff06 	bl	80081d8 <prvInsertTimerInActiveList>
					break;
 80083cc:	e015      	b.n	80083fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d4:	f003 0302 	and.w	r3, r3, #2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80083dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083de:	f000 fbdf 	bl	8008ba0 <vPortFree>
 80083e2:	e00a      	b.n	80083fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083f6:	e000      	b.n	80083fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80083f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083fa:	4b08      	ldr	r3, [pc, #32]	; (800841c <prvProcessReceivedCommands+0x1c0>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	1d39      	adds	r1, r7, #4
 8008400:	2200      	movs	r2, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fc16 	bl	8006c34 <xQueueReceive>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	f47f af2a 	bne.w	8008264 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	3730      	adds	r7, #48	; 0x30
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20001034 	.word	0x20001034

08008420 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008426:	e048      	b.n	80084ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008428:	4b2d      	ldr	r3, [pc, #180]	; (80084e0 <prvSwitchTimerLists+0xc0>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008432:	4b2b      	ldr	r3, [pc, #172]	; (80084e0 <prvSwitchTimerLists+0xc0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3304      	adds	r3, #4
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe f92f 	bl	80066a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d02e      	beq.n	80084ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4413      	add	r3, r2
 8008464:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	429a      	cmp	r2, r3
 800846c:	d90e      	bls.n	800848c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800847a:	4b19      	ldr	r3, [pc, #100]	; (80084e0 <prvSwitchTimerLists+0xc0>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fe f8d4 	bl	8006632 <vListInsert>
 800848a:	e016      	b.n	80084ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800848c:	2300      	movs	r3, #0
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	2300      	movs	r3, #0
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff fd60 	bl	8007f5c <xTimerGenericCommand>
 800849c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	603b      	str	r3, [r7, #0]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <prvSwitchTimerLists+0xc0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1b1      	bne.n	8008428 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084c4:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <prvSwitchTimerLists+0xc0>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <prvSwitchTimerLists+0xc4>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <prvSwitchTimerLists+0xc0>)
 80084d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084d2:	4a04      	ldr	r2, [pc, #16]	; (80084e4 <prvSwitchTimerLists+0xc4>)
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	6013      	str	r3, [r2, #0]
}
 80084d8:	bf00      	nop
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	2000102c 	.word	0x2000102c
 80084e4:	20001030 	.word	0x20001030

080084e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084ee:	f000 f969 	bl	80087c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <prvCheckForValidListAndQueue+0x60>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d120      	bne.n	800853c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084fa:	4814      	ldr	r0, [pc, #80]	; (800854c <prvCheckForValidListAndQueue+0x64>)
 80084fc:	f7fe f848 	bl	8006590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008500:	4813      	ldr	r0, [pc, #76]	; (8008550 <prvCheckForValidListAndQueue+0x68>)
 8008502:	f7fe f845 	bl	8006590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <prvCheckForValidListAndQueue+0x6c>)
 8008508:	4a10      	ldr	r2, [pc, #64]	; (800854c <prvCheckForValidListAndQueue+0x64>)
 800850a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800850c:	4b12      	ldr	r3, [pc, #72]	; (8008558 <prvCheckForValidListAndQueue+0x70>)
 800850e:	4a10      	ldr	r2, [pc, #64]	; (8008550 <prvCheckForValidListAndQueue+0x68>)
 8008510:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008512:	2300      	movs	r3, #0
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <prvCheckForValidListAndQueue+0x74>)
 8008518:	4a11      	ldr	r2, [pc, #68]	; (8008560 <prvCheckForValidListAndQueue+0x78>)
 800851a:	2110      	movs	r1, #16
 800851c:	200a      	movs	r0, #10
 800851e:	f7fe f953 	bl	80067c8 <xQueueGenericCreateStatic>
 8008522:	4603      	mov	r3, r0
 8008524:	4a08      	ldr	r2, [pc, #32]	; (8008548 <prvCheckForValidListAndQueue+0x60>)
 8008526:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <prvCheckForValidListAndQueue+0x60>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d005      	beq.n	800853c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <prvCheckForValidListAndQueue+0x60>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	490b      	ldr	r1, [pc, #44]	; (8008564 <prvCheckForValidListAndQueue+0x7c>)
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fd6c 	bl	8007014 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800853c:	f000 f972 	bl	8008824 <vPortExitCritical>
}
 8008540:	bf00      	nop
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20001034 	.word	0x20001034
 800854c:	20001004 	.word	0x20001004
 8008550:	20001018 	.word	0x20001018
 8008554:	2000102c 	.word	0x2000102c
 8008558:	20001030 	.word	0x20001030
 800855c:	200010e0 	.word	0x200010e0
 8008560:	20001040 	.word	0x20001040
 8008564:	0800a088 	.word	0x0800a088

08008568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3b04      	subs	r3, #4
 8008578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3b04      	subs	r3, #4
 8008586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f023 0201 	bic.w	r2, r3, #1
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3b04      	subs	r3, #4
 8008596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008598:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <pxPortInitialiseStack+0x64>)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3b14      	subs	r3, #20
 80085a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f06f 0202 	mvn.w	r2, #2
 80085b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3b20      	subs	r3, #32
 80085bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085be:	68fb      	ldr	r3, [r7, #12]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	080085d1 	.word	0x080085d1

080085d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085da:	4b12      	ldr	r3, [pc, #72]	; (8008624 <prvTaskExitError+0x54>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085e2:	d00a      	beq.n	80085fa <prvTaskExitError+0x2a>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	60fb      	str	r3, [r7, #12]
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <prvTaskExitError+0x28>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	60bb      	str	r3, [r7, #8]
}
 800860c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800860e:	bf00      	nop
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0fc      	beq.n	8008610 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000148 	.word	0x20000148
	...

08008630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <pxCurrentTCBConst2>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863a:	f380 8809 	msr	PSP, r0
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8811 	msr	BASEPRI, r0
 800864a:	4770      	bx	lr
 800864c:	f3af 8000 	nop.w

08008650 <pxCurrentTCBConst2>:
 8008650:	20000b04 	.word	0x20000b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008658:	4808      	ldr	r0, [pc, #32]	; (800867c <prvPortStartFirstTask+0x24>)
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f380 8808 	msr	MSP, r0
 8008662:	f04f 0000 	mov.w	r0, #0
 8008666:	f380 8814 	msr	CONTROL, r0
 800866a:	b662      	cpsie	i
 800866c:	b661      	cpsie	f
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	df00      	svc	0
 8008678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800867a:	bf00      	nop
 800867c:	e000ed08 	.word	0xe000ed08

08008680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008686:	4b46      	ldr	r3, [pc, #280]	; (80087a0 <xPortStartScheduler+0x120>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a46      	ldr	r2, [pc, #280]	; (80087a4 <xPortStartScheduler+0x124>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d10a      	bne.n	80086a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	613b      	str	r3, [r7, #16]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086a6:	4b3e      	ldr	r3, [pc, #248]	; (80087a0 <xPortStartScheduler+0x120>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a3f      	ldr	r2, [pc, #252]	; (80087a8 <xPortStartScheduler+0x128>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d10a      	bne.n	80086c6 <xPortStartScheduler+0x46>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80086c6:	4b39      	ldr	r3, [pc, #228]	; (80087ac <xPortStartScheduler+0x12c>)
 80086c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <xPortStartScheduler+0x130>)
 80086ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086ee:	4b31      	ldr	r3, [pc, #196]	; (80087b4 <xPortStartScheduler+0x134>)
 80086f0:	2207      	movs	r2, #7
 80086f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086f4:	e009      	b.n	800870a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80086f6:	4b2f      	ldr	r3, [pc, #188]	; (80087b4 <xPortStartScheduler+0x134>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	4a2d      	ldr	r2, [pc, #180]	; (80087b4 <xPortStartScheduler+0x134>)
 80086fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	b2db      	uxtb	r3, r3
 8008708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008712:	2b80      	cmp	r3, #128	; 0x80
 8008714:	d0ef      	beq.n	80086f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008716:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <xPortStartScheduler+0x134>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1c3 0307 	rsb	r3, r3, #7
 800871e:	2b04      	cmp	r3, #4
 8008720:	d00a      	beq.n	8008738 <xPortStartScheduler+0xb8>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60bb      	str	r3, [r7, #8]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008738:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <xPortStartScheduler+0x134>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <xPortStartScheduler+0x134>)
 8008740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008742:	4b1c      	ldr	r3, [pc, #112]	; (80087b4 <xPortStartScheduler+0x134>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800874a:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <xPortStartScheduler+0x134>)
 800874c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	b2da      	uxtb	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008756:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <xPortStartScheduler+0x138>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <xPortStartScheduler+0x138>)
 800875c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <xPortStartScheduler+0x138>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <xPortStartScheduler+0x138>)
 8008768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800876c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800876e:	f000 f8dd 	bl	800892c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008772:	4b12      	ldr	r3, [pc, #72]	; (80087bc <xPortStartScheduler+0x13c>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008778:	f000 f8fc 	bl	8008974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800877c:	4b10      	ldr	r3, [pc, #64]	; (80087c0 <xPortStartScheduler+0x140>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a0f      	ldr	r2, [pc, #60]	; (80087c0 <xPortStartScheduler+0x140>)
 8008782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008788:	f7ff ff66 	bl	8008658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800878c:	f7ff f852 	bl	8007834 <vTaskSwitchContext>
	prvTaskExitError();
 8008790:	f7ff ff1e 	bl	80085d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	e000ed00 	.word	0xe000ed00
 80087a4:	410fc271 	.word	0x410fc271
 80087a8:	410fc270 	.word	0x410fc270
 80087ac:	e000e400 	.word	0xe000e400
 80087b0:	20001130 	.word	0x20001130
 80087b4:	20001134 	.word	0x20001134
 80087b8:	e000ed20 	.word	0xe000ed20
 80087bc:	20000148 	.word	0x20000148
 80087c0:	e000ef34 	.word	0xe000ef34

080087c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <vPortEnterCritical+0x58>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3301      	adds	r3, #1
 80087e4:	4a0d      	ldr	r2, [pc, #52]	; (800881c <vPortEnterCritical+0x58>)
 80087e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087e8:	4b0c      	ldr	r3, [pc, #48]	; (800881c <vPortEnterCritical+0x58>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10f      	bne.n	8008810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <vPortEnterCritical+0x5c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <vPortEnterCritical+0x4c>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	603b      	str	r3, [r7, #0]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <vPortEnterCritical+0x4a>
	}
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	20000148 	.word	0x20000148
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800882a:	4b12      	ldr	r3, [pc, #72]	; (8008874 <vPortExitCritical+0x50>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <vPortExitCritical+0x24>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	607b      	str	r3, [r7, #4]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <vPortExitCritical+0x50>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3b01      	subs	r3, #1
 800884e:	4a09      	ldr	r2, [pc, #36]	; (8008874 <vPortExitCritical+0x50>)
 8008850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <vPortExitCritical+0x50>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <vPortExitCritical+0x42>
 800885a:	2300      	movs	r3, #0
 800885c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	f383 8811 	msr	BASEPRI, r3
}
 8008864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000148 	.word	0x20000148
	...

08008880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008880:	f3ef 8009 	mrs	r0, PSP
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <pxCurrentTCBConst>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	f01e 0f10 	tst.w	lr, #16
 8008890:	bf08      	it	eq
 8008892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	6010      	str	r0, [r2, #0]
 800889c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088a4:	f380 8811 	msr	BASEPRI, r0
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f7fe ffc0 	bl	8007834 <vTaskSwitchContext>
 80088b4:	f04f 0000 	mov.w	r0, #0
 80088b8:	f380 8811 	msr	BASEPRI, r0
 80088bc:	bc09      	pop	{r0, r3}
 80088be:	6819      	ldr	r1, [r3, #0]
 80088c0:	6808      	ldr	r0, [r1, #0]
 80088c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c6:	f01e 0f10 	tst.w	lr, #16
 80088ca:	bf08      	it	eq
 80088cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088d0:	f380 8809 	msr	PSP, r0
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	f3af 8000 	nop.w

080088e0 <pxCurrentTCBConst>:
 80088e0:	20000b04 	.word	0x20000b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop

080088e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	607b      	str	r3, [r7, #4]
}
 8008900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008902:	f7fe fedd 	bl	80076c0 <xTaskIncrementTick>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <xPortSysTickHandler+0x40>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f383 8811 	msr	BASEPRI, r3
}
 800891e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008930:	4b0b      	ldr	r3, [pc, #44]	; (8008960 <vPortSetupTimerInterrupt+0x34>)
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008936:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <vPortSetupTimerInterrupt+0x38>)
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <vPortSetupTimerInterrupt+0x3c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a0a      	ldr	r2, [pc, #40]	; (800896c <vPortSetupTimerInterrupt+0x40>)
 8008942:	fba2 2303 	umull	r2, r3, r2, r3
 8008946:	099b      	lsrs	r3, r3, #6
 8008948:	4a09      	ldr	r2, [pc, #36]	; (8008970 <vPortSetupTimerInterrupt+0x44>)
 800894a:	3b01      	subs	r3, #1
 800894c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800894e:	4b04      	ldr	r3, [pc, #16]	; (8008960 <vPortSetupTimerInterrupt+0x34>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
}
 8008954:	bf00      	nop
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	e000e010 	.word	0xe000e010
 8008964:	e000e018 	.word	0xe000e018
 8008968:	2000013c 	.word	0x2000013c
 800896c:	10624dd3 	.word	0x10624dd3
 8008970:	e000e014 	.word	0xe000e014

08008974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008984 <vPortEnableVFP+0x10>
 8008978:	6801      	ldr	r1, [r0, #0]
 800897a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800897e:	6001      	str	r1, [r0, #0]
 8008980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008982:	bf00      	nop
 8008984:	e000ed88 	.word	0xe000ed88

08008988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b0f      	cmp	r3, #15
 8008998:	d914      	bls.n	80089c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800899a:	4a17      	ldr	r2, [pc, #92]	; (80089f8 <vPortValidateInterruptPriority+0x70>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089a4:	4b15      	ldr	r3, [pc, #84]	; (80089fc <vPortValidateInterruptPriority+0x74>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	7afa      	ldrb	r2, [r7, #11]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d20a      	bcs.n	80089c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089c4:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <vPortValidateInterruptPriority+0x78>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089cc:	4b0d      	ldr	r3, [pc, #52]	; (8008a04 <vPortValidateInterruptPriority+0x7c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d90a      	bls.n	80089ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	603b      	str	r3, [r7, #0]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <vPortValidateInterruptPriority+0x60>
	}
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	e000e3f0 	.word	0xe000e3f0
 80089fc:	20001130 	.word	0x20001130
 8008a00:	e000ed0c 	.word	0xe000ed0c
 8008a04:	20001134 	.word	0x20001134

08008a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a14:	f7fe fd98 	bl	8007548 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a18:	4b5b      	ldr	r3, [pc, #364]	; (8008b88 <pvPortMalloc+0x180>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a20:	f000 f920 	bl	8008c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a24:	4b59      	ldr	r3, [pc, #356]	; (8008b8c <pvPortMalloc+0x184>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f040 8093 	bne.w	8008b58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01d      	beq.n	8008a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a38:	2208      	movs	r2, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d014      	beq.n	8008a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f023 0307 	bic.w	r3, r3, #7
 8008a50:	3308      	adds	r3, #8
 8008a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <pvPortMalloc+0x6c>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	617b      	str	r3, [r7, #20]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d06e      	beq.n	8008b58 <pvPortMalloc+0x150>
 8008a7a:	4b45      	ldr	r3, [pc, #276]	; (8008b90 <pvPortMalloc+0x188>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d869      	bhi.n	8008b58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a84:	4b43      	ldr	r3, [pc, #268]	; (8008b94 <pvPortMalloc+0x18c>)
 8008a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a88:	4b42      	ldr	r3, [pc, #264]	; (8008b94 <pvPortMalloc+0x18c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8e:	e004      	b.n	8008a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d903      	bls.n	8008aac <pvPortMalloc+0xa4>
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1f1      	bne.n	8008a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008aac:	4b36      	ldr	r3, [pc, #216]	; (8008b88 <pvPortMalloc+0x180>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d050      	beq.n	8008b58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2208      	movs	r2, #8
 8008abc:	4413      	add	r3, r2
 8008abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d91f      	bls.n	8008b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <pvPortMalloc+0xf8>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	613b      	str	r3, [r7, #16]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f000 f908 	bl	8008d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <pvPortMalloc+0x188>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	4a1b      	ldr	r2, [pc, #108]	; (8008b90 <pvPortMalloc+0x188>)
 8008b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b26:	4b1a      	ldr	r3, [pc, #104]	; (8008b90 <pvPortMalloc+0x188>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <pvPortMalloc+0x190>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d203      	bcs.n	8008b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b32:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <pvPortMalloc+0x188>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <pvPortMalloc+0x190>)
 8008b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <pvPortMalloc+0x184>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <pvPortMalloc+0x194>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	4a11      	ldr	r2, [pc, #68]	; (8008b9c <pvPortMalloc+0x194>)
 8008b56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b58:	f7fe fd04 	bl	8007564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <pvPortMalloc+0x174>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <pvPortMalloc+0x172>
	return pvReturn;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3728      	adds	r7, #40	; 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20004d40 	.word	0x20004d40
 8008b8c:	20004d54 	.word	0x20004d54
 8008b90:	20004d44 	.word	0x20004d44
 8008b94:	20004d38 	.word	0x20004d38
 8008b98:	20004d48 	.word	0x20004d48
 8008b9c:	20004d4c 	.word	0x20004d4c

08008ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d04d      	beq.n	8008c4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	425b      	negs	r3, r3
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4413      	add	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <vPortFree+0xb8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4013      	ands	r3, r2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <vPortFree+0x44>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	60fb      	str	r3, [r7, #12]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <vPortFree+0x62>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	60bb      	str	r3, [r7, #8]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <vPortFree+0xb8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01e      	beq.n	8008c4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11a      	bne.n	8008c4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <vPortFree+0xb8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	43db      	mvns	r3, r3
 8008c22:	401a      	ands	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c28:	f7fe fc8e 	bl	8007548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <vPortFree+0xbc>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4413      	add	r3, r2
 8008c36:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <vPortFree+0xbc>)
 8008c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c3a:	6938      	ldr	r0, [r7, #16]
 8008c3c:	f000 f874 	bl	8008d28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <vPortFree+0xc0>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	4a06      	ldr	r2, [pc, #24]	; (8008c60 <vPortFree+0xc0>)
 8008c48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c4a:	f7fe fc8b 	bl	8007564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c4e:	bf00      	nop
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20004d54 	.word	0x20004d54
 8008c5c:	20004d44 	.word	0x20004d44
 8008c60:	20004d50 	.word	0x20004d50

08008c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c70:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <prvHeapInit+0xac>)
 8008c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00c      	beq.n	8008c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3307      	adds	r3, #7
 8008c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0307 	bic.w	r3, r3, #7
 8008c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	4a1f      	ldr	r2, [pc, #124]	; (8008d10 <prvHeapInit+0xac>)
 8008c94:	4413      	add	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <prvHeapInit+0xb0>)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <prvHeapInit+0xb0>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0307 	bic.w	r3, r3, #7
 8008cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <prvHeapInit+0xb4>)
 8008cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <prvHeapInit+0xb4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cce:	4b12      	ldr	r3, [pc, #72]	; (8008d18 <prvHeapInit+0xb4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvHeapInit+0xb4>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <prvHeapInit+0xb8>)
 8008cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <prvHeapInit+0xbc>)
 8008cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cfc:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <prvHeapInit+0xc0>)
 8008cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	20001138 	.word	0x20001138
 8008d14:	20004d38 	.word	0x20004d38
 8008d18:	20004d40 	.word	0x20004d40
 8008d1c:	20004d48 	.word	0x20004d48
 8008d20:	20004d44 	.word	0x20004d44
 8008d24:	20004d54 	.word	0x20004d54

08008d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <prvInsertBlockIntoFreeList+0xac>)
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e002      	b.n	8008d3c <prvInsertBlockIntoFreeList+0x14>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d8f7      	bhi.n	8008d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	4413      	add	r3, r2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d108      	bne.n	8008d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	441a      	add	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	441a      	add	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d118      	bne.n	8008db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d00d      	beq.n	8008da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	441a      	add	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e008      	b.n	8008db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	e003      	b.n	8008db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d002      	beq.n	8008dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20004d38 	.word	0x20004d38
 8008dd8:	20004d40 	.word	0x20004d40

08008ddc <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af04      	add	r7, sp, #16
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	460b      	mov	r3, r1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 8008df8:	7afb      	ldrb	r3, [r7, #11]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <_ICM20948_SelectUserBank+0x26>
 8008dfe:	2368      	movs	r3, #104	; 0x68
 8008e00:	e000      	b.n	8008e04 <_ICM20948_SelectUserBank+0x28>
 8008e02:	2369      	movs	r3, #105	; 0x69
 8008e04:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8008e06:	7dbb      	ldrb	r3, [r7, #22]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	b299      	uxth	r1, r3
 8008e0e:	230a      	movs	r3, #10
 8008e10:	9302      	str	r3, [sp, #8]
 8008e12:	2301      	movs	r3, #1
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	f107 0315 	add.w	r3, r7, #21
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	227f      	movs	r2, #127	; 0x7f
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7f9 fcdd 	bl	80027e0 <HAL_I2C_Mem_Write>
 8008e26:	4603      	mov	r3, r0
 8008e28:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	4608      	mov	r0, r1
 8008e3e:	4611      	mov	r1, r2
 8008e40:	461a      	mov	r2, r3
 8008e42:	4603      	mov	r3, r0
 8008e44:	70fb      	strb	r3, [r7, #3]
 8008e46:	460b      	mov	r3, r1
 8008e48:	70bb      	strb	r3, [r7, #2]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <_ICM20948_WriteByte+0x28>
 8008e58:	2368      	movs	r3, #104	; 0x68
 8008e5a:	e000      	b.n	8008e5e <_ICM20948_WriteByte+0x2a>
 8008e5c:	2369      	movs	r3, #105	; 0x69
 8008e5e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	b299      	uxth	r1, r3
 8008e68:	78bb      	ldrb	r3, [r7, #2]
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	230a      	movs	r3, #10
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	2301      	movs	r3, #1
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	1c7b      	adds	r3, r7, #1
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7f9 fcb0 	bl	80027e0 <HAL_I2C_Mem_Write>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <_ICM20948_BrustRead>:

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t *readData)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b088      	sub	sp, #32
 8008e92:	af04      	add	r7, sp, #16
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	4608      	mov	r0, r1
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	70fb      	strb	r3, [r7, #3]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70bb      	strb	r3, [r7, #2]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <_ICM20948_BrustRead+0x28>
 8008eb2:	2368      	movs	r3, #104	; 0x68
 8008eb4:	e000      	b.n	8008eb8 <_ICM20948_BrustRead+0x2a>
 8008eb6:	2369      	movs	r3, #105	; 0x69
 8008eb8:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	b299      	uxth	r1, r3
 8008ec2:	78bb      	ldrb	r3, [r7, #2]
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	9302      	str	r3, [sp, #8]
 8008eca:	883b      	ldrh	r3, [r7, #0]
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7f9 fd7d 	bl	80029d4 <HAL_I2C_Mem_Read>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		readData,
		amountOfRegistersToRead,
		10);

	return status;
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	70fb      	strb	r3, [r7, #3]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70bb      	strb	r3, [r7, #2]
 8008efe:	4613      	mov	r3, r2
 8008f00:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ff65 	bl	8008ddc <_ICM20948_SelectUserBank>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8008f16:	78f9      	ldrb	r1, [r7, #3]
 8008f18:	2380      	movs	r3, #128	; 0x80
 8008f1a:	2206      	movs	r2, #6
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff ff89 	bl	8008e34 <_ICM20948_WriteByte>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 8008f26:	20c8      	movs	r0, #200	; 0xc8
 8008f28:	f7f8 ffc8 	bl	8001ebc <HAL_Delay>

	status = _ICM20948_WriteByte(
 8008f2c:	78f9      	ldrb	r1, [r7, #3]
 8008f2e:	2301      	movs	r3, #1
 8008f30:	2206      	movs	r2, #6
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff ff7e 	bl	8008e34 <_ICM20948_WriteByte>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 8008f3c:	78f9      	ldrb	r1, [r7, #3]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	2207      	movs	r2, #7
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7ff ff76 	bl	8008e34 <_ICM20948_WriteByte>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff ff42 	bl	8008ddc <_ICM20948_SelectUserBank>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8008f5c:	78bb      	ldrb	r3, [r7, #2]
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	b25b      	sxtb	r3, r3
 8008f62:	f043 0319 	orr.w	r3, r3, #25
 8008f66:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	78f9      	ldrb	r1, [r7, #3]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff ff60 	bl	8008e34 <_ICM20948_WriteByte>
 8008f74:	4603      	mov	r3, r0
 8008f76:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8008f78:	78f9      	ldrb	r1, [r7, #3]
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	2253      	movs	r2, #83	; 0x53
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7ff ff58 	bl	8008e34 <_ICM20948_WriteByte>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 8008f88:	78f9      	ldrb	r1, [r7, #3]
 8008f8a:	2304      	movs	r3, #4
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff ff50 	bl	8008e34 <_ICM20948_WriteByte>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 8008f98:	787b      	ldrb	r3, [r7, #1]
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	f043 0319 	orr.w	r3, r3, #25
 8008fa2:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	78f9      	ldrb	r1, [r7, #3]
 8008fa8:	2214      	movs	r2, #20
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff ff42 	bl	8008e34 <_ICM20948_WriteByte>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 8008fb4:	78f9      	ldrb	r1, [r7, #3]
 8008fb6:	2304      	movs	r3, #4
 8008fb8:	2211      	movs	r2, #17
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ff3a 	bl	8008e34 <_ICM20948_WriteByte>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff ff06 	bl	8008ddc <_ICM20948_SelectUserBank>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 8008fd4:	78f9      	ldrb	r1, [r7, #3]
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	220f      	movs	r2, #15
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff ff2a 	bl	8008e34 <_ICM20948_WriteByte>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	2131      	movs	r1, #49	; 0x31
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f839 	bl	8009060 <_AK09918_WriteByte>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]
}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <ICM20948_readAccelerometer_allAxises>:
	*gyroZ = readGyroDataZ[0] << 8 | readGyroDataZ[1];
	*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
}

void ICM20948_readAccelerometer_allAxises(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, int16_t readings[3])
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b088      	sub	sp, #32
 8008ffe:	af02      	add	r7, sp, #8
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	607b      	str	r3, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	72fb      	strb	r3, [r7, #11]
 8009008:	4613      	mov	r3, r2
 800900a:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	// status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);

	// status =
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 800900c:	7af9      	ldrb	r1, [r7, #11]
 800900e:	f107 0310 	add.w	r3, r7, #16
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	2306      	movs	r3, #6
 8009016:	222d      	movs	r2, #45	; 0x2d
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7ff ff38 	bl	8008e8e <_ICM20948_BrustRead>

	readings[X] = readData[X_HIGH_BYTE] << 8 | readData[X_LOW_BYTE];
 800901e:	7c3b      	ldrb	r3, [r7, #16]
 8009020:	021b      	lsls	r3, r3, #8
 8009022:	b21a      	sxth	r2, r3
 8009024:	7c7b      	ldrb	r3, [r7, #17]
 8009026:	b21b      	sxth	r3, r3
 8009028:	4313      	orrs	r3, r2
 800902a:	b21a      	sxth	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	801a      	strh	r2, [r3, #0]
	readings[Y] = readData[Y_HIGH_BYTE] << 8 | readData[Y_LOW_BYTE];
 8009030:	7cbb      	ldrb	r3, [r7, #18]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	b219      	sxth	r1, r3
 8009036:	7cfb      	ldrb	r3, [r7, #19]
 8009038:	b21a      	sxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3302      	adds	r3, #2
 800903e:	430a      	orrs	r2, r1
 8009040:	b212      	sxth	r2, r2
 8009042:	801a      	strh	r2, [r3, #0]
	readings[Z] = readData[Z_HIGH_BYTE] << 8 | readData[Z_LOW_BYTE];
 8009044:	7d3b      	ldrb	r3, [r7, #20]
 8009046:	021b      	lsls	r3, r3, #8
 8009048:	b219      	sxth	r1, r3
 800904a:	7d7b      	ldrb	r3, [r7, #21]
 800904c:	b21a      	sxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3304      	adds	r3, #4
 8009052:	430a      	orrs	r2, r1
 8009054:	b212      	sxth	r2, r2
 8009056:	801a      	strh	r2, [r3, #0]
	// 	readings[X] /= ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
	// 	readings[Y] /= ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
	// 	readings[Z] /= ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
	// 	break;
	// }
}
 8009058:	bf00      	nop
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af04      	add	r7, sp, #16
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
 800906c:	4613      	mov	r3, r2
 800906e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	b29a      	uxth	r2, r3
 8009078:	230a      	movs	r3, #10
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	2301      	movs	r3, #1
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	1cbb      	adds	r3, r7, #2
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	2301      	movs	r3, #1
 8009086:	2118      	movs	r1, #24
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7f9 fba9 	bl	80027e0 <HAL_I2C_Mem_Write>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80090a2:	2300      	movs	r3, #0
 80090a4:	71fb      	strb	r3, [r7, #7]
 80090a6:	e026      	b.n	80090f6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	3b50      	subs	r3, #80	; 0x50
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f82b 	bl	800910c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80090b6:	2100      	movs	r1, #0
 80090b8:	2000      	movs	r0, #0
 80090ba:	f000 f827 	bl	800910c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80090be:	2100      	movs	r1, #0
 80090c0:	2010      	movs	r0, #16
 80090c2:	f000 f823 	bl	800910c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80090c6:	2300      	movs	r3, #0
 80090c8:	71bb      	strb	r3, [r7, #6]
 80090ca:	e00d      	b.n	80090e8 <OLED_Refresh_Gram+0x4c>
 80090cc:	79ba      	ldrb	r2, [r7, #6]
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	490d      	ldr	r1, [pc, #52]	; (8009108 <OLED_Refresh_Gram+0x6c>)
 80090d2:	00d2      	lsls	r2, r2, #3
 80090d4:	440a      	add	r2, r1
 80090d6:	4413      	add	r3, r2
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	2101      	movs	r1, #1
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f815 	bl	800910c <OLED_WR_Byte>
 80090e2:	79bb      	ldrb	r3, [r7, #6]
 80090e4:	3301      	adds	r3, #1
 80090e6:	71bb      	strb	r3, [r7, #6]
 80090e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	daed      	bge.n	80090cc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	3301      	adds	r3, #1
 80090f4:	71fb      	strb	r3, [r7, #7]
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b07      	cmp	r3, #7
 80090fa:	d9d5      	bls.n	80090a8 <OLED_Refresh_Gram+0xc>
	}   
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20004d58 	.word	0x20004d58

0800910c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	460a      	mov	r2, r1
 8009116:	71fb      	strb	r3, [r7, #7]
 8009118:	4613      	mov	r3, r2
 800911a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800911c:	79bb      	ldrb	r3, [r7, #6]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d006      	beq.n	8009130 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8009122:	2201      	movs	r2, #1
 8009124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009128:	481c      	ldr	r0, [pc, #112]	; (800919c <OLED_WR_Byte+0x90>)
 800912a:	f7f9 f9fb 	bl	8002524 <HAL_GPIO_WritePin>
 800912e:	e005      	b.n	800913c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8009130:	2200      	movs	r2, #0
 8009132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009136:	4819      	ldr	r0, [pc, #100]	; (800919c <OLED_WR_Byte+0x90>)
 8009138:	f7f9 f9f4 	bl	8002524 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
 8009140:	e01e      	b.n	8009180 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8009142:	2200      	movs	r2, #0
 8009144:	2120      	movs	r1, #32
 8009146:	4815      	ldr	r0, [pc, #84]	; (800919c <OLED_WR_Byte+0x90>)
 8009148:	f7f9 f9ec 	bl	8002524 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800914c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009150:	2b00      	cmp	r3, #0
 8009152:	da05      	bge.n	8009160 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8009154:	2201      	movs	r2, #1
 8009156:	2140      	movs	r1, #64	; 0x40
 8009158:	4810      	ldr	r0, [pc, #64]	; (800919c <OLED_WR_Byte+0x90>)
 800915a:	f7f9 f9e3 	bl	8002524 <HAL_GPIO_WritePin>
 800915e:	e004      	b.n	800916a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8009160:	2200      	movs	r2, #0
 8009162:	2140      	movs	r1, #64	; 0x40
 8009164:	480d      	ldr	r0, [pc, #52]	; (800919c <OLED_WR_Byte+0x90>)
 8009166:	f7f9 f9dd 	bl	8002524 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800916a:	2201      	movs	r2, #1
 800916c:	2120      	movs	r1, #32
 800916e:	480b      	ldr	r0, [pc, #44]	; (800919c <OLED_WR_Byte+0x90>)
 8009170:	f7f9 f9d8 	bl	8002524 <HAL_GPIO_WritePin>
		dat<<=1;   
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	3301      	adds	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	2b07      	cmp	r3, #7
 8009184:	d9dd      	bls.n	8009142 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8009186:	2201      	movs	r2, #1
 8009188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800918c:	4803      	ldr	r0, [pc, #12]	; (800919c <OLED_WR_Byte+0x90>)
 800918e:	f7f9 f9c9 	bl	8002524 <HAL_GPIO_WritePin>
} 
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	40021000 	.word	0x40021000

080091a0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80091a6:	2300      	movs	r3, #0
 80091a8:	71fb      	strb	r3, [r7, #7]
 80091aa:	e014      	b.n	80091d6 <OLED_Clear+0x36>
 80091ac:	2300      	movs	r3, #0
 80091ae:	71bb      	strb	r3, [r7, #6]
 80091b0:	e00a      	b.n	80091c8 <OLED_Clear+0x28>
 80091b2:	79ba      	ldrb	r2, [r7, #6]
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	490c      	ldr	r1, [pc, #48]	; (80091e8 <OLED_Clear+0x48>)
 80091b8:	00d2      	lsls	r2, r2, #3
 80091ba:	440a      	add	r2, r1
 80091bc:	4413      	add	r3, r2
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	79bb      	ldrb	r3, [r7, #6]
 80091c4:	3301      	adds	r3, #1
 80091c6:	71bb      	strb	r3, [r7, #6]
 80091c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	daf0      	bge.n	80091b2 <OLED_Clear+0x12>
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	3301      	adds	r3, #1
 80091d4:	71fb      	strb	r3, [r7, #7]
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	2b07      	cmp	r3, #7
 80091da:	d9e7      	bls.n	80091ac <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80091dc:	f7ff ff5e 	bl	800909c <OLED_Refresh_Gram>
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20004d58 	.word	0x20004d58

080091ec <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	71fb      	strb	r3, [r7, #7]
 80091f6:	460b      	mov	r3, r1
 80091f8:	71bb      	strb	r3, [r7, #6]
 80091fa:	4613      	mov	r3, r2
 80091fc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8009202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	db41      	blt.n	800928e <OLED_DrawPoint+0xa2>
 800920a:	79bb      	ldrb	r3, [r7, #6]
 800920c:	2b3f      	cmp	r3, #63	; 0x3f
 800920e:	d83e      	bhi.n	800928e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8009210:	79bb      	ldrb	r3, [r7, #6]
 8009212:	08db      	lsrs	r3, r3, #3
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f1c3 0307 	rsb	r3, r3, #7
 800921a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800921c:	79bb      	ldrb	r3, [r7, #6]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8009224:	7b7b      	ldrb	r3, [r7, #13]
 8009226:	f1c3 0307 	rsb	r3, r3, #7
 800922a:	2201      	movs	r2, #1
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8009232:	797b      	ldrb	r3, [r7, #5]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d012      	beq.n	800925e <OLED_DrawPoint+0x72>
 8009238:	79fa      	ldrb	r2, [r7, #7]
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	4917      	ldr	r1, [pc, #92]	; (800929c <OLED_DrawPoint+0xb0>)
 800923e:	00d2      	lsls	r2, r2, #3
 8009240:	440a      	add	r2, r1
 8009242:	4413      	add	r3, r2
 8009244:	7818      	ldrb	r0, [r3, #0]
 8009246:	79fa      	ldrb	r2, [r7, #7]
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	7bf9      	ldrb	r1, [r7, #15]
 800924c:	4301      	orrs	r1, r0
 800924e:	b2c8      	uxtb	r0, r1
 8009250:	4912      	ldr	r1, [pc, #72]	; (800929c <OLED_DrawPoint+0xb0>)
 8009252:	00d2      	lsls	r2, r2, #3
 8009254:	440a      	add	r2, r1
 8009256:	4413      	add	r3, r2
 8009258:	4602      	mov	r2, r0
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	e018      	b.n	8009290 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800925e:	79fa      	ldrb	r2, [r7, #7]
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	490e      	ldr	r1, [pc, #56]	; (800929c <OLED_DrawPoint+0xb0>)
 8009264:	00d2      	lsls	r2, r2, #3
 8009266:	440a      	add	r2, r1
 8009268:	4413      	add	r3, r2
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b25a      	sxtb	r2, r3
 800926e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009272:	43db      	mvns	r3, r3
 8009274:	b25b      	sxtb	r3, r3
 8009276:	4013      	ands	r3, r2
 8009278:	b259      	sxtb	r1, r3
 800927a:	79fa      	ldrb	r2, [r7, #7]
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	b2c8      	uxtb	r0, r1
 8009280:	4906      	ldr	r1, [pc, #24]	; (800929c <OLED_DrawPoint+0xb0>)
 8009282:	00d2      	lsls	r2, r2, #3
 8009284:	440a      	add	r2, r1
 8009286:	4413      	add	r3, r2
 8009288:	4602      	mov	r2, r0
 800928a:	701a      	strb	r2, [r3, #0]
 800928c:	e000      	b.n	8009290 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800928e:	bf00      	nop
}
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	20004d58 	.word	0x20004d58

080092a0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	461a      	mov	r2, r3
 80092ae:	4623      	mov	r3, r4
 80092b0:	71fb      	strb	r3, [r7, #7]
 80092b2:	4603      	mov	r3, r0
 80092b4:	71bb      	strb	r3, [r7, #6]
 80092b6:	460b      	mov	r3, r1
 80092b8:	717b      	strb	r3, [r7, #5]
 80092ba:	4613      	mov	r3, r2
 80092bc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80092be:	79bb      	ldrb	r3, [r7, #6]
 80092c0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80092c2:	797b      	ldrb	r3, [r7, #5]
 80092c4:	3b20      	subs	r3, #32
 80092c6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]
 80092cc:	e04d      	b.n	800936a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80092ce:	793b      	ldrb	r3, [r7, #4]
 80092d0:	2b0c      	cmp	r3, #12
 80092d2:	d10b      	bne.n	80092ec <OLED_ShowChar+0x4c>
 80092d4:	797a      	ldrb	r2, [r7, #5]
 80092d6:	7bb9      	ldrb	r1, [r7, #14]
 80092d8:	4828      	ldr	r0, [pc, #160]	; (800937c <OLED_ShowChar+0xdc>)
 80092da:	4613      	mov	r3, r2
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	4413      	add	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4403      	add	r3, r0
 80092e4:	440b      	add	r3, r1
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	73fb      	strb	r3, [r7, #15]
 80092ea:	e007      	b.n	80092fc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80092ec:	797a      	ldrb	r2, [r7, #5]
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	4923      	ldr	r1, [pc, #140]	; (8009380 <OLED_ShowChar+0xe0>)
 80092f2:	0112      	lsls	r2, r2, #4
 80092f4:	440a      	add	r2, r1
 80092f6:	4413      	add	r3, r2
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80092fc:	2300      	movs	r3, #0
 80092fe:	737b      	strb	r3, [r7, #13]
 8009300:	e02d      	b.n	800935e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8009302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009306:	2b00      	cmp	r3, #0
 8009308:	da07      	bge.n	800931a <OLED_ShowChar+0x7a>
 800930a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800930e:	79b9      	ldrb	r1, [r7, #6]
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff ff6a 	bl	80091ec <OLED_DrawPoint>
 8009318:	e00c      	b.n	8009334 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800931a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bf0c      	ite	eq
 8009322:	2301      	moveq	r3, #1
 8009324:	2300      	movne	r3, #0
 8009326:	b2db      	uxtb	r3, r3
 8009328:	461a      	mov	r2, r3
 800932a:	79b9      	ldrb	r1, [r7, #6]
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff ff5c 	bl	80091ec <OLED_DrawPoint>
			temp<<=1;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	73fb      	strb	r3, [r7, #15]
			y++;
 800933a:	79bb      	ldrb	r3, [r7, #6]
 800933c:	3301      	adds	r3, #1
 800933e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8009340:	79ba      	ldrb	r2, [r7, #6]
 8009342:	7b3b      	ldrb	r3, [r7, #12]
 8009344:	1ad2      	subs	r2, r2, r3
 8009346:	793b      	ldrb	r3, [r7, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d105      	bne.n	8009358 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800934c:	7b3b      	ldrb	r3, [r7, #12]
 800934e:	71bb      	strb	r3, [r7, #6]
				x++;
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	3301      	adds	r3, #1
 8009354:	71fb      	strb	r3, [r7, #7]
				break;
 8009356:	e005      	b.n	8009364 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8009358:	7b7b      	ldrb	r3, [r7, #13]
 800935a:	3301      	adds	r3, #1
 800935c:	737b      	strb	r3, [r7, #13]
 800935e:	7b7b      	ldrb	r3, [r7, #13]
 8009360:	2b07      	cmp	r3, #7
 8009362:	d9ce      	bls.n	8009302 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8009364:	7bbb      	ldrb	r3, [r7, #14]
 8009366:	3301      	adds	r3, #1
 8009368:	73bb      	strb	r3, [r7, #14]
 800936a:	7bba      	ldrb	r2, [r7, #14]
 800936c:	793b      	ldrb	r3, [r7, #4]
 800936e:	429a      	cmp	r2, r3
 8009370:	d3ad      	bcc.n	80092ce <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	bd90      	pop	{r4, r7, pc}
 800937c:	0800a234 	.word	0x0800a234
 8009380:	0800a6a8 	.word	0x0800a6a8

08009384 <oled_pow>:

uint32_t oled_pow(uint8_t m,uint8_t n)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	460a      	mov	r2, r1
 800938e:	71fb      	strb	r3, [r7, #7]
 8009390:	4613      	mov	r3, r2
 8009392:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;	 
 8009394:	2301      	movs	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8009398:	e004      	b.n	80093a4 <oled_pow+0x20>
 800939a:	79fa      	ldrb	r2, [r7, #7]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	79bb      	ldrb	r3, [r7, #6]
 80093a6:	1e5a      	subs	r2, r3, #1
 80093a8:	71ba      	strb	r2, [r7, #6]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f5      	bne.n	800939a <oled_pow+0x16>
	return result;
 80093ae:	68fb      	ldr	r3, [r7, #12]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t size)
{         	
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b087      	sub	sp, #28
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	603a      	str	r2, [r7, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
 80093ca:	460b      	mov	r3, r1
 80093cc:	71bb      	strb	r3, [r7, #6]
 80093ce:	4613      	mov	r3, r2
 80093d0:	717b      	strb	r3, [r7, #5]
	uint8_t t,temp;
	uint8_t enshow=0;						   
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
 80093da:	e051      	b.n	8009480 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80093dc:	797a      	ldrb	r2, [r7, #5]
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	4619      	mov	r1, r3
 80093ea:	200a      	movs	r0, #10
 80093ec:	f7ff ffca 	bl	8009384 <oled_pow>
 80093f0:	4602      	mov	r2, r0
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093f8:	4b26      	ldr	r3, [pc, #152]	; (8009494 <OLED_ShowNumber+0xd8>)
 80093fa:	fba3 2301 	umull	r2, r3, r3, r1
 80093fe:	08da      	lsrs	r2, r3, #3
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	1aca      	subs	r2, r1, r3
 800940a:	4613      	mov	r3, r2
 800940c:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800940e:	7bbb      	ldrb	r3, [r7, #14]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11d      	bne.n	8009450 <OLED_ShowNumber+0x94>
 8009414:	7bfa      	ldrb	r2, [r7, #15]
 8009416:	797b      	ldrb	r3, [r7, #5]
 8009418:	3b01      	subs	r3, #1
 800941a:	429a      	cmp	r2, r3
 800941c:	da18      	bge.n	8009450 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 800941e:	7b7b      	ldrb	r3, [r7, #13]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d113      	bne.n	800944c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8009424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009428:	085b      	lsrs	r3, r3, #1
 800942a:	b2db      	uxtb	r3, r3
 800942c:	7bfa      	ldrb	r2, [r7, #15]
 800942e:	fb12 f303 	smulbb	r3, r2, r3
 8009432:	b2da      	uxtb	r2, r3
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	4413      	add	r3, r2
 8009438:	b2d8      	uxtb	r0, r3
 800943a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800943e:	79b9      	ldrb	r1, [r7, #6]
 8009440:	2201      	movs	r2, #1
 8009442:	9200      	str	r2, [sp, #0]
 8009444:	2220      	movs	r2, #32
 8009446:	f7ff ff2b 	bl	80092a0 <OLED_ShowChar>
				continue;
 800944a:	e016      	b.n	800947a <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 800944c:	2301      	movs	r3, #1
 800944e:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 8009450:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009454:	085b      	lsrs	r3, r3, #1
 8009456:	b2db      	uxtb	r3, r3
 8009458:	7bfa      	ldrb	r2, [r7, #15]
 800945a:	fb12 f303 	smulbb	r3, r2, r3
 800945e:	b2da      	uxtb	r2, r3
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	4413      	add	r3, r2
 8009464:	b2d8      	uxtb	r0, r3
 8009466:	7b7b      	ldrb	r3, [r7, #13]
 8009468:	3330      	adds	r3, #48	; 0x30
 800946a:	b2da      	uxtb	r2, r3
 800946c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009470:	79b9      	ldrb	r1, [r7, #6]
 8009472:	2401      	movs	r4, #1
 8009474:	9400      	str	r4, [sp, #0]
 8009476:	f7ff ff13 	bl	80092a0 <OLED_ShowChar>
	for(t=0;t<len;t++)
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	3301      	adds	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
 8009480:	7bfa      	ldrb	r2, [r7, #15]
 8009482:	797b      	ldrb	r3, [r7, #5]
 8009484:	429a      	cmp	r2, r3
 8009486:	d3a9      	bcc.n	80093dc <OLED_ShowNumber+0x20>
	}
} 
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	bd90      	pop	{r4, r7, pc}
 8009492:	bf00      	nop
 8009494:	cccccccd 	.word	0xcccccccd

08009498 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af02      	add	r7, sp, #8
 800949e:	4603      	mov	r3, r0
 80094a0:	603a      	str	r2, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
 80094a4:	460b      	mov	r3, r1
 80094a6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80094a8:	e01f      	b.n	80094ea <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	2b7a      	cmp	r3, #122	; 0x7a
 80094ae:	d904      	bls.n	80094ba <OLED_ShowString+0x22>
 80094b0:	2300      	movs	r3, #0
 80094b2:	71fb      	strb	r3, [r7, #7]
 80094b4:	79bb      	ldrb	r3, [r7, #6]
 80094b6:	3310      	adds	r3, #16
 80094b8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80094ba:	79bb      	ldrb	r3, [r7, #6]
 80094bc:	2b3a      	cmp	r3, #58	; 0x3a
 80094be:	d905      	bls.n	80094cc <OLED_ShowString+0x34>
 80094c0:	2300      	movs	r3, #0
 80094c2:	71fb      	strb	r3, [r7, #7]
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	71bb      	strb	r3, [r7, #6]
 80094c8:	f7ff fe6a 	bl	80091a0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	79b9      	ldrb	r1, [r7, #6]
 80094d2:	79f8      	ldrb	r0, [r7, #7]
 80094d4:	2301      	movs	r3, #1
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	230c      	movs	r3, #12
 80094da:	f7ff fee1 	bl	80092a0 <OLED_ShowChar>
        x+=8;
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	3308      	adds	r3, #8
 80094e2:	71fb      	strb	r3, [r7, #7]
        p++;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1db      	bne.n	80094aa <OLED_ShowString+0x12>
    }  
}	 
 80094f2:	bf00      	nop
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <OLED_Init>:

void OLED_Init(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8009500:	f7f9 ffea 	bl	80034d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009504:	4b41      	ldr	r3, [pc, #260]	; (800960c <OLED_Init+0x110>)
 8009506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009508:	4a40      	ldr	r2, [pc, #256]	; (800960c <OLED_Init+0x110>)
 800950a:	f023 0301 	bic.w	r3, r3, #1
 800950e:	6713      	str	r3, [r2, #112]	; 0x70
 8009510:	4b3e      	ldr	r3, [pc, #248]	; (800960c <OLED_Init+0x110>)
 8009512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009514:	4a3d      	ldr	r2, [pc, #244]	; (800960c <OLED_Init+0x110>)
 8009516:	f023 0304 	bic.w	r3, r3, #4
 800951a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800951c:	f7f9 fff0 	bl	8003500 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8009520:	2200      	movs	r2, #0
 8009522:	2180      	movs	r1, #128	; 0x80
 8009524:	483a      	ldr	r0, [pc, #232]	; (8009610 <OLED_Init+0x114>)
 8009526:	f7f8 fffd 	bl	8002524 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800952a:	2064      	movs	r0, #100	; 0x64
 800952c:	f7f8 fcc6 	bl	8001ebc <HAL_Delay>
	OLED_RST_Set();
 8009530:	2201      	movs	r2, #1
 8009532:	2180      	movs	r1, #128	; 0x80
 8009534:	4836      	ldr	r0, [pc, #216]	; (8009610 <OLED_Init+0x114>)
 8009536:	f7f8 fff5 	bl	8002524 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800953a:	2100      	movs	r1, #0
 800953c:	20ae      	movs	r0, #174	; 0xae
 800953e:	f7ff fde5 	bl	800910c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8009542:	2100      	movs	r1, #0
 8009544:	20d5      	movs	r0, #213	; 0xd5
 8009546:	f7ff fde1 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800954a:	2100      	movs	r1, #0
 800954c:	2050      	movs	r0, #80	; 0x50
 800954e:	f7ff fddd 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8009552:	2100      	movs	r1, #0
 8009554:	20a8      	movs	r0, #168	; 0xa8
 8009556:	f7ff fdd9 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800955a:	2100      	movs	r1, #0
 800955c:	203f      	movs	r0, #63	; 0x3f
 800955e:	f7ff fdd5 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8009562:	2100      	movs	r1, #0
 8009564:	20d3      	movs	r0, #211	; 0xd3
 8009566:	f7ff fdd1 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800956a:	2100      	movs	r1, #0
 800956c:	2000      	movs	r0, #0
 800956e:	f7ff fdcd 	bl	800910c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8009572:	2100      	movs	r1, #0
 8009574:	2040      	movs	r0, #64	; 0x40
 8009576:	f7ff fdc9 	bl	800910c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800957a:	2100      	movs	r1, #0
 800957c:	208d      	movs	r0, #141	; 0x8d
 800957e:	f7ff fdc5 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8009582:	2100      	movs	r1, #0
 8009584:	2014      	movs	r0, #20
 8009586:	f7ff fdc1 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800958a:	2100      	movs	r1, #0
 800958c:	2020      	movs	r0, #32
 800958e:	f7ff fdbd 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8009592:	2100      	movs	r1, #0
 8009594:	2002      	movs	r0, #2
 8009596:	f7ff fdb9 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800959a:	2100      	movs	r1, #0
 800959c:	20a1      	movs	r0, #161	; 0xa1
 800959e:	f7ff fdb5 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80095a2:	2100      	movs	r1, #0
 80095a4:	20c0      	movs	r0, #192	; 0xc0
 80095a6:	f7ff fdb1 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80095aa:	2100      	movs	r1, #0
 80095ac:	20da      	movs	r0, #218	; 0xda
 80095ae:	f7ff fdad 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80095b2:	2100      	movs	r1, #0
 80095b4:	2012      	movs	r0, #18
 80095b6:	f7ff fda9 	bl	800910c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80095ba:	2100      	movs	r1, #0
 80095bc:	2081      	movs	r0, #129	; 0x81
 80095be:	f7ff fda5 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80095c2:	2100      	movs	r1, #0
 80095c4:	20ef      	movs	r0, #239	; 0xef
 80095c6:	f7ff fda1 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80095ca:	2100      	movs	r1, #0
 80095cc:	20d9      	movs	r0, #217	; 0xd9
 80095ce:	f7ff fd9d 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80095d2:	2100      	movs	r1, #0
 80095d4:	20f1      	movs	r0, #241	; 0xf1
 80095d6:	f7ff fd99 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80095da:	2100      	movs	r1, #0
 80095dc:	20db      	movs	r0, #219	; 0xdb
 80095de:	f7ff fd95 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80095e2:	2100      	movs	r1, #0
 80095e4:	2030      	movs	r0, #48	; 0x30
 80095e6:	f7ff fd91 	bl	800910c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80095ea:	2100      	movs	r1, #0
 80095ec:	20a4      	movs	r0, #164	; 0xa4
 80095ee:	f7ff fd8d 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80095f2:	2100      	movs	r1, #0
 80095f4:	20a6      	movs	r0, #166	; 0xa6
 80095f6:	f7ff fd89 	bl	800910c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80095fa:	2100      	movs	r1, #0
 80095fc:	20af      	movs	r0, #175	; 0xaf
 80095fe:	f7ff fd85 	bl	800910c <OLED_WR_Byte>
	OLED_Clear(); 
 8009602:	f7ff fdcd 	bl	80091a0 <OLED_Clear>
 8009606:	bf00      	nop
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	40023800 	.word	0x40023800
 8009610:	40021000 	.word	0x40021000

08009614 <sniprintf>:
 8009614:	b40c      	push	{r2, r3}
 8009616:	b530      	push	{r4, r5, lr}
 8009618:	4b17      	ldr	r3, [pc, #92]	; (8009678 <sniprintf+0x64>)
 800961a:	1e0c      	subs	r4, r1, #0
 800961c:	681d      	ldr	r5, [r3, #0]
 800961e:	b09d      	sub	sp, #116	; 0x74
 8009620:	da08      	bge.n	8009634 <sniprintf+0x20>
 8009622:	238b      	movs	r3, #139	; 0x8b
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800962a:	b01d      	add	sp, #116	; 0x74
 800962c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009630:	b002      	add	sp, #8
 8009632:	4770      	bx	lr
 8009634:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009638:	f8ad 3014 	strh.w	r3, [sp, #20]
 800963c:	bf14      	ite	ne
 800963e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009642:	4623      	moveq	r3, r4
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800964c:	9002      	str	r0, [sp, #8]
 800964e:	9006      	str	r0, [sp, #24]
 8009650:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009656:	ab21      	add	r3, sp, #132	; 0x84
 8009658:	a902      	add	r1, sp, #8
 800965a:	4628      	mov	r0, r5
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	f000 f8c9 	bl	80097f4 <_svfiprintf_r>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	bfbc      	itt	lt
 8009666:	238b      	movlt	r3, #139	; 0x8b
 8009668:	602b      	strlt	r3, [r5, #0]
 800966a:	2c00      	cmp	r4, #0
 800966c:	d0dd      	beq.n	800962a <sniprintf+0x16>
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	e7d9      	b.n	800962a <sniprintf+0x16>
 8009676:	bf00      	nop
 8009678:	20000198 	.word	0x20000198

0800967c <siprintf>:
 800967c:	b40e      	push	{r1, r2, r3}
 800967e:	b500      	push	{lr}
 8009680:	b09c      	sub	sp, #112	; 0x70
 8009682:	ab1d      	add	r3, sp, #116	; 0x74
 8009684:	9002      	str	r0, [sp, #8]
 8009686:	9006      	str	r0, [sp, #24]
 8009688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800968c:	4809      	ldr	r0, [pc, #36]	; (80096b4 <siprintf+0x38>)
 800968e:	9107      	str	r1, [sp, #28]
 8009690:	9104      	str	r1, [sp, #16]
 8009692:	4909      	ldr	r1, [pc, #36]	; (80096b8 <siprintf+0x3c>)
 8009694:	f853 2b04 	ldr.w	r2, [r3], #4
 8009698:	9105      	str	r1, [sp, #20]
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	a902      	add	r1, sp, #8
 80096a0:	f000 f8a8 	bl	80097f4 <_svfiprintf_r>
 80096a4:	9b02      	ldr	r3, [sp, #8]
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	b01c      	add	sp, #112	; 0x70
 80096ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b0:	b003      	add	sp, #12
 80096b2:	4770      	bx	lr
 80096b4:	20000198 	.word	0x20000198
 80096b8:	ffff0208 	.word	0xffff0208

080096bc <memset>:
 80096bc:	4402      	add	r2, r0
 80096be:	4603      	mov	r3, r0
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d100      	bne.n	80096c6 <memset+0xa>
 80096c4:	4770      	bx	lr
 80096c6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ca:	e7f9      	b.n	80096c0 <memset+0x4>

080096cc <__errno>:
 80096cc:	4b01      	ldr	r3, [pc, #4]	; (80096d4 <__errno+0x8>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20000198 	.word	0x20000198

080096d8 <__libc_init_array>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4d0d      	ldr	r5, [pc, #52]	; (8009710 <__libc_init_array+0x38>)
 80096dc:	4c0d      	ldr	r4, [pc, #52]	; (8009714 <__libc_init_array+0x3c>)
 80096de:	1b64      	subs	r4, r4, r5
 80096e0:	10a4      	asrs	r4, r4, #2
 80096e2:	2600      	movs	r6, #0
 80096e4:	42a6      	cmp	r6, r4
 80096e6:	d109      	bne.n	80096fc <__libc_init_array+0x24>
 80096e8:	4d0b      	ldr	r5, [pc, #44]	; (8009718 <__libc_init_array+0x40>)
 80096ea:	4c0c      	ldr	r4, [pc, #48]	; (800971c <__libc_init_array+0x44>)
 80096ec:	f000 fc6a 	bl	8009fc4 <_init>
 80096f0:	1b64      	subs	r4, r4, r5
 80096f2:	10a4      	asrs	r4, r4, #2
 80096f4:	2600      	movs	r6, #0
 80096f6:	42a6      	cmp	r6, r4
 80096f8:	d105      	bne.n	8009706 <__libc_init_array+0x2e>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009700:	4798      	blx	r3
 8009702:	3601      	adds	r6, #1
 8009704:	e7ee      	b.n	80096e4 <__libc_init_array+0xc>
 8009706:	f855 3b04 	ldr.w	r3, [r5], #4
 800970a:	4798      	blx	r3
 800970c:	3601      	adds	r6, #1
 800970e:	e7f2      	b.n	80096f6 <__libc_init_array+0x1e>
 8009710:	0800acd4 	.word	0x0800acd4
 8009714:	0800acd4 	.word	0x0800acd4
 8009718:	0800acd4 	.word	0x0800acd4
 800971c:	0800acd8 	.word	0x0800acd8

08009720 <__retarget_lock_acquire_recursive>:
 8009720:	4770      	bx	lr

08009722 <__retarget_lock_release_recursive>:
 8009722:	4770      	bx	lr

08009724 <memcpy>:
 8009724:	440a      	add	r2, r1
 8009726:	4291      	cmp	r1, r2
 8009728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800972c:	d100      	bne.n	8009730 <memcpy+0xc>
 800972e:	4770      	bx	lr
 8009730:	b510      	push	{r4, lr}
 8009732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800973a:	4291      	cmp	r1, r2
 800973c:	d1f9      	bne.n	8009732 <memcpy+0xe>
 800973e:	bd10      	pop	{r4, pc}

08009740 <__ssputs_r>:
 8009740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009744:	688e      	ldr	r6, [r1, #8]
 8009746:	461f      	mov	r7, r3
 8009748:	42be      	cmp	r6, r7
 800974a:	680b      	ldr	r3, [r1, #0]
 800974c:	4682      	mov	sl, r0
 800974e:	460c      	mov	r4, r1
 8009750:	4690      	mov	r8, r2
 8009752:	d82c      	bhi.n	80097ae <__ssputs_r+0x6e>
 8009754:	898a      	ldrh	r2, [r1, #12]
 8009756:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800975a:	d026      	beq.n	80097aa <__ssputs_r+0x6a>
 800975c:	6965      	ldr	r5, [r4, #20]
 800975e:	6909      	ldr	r1, [r1, #16]
 8009760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009764:	eba3 0901 	sub.w	r9, r3, r1
 8009768:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800976c:	1c7b      	adds	r3, r7, #1
 800976e:	444b      	add	r3, r9
 8009770:	106d      	asrs	r5, r5, #1
 8009772:	429d      	cmp	r5, r3
 8009774:	bf38      	it	cc
 8009776:	461d      	movcc	r5, r3
 8009778:	0553      	lsls	r3, r2, #21
 800977a:	d527      	bpl.n	80097cc <__ssputs_r+0x8c>
 800977c:	4629      	mov	r1, r5
 800977e:	f000 f957 	bl	8009a30 <_malloc_r>
 8009782:	4606      	mov	r6, r0
 8009784:	b360      	cbz	r0, 80097e0 <__ssputs_r+0xa0>
 8009786:	6921      	ldr	r1, [r4, #16]
 8009788:	464a      	mov	r2, r9
 800978a:	f7ff ffcb 	bl	8009724 <memcpy>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	6126      	str	r6, [r4, #16]
 800979c:	6165      	str	r5, [r4, #20]
 800979e:	444e      	add	r6, r9
 80097a0:	eba5 0509 	sub.w	r5, r5, r9
 80097a4:	6026      	str	r6, [r4, #0]
 80097a6:	60a5      	str	r5, [r4, #8]
 80097a8:	463e      	mov	r6, r7
 80097aa:	42be      	cmp	r6, r7
 80097ac:	d900      	bls.n	80097b0 <__ssputs_r+0x70>
 80097ae:	463e      	mov	r6, r7
 80097b0:	6820      	ldr	r0, [r4, #0]
 80097b2:	4632      	mov	r2, r6
 80097b4:	4641      	mov	r1, r8
 80097b6:	f000 fb86 	bl	8009ec6 <memmove>
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	1b9b      	subs	r3, r3, r6
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	4433      	add	r3, r6
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	2000      	movs	r0, #0
 80097c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097cc:	462a      	mov	r2, r5
 80097ce:	f000 fb4b 	bl	8009e68 <_realloc_r>
 80097d2:	4606      	mov	r6, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1e0      	bne.n	800979a <__ssputs_r+0x5a>
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	4650      	mov	r0, sl
 80097dc:	f000 fb9e 	bl	8009f1c <_free_r>
 80097e0:	230c      	movs	r3, #12
 80097e2:	f8ca 3000 	str.w	r3, [sl]
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f2:	e7e9      	b.n	80097c8 <__ssputs_r+0x88>

080097f4 <_svfiprintf_r>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	4698      	mov	r8, r3
 80097fa:	898b      	ldrh	r3, [r1, #12]
 80097fc:	061b      	lsls	r3, r3, #24
 80097fe:	b09d      	sub	sp, #116	; 0x74
 8009800:	4607      	mov	r7, r0
 8009802:	460d      	mov	r5, r1
 8009804:	4614      	mov	r4, r2
 8009806:	d50e      	bpl.n	8009826 <_svfiprintf_r+0x32>
 8009808:	690b      	ldr	r3, [r1, #16]
 800980a:	b963      	cbnz	r3, 8009826 <_svfiprintf_r+0x32>
 800980c:	2140      	movs	r1, #64	; 0x40
 800980e:	f000 f90f 	bl	8009a30 <_malloc_r>
 8009812:	6028      	str	r0, [r5, #0]
 8009814:	6128      	str	r0, [r5, #16]
 8009816:	b920      	cbnz	r0, 8009822 <_svfiprintf_r+0x2e>
 8009818:	230c      	movs	r3, #12
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009820:	e0d0      	b.n	80099c4 <_svfiprintf_r+0x1d0>
 8009822:	2340      	movs	r3, #64	; 0x40
 8009824:	616b      	str	r3, [r5, #20]
 8009826:	2300      	movs	r3, #0
 8009828:	9309      	str	r3, [sp, #36]	; 0x24
 800982a:	2320      	movs	r3, #32
 800982c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009830:	f8cd 800c 	str.w	r8, [sp, #12]
 8009834:	2330      	movs	r3, #48	; 0x30
 8009836:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099dc <_svfiprintf_r+0x1e8>
 800983a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800983e:	f04f 0901 	mov.w	r9, #1
 8009842:	4623      	mov	r3, r4
 8009844:	469a      	mov	sl, r3
 8009846:	f813 2b01 	ldrb.w	r2, [r3], #1
 800984a:	b10a      	cbz	r2, 8009850 <_svfiprintf_r+0x5c>
 800984c:	2a25      	cmp	r2, #37	; 0x25
 800984e:	d1f9      	bne.n	8009844 <_svfiprintf_r+0x50>
 8009850:	ebba 0b04 	subs.w	fp, sl, r4
 8009854:	d00b      	beq.n	800986e <_svfiprintf_r+0x7a>
 8009856:	465b      	mov	r3, fp
 8009858:	4622      	mov	r2, r4
 800985a:	4629      	mov	r1, r5
 800985c:	4638      	mov	r0, r7
 800985e:	f7ff ff6f 	bl	8009740 <__ssputs_r>
 8009862:	3001      	adds	r0, #1
 8009864:	f000 80a9 	beq.w	80099ba <_svfiprintf_r+0x1c6>
 8009868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800986a:	445a      	add	r2, fp
 800986c:	9209      	str	r2, [sp, #36]	; 0x24
 800986e:	f89a 3000 	ldrb.w	r3, [sl]
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80a1 	beq.w	80099ba <_svfiprintf_r+0x1c6>
 8009878:	2300      	movs	r3, #0
 800987a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800987e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009882:	f10a 0a01 	add.w	sl, sl, #1
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	9307      	str	r3, [sp, #28]
 800988a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800988e:	931a      	str	r3, [sp, #104]	; 0x68
 8009890:	4654      	mov	r4, sl
 8009892:	2205      	movs	r2, #5
 8009894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009898:	4850      	ldr	r0, [pc, #320]	; (80099dc <_svfiprintf_r+0x1e8>)
 800989a:	f7f6 fc99 	bl	80001d0 <memchr>
 800989e:	9a04      	ldr	r2, [sp, #16]
 80098a0:	b9d8      	cbnz	r0, 80098da <_svfiprintf_r+0xe6>
 80098a2:	06d0      	lsls	r0, r2, #27
 80098a4:	bf44      	itt	mi
 80098a6:	2320      	movmi	r3, #32
 80098a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ac:	0711      	lsls	r1, r2, #28
 80098ae:	bf44      	itt	mi
 80098b0:	232b      	movmi	r3, #43	; 0x2b
 80098b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b6:	f89a 3000 	ldrb.w	r3, [sl]
 80098ba:	2b2a      	cmp	r3, #42	; 0x2a
 80098bc:	d015      	beq.n	80098ea <_svfiprintf_r+0xf6>
 80098be:	9a07      	ldr	r2, [sp, #28]
 80098c0:	4654      	mov	r4, sl
 80098c2:	2000      	movs	r0, #0
 80098c4:	f04f 0c0a 	mov.w	ip, #10
 80098c8:	4621      	mov	r1, r4
 80098ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ce:	3b30      	subs	r3, #48	; 0x30
 80098d0:	2b09      	cmp	r3, #9
 80098d2:	d94d      	bls.n	8009970 <_svfiprintf_r+0x17c>
 80098d4:	b1b0      	cbz	r0, 8009904 <_svfiprintf_r+0x110>
 80098d6:	9207      	str	r2, [sp, #28]
 80098d8:	e014      	b.n	8009904 <_svfiprintf_r+0x110>
 80098da:	eba0 0308 	sub.w	r3, r0, r8
 80098de:	fa09 f303 	lsl.w	r3, r9, r3
 80098e2:	4313      	orrs	r3, r2
 80098e4:	9304      	str	r3, [sp, #16]
 80098e6:	46a2      	mov	sl, r4
 80098e8:	e7d2      	b.n	8009890 <_svfiprintf_r+0x9c>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	1d19      	adds	r1, r3, #4
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	9103      	str	r1, [sp, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	bfbb      	ittet	lt
 80098f6:	425b      	neglt	r3, r3
 80098f8:	f042 0202 	orrlt.w	r2, r2, #2
 80098fc:	9307      	strge	r3, [sp, #28]
 80098fe:	9307      	strlt	r3, [sp, #28]
 8009900:	bfb8      	it	lt
 8009902:	9204      	strlt	r2, [sp, #16]
 8009904:	7823      	ldrb	r3, [r4, #0]
 8009906:	2b2e      	cmp	r3, #46	; 0x2e
 8009908:	d10c      	bne.n	8009924 <_svfiprintf_r+0x130>
 800990a:	7863      	ldrb	r3, [r4, #1]
 800990c:	2b2a      	cmp	r3, #42	; 0x2a
 800990e:	d134      	bne.n	800997a <_svfiprintf_r+0x186>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	1d1a      	adds	r2, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	9203      	str	r2, [sp, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfb8      	it	lt
 800991c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009920:	3402      	adds	r4, #2
 8009922:	9305      	str	r3, [sp, #20]
 8009924:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099ec <_svfiprintf_r+0x1f8>
 8009928:	7821      	ldrb	r1, [r4, #0]
 800992a:	2203      	movs	r2, #3
 800992c:	4650      	mov	r0, sl
 800992e:	f7f6 fc4f 	bl	80001d0 <memchr>
 8009932:	b138      	cbz	r0, 8009944 <_svfiprintf_r+0x150>
 8009934:	9b04      	ldr	r3, [sp, #16]
 8009936:	eba0 000a 	sub.w	r0, r0, sl
 800993a:	2240      	movs	r2, #64	; 0x40
 800993c:	4082      	lsls	r2, r0
 800993e:	4313      	orrs	r3, r2
 8009940:	3401      	adds	r4, #1
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	4825      	ldr	r0, [pc, #148]	; (80099e0 <_svfiprintf_r+0x1ec>)
 800994a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800994e:	2206      	movs	r2, #6
 8009950:	f7f6 fc3e 	bl	80001d0 <memchr>
 8009954:	2800      	cmp	r0, #0
 8009956:	d038      	beq.n	80099ca <_svfiprintf_r+0x1d6>
 8009958:	4b22      	ldr	r3, [pc, #136]	; (80099e4 <_svfiprintf_r+0x1f0>)
 800995a:	bb1b      	cbnz	r3, 80099a4 <_svfiprintf_r+0x1b0>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	3307      	adds	r3, #7
 8009960:	f023 0307 	bic.w	r3, r3, #7
 8009964:	3308      	adds	r3, #8
 8009966:	9303      	str	r3, [sp, #12]
 8009968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996a:	4433      	add	r3, r6
 800996c:	9309      	str	r3, [sp, #36]	; 0x24
 800996e:	e768      	b.n	8009842 <_svfiprintf_r+0x4e>
 8009970:	fb0c 3202 	mla	r2, ip, r2, r3
 8009974:	460c      	mov	r4, r1
 8009976:	2001      	movs	r0, #1
 8009978:	e7a6      	b.n	80098c8 <_svfiprintf_r+0xd4>
 800997a:	2300      	movs	r3, #0
 800997c:	3401      	adds	r4, #1
 800997e:	9305      	str	r3, [sp, #20]
 8009980:	4619      	mov	r1, r3
 8009982:	f04f 0c0a 	mov.w	ip, #10
 8009986:	4620      	mov	r0, r4
 8009988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800998c:	3a30      	subs	r2, #48	; 0x30
 800998e:	2a09      	cmp	r2, #9
 8009990:	d903      	bls.n	800999a <_svfiprintf_r+0x1a6>
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0c6      	beq.n	8009924 <_svfiprintf_r+0x130>
 8009996:	9105      	str	r1, [sp, #20]
 8009998:	e7c4      	b.n	8009924 <_svfiprintf_r+0x130>
 800999a:	fb0c 2101 	mla	r1, ip, r1, r2
 800999e:	4604      	mov	r4, r0
 80099a0:	2301      	movs	r3, #1
 80099a2:	e7f0      	b.n	8009986 <_svfiprintf_r+0x192>
 80099a4:	ab03      	add	r3, sp, #12
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4b0f      	ldr	r3, [pc, #60]	; (80099e8 <_svfiprintf_r+0x1f4>)
 80099ac:	a904      	add	r1, sp, #16
 80099ae:	4638      	mov	r0, r7
 80099b0:	f3af 8000 	nop.w
 80099b4:	1c42      	adds	r2, r0, #1
 80099b6:	4606      	mov	r6, r0
 80099b8:	d1d6      	bne.n	8009968 <_svfiprintf_r+0x174>
 80099ba:	89ab      	ldrh	r3, [r5, #12]
 80099bc:	065b      	lsls	r3, r3, #25
 80099be:	f53f af2d 	bmi.w	800981c <_svfiprintf_r+0x28>
 80099c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099c4:	b01d      	add	sp, #116	; 0x74
 80099c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	462a      	mov	r2, r5
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <_svfiprintf_r+0x1f4>)
 80099d2:	a904      	add	r1, sp, #16
 80099d4:	4638      	mov	r0, r7
 80099d6:	f000 f919 	bl	8009c0c <_printf_i>
 80099da:	e7eb      	b.n	80099b4 <_svfiprintf_r+0x1c0>
 80099dc:	0800ac98 	.word	0x0800ac98
 80099e0:	0800aca2 	.word	0x0800aca2
 80099e4:	00000000 	.word	0x00000000
 80099e8:	08009741 	.word	0x08009741
 80099ec:	0800ac9e 	.word	0x0800ac9e

080099f0 <sbrk_aligned>:
 80099f0:	b570      	push	{r4, r5, r6, lr}
 80099f2:	4e0e      	ldr	r6, [pc, #56]	; (8009a2c <sbrk_aligned+0x3c>)
 80099f4:	460c      	mov	r4, r1
 80099f6:	6831      	ldr	r1, [r6, #0]
 80099f8:	4605      	mov	r5, r0
 80099fa:	b911      	cbnz	r1, 8009a02 <sbrk_aligned+0x12>
 80099fc:	f000 fa7e 	bl	8009efc <_sbrk_r>
 8009a00:	6030      	str	r0, [r6, #0]
 8009a02:	4621      	mov	r1, r4
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 fa79 	bl	8009efc <_sbrk_r>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d00a      	beq.n	8009a24 <sbrk_aligned+0x34>
 8009a0e:	1cc4      	adds	r4, r0, #3
 8009a10:	f024 0403 	bic.w	r4, r4, #3
 8009a14:	42a0      	cmp	r0, r4
 8009a16:	d007      	beq.n	8009a28 <sbrk_aligned+0x38>
 8009a18:	1a21      	subs	r1, r4, r0
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 fa6e 	bl	8009efc <_sbrk_r>
 8009a20:	3001      	adds	r0, #1
 8009a22:	d101      	bne.n	8009a28 <sbrk_aligned+0x38>
 8009a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	20005298 	.word	0x20005298

08009a30 <_malloc_r>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	1ccd      	adds	r5, r1, #3
 8009a36:	f025 0503 	bic.w	r5, r5, #3
 8009a3a:	3508      	adds	r5, #8
 8009a3c:	2d0c      	cmp	r5, #12
 8009a3e:	bf38      	it	cc
 8009a40:	250c      	movcc	r5, #12
 8009a42:	2d00      	cmp	r5, #0
 8009a44:	4607      	mov	r7, r0
 8009a46:	db01      	blt.n	8009a4c <_malloc_r+0x1c>
 8009a48:	42a9      	cmp	r1, r5
 8009a4a:	d905      	bls.n	8009a58 <_malloc_r+0x28>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	2600      	movs	r6, #0
 8009a52:	4630      	mov	r0, r6
 8009a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b2c <_malloc_r+0xfc>
 8009a5c:	f000 f9f8 	bl	8009e50 <__malloc_lock>
 8009a60:	f8d8 3000 	ldr.w	r3, [r8]
 8009a64:	461c      	mov	r4, r3
 8009a66:	bb5c      	cbnz	r4, 8009ac0 <_malloc_r+0x90>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f7ff ffc0 	bl	80099f0 <sbrk_aligned>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	4604      	mov	r4, r0
 8009a74:	d155      	bne.n	8009b22 <_malloc_r+0xf2>
 8009a76:	f8d8 4000 	ldr.w	r4, [r8]
 8009a7a:	4626      	mov	r6, r4
 8009a7c:	2e00      	cmp	r6, #0
 8009a7e:	d145      	bne.n	8009b0c <_malloc_r+0xdc>
 8009a80:	2c00      	cmp	r4, #0
 8009a82:	d048      	beq.n	8009b16 <_malloc_r+0xe6>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	4631      	mov	r1, r6
 8009a88:	4638      	mov	r0, r7
 8009a8a:	eb04 0903 	add.w	r9, r4, r3
 8009a8e:	f000 fa35 	bl	8009efc <_sbrk_r>
 8009a92:	4581      	cmp	r9, r0
 8009a94:	d13f      	bne.n	8009b16 <_malloc_r+0xe6>
 8009a96:	6821      	ldr	r1, [r4, #0]
 8009a98:	1a6d      	subs	r5, r5, r1
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f7ff ffa7 	bl	80099f0 <sbrk_aligned>
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d037      	beq.n	8009b16 <_malloc_r+0xe6>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	442b      	add	r3, r5
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d038      	beq.n	8009b26 <_malloc_r+0xf6>
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	42a2      	cmp	r2, r4
 8009ab8:	d12b      	bne.n	8009b12 <_malloc_r+0xe2>
 8009aba:	2200      	movs	r2, #0
 8009abc:	605a      	str	r2, [r3, #4]
 8009abe:	e00f      	b.n	8009ae0 <_malloc_r+0xb0>
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	1b52      	subs	r2, r2, r5
 8009ac4:	d41f      	bmi.n	8009b06 <_malloc_r+0xd6>
 8009ac6:	2a0b      	cmp	r2, #11
 8009ac8:	d917      	bls.n	8009afa <_malloc_r+0xca>
 8009aca:	1961      	adds	r1, r4, r5
 8009acc:	42a3      	cmp	r3, r4
 8009ace:	6025      	str	r5, [r4, #0]
 8009ad0:	bf18      	it	ne
 8009ad2:	6059      	strne	r1, [r3, #4]
 8009ad4:	6863      	ldr	r3, [r4, #4]
 8009ad6:	bf08      	it	eq
 8009ad8:	f8c8 1000 	streq.w	r1, [r8]
 8009adc:	5162      	str	r2, [r4, r5]
 8009ade:	604b      	str	r3, [r1, #4]
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f104 060b 	add.w	r6, r4, #11
 8009ae6:	f000 f9b9 	bl	8009e5c <__malloc_unlock>
 8009aea:	f026 0607 	bic.w	r6, r6, #7
 8009aee:	1d23      	adds	r3, r4, #4
 8009af0:	1af2      	subs	r2, r6, r3
 8009af2:	d0ae      	beq.n	8009a52 <_malloc_r+0x22>
 8009af4:	1b9b      	subs	r3, r3, r6
 8009af6:	50a3      	str	r3, [r4, r2]
 8009af8:	e7ab      	b.n	8009a52 <_malloc_r+0x22>
 8009afa:	42a3      	cmp	r3, r4
 8009afc:	6862      	ldr	r2, [r4, #4]
 8009afe:	d1dd      	bne.n	8009abc <_malloc_r+0x8c>
 8009b00:	f8c8 2000 	str.w	r2, [r8]
 8009b04:	e7ec      	b.n	8009ae0 <_malloc_r+0xb0>
 8009b06:	4623      	mov	r3, r4
 8009b08:	6864      	ldr	r4, [r4, #4]
 8009b0a:	e7ac      	b.n	8009a66 <_malloc_r+0x36>
 8009b0c:	4634      	mov	r4, r6
 8009b0e:	6876      	ldr	r6, [r6, #4]
 8009b10:	e7b4      	b.n	8009a7c <_malloc_r+0x4c>
 8009b12:	4613      	mov	r3, r2
 8009b14:	e7cc      	b.n	8009ab0 <_malloc_r+0x80>
 8009b16:	230c      	movs	r3, #12
 8009b18:	603b      	str	r3, [r7, #0]
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	f000 f99e 	bl	8009e5c <__malloc_unlock>
 8009b20:	e797      	b.n	8009a52 <_malloc_r+0x22>
 8009b22:	6025      	str	r5, [r4, #0]
 8009b24:	e7dc      	b.n	8009ae0 <_malloc_r+0xb0>
 8009b26:	605b      	str	r3, [r3, #4]
 8009b28:	deff      	udf	#255	; 0xff
 8009b2a:	bf00      	nop
 8009b2c:	20005294 	.word	0x20005294

08009b30 <_printf_common>:
 8009b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	4616      	mov	r6, r2
 8009b36:	4699      	mov	r9, r3
 8009b38:	688a      	ldr	r2, [r1, #8]
 8009b3a:	690b      	ldr	r3, [r1, #16]
 8009b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b40:	4293      	cmp	r3, r2
 8009b42:	bfb8      	it	lt
 8009b44:	4613      	movlt	r3, r2
 8009b46:	6033      	str	r3, [r6, #0]
 8009b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	b10a      	cbz	r2, 8009b56 <_printf_common+0x26>
 8009b52:	3301      	adds	r3, #1
 8009b54:	6033      	str	r3, [r6, #0]
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	0699      	lsls	r1, r3, #26
 8009b5a:	bf42      	ittt	mi
 8009b5c:	6833      	ldrmi	r3, [r6, #0]
 8009b5e:	3302      	addmi	r3, #2
 8009b60:	6033      	strmi	r3, [r6, #0]
 8009b62:	6825      	ldr	r5, [r4, #0]
 8009b64:	f015 0506 	ands.w	r5, r5, #6
 8009b68:	d106      	bne.n	8009b78 <_printf_common+0x48>
 8009b6a:	f104 0a19 	add.w	sl, r4, #25
 8009b6e:	68e3      	ldr	r3, [r4, #12]
 8009b70:	6832      	ldr	r2, [r6, #0]
 8009b72:	1a9b      	subs	r3, r3, r2
 8009b74:	42ab      	cmp	r3, r5
 8009b76:	dc26      	bgt.n	8009bc6 <_printf_common+0x96>
 8009b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b7c:	1e13      	subs	r3, r2, #0
 8009b7e:	6822      	ldr	r2, [r4, #0]
 8009b80:	bf18      	it	ne
 8009b82:	2301      	movne	r3, #1
 8009b84:	0692      	lsls	r2, r2, #26
 8009b86:	d42b      	bmi.n	8009be0 <_printf_common+0xb0>
 8009b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	4638      	mov	r0, r7
 8009b90:	47c0      	blx	r8
 8009b92:	3001      	adds	r0, #1
 8009b94:	d01e      	beq.n	8009bd4 <_printf_common+0xa4>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	f003 0306 	and.w	r3, r3, #6
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	bf02      	ittt	eq
 8009ba2:	68e5      	ldreq	r5, [r4, #12]
 8009ba4:	6833      	ldreq	r3, [r6, #0]
 8009ba6:	1aed      	subeq	r5, r5, r3
 8009ba8:	68a3      	ldr	r3, [r4, #8]
 8009baa:	bf0c      	ite	eq
 8009bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bb0:	2500      	movne	r5, #0
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	bfc4      	itt	gt
 8009bb6:	1a9b      	subgt	r3, r3, r2
 8009bb8:	18ed      	addgt	r5, r5, r3
 8009bba:	2600      	movs	r6, #0
 8009bbc:	341a      	adds	r4, #26
 8009bbe:	42b5      	cmp	r5, r6
 8009bc0:	d11a      	bne.n	8009bf8 <_printf_common+0xc8>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	e008      	b.n	8009bd8 <_printf_common+0xa8>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4652      	mov	r2, sl
 8009bca:	4649      	mov	r1, r9
 8009bcc:	4638      	mov	r0, r7
 8009bce:	47c0      	blx	r8
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d103      	bne.n	8009bdc <_printf_common+0xac>
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bdc:	3501      	adds	r5, #1
 8009bde:	e7c6      	b.n	8009b6e <_printf_common+0x3e>
 8009be0:	18e1      	adds	r1, r4, r3
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	2030      	movs	r0, #48	; 0x30
 8009be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bea:	4422      	add	r2, r4
 8009bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	e7c7      	b.n	8009b88 <_printf_common+0x58>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	4638      	mov	r0, r7
 8009c00:	47c0      	blx	r8
 8009c02:	3001      	adds	r0, #1
 8009c04:	d0e6      	beq.n	8009bd4 <_printf_common+0xa4>
 8009c06:	3601      	adds	r6, #1
 8009c08:	e7d9      	b.n	8009bbe <_printf_common+0x8e>
	...

08009c0c <_printf_i>:
 8009c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c10:	7e0f      	ldrb	r7, [r1, #24]
 8009c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c14:	2f78      	cmp	r7, #120	; 0x78
 8009c16:	4691      	mov	r9, r2
 8009c18:	4680      	mov	r8, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	469a      	mov	sl, r3
 8009c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c22:	d807      	bhi.n	8009c34 <_printf_i+0x28>
 8009c24:	2f62      	cmp	r7, #98	; 0x62
 8009c26:	d80a      	bhi.n	8009c3e <_printf_i+0x32>
 8009c28:	2f00      	cmp	r7, #0
 8009c2a:	f000 80d4 	beq.w	8009dd6 <_printf_i+0x1ca>
 8009c2e:	2f58      	cmp	r7, #88	; 0x58
 8009c30:	f000 80c0 	beq.w	8009db4 <_printf_i+0x1a8>
 8009c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c3c:	e03a      	b.n	8009cb4 <_printf_i+0xa8>
 8009c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c42:	2b15      	cmp	r3, #21
 8009c44:	d8f6      	bhi.n	8009c34 <_printf_i+0x28>
 8009c46:	a101      	add	r1, pc, #4	; (adr r1, 8009c4c <_printf_i+0x40>)
 8009c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c4c:	08009ca5 	.word	0x08009ca5
 8009c50:	08009cb9 	.word	0x08009cb9
 8009c54:	08009c35 	.word	0x08009c35
 8009c58:	08009c35 	.word	0x08009c35
 8009c5c:	08009c35 	.word	0x08009c35
 8009c60:	08009c35 	.word	0x08009c35
 8009c64:	08009cb9 	.word	0x08009cb9
 8009c68:	08009c35 	.word	0x08009c35
 8009c6c:	08009c35 	.word	0x08009c35
 8009c70:	08009c35 	.word	0x08009c35
 8009c74:	08009c35 	.word	0x08009c35
 8009c78:	08009dbd 	.word	0x08009dbd
 8009c7c:	08009ce5 	.word	0x08009ce5
 8009c80:	08009d77 	.word	0x08009d77
 8009c84:	08009c35 	.word	0x08009c35
 8009c88:	08009c35 	.word	0x08009c35
 8009c8c:	08009ddf 	.word	0x08009ddf
 8009c90:	08009c35 	.word	0x08009c35
 8009c94:	08009ce5 	.word	0x08009ce5
 8009c98:	08009c35 	.word	0x08009c35
 8009c9c:	08009c35 	.word	0x08009c35
 8009ca0:	08009d7f 	.word	0x08009d7f
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	1d1a      	adds	r2, r3, #4
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	602a      	str	r2, [r5, #0]
 8009cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e09f      	b.n	8009df8 <_printf_i+0x1ec>
 8009cb8:	6820      	ldr	r0, [r4, #0]
 8009cba:	682b      	ldr	r3, [r5, #0]
 8009cbc:	0607      	lsls	r7, r0, #24
 8009cbe:	f103 0104 	add.w	r1, r3, #4
 8009cc2:	6029      	str	r1, [r5, #0]
 8009cc4:	d501      	bpl.n	8009cca <_printf_i+0xbe>
 8009cc6:	681e      	ldr	r6, [r3, #0]
 8009cc8:	e003      	b.n	8009cd2 <_printf_i+0xc6>
 8009cca:	0646      	lsls	r6, r0, #25
 8009ccc:	d5fb      	bpl.n	8009cc6 <_printf_i+0xba>
 8009cce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	da03      	bge.n	8009cde <_printf_i+0xd2>
 8009cd6:	232d      	movs	r3, #45	; 0x2d
 8009cd8:	4276      	negs	r6, r6
 8009cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cde:	485a      	ldr	r0, [pc, #360]	; (8009e48 <_printf_i+0x23c>)
 8009ce0:	230a      	movs	r3, #10
 8009ce2:	e012      	b.n	8009d0a <_printf_i+0xfe>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	1d19      	adds	r1, r3, #4
 8009cea:	6029      	str	r1, [r5, #0]
 8009cec:	0605      	lsls	r5, r0, #24
 8009cee:	d501      	bpl.n	8009cf4 <_printf_i+0xe8>
 8009cf0:	681e      	ldr	r6, [r3, #0]
 8009cf2:	e002      	b.n	8009cfa <_printf_i+0xee>
 8009cf4:	0641      	lsls	r1, r0, #25
 8009cf6:	d5fb      	bpl.n	8009cf0 <_printf_i+0xe4>
 8009cf8:	881e      	ldrh	r6, [r3, #0]
 8009cfa:	4853      	ldr	r0, [pc, #332]	; (8009e48 <_printf_i+0x23c>)
 8009cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8009cfe:	bf0c      	ite	eq
 8009d00:	2308      	moveq	r3, #8
 8009d02:	230a      	movne	r3, #10
 8009d04:	2100      	movs	r1, #0
 8009d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d0a:	6865      	ldr	r5, [r4, #4]
 8009d0c:	60a5      	str	r5, [r4, #8]
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	bfa2      	ittt	ge
 8009d12:	6821      	ldrge	r1, [r4, #0]
 8009d14:	f021 0104 	bicge.w	r1, r1, #4
 8009d18:	6021      	strge	r1, [r4, #0]
 8009d1a:	b90e      	cbnz	r6, 8009d20 <_printf_i+0x114>
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	d04b      	beq.n	8009db8 <_printf_i+0x1ac>
 8009d20:	4615      	mov	r5, r2
 8009d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d26:	fb03 6711 	mls	r7, r3, r1, r6
 8009d2a:	5dc7      	ldrb	r7, [r0, r7]
 8009d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d30:	4637      	mov	r7, r6
 8009d32:	42bb      	cmp	r3, r7
 8009d34:	460e      	mov	r6, r1
 8009d36:	d9f4      	bls.n	8009d22 <_printf_i+0x116>
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d10b      	bne.n	8009d54 <_printf_i+0x148>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	07de      	lsls	r6, r3, #31
 8009d40:	d508      	bpl.n	8009d54 <_printf_i+0x148>
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	6861      	ldr	r1, [r4, #4]
 8009d46:	4299      	cmp	r1, r3
 8009d48:	bfde      	ittt	le
 8009d4a:	2330      	movle	r3, #48	; 0x30
 8009d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d54:	1b52      	subs	r2, r2, r5
 8009d56:	6122      	str	r2, [r4, #16]
 8009d58:	f8cd a000 	str.w	sl, [sp]
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	aa03      	add	r2, sp, #12
 8009d60:	4621      	mov	r1, r4
 8009d62:	4640      	mov	r0, r8
 8009d64:	f7ff fee4 	bl	8009b30 <_printf_common>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d14a      	bne.n	8009e02 <_printf_i+0x1f6>
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d70:	b004      	add	sp, #16
 8009d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	f043 0320 	orr.w	r3, r3, #32
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	4833      	ldr	r0, [pc, #204]	; (8009e4c <_printf_i+0x240>)
 8009d80:	2778      	movs	r7, #120	; 0x78
 8009d82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	6829      	ldr	r1, [r5, #0]
 8009d8a:	061f      	lsls	r7, r3, #24
 8009d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d90:	d402      	bmi.n	8009d98 <_printf_i+0x18c>
 8009d92:	065f      	lsls	r7, r3, #25
 8009d94:	bf48      	it	mi
 8009d96:	b2b6      	uxthmi	r6, r6
 8009d98:	07df      	lsls	r7, r3, #31
 8009d9a:	bf48      	it	mi
 8009d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8009da0:	6029      	str	r1, [r5, #0]
 8009da2:	bf48      	it	mi
 8009da4:	6023      	strmi	r3, [r4, #0]
 8009da6:	b91e      	cbnz	r6, 8009db0 <_printf_i+0x1a4>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	f023 0320 	bic.w	r3, r3, #32
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	2310      	movs	r3, #16
 8009db2:	e7a7      	b.n	8009d04 <_printf_i+0xf8>
 8009db4:	4824      	ldr	r0, [pc, #144]	; (8009e48 <_printf_i+0x23c>)
 8009db6:	e7e4      	b.n	8009d82 <_printf_i+0x176>
 8009db8:	4615      	mov	r5, r2
 8009dba:	e7bd      	b.n	8009d38 <_printf_i+0x12c>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	6826      	ldr	r6, [r4, #0]
 8009dc0:	6961      	ldr	r1, [r4, #20]
 8009dc2:	1d18      	adds	r0, r3, #4
 8009dc4:	6028      	str	r0, [r5, #0]
 8009dc6:	0635      	lsls	r5, r6, #24
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	d501      	bpl.n	8009dd0 <_printf_i+0x1c4>
 8009dcc:	6019      	str	r1, [r3, #0]
 8009dce:	e002      	b.n	8009dd6 <_printf_i+0x1ca>
 8009dd0:	0670      	lsls	r0, r6, #25
 8009dd2:	d5fb      	bpl.n	8009dcc <_printf_i+0x1c0>
 8009dd4:	8019      	strh	r1, [r3, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	4615      	mov	r5, r2
 8009ddc:	e7bc      	b.n	8009d58 <_printf_i+0x14c>
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	1d1a      	adds	r2, r3, #4
 8009de2:	602a      	str	r2, [r5, #0]
 8009de4:	681d      	ldr	r5, [r3, #0]
 8009de6:	6862      	ldr	r2, [r4, #4]
 8009de8:	2100      	movs	r1, #0
 8009dea:	4628      	mov	r0, r5
 8009dec:	f7f6 f9f0 	bl	80001d0 <memchr>
 8009df0:	b108      	cbz	r0, 8009df6 <_printf_i+0x1ea>
 8009df2:	1b40      	subs	r0, r0, r5
 8009df4:	6060      	str	r0, [r4, #4]
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	6123      	str	r3, [r4, #16]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e00:	e7aa      	b.n	8009d58 <_printf_i+0x14c>
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	462a      	mov	r2, r5
 8009e06:	4649      	mov	r1, r9
 8009e08:	4640      	mov	r0, r8
 8009e0a:	47d0      	blx	sl
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d0ad      	beq.n	8009d6c <_printf_i+0x160>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	079b      	lsls	r3, r3, #30
 8009e14:	d413      	bmi.n	8009e3e <_printf_i+0x232>
 8009e16:	68e0      	ldr	r0, [r4, #12]
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	4298      	cmp	r0, r3
 8009e1c:	bfb8      	it	lt
 8009e1e:	4618      	movlt	r0, r3
 8009e20:	e7a6      	b.n	8009d70 <_printf_i+0x164>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4632      	mov	r2, r6
 8009e26:	4649      	mov	r1, r9
 8009e28:	4640      	mov	r0, r8
 8009e2a:	47d0      	blx	sl
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d09d      	beq.n	8009d6c <_printf_i+0x160>
 8009e30:	3501      	adds	r5, #1
 8009e32:	68e3      	ldr	r3, [r4, #12]
 8009e34:	9903      	ldr	r1, [sp, #12]
 8009e36:	1a5b      	subs	r3, r3, r1
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	dcf2      	bgt.n	8009e22 <_printf_i+0x216>
 8009e3c:	e7eb      	b.n	8009e16 <_printf_i+0x20a>
 8009e3e:	2500      	movs	r5, #0
 8009e40:	f104 0619 	add.w	r6, r4, #25
 8009e44:	e7f5      	b.n	8009e32 <_printf_i+0x226>
 8009e46:	bf00      	nop
 8009e48:	0800aca9 	.word	0x0800aca9
 8009e4c:	0800acba 	.word	0x0800acba

08009e50 <__malloc_lock>:
 8009e50:	4801      	ldr	r0, [pc, #4]	; (8009e58 <__malloc_lock+0x8>)
 8009e52:	f7ff bc65 	b.w	8009720 <__retarget_lock_acquire_recursive>
 8009e56:	bf00      	nop
 8009e58:	20005290 	.word	0x20005290

08009e5c <__malloc_unlock>:
 8009e5c:	4801      	ldr	r0, [pc, #4]	; (8009e64 <__malloc_unlock+0x8>)
 8009e5e:	f7ff bc60 	b.w	8009722 <__retarget_lock_release_recursive>
 8009e62:	bf00      	nop
 8009e64:	20005290 	.word	0x20005290

08009e68 <_realloc_r>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	4614      	mov	r4, r2
 8009e70:	460e      	mov	r6, r1
 8009e72:	b921      	cbnz	r1, 8009e7e <_realloc_r+0x16>
 8009e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e78:	4611      	mov	r1, r2
 8009e7a:	f7ff bdd9 	b.w	8009a30 <_malloc_r>
 8009e7e:	b92a      	cbnz	r2, 8009e8c <_realloc_r+0x24>
 8009e80:	f000 f84c 	bl	8009f1c <_free_r>
 8009e84:	4625      	mov	r5, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8c:	f000 f892 	bl	8009fb4 <_malloc_usable_size_r>
 8009e90:	4284      	cmp	r4, r0
 8009e92:	4607      	mov	r7, r0
 8009e94:	d802      	bhi.n	8009e9c <_realloc_r+0x34>
 8009e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e9a:	d812      	bhi.n	8009ec2 <_realloc_r+0x5a>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f7ff fdc6 	bl	8009a30 <_malloc_r>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0ed      	beq.n	8009e86 <_realloc_r+0x1e>
 8009eaa:	42bc      	cmp	r4, r7
 8009eac:	4622      	mov	r2, r4
 8009eae:	4631      	mov	r1, r6
 8009eb0:	bf28      	it	cs
 8009eb2:	463a      	movcs	r2, r7
 8009eb4:	f7ff fc36 	bl	8009724 <memcpy>
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4640      	mov	r0, r8
 8009ebc:	f000 f82e 	bl	8009f1c <_free_r>
 8009ec0:	e7e1      	b.n	8009e86 <_realloc_r+0x1e>
 8009ec2:	4635      	mov	r5, r6
 8009ec4:	e7df      	b.n	8009e86 <_realloc_r+0x1e>

08009ec6 <memmove>:
 8009ec6:	4288      	cmp	r0, r1
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	eb01 0402 	add.w	r4, r1, r2
 8009ece:	d902      	bls.n	8009ed6 <memmove+0x10>
 8009ed0:	4284      	cmp	r4, r0
 8009ed2:	4623      	mov	r3, r4
 8009ed4:	d807      	bhi.n	8009ee6 <memmove+0x20>
 8009ed6:	1e43      	subs	r3, r0, #1
 8009ed8:	42a1      	cmp	r1, r4
 8009eda:	d008      	beq.n	8009eee <memmove+0x28>
 8009edc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee4:	e7f8      	b.n	8009ed8 <memmove+0x12>
 8009ee6:	4402      	add	r2, r0
 8009ee8:	4601      	mov	r1, r0
 8009eea:	428a      	cmp	r2, r1
 8009eec:	d100      	bne.n	8009ef0 <memmove+0x2a>
 8009eee:	bd10      	pop	{r4, pc}
 8009ef0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ef8:	e7f7      	b.n	8009eea <memmove+0x24>
	...

08009efc <_sbrk_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	; (8009f18 <_sbrk_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f7 ff24 	bl	8001d54 <_sbrk>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_sbrk_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_sbrk_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	2000529c 	.word	0x2000529c

08009f1c <_free_r>:
 8009f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d044      	beq.n	8009fac <_free_r+0x90>
 8009f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f26:	9001      	str	r0, [sp, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f2e:	bfb8      	it	lt
 8009f30:	18e4      	addlt	r4, r4, r3
 8009f32:	f7ff ff8d 	bl	8009e50 <__malloc_lock>
 8009f36:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <_free_r+0x94>)
 8009f38:	9801      	ldr	r0, [sp, #4]
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	b933      	cbnz	r3, 8009f4c <_free_r+0x30>
 8009f3e:	6063      	str	r3, [r4, #4]
 8009f40:	6014      	str	r4, [r2, #0]
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f48:	f7ff bf88 	b.w	8009e5c <__malloc_unlock>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d908      	bls.n	8009f62 <_free_r+0x46>
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf01      	itttt	eq
 8009f58:	6819      	ldreq	r1, [r3, #0]
 8009f5a:	685b      	ldreq	r3, [r3, #4]
 8009f5c:	1949      	addeq	r1, r1, r5
 8009f5e:	6021      	streq	r1, [r4, #0]
 8009f60:	e7ed      	b.n	8009f3e <_free_r+0x22>
 8009f62:	461a      	mov	r2, r3
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	b10b      	cbz	r3, 8009f6c <_free_r+0x50>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d9fa      	bls.n	8009f62 <_free_r+0x46>
 8009f6c:	6811      	ldr	r1, [r2, #0]
 8009f6e:	1855      	adds	r5, r2, r1
 8009f70:	42a5      	cmp	r5, r4
 8009f72:	d10b      	bne.n	8009f8c <_free_r+0x70>
 8009f74:	6824      	ldr	r4, [r4, #0]
 8009f76:	4421      	add	r1, r4
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	d1e0      	bne.n	8009f42 <_free_r+0x26>
 8009f80:	681c      	ldr	r4, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	6053      	str	r3, [r2, #4]
 8009f86:	440c      	add	r4, r1
 8009f88:	6014      	str	r4, [r2, #0]
 8009f8a:	e7da      	b.n	8009f42 <_free_r+0x26>
 8009f8c:	d902      	bls.n	8009f94 <_free_r+0x78>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	e7d6      	b.n	8009f42 <_free_r+0x26>
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf04      	itt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	6063      	str	r3, [r4, #4]
 8009fa2:	bf04      	itt	eq
 8009fa4:	1949      	addeq	r1, r1, r5
 8009fa6:	6021      	streq	r1, [r4, #0]
 8009fa8:	6054      	str	r4, [r2, #4]
 8009faa:	e7ca      	b.n	8009f42 <_free_r+0x26>
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
 8009fb0:	20005294 	.word	0x20005294

08009fb4 <_malloc_usable_size_r>:
 8009fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb8:	1f18      	subs	r0, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	bfbc      	itt	lt
 8009fbe:	580b      	ldrlt	r3, [r1, r0]
 8009fc0:	18c0      	addlt	r0, r0, r3
 8009fc2:	4770      	bx	lr

08009fc4 <_init>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	bf00      	nop
 8009fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fca:	bc08      	pop	{r3}
 8009fcc:	469e      	mov	lr, r3
 8009fce:	4770      	bx	lr

08009fd0 <_fini>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr
