
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b45c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cdc  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2c8  0800c2c8  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2c8  0800c2c8  0001c2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2d0  0800c2d0  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2d0  0800c2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d4  0800c2d4  0001c2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800c2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00005158  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200052fc  200052fc  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c8a0  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c8f  00000000  00000000  0003cab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001968  00000000  00000000  00040748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013eb  00000000  00000000  000420b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005207  00000000  00000000  0004349b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cdb3  00000000  00000000  000486a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc7c9  00000000  00000000  00065455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000731c  00000000  00000000  00141c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00148f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5d4 	.word	0x0800b5d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	0800b5d4 	.word	0x0800b5d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f002 fb23 	bl	8003548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f949 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fb99 	bl	800163c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fb6d 	bl	80015e8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 f9a1 	bl	8001254 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fabf 	bl	8001494 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fa69 	bl	80013ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f9c9 	bl	80012b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f1e:	f009 fe15 	bl	800ab4c <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f22:	2300      	movs	r3, #0
 8000f24:	2203      	movs	r2, #3
 8000f26:	2100      	movs	r1, #0
 8000f28:	4867      	ldr	r0, [pc, #412]	; (80010c8 <main+0x1d0>)
 8000f2a:	f009 fb38 	bl	800a59e <ICM20948_init>

  // accelerometer

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f2e:	210c      	movs	r1, #12
 8000f30:	4866      	ldr	r0, [pc, #408]	; (80010cc <main+0x1d4>)
 8000f32:	f004 fc25 	bl	8005780 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	4865      	ldr	r0, [pc, #404]	; (80010d0 <main+0x1d8>)
 8000f3a:	f004 fc21 	bl	8005780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4863      	ldr	r0, [pc, #396]	; (80010d0 <main+0x1d8>)
 8000f42:	f004 fc1d 	bl	8005780 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f46:	213c      	movs	r1, #60	; 0x3c
 8000f48:	4862      	ldr	r0, [pc, #392]	; (80010d4 <main+0x1dc>)
 8000f4a:	f004 fd87 	bl	8005a5c <HAL_TIM_Encoder_Start>

  __RESET_SERVO_TURN(&htim1);
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <main+0x1d4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	228e      	movs	r2, #142	; 0x8e
 8000f54:	641a      	str	r2, [r3, #64]	; 0x40
 8000f56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f5a:	f002 fb37 	bl	80035cc <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <main+0x1e0>)
 8000f60:	2264      	movs	r2, #100	; 0x64
 8000f62:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f64:	4b5c      	ldr	r3, [pc, #368]	; (80010d8 <main+0x1e0>)
 8000f66:	220a      	movs	r2, #10
 8000f68:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	; (80010dc <main+0x1e4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f70:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <main+0x1e4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000f76:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <main+0x1e8>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b58      	ldr	r3, [pc, #352]	; (80010dc <main+0x1e4>)
 8000f7c:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e00c      	b.n	8000f9e <main+0xa6>
  {
    Command cmd;
    cmd.index = 100;
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000f8c:	4a53      	ldr	r2, [pc, #332]	; (80010dc <main+0x1e4>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <main+0x1e8>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dbec      	blt.n	8000f84 <main+0x8c>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000faa:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 80010e4 <main+0x1ec>
 8000fae:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80010e8 <main+0x1f0>
 8000fb2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80010ec <main+0x1f4>
 8000fb6:	484e      	ldr	r0, [pc, #312]	; (80010f0 <main+0x1f8>)
 8000fb8:	f000 fbde 	bl	8001778 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fbc:	ed9f 1a49 	vldr	s2, [pc, #292]	; 80010e4 <main+0x1ec>
 8000fc0:	eddf 0a49 	vldr	s1, [pc, #292]	; 80010e8 <main+0x1f0>
 8000fc4:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80010ec <main+0x1f4>
 8000fc8:	484a      	ldr	r0, [pc, #296]	; (80010f4 <main+0x1fc>)
 8000fca:	f000 fbd5 	bl	8001778 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000fce:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 80010f8 <main+0x200>
 8000fd2:	eddf 0a4a 	vldr	s1, [pc, #296]	; 80010fc <main+0x204>
 8000fd6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001100 <main+0x208>
 8000fda:	484a      	ldr	r0, [pc, #296]	; (8001104 <main+0x20c>)
 8000fdc:	f000 fbcc 	bl	8001778 <PIDConfigInit>
  // PIDConfigInit(&pidFast, 6.5, 0.25, 0.61);

  // // TODO:overwrite curCmd for debugging individual task
  curCmd.index = 1;
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <main+0x1e0>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
  curCmd.val = 00;
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <main+0x1e0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	805a      	strh	r2, [r3, #2]

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <main+0x210>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4945      	ldr	r1, [pc, #276]	; (800110c <main+0x214>)
 8000ff6:	4846      	ldr	r0, [pc, #280]	; (8001110 <main+0x218>)
 8000ff8:	f005 fd49 	bl	8006a8e <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 8000ffc:	4b33      	ldr	r3, [pc, #204]	; (80010cc <main+0x1d4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	228e      	movs	r2, #142	; 0x8e
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
 8001004:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001008:	f002 fae0 	bl	80035cc <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800100c:	f006 fd1c 	bl	8007a48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001010:	4a40      	ldr	r2, [pc, #256]	; (8001114 <main+0x21c>)
 8001012:	2100      	movs	r1, #0
 8001014:	4840      	ldr	r0, [pc, #256]	; (8001118 <main+0x220>)
 8001016:	f006 fd61 	bl	8007adc <osThreadNew>
 800101a:	4603      	mov	r3, r0
 800101c:	4a3f      	ldr	r2, [pc, #252]	; (800111c <main+0x224>)
 800101e:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001020:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <main+0x228>)
 8001022:	2100      	movs	r1, #0
 8001024:	483f      	ldr	r0, [pc, #252]	; (8001124 <main+0x22c>)
 8001026:	f006 fd59 	bl	8007adc <osThreadNew>
 800102a:	4603      	mov	r3, r0
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <main+0x230>)
 800102e:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001030:	4a3e      	ldr	r2, [pc, #248]	; (800112c <main+0x234>)
 8001032:	2100      	movs	r1, #0
 8001034:	483e      	ldr	r0, [pc, #248]	; (8001130 <main+0x238>)
 8001036:	f006 fd51 	bl	8007adc <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a3d      	ldr	r2, [pc, #244]	; (8001134 <main+0x23c>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001040:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <main+0x240>)
 8001042:	2100      	movs	r1, #0
 8001044:	483d      	ldr	r0, [pc, #244]	; (800113c <main+0x244>)
 8001046:	f006 fd49 	bl	8007adc <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a3c      	ldr	r2, [pc, #240]	; (8001140 <main+0x248>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001050:	4a3c      	ldr	r2, [pc, #240]	; (8001144 <main+0x24c>)
 8001052:	2100      	movs	r1, #0
 8001054:	483c      	ldr	r0, [pc, #240]	; (8001148 <main+0x250>)
 8001056:	f006 fd41 	bl	8007adc <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a3b      	ldr	r2, [pc, #236]	; (800114c <main+0x254>)
 800105e:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001060:	4a3b      	ldr	r2, [pc, #236]	; (8001150 <main+0x258>)
 8001062:	2100      	movs	r1, #0
 8001064:	483b      	ldr	r0, [pc, #236]	; (8001154 <main+0x25c>)
 8001066:	f006 fd39 	bl	8007adc <osThreadNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a3a      	ldr	r2, [pc, #232]	; (8001158 <main+0x260>)
 800106e:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001070:	4a3a      	ldr	r2, [pc, #232]	; (800115c <main+0x264>)
 8001072:	2100      	movs	r1, #0
 8001074:	483a      	ldr	r0, [pc, #232]	; (8001160 <main+0x268>)
 8001076:	f006 fd31 	bl	8007adc <osThreadNew>
 800107a:	4603      	mov	r3, r0
 800107c:	4a39      	ldr	r2, [pc, #228]	; (8001164 <main+0x26c>)
 800107e:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 8001080:	4a39      	ldr	r2, [pc, #228]	; (8001168 <main+0x270>)
 8001082:	2100      	movs	r1, #0
 8001084:	4839      	ldr	r0, [pc, #228]	; (800116c <main+0x274>)
 8001086:	f006 fd29 	bl	8007adc <osThreadNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a38      	ldr	r2, [pc, #224]	; (8001170 <main+0x278>)
 800108e:	6013      	str	r3, [r2, #0]

  /* creation of ADCTask */
  ADCTaskHandle = osThreadNew(runADCTask, NULL, &ADCTask_attributes);
 8001090:	4a38      	ldr	r2, [pc, #224]	; (8001174 <main+0x27c>)
 8001092:	2100      	movs	r1, #0
 8001094:	4838      	ldr	r0, [pc, #224]	; (8001178 <main+0x280>)
 8001096:	f006 fd21 	bl	8007adc <osThreadNew>
 800109a:	4603      	mov	r3, r0
 800109c:	4a37      	ldr	r2, [pc, #220]	; (800117c <main+0x284>)
 800109e:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(runMoveDistTask, NULL, &moveDistTask_attributes);
 80010a0:	4a37      	ldr	r2, [pc, #220]	; (8001180 <main+0x288>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4837      	ldr	r0, [pc, #220]	; (8001184 <main+0x28c>)
 80010a6:	f006 fd19 	bl	8007adc <osThreadNew>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a36      	ldr	r2, [pc, #216]	; (8001188 <main+0x290>)
 80010ae:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010b0:	4a36      	ldr	r2, [pc, #216]	; (800118c <main+0x294>)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4836      	ldr	r0, [pc, #216]	; (8001190 <main+0x298>)
 80010b6:	f006 fd11 	bl	8007adc <osThreadNew>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a35      	ldr	r2, [pc, #212]	; (8001194 <main+0x29c>)
 80010be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c0:	f006 fce6 	bl	8007a90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <main+0x1cc>
 80010c6:	bf00      	nop
 80010c8:	200001c0 	.word	0x200001c0
 80010cc:	20000214 	.word	0x20000214
 80010d0:	200002a4 	.word	0x200002a4
 80010d4:	2000025c 	.word	0x2000025c
 80010d8:	2000039c 	.word	0x2000039c
 80010dc:	20000368 	.word	0x20000368
 80010e0:	20000001 	.word	0x20000001
 80010e4:	3f4ccccd 	.word	0x3f4ccccd
 80010e8:	3d3851ec 	.word	0x3d3851ec
 80010ec:	40066666 	.word	0x40066666
 80010f0:	200003e4 	.word	0x200003e4
 80010f4:	200003d0 	.word	0x200003d0
 80010f8:	3e99999a 	.word	0x3e99999a
 80010fc:	3d4ccccd 	.word	0x3d4ccccd
 8001100:	3f8ccccd 	.word	0x3f8ccccd
 8001104:	200003f8 	.word	0x200003f8
 8001108:	20000000 	.word	0x20000000
 800110c:	2000035c 	.word	0x2000035c
 8001110:	200002ec 	.word	0x200002ec
 8001114:	0800b68c 	.word	0x0800b68c
 8001118:	08002285 	.word	0x08002285
 800111c:	20000330 	.word	0x20000330
 8001120:	0800b6b0 	.word	0x0800b6b0
 8001124:	08002355 	.word	0x08002355
 8001128:	20000334 	.word	0x20000334
 800112c:	0800b6d4 	.word	0x0800b6d4
 8001130:	080023a1 	.word	0x080023a1
 8001134:	20000338 	.word	0x20000338
 8001138:	0800b6f8 	.word	0x0800b6f8
 800113c:	08002469 	.word	0x08002469
 8001140:	2000033c 	.word	0x2000033c
 8001144:	0800b71c 	.word	0x0800b71c
 8001148:	080024f1 	.word	0x080024f1
 800114c:	20000340 	.word	0x20000340
 8001150:	0800b740 	.word	0x0800b740
 8001154:	08002885 	.word	0x08002885
 8001158:	20000344 	.word	0x20000344
 800115c:	0800b764 	.word	0x0800b764
 8001160:	08002925 	.word	0x08002925
 8001164:	20000348 	.word	0x20000348
 8001168:	0800b788 	.word	0x0800b788
 800116c:	080029c5 	.word	0x080029c5
 8001170:	2000034c 	.word	0x2000034c
 8001174:	0800b7ac 	.word	0x0800b7ac
 8001178:	08002a91 	.word	0x08002a91
 800117c:	20000350 	.word	0x20000350
 8001180:	0800b7d0 	.word	0x0800b7d0
 8001184:	08002aa1 	.word	0x08002aa1
 8001188:	20000354 	.word	0x20000354
 800118c:	0800b7f4 	.word	0x0800b7f4
 8001190:	08002ab1 	.word	0x08002ab1
 8001194:	20000358 	.word	0x20000358

08001198 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	; 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f009 fd90 	bl	800accc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <SystemClock_Config+0xb4>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a21      	ldr	r2, [pc, #132]	; (800124c <SystemClock_Config+0xb4>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <SystemClock_Config+0xb4>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <SystemClock_Config+0xb8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <SystemClock_Config+0xb8>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <SystemClock_Config+0xb8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fc:	2310      	movs	r3, #16
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f003 fd15 	bl	8004c38 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001214:	f001 fedc 	bl	8002fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001218:	230f      	movs	r3, #15
 800121a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f003 ff78 	bl	8005128 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800123e:	f001 fec7 	bl	8002fd0 <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3750      	adds	r7, #80	; 0x50
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x50>)
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_I2C1_Init+0x54>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <MX_I2C1_Init+0x58>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_I2C1_Init+0x50>)
 8001292:	f002 fce9 	bl	8003c68 <HAL_I2C_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800129c:	f001 fe98 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200001c0 	.word	0x200001c0
 80012a8:	40005400 	.word	0x40005400
 80012ac:	000186a0 	.word	0x000186a0

080012b0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b096      	sub	sp, #88	; 0x58
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	615a      	str	r2, [r3, #20]
 80012e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f009 fcef 	bl	800accc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ee:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <MX_TIM1_Init+0x134>)
 80012f0:	4a3d      	ldr	r2, [pc, #244]	; (80013e8 <MX_TIM1_Init+0x138>)
 80012f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <MX_TIM1_Init+0x134>)
 80012f6:	22a0      	movs	r2, #160	; 0xa0
 80012f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <MX_TIM1_Init+0x134>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001306:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001308:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <MX_TIM1_Init+0x134>)
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131a:	4832      	ldr	r0, [pc, #200]	; (80013e4 <MX_TIM1_Init+0x134>)
 800131c:	f004 f916 	bl	800554c <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001326:	f001 fe53 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001334:	4619      	mov	r1, r3
 8001336:	482b      	ldr	r0, [pc, #172]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001338:	f004 fde8 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001342:	f001 fe45 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001346:	4827      	ldr	r0, [pc, #156]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001348:	f004 f9c0 	bl	80056cc <HAL_TIM_PWM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001352:	f001 fe3d 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001362:	4619      	mov	r1, r3
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001366:	f005 f9d1 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001370:	f001 fe2e 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001374:	2360      	movs	r3, #96	; 0x60
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	220c      	movs	r2, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM1_Init+0x134>)
 8001396:	f004 fcf7 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80013a0:	f001 fe16 	bl	8002fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM1_Init+0x134>)
 80013c8:	f005 fa1c 	bl	8006804 <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80013d2:	f001 fdfd 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM1_Init+0x134>)
 80013d8:	f001 ff38 	bl	800324c <HAL_TIM_MspPostInit>
}
 80013dc:	bf00      	nop
 80013de:	3758      	adds	r7, #88	; 0x58
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000214 	.word	0x20000214
 80013e8:	40010000 	.word	0x40010000

080013ec <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2224      	movs	r2, #36	; 0x24
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 fc66 	bl	800accc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_TIM2_Init+0xa4>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_TIM2_Init+0xa4>)
 800141e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_TIM2_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001430:	2303      	movs	r3, #3
 8001432:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001438:	2301      	movs	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001440:	230a      	movs	r3, #10
 8001442:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001448:	2301      	movs	r3, #1
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001450:	230a      	movs	r3, #10
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_TIM2_Init+0xa4>)
 800145c:	f004 fa58 	bl	8005910 <HAL_TIM_Encoder_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001466:	f001 fdb3 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_TIM2_Init+0xa4>)
 8001478:	f005 f948 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001482:	f001 fda5 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001486:	bf00      	nop
 8001488:	3730      	adds	r7, #48	; 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000025c 	.word	0x2000025c

08001494 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b096      	sub	sp, #88	; 0x58
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2220      	movs	r2, #32
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f009 fbfd 	bl	800accc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014d2:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <MX_TIM8_Init+0x150>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014e4:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014e6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014fe:	4838      	ldr	r0, [pc, #224]	; (80015e0 <MX_TIM8_Init+0x14c>)
 8001500:	f004 f824 	bl	800554c <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800150a:	f001 fd61 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001518:	4619      	mov	r1, r3
 800151a:	4831      	ldr	r0, [pc, #196]	; (80015e0 <MX_TIM8_Init+0x14c>)
 800151c:	f004 fcf6 	bl	8005f0c <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001526:	f001 fd53 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800152a:	482d      	ldr	r0, [pc, #180]	; (80015e0 <MX_TIM8_Init+0x14c>)
 800152c:	f004 f8ce 	bl	80056cc <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001536:	f001 fd4b 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001546:	4619      	mov	r1, r3
 8001548:	4825      	ldr	r0, [pc, #148]	; (80015e0 <MX_TIM8_Init+0x14c>)
 800154a:	f005 f8df 	bl	800670c <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001554:	f001 fd3c 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	; (80015e0 <MX_TIM8_Init+0x14c>)
 800157e:	f004 fc03 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001588:	f001 fd22 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	2204      	movs	r2, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4812      	ldr	r0, [pc, #72]	; (80015e0 <MX_TIM8_Init+0x14c>)
 8001596:	f004 fbf7 	bl	8005d88 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80015a0:	f001 fd16 	bl	8002fd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <MX_TIM8_Init+0x14c>)
 80015c8:	f005 f91c 	bl	8006804 <HAL_TIMEx_ConfigBreakDeadTime>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015d2:	f001 fcfd 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 80015d6:	bf00      	nop
 80015d8:	3758      	adds	r7, #88	; 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002a4 	.word	0x200002a4
 80015e4:	40010400 	.word	0x40010400

080015e8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_USART3_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART3_UART_Init+0x4c>)
 8001620:	f005 f956 	bl	80068d0 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f001 fcd1 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200002ec 	.word	0x200002ec
 8001638:	40004800 	.word	0x40004800

0800163c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a37      	ldr	r2, [pc, #220]	; (8001738 <MX_GPIO_Init+0xfc>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b35      	ldr	r3, [pc, #212]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a30      	ldr	r2, [pc, #192]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <MX_GPIO_Init+0xfc>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_GPIO_Init+0xfc>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_GPIO_Init+0xfc>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a22      	ldr	r2, [pc, #136]	; (8001738 <MX_GPIO_Init+0xfc>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_GPIO_Init+0xfc>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80016c8:	481c      	ldr	r0, [pc, #112]	; (800173c <MX_GPIO_Init+0x100>)
 80016ca:	f002 fab3 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	213c      	movs	r1, #60	; 0x3c
 80016d2:	481b      	ldr	r0, [pc, #108]	; (8001740 <MX_GPIO_Init+0x104>)
 80016d4:	f002 faae 	bl	8003c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin;
 80016d8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4812      	ldr	r0, [pc, #72]	; (800173c <MX_GPIO_Init+0x100>)
 80016f2:	f002 f903 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_GPIO_Init+0x104>)
 800170e:	f002 f8f5 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 8001712:	2330      	movs	r3, #48	; 0x30
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_GPIO_Init+0x104>)
 800172a:	f002 f8e7 	bl	80038fc <HAL_GPIO_Init>
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40021000 	.word	0x40021000
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_UART_RxCpltCallback+0x28>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_UART_RxCpltCallback+0x2c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4906      	ldr	r1, [pc, #24]	; (8001774 <HAL_UART_RxCpltCallback+0x30>)
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <HAL_UART_RxCpltCallback+0x28>)
 800175e:	f005 f996 	bl	8006a8e <HAL_UART_Receive_IT>
  // HAL_UART_Transmit(&huart3, (uint8_t *)aRxBuffer, 10, 0xffff);
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200002ec 	.word	0x200002ec
 8001770:	20000000 	.word	0x20000000
 8001774:	2000035c 	.word	0x2000035c

08001778 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	ed87 0a02 	vstr	s0, [r7, #8]
 8001784:	edc7 0a01 	vstr	s1, [r7, #4]
 8001788:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	4ba9      	ldr	r3, [pc, #676]	; (8001a9c <StraightLineMove+0x2bc>)
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	2237      	movs	r2, #55	; 0x37
 80017fc:	21d0      	movs	r1, #208	; 0xd0
 80017fe:	48a8      	ldr	r0, [pc, #672]	; (8001aa0 <StraightLineMove+0x2c0>)
 8001800:	f002 fc70 	bl	80040e4 <HAL_I2C_Mem_Read>
 8001804:	4ba5      	ldr	r3, [pc, #660]	; (8001a9c <StraightLineMove+0x2bc>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b21a      	sxth	r2, r3
 800180c:	4ba3      	ldr	r3, [pc, #652]	; (8001a9c <StraightLineMove+0x2bc>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21a      	sxth	r2, r3
 8001816:	4ba3      	ldr	r3, [pc, #652]	; (8001aa4 <StraightLineMove+0x2c4>)
 8001818:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 800181a:	4ba3      	ldr	r3, [pc, #652]	; (8001aa8 <StraightLineMove+0x2c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b10      	cmp	r3, #16
 8001826:	bf0c      	ite	eq
 8001828:	2301      	moveq	r3, #1
 800182a:	2300      	movne	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	b25a      	sxtb	r2, r3
 8001830:	4b9e      	ldr	r3, [pc, #632]	; (8001aac <StraightLineMove+0x2cc>)
 8001832:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 8001834:	4b9b      	ldr	r3, [pc, #620]	; (8001aa4 <StraightLineMove+0x2c4>)
 8001836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183a:	f113 0f04 	cmn.w	r3, #4
 800183e:	db04      	blt.n	800184a <StraightLineMove+0x6a>
 8001840:	4b98      	ldr	r3, [pc, #608]	; (8001aa4 <StraightLineMove+0x2c4>)
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	2b0b      	cmp	r3, #11
 8001848:	dd07      	ble.n	800185a <StraightLineMove+0x7a>
 800184a:	4b96      	ldr	r3, [pc, #600]	; (8001aa4 <StraightLineMove+0x2c4>)
 800184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001858:	e001      	b.n	800185e <StraightLineMove+0x7e>
 800185a:	eddf 7a95 	vldr	s15, [pc, #596]	; 8001ab0 <StraightLineMove+0x2d0>
 800185e:	4b95      	ldr	r3, [pc, #596]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001860:	ed93 7a00 	vldr	s14, [r3]
 8001864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <StraightLineMove+0x2d4>)
 800186a:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d164      	bne.n	800193e <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <StraightLineMove+0x2d8>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	4b8e      	ldr	r3, [pc, #568]	; (8001ab4 <StraightLineMove+0x2d4>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <StraightLineMove+0x2d8>)
 8001886:	edd3 6a01 	vldr	s13, [r3, #4]
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <StraightLineMove+0x2d8>)
 800188c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	4b87      	ldr	r3, [pc, #540]	; (8001ab8 <StraightLineMove+0x2d8>)
 800189a:	edd3 6a02 	vldr	s13, [r3, #8]
 800189e:	4b86      	ldr	r3, [pc, #536]	; (8001ab8 <StraightLineMove+0x2d8>)
 80018a0:	ed93 6a03 	vldr	s12, [r3, #12]
 80018a4:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <StraightLineMove+0x2d4>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 2a90 	vmov	r2, s15
 80018be:	4b7f      	ldr	r3, [pc, #508]	; (8001abc <StraightLineMove+0x2dc>)
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <StraightLineMove+0x2d4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7c      	ldr	r2, [pc, #496]	; (8001ab8 <StraightLineMove+0x2d8>)
 80018c8:	60d3      	str	r3, [r2, #12]
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <StraightLineMove+0x2d8>)
 80018cc:	ed93 7a04 	vldr	s14, [r3, #16]
 80018d0:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <StraightLineMove+0x2d4>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018da:	4b77      	ldr	r3, [pc, #476]	; (8001ab8 <StraightLineMove+0x2d8>)
 80018dc:	edc3 7a04 	vstr	s15, [r3, #16]
 80018e0:	4b76      	ldr	r3, [pc, #472]	; (8001abc <StraightLineMove+0x2dc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80018e8:	dc06      	bgt.n	80018f8 <StraightLineMove+0x118>
 80018ea:	4b74      	ldr	r3, [pc, #464]	; (8001abc <StraightLineMove+0x2dc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a74      	ldr	r2, [pc, #464]	; (8001ac0 <StraightLineMove+0x2e0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bfb8      	it	lt
 80018f4:	4613      	movlt	r3, r2
 80018f6:	e001      	b.n	80018fc <StraightLineMove+0x11c>
 80018f8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018fc:	4a6f      	ldr	r2, [pc, #444]	; (8001abc <StraightLineMove+0x2dc>)
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <StraightLineMove+0x2cc>)
 8001902:	f993 3000 	ldrsb.w	r3, [r3]
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <StraightLineMove+0x2dc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	fb12 f303 	smulbb	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <StraightLineMove+0x2e4>)
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	4b63      	ldr	r3, [pc, #396]	; (8001aac <StraightLineMove+0x2cc>)
 8001920:	f993 3000 	ldrsb.w	r3, [r3]
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b65      	ldr	r3, [pc, #404]	; (8001abc <StraightLineMove+0x2dc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	fb12 f303 	smulbb	r3, r2, r3
 8001930:	b29b      	uxth	r3, r3
 8001932:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <StraightLineMove+0x2e8>)
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	e0ef      	b.n	8001b1e <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d165      	bne.n	8001a10 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8001944:	4b61      	ldr	r3, [pc, #388]	; (8001acc <StraightLineMove+0x2ec>)
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	4b5a      	ldr	r3, [pc, #360]	; (8001ab4 <StraightLineMove+0x2d4>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001954:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <StraightLineMove+0x2ec>)
 8001956:	edd3 6a01 	vldr	s13, [r3, #4]
 800195a:	4b5c      	ldr	r3, [pc, #368]	; (8001acc <StraightLineMove+0x2ec>)
 800195c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <StraightLineMove+0x2ec>)
 800196a:	edd3 6a02 	vldr	s13, [r3, #8]
 800196e:	4b57      	ldr	r3, [pc, #348]	; (8001acc <StraightLineMove+0x2ec>)
 8001970:	ed93 6a03 	vldr	s12, [r3, #12]
 8001974:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800197e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198a:	ee17 2a90 	vmov	r2, s15
 800198e:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <StraightLineMove+0x2dc>)
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <StraightLineMove+0x2ec>)
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <StraightLineMove+0x2ec>)
 800199c:	ed93 7a04 	vldr	s14, [r3, #16]
 80019a0:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <StraightLineMove+0x2d4>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019aa:	4b48      	ldr	r3, [pc, #288]	; (8001acc <StraightLineMove+0x2ec>)
 80019ac:	edc3 7a04 	vstr	s15, [r3, #16]
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <StraightLineMove+0x2dc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80019b8:	dc06      	bgt.n	80019c8 <StraightLineMove+0x1e8>
 80019ba:	4b40      	ldr	r3, [pc, #256]	; (8001abc <StraightLineMove+0x2dc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a44      	ldr	r2, [pc, #272]	; (8001ad0 <StraightLineMove+0x2f0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bfb8      	it	lt
 80019c4:	4613      	movlt	r3, r2
 80019c6:	e001      	b.n	80019cc <StraightLineMove+0x1ec>
 80019c8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <StraightLineMove+0x2dc>)
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <StraightLineMove+0x2cc>)
 80019d2:	f993 3000 	ldrsb.w	r3, [r3]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <StraightLineMove+0x2dc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	fb12 f303 	smulbb	r3, r2, r3
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <StraightLineMove+0x2e4>)
 80019ec:	801a      	strh	r2, [r3, #0]
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <StraightLineMove+0x2cc>)
 80019f0:	f993 3000 	ldrsb.w	r3, [r3]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <StraightLineMove+0x2dc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	fb12 f303 	smulbb	r3, r2, r3
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8001a06:	3308      	adds	r3, #8
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <StraightLineMove+0x2e8>)
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	e086      	b.n	8001b1e <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 8083 	bne.w	8001b1e <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a1a:	ed93 7a00 	vldr	s14, [r3]
 8001a1e:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a2a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a44:	ed93 6a03 	vldr	s12, [r3, #12]
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5e:	ee17 2a90 	vmov	r2, s15
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <StraightLineMove+0x2dc>)
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1a      	ldr	r2, [pc, #104]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a6c:	60d3      	str	r3, [r2, #12]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a70:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <StraightLineMove+0x2d4>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <StraightLineMove+0x2f4>)
 8001a80:	edc3 7a04 	vstr	s15, [r3, #16]
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <StraightLineMove+0x2dc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001a8c:	dc24      	bgt.n	8001ad8 <StraightLineMove+0x2f8>
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <StraightLineMove+0x2dc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <StraightLineMove+0x2f0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bfb8      	it	lt
 8001a98:	4613      	movlt	r3, r2
 8001a9a:	e01f      	b.n	8001adc <StraightLineMove+0x2fc>
 8001a9c:	200003b8 	.word	0x200003b8
 8001aa0:	200001c0 	.word	0x200001c0
 8001aa4:	200003ba 	.word	0x200003ba
 8001aa8:	2000025c 	.word	0x2000025c
 8001aac:	20000140 	.word	0x20000140
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	200003b4 	.word	0x200003b4
 8001ab8:	200003e4 	.word	0x200003e4
 8001abc:	2000040c 	.word	0x2000040c
 8001ac0:	fffffda8 	.word	0xfffffda8
 8001ac4:	20000002 	.word	0x20000002
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	200003f8 	.word	0x200003f8
 8001ad0:	fffffd44 	.word	0xfffffd44
 8001ad4:	200003d0 	.word	0x200003d0
 8001ad8:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <StraightLineMove+0x35c>)
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <StraightLineMove+0x360>)
 8001ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <StraightLineMove+0x35c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	fb12 f303 	smulbb	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <StraightLineMove+0x364>)
 8001afc:	801a      	strh	r2, [r3, #0]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <StraightLineMove+0x360>)
 8001b00:	f993 3000 	ldrsb.w	r3, [r3]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <StraightLineMove+0x35c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	fb12 f303 	smulbb	r3, r2, r3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8001b16:	330c      	adds	r3, #12
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <StraightLineMove+0x368>)
 8001b1c:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <StraightLineMove+0x364>)
 8001b20:	881a      	ldrh	r2, [r3, #0]
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <StraightLineMove+0x36c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <StraightLineMove+0x368>)
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <StraightLineMove+0x36c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000040c 	.word	0x2000040c
 8001b40:	20000140 	.word	0x20000140
 8001b44:	20000002 	.word	0x20000002
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	200002a4 	.word	0x200002a4

08001b50 <RobotMoveDist>:

void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	70bb      	strb	r3, [r7, #2]
  {
    angleNow = 0;
 8001b60:	4ba1      	ldr	r3, [pc, #644]	; (8001de8 <RobotMoveDist+0x298>)
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001b68:	4ba0      	ldr	r3, [pc, #640]	; (8001dec <RobotMoveDist+0x29c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001b6e:	48a0      	ldr	r0, [pc, #640]	; (8001df0 <RobotMoveDist+0x2a0>)
 8001b70:	f7ff fe23 	bl	80017ba <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001b74:	489f      	ldr	r0, [pc, #636]	; (8001df4 <RobotMoveDist+0x2a4>)
 8001b76:	f7ff fe20 	bl	80017ba <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001b7a:	489f      	ldr	r0, [pc, #636]	; (8001df8 <RobotMoveDist+0x2a8>)
 8001b7c:	f7ff fe1d 	bl	80017ba <PIDConfigReset>
    curDistTick = 0;
 8001b80:	4b9e      	ldr	r3, [pc, #632]	; (8001dfc <RobotMoveDist+0x2ac>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]

    __GET_TARGETTICK(*targetDist, targetDistTick);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcd4 	bl	8000538 <__aeabi_f2d>
 8001b90:	a38f      	add	r3, pc, #572	; (adr r3, 8001dd0 <RobotMoveDist+0x280>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd27 	bl	80005e8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	a38d      	add	r3, pc, #564	; (adr r3, 8001dd8 <RobotMoveDist+0x288>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fb66 	bl	8000278 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <RobotMoveDist+0x2b0>)
 8001bba:	f7fe fe3f 	bl	800083c <__aeabi_ddiv>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <RobotMoveDist+0x2b4>)
 8001bcc:	f7fe fd0c 	bl	80005e8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <RobotMoveDist+0x2b8>)
 8001bde:	f7fe fb4b 	bl	8000278 <__aeabi_dsub>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ff97 	bl	8000b1c <__aeabi_d2uiz>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <RobotMoveDist+0x2bc>)
 8001bf4:	801a      	strh	r2, [r3, #0]

    last_curTask_tick = HAL_GetTick();
 8001bf6:	f001 fcdd 	bl	80035b4 <HAL_GetTick>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a84      	ldr	r2, [pc, #528]	; (8001e10 <RobotMoveDist+0x2c0>)
 8001bfe:	6013      	str	r3, [r2, #0]
    __SET_MOTOR_DIRECTION(dir);
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4880      	ldr	r0, [pc, #512]	; (8001e14 <RobotMoveDist+0x2c4>)
 8001c12:	f002 f80f 	bl	8003c34 <HAL_GPIO_WritePin>
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf14      	ite	ne
 8001c1c:	2301      	movne	r3, #1
 8001c1e:	2300      	moveq	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	2108      	movs	r1, #8
 8001c26:	487b      	ldr	r0, [pc, #492]	; (8001e14 <RobotMoveDist+0x2c4>)
 8001c28:	f002 f804 	bl	8003c34 <HAL_GPIO_WritePin>
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	4875      	ldr	r0, [pc, #468]	; (8001e14 <RobotMoveDist+0x2c4>)
 8001c3e:	f001 fff9 	bl	8003c34 <HAL_GPIO_WritePin>
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2110      	movs	r1, #16
 8001c52:	4870      	ldr	r0, [pc, #448]	; (8001e14 <RobotMoveDist+0x2c4>)
 8001c54:	f001 ffee 	bl	8003c34 <HAL_GPIO_WritePin>
    __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8001c58:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <RobotMoveDist+0x2c8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001c62:	801a      	strh	r2, [r3, #0]
    do
    {
      __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8001c64:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <RobotMoveDist+0x2c8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <RobotMoveDist+0x2c8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d117      	bne.n	8001caa <RobotMoveDist+0x15a>
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d806      	bhi.n	8001c94 <RobotMoveDist+0x144>
 8001c86:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001c88:	881a      	ldrh	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	e007      	b.n	8001ca4 <RobotMoveDist+0x154>
 8001c94:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4a5e      	ldr	r2, [pc, #376]	; (8001e20 <RobotMoveDist+0x2d0>)
 8001ca6:	8013      	strh	r3, [r2, #0]
 8001ca8:	e016      	b.n	8001cd8 <RobotMoveDist+0x188>
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d306      	bcc.n	8001cc4 <RobotMoveDist+0x174>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	e007      	b.n	8001cd4 <RobotMoveDist+0x184>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <RobotMoveDist+0x2d0>)
 8001cd6:	8013      	strh	r3, [r2, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <RobotMoveDist+0x2cc>)
 8001cde:	801a      	strh	r2, [r3, #0]
      curDistTick += dist_dL;
 8001ce0:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <RobotMoveDist+0x2ac>)
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <RobotMoveDist+0x2d0>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <RobotMoveDist+0x2ac>)
 8001cee:	801a      	strh	r2, [r3, #0]

      // OLED_ShowNumber(0, 15, curDistTick, 5, 12);
      // OLED_ShowNumber(20, 15, targetDistTick, 5, 12);

      osDelay(10);
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f005 ff85 	bl	8007c00 <osDelay>

      if (curDistTick >= targetDistTick)
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <RobotMoveDist+0x2ac>)
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <RobotMoveDist+0x2bc>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	f080 80a5 	bcs.w	8001e4e <RobotMoveDist+0x2fe>
        break;

      if (HAL_GetTick() - last_curTask_tick >= 10)
 8001d04:	f001 fc56 	bl	80035b4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <RobotMoveDist+0x2c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d9a7      	bls.n	8001c64 <RobotMoveDist+0x114>
      {
        if (speedMode == SPEED_MODE_T)
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <RobotMoveDist+0x1d2>
        {
          StraightLineMove(SPEED_MODE_T);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fd60 	bl	80017e0 <StraightLineMove>
 8001d20:	e08f      	b.n	8001e42 <RobotMoveDist+0x2f2>
        }
        else
        {
          speedScale = abs(curDistTick - targetDistTick) / 1100; // start to slow down at last 990 ticks (15cm)
 8001d22:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <RobotMoveDist+0x2ac>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <RobotMoveDist+0x2bc>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bfb8      	it	lt
 8001d32:	425b      	neglt	r3, r3
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <RobotMoveDist+0x2d4>)
 8001d36:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3a:	1252      	asrs	r2, r2, #9
 8001d3c:	17db      	asrs	r3, r3, #31
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
          if (speedMode == SPEED_MODE_1)
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d11e      	bne.n	8001d92 <RobotMoveDist+0x242>
            speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8001d54:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dd02      	ble.n	8001d6e <RobotMoveDist+0x21e>
 8001d68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d6c:	e00e      	b.n	8001d8c <RobotMoveDist+0x23c>
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	d502      	bpl.n	8001d88 <RobotMoveDist+0x238>
 8001d82:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001d86:	e001      	b.n	8001d8c <RobotMoveDist+0x23c>
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e052      	b.n	8001e38 <RobotMoveDist+0x2e8>
          else if (speedMode == SPEED_MODE_2)
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d14f      	bne.n	8001e38 <RobotMoveDist+0x2e8>
            speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8001d98:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	dd02      	ble.n	8001db2 <RobotMoveDist+0x262>
 8001dac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001db0:	e040      	b.n	8001e34 <RobotMoveDist+0x2e4>
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <RobotMoveDist+0x2d8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbbe 	bl	8000538 <__aeabi_f2d>
 8001dbc:	a308      	add	r3, pc, #32	; (adr r3, 8001de0 <RobotMoveDist+0x290>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fe83 	bl	8000acc <__aeabi_dcmplt>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d031      	beq.n	8001e30 <RobotMoveDist+0x2e0>
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <RobotMoveDist+0x2dc>)
 8001dce:	e031      	b.n	8001e34 <RobotMoveDist+0x2e4>
 8001dd0:	fc66b22a 	.word	0xfc66b22a
 8001dd4:	3ff266ac 	.word	0x3ff266ac
 8001dd8:	bb2526f8 	.word	0xbb2526f8
 8001ddc:	3feee3d4 	.word	0x3feee3d4
 8001de0:	9999999a 	.word	0x9999999a
 8001de4:	3fd99999 	.word	0x3fd99999
 8001de8:	200003b4 	.word	0x200003b4
 8001dec:	200003ba 	.word	0x200003ba
 8001df0:	200003e4 	.word	0x200003e4
 8001df4:	200003d0 	.word	0x200003d0
 8001df8:	200003f8 	.word	0x200003f8
 8001dfc:	200003c8 	.word	0x200003c8
 8001e00:	40340000 	.word	0x40340000
 8001e04:	4094a000 	.word	0x4094a000
 8001e08:	40240000 	.word	0x40240000
 8001e0c:	200003ca 	.word	0x200003ca
 8001e10:	200003bc 	.word	0x200003bc
 8001e14:	40020000 	.word	0x40020000
 8001e18:	2000025c 	.word	0x2000025c
 8001e1c:	200003ce 	.word	0x200003ce
 8001e20:	200003cc 	.word	0x200003cc
 8001e24:	77280773 	.word	0x77280773
 8001e28:	2000013c 	.word	0x2000013c
 8001e2c:	3ecccccd 	.word	0x3ecccccd
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <RobotMoveDist+0x318>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <RobotMoveDist+0x318>)
 8001e36:	6013      	str	r3, [r2, #0]
          StraightLineMoveSpeedScale(speedMode, &speedScale);
 8001e38:	78bb      	ldrb	r3, [r7, #2]
 8001e3a:	490b      	ldr	r1, [pc, #44]	; (8001e68 <RobotMoveDist+0x318>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f819 	bl	8001e74 <StraightLineMoveSpeedScale>
        }

        last_curTask_tick = HAL_GetTick();
 8001e42:	f001 fbb7 	bl	80035b4 <HAL_GetTick>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <RobotMoveDist+0x31c>)
 8001e4a:	6013      	str	r3, [r2, #0]
      __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8001e4c:	e70a      	b.n	8001c64 <RobotMoveDist+0x114>
        break;
 8001e4e:	bf00      	nop
      }
    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <RobotMoveDist+0x320>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <RobotMoveDist+0x320>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	2000013c 	.word	0x2000013c
 8001e6c:	200003bc 	.word	0x200003bc
 8001e70:	200002a4 	.word	0x200002a4

08001e74 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af04      	add	r7, sp, #16
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	2302      	movs	r3, #2
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	4b9b      	ldr	r3, [pc, #620]	; (80020f8 <StraightLineMoveSpeedScale+0x284>)
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	2237      	movs	r2, #55	; 0x37
 8001e92:	21d0      	movs	r1, #208	; 0xd0
 8001e94:	4899      	ldr	r0, [pc, #612]	; (80020fc <StraightLineMoveSpeedScale+0x288>)
 8001e96:	f002 f925 	bl	80040e4 <HAL_I2C_Mem_Read>
 8001e9a:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <StraightLineMoveSpeedScale+0x284>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	4b95      	ldr	r3, [pc, #596]	; (80020f8 <StraightLineMoveSpeedScale+0x284>)
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	4b94      	ldr	r3, [pc, #592]	; (8002100 <StraightLineMoveSpeedScale+0x28c>)
 8001eae:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8001eb0:	4b94      	ldr	r3, [pc, #592]	; (8002104 <StraightLineMoveSpeedScale+0x290>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d101      	bne.n	8001ec2 <StraightLineMoveSpeedScale+0x4e>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	e001      	b.n	8001ec6 <StraightLineMoveSpeedScale+0x52>
 8001ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec6:	4b90      	ldr	r3, [pc, #576]	; (8002108 <StraightLineMoveSpeedScale+0x294>)
 8001ec8:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8001eca:	4b8d      	ldr	r3, [pc, #564]	; (8002100 <StraightLineMoveSpeedScale+0x28c>)
 8001ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed0:	f113 0f04 	cmn.w	r3, #4
 8001ed4:	db04      	blt.n	8001ee0 <StraightLineMoveSpeedScale+0x6c>
 8001ed6:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <StraightLineMoveSpeedScale+0x28c>)
 8001ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001edc:	2b0b      	cmp	r3, #11
 8001ede:	dd07      	ble.n	8001ef0 <StraightLineMoveSpeedScale+0x7c>
 8001ee0:	4b87      	ldr	r3, [pc, #540]	; (8002100 <StraightLineMoveSpeedScale+0x28c>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eee:	e001      	b.n	8001ef4 <StraightLineMoveSpeedScale+0x80>
 8001ef0:	eddf 7a86 	vldr	s15, [pc, #536]	; 800210c <StraightLineMoveSpeedScale+0x298>
 8001ef4:	4b86      	ldr	r3, [pc, #536]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001efe:	4b84      	ldr	r3, [pc, #528]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d165      	bne.n	8001fd6 <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8001f0a:	4b82      	ldr	r3, [pc, #520]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f0c:	ed93 7a00 	vldr	s14, [r3]
 8001f10:	4b7f      	ldr	r3, [pc, #508]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001f12:	edd3 7a00 	vldr	s15, [r3]
 8001f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1a:	4b7e      	ldr	r3, [pc, #504]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f20:	4b7c      	ldr	r3, [pc, #496]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f22:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2e:	4b79      	ldr	r3, [pc, #484]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f30:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f34:	4b77      	ldr	r3, [pc, #476]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f36:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f3a:	4b75      	ldr	r3, [pc, #468]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f50:	ee17 2a90 	vmov	r2, s15
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6d      	ldr	r2, [pc, #436]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f5e:	60d3      	str	r3, [r2, #12]
 8001f60:	4b6c      	ldr	r3, [pc, #432]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f62:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f66:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <StraightLineMoveSpeedScale+0x2a0>)
 8001f72:	edc3 7a04 	vstr	s15, [r3, #16]
 8001f76:	4b68      	ldr	r3, [pc, #416]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001f7e:	dc06      	bgt.n	8001f8e <StraightLineMoveSpeedScale+0x11a>
 8001f80:	4b65      	ldr	r3, [pc, #404]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a65      	ldr	r2, [pc, #404]	; (800211c <StraightLineMoveSpeedScale+0x2a8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	bfb8      	it	lt
 8001f8a:	4613      	movlt	r3, r2
 8001f8c:	e001      	b.n	8001f92 <StraightLineMoveSpeedScale+0x11e>
 8001f8e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001f92:	4a61      	ldr	r2, [pc, #388]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <StraightLineMoveSpeedScale+0x294>)
 8001f98:	f993 3000 	ldrsb.w	r3, [r3]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	fb12 f303 	smulbb	r3, r2, r3
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b5b      	ldr	r3, [pc, #364]	; (8002120 <StraightLineMoveSpeedScale+0x2ac>)
 8001fb2:	801a      	strh	r2, [r3, #0]
 8001fb4:	4b54      	ldr	r3, [pc, #336]	; (8002108 <StraightLineMoveSpeedScale+0x294>)
 8001fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	fb12 f303 	smulbb	r3, r2, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 8001fcc:	330c      	adds	r3, #12
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b54      	ldr	r3, [pc, #336]	; (8002124 <StraightLineMoveSpeedScale+0x2b0>)
 8001fd2:	801a      	strh	r2, [r3, #0]
 8001fd4:	e067      	b.n	80020a6 <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d164      	bne.n	80020a6 <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8001fdc:	4b52      	ldr	r3, [pc, #328]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8001fde:	ed93 7a00 	vldr	s14, [r3]
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fec:	4b4e      	ldr	r3, [pc, #312]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8001fee:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ff2:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8001ff4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002000:	4b49      	ldr	r3, [pc, #292]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8002002:	edd3 6a02 	vldr	s13, [r3, #8]
 8002006:	4b48      	ldr	r3, [pc, #288]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8002008:	ed93 6a03 	vldr	s12, [r3, #12]
 800200c:	4b40      	ldr	r3, [pc, #256]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800201a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002022:	ee17 2a90 	vmov	r2, s15
 8002026:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8002030:	60d3      	str	r3, [r2, #12]
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8002034:	ed93 7a04 	vldr	s14, [r3, #16]
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <StraightLineMoveSpeedScale+0x29c>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <StraightLineMoveSpeedScale+0x2b4>)
 8002044:	edc3 7a04 	vstr	s15, [r3, #16]
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002050:	dc06      	bgt.n	8002060 <StraightLineMoveSpeedScale+0x1ec>
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <StraightLineMoveSpeedScale+0x2a8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bfb8      	it	lt
 800205c:	4613      	movlt	r3, r2
 800205e:	e001      	b.n	8002064 <StraightLineMoveSpeedScale+0x1f0>
 8002060:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <StraightLineMoveSpeedScale+0x294>)
 800206a:	f993 3000 	ldrsb.w	r3, [r3]
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	fb12 f303 	smulbb	r3, r2, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002080:	b29a      	uxth	r2, r3
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <StraightLineMoveSpeedScale+0x2ac>)
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <StraightLineMoveSpeedScale+0x294>)
 8002088:	f993 3000 	ldrsb.w	r3, [r3]
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <StraightLineMoveSpeedScale+0x2a4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	fb12 f303 	smulbb	r3, r2, r3
 8002098:	b29b      	uxth	r3, r3
 800209a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800209e:	3308      	adds	r3, #8
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <StraightLineMoveSpeedScale+0x2b0>)
 80020a4:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <StraightLineMoveSpeedScale+0x2ac>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <StraightLineMoveSpeedScale+0x2b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c4:	ee17 2a90 	vmov	r2, s15
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <StraightLineMoveSpeedScale+0x2b0>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	edd3 7a00 	vldr	s15, [r3]
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <StraightLineMoveSpeedScale+0x2b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e8:	ee17 2a90 	vmov	r2, s15
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003b8 	.word	0x200003b8
 80020fc:	200001c0 	.word	0x200001c0
 8002100:	200003ba 	.word	0x200003ba
 8002104:	2000025c 	.word	0x2000025c
 8002108:	20000140 	.word	0x20000140
 800210c:	00000000 	.word	0x00000000
 8002110:	200003b4 	.word	0x200003b4
 8002114:	200003d0 	.word	0x200003d0
 8002118:	2000040c 	.word	0x2000040c
 800211c:	fffffd44 	.word	0xfffffd44
 8002120:	20000002 	.word	0x20000002
 8002124:	20000004 	.word	0x20000004
 8002128:	200003f8 	.word	0x200003f8
 800212c:	200002a4 	.word	0x200002a4

08002130 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af04      	add	r7, sp, #16
 8002136:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <RobotTurn+0x138>)
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <RobotTurn+0x13c>)
 8002142:	2200      	movs	r2, #0
 8002144:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8002146:	f001 fa35 	bl	80035b4 <HAL_GetTick>
 800214a:	4603      	mov	r3, r0
 800214c:	4a48      	ldr	r2, [pc, #288]	; (8002270 <RobotTurn+0x140>)
 800214e:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002150:	f001 fa30 	bl	80035b4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <RobotTurn+0x140>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b09      	cmp	r3, #9
 800215e:	d9f7      	bls.n	8002150 <RobotTurn+0x20>
    { // sample gyro every 10ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8002160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002164:	9302      	str	r3, [sp, #8]
 8002166:	2302      	movs	r3, #2
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <RobotTurn+0x144>)
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2301      	movs	r3, #1
 8002170:	2237      	movs	r2, #55	; 0x37
 8002172:	21d0      	movs	r1, #208	; 0xd0
 8002174:	4840      	ldr	r0, [pc, #256]	; (8002278 <RobotTurn+0x148>)
 8002176:	f001 ffb5 	bl	80040e4 <HAL_I2C_Mem_Read>
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <RobotTurn+0x144>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	b21a      	sxth	r2, r3
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <RobotTurn+0x144>)
 8002184:	785b      	ldrb	r3, [r3, #1]
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21a      	sxth	r2, r3
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <RobotTurn+0x13c>)
 800218e:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <RobotTurn+0x138>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9cf 	bl	8000538 <__aeabi_f2d>
 800219a:	4604      	mov	r4, r0
 800219c:	460d      	mov	r5, r1
 800219e:	4b33      	ldr	r3, [pc, #204]	; (800226c <RobotTurn+0x13c>)
 80021a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9b5 	bl	8000514 <__aeabi_i2d>
 80021aa:	a32b      	add	r3, pc, #172	; (adr r3, 8002258 <RobotTurn+0x128>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fb44 	bl	800083c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	a328      	add	r3, pc, #160	; (adr r3, 8002260 <RobotTurn+0x130>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fa11 	bl	80005e8 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4620      	mov	r0, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	f7fe f855 	bl	800027c <__adddf3>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fcbf 	bl	8000b5c <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <RobotTurn+0x138>)
 80021e2:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <RobotTurn+0x138>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f8:	ee17 3a90 	vmov	r3, s15
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0d      	blt.n	800221c <RobotTurn+0xec>
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <RobotTurn+0x138>)
 8002202:	ed93 7a00 	vldr	s14, [r3]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	2b00      	cmp	r3, #0
 800221a:	dd05      	ble.n	8002228 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 800221c:	f001 f9ca 	bl	80035b4 <HAL_GetTick>
 8002220:	4603      	mov	r3, r0
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <RobotTurn+0x140>)
 8002224:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002226:	e793      	b.n	8002150 <RobotTurn+0x20>
        break;
 8002228:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <RobotTurn+0x14c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <RobotTurn+0x14c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <RobotTurn+0x150>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	228e      	movs	r2, #142	; 0x8e
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
 8002242:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002246:	f001 f9c1 	bl	80035cc <HAL_Delay>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bdb0      	pop	{r4, r5, r7, pc}
 8002252:	bf00      	nop
 8002254:	f3af 8000 	nop.w
 8002258:	66666666 	.word	0x66666666
 800225c:	40306666 	.word	0x40306666
 8002260:	47ae147b 	.word	0x47ae147b
 8002264:	3f847ae1 	.word	0x3f847ae1
 8002268:	200003b4 	.word	0x200003b4
 800226c:	200003ba 	.word	0x200003ba
 8002270:	200003bc 	.word	0x200003bc
 8002274:	200003b8 	.word	0x200003b8
 8002278:	200001c0 	.word	0x200001c0
 800227c:	200002a4 	.word	0x200002a4
 8002280:	20000214 	.word	0x20000214

08002284 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  // HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  int cnt1 = 0, cnt2 = 0, diff = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
 8002294:	2300      	movs	r3, #0
 8002296:	633b      	str	r3, [r7, #48]	; 0x30

  uint32_t tick = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <runEncoder+0xc4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  tick = HAL_GetTick();
 80022a4:	f001 f986 	bl	80035b4 <HAL_GetTick>
 80022a8:	62f8      	str	r0, [r7, #44]	; 0x2c

  // uint8_t encoderBuffer[20];
  uint8_t speedBuffer[20];
  uint8_t directionBuffer[10];
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80022aa:	4b27      	ldr	r3, [pc, #156]	; (8002348 <runEncoder+0xc4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	2b10      	cmp	r3, #16
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	b25a      	sxtb	r2, r3
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <runEncoder+0xc8>)
 80022c2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */

  for (;;)
  {
    // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
    if (HAL_GetTick() - tick > 1000L)
 80022c4:	f001 f976 	bl	80035b4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022d2:	d935      	bls.n	8002340 <runEncoder+0xbc>
    {
      cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <runEncoder+0xc4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
      if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <runEncoder+0xc4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d110      	bne.n	800230c <runEncoder+0x88>
      {
        if (cnt2 < cnt1)
 80022ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	429a      	cmp	r2, r3
 80022f0:	da04      	bge.n	80022fc <runEncoder+0x78>
        {
          diff = cnt1 - cnt2;
 80022f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	633b      	str	r3, [r7, #48]	; 0x30
 80022fa:	e017      	b.n	800232c <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt2) + cnt1;
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002302:	33ff      	adds	r3, #255	; 0xff
 8002304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002306:	4413      	add	r3, r2
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
 800230a:	e00f      	b.n	800232c <runEncoder+0xa8>
      }
      else
      {
        if (cnt2 > cnt1)
 800230c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	429a      	cmp	r2, r3
 8002312:	dd04      	ble.n	800231e <runEncoder+0x9a>
        {
          diff = cnt2 - cnt1;
 8002314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
 800231c:	e006      	b.n	800232c <runEncoder+0xa8>
        }
        else
          diff = (65535 - cnt1) + cnt2;
 800231e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002320:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002324:	33ff      	adds	r3, #255	; 0xff
 8002326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002328:	4413      	add	r3, r2
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
      }
      curSpeed = diff;
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <runEncoder+0xcc>)
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6013      	str	r3, [r2, #0]
      // OLED_ShowString(0, 0, speedBuffer);
      // sprintf(directionBuffer, "Dir:%5d\0", dir);
      // OLED_ShowString(0, 15, directionBuffer);

      // OLED_Refresh_Gram();
      cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <runEncoder+0xc4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
      tick = HAL_GetTick();
 800233a:	f001 f93b 	bl	80035b4 <HAL_GetTick>
 800233e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }

    osDelay(100);
 8002340:	2064      	movs	r0, #100	; 0x64
 8002342:	f005 fc5d 	bl	8007c00 <osDelay>
    if (HAL_GetTick() - tick > 1000L)
 8002346:	e7bd      	b.n	80022c4 <runEncoder+0x40>
 8002348:	2000025c 	.word	0x2000025c
 800234c:	20000140 	.word	0x20000140
 8002350:	200003c0 	.word	0x200003c0

08002354 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    //  angleTemp = angleNow / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
    //  snprintf(ch, sizeof(ch), "angle:%-4d", (int)angleTemp);
    //  OLED_ShowString(0, 40, (char *)ch);

    // uart received cmd
    __ACK_TASK_DONE(&huart3, rxMsg);
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <runOledTask+0x38>)
 800235e:	210f      	movs	r1, #15
 8002360:	480b      	ldr	r0, [pc, #44]	; (8002390 <runOledTask+0x3c>)
 8002362:	f008 fc7f 	bl	800ac64 <sniprintf>
 8002366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236a:	2206      	movs	r2, #6
 800236c:	4909      	ldr	r1, [pc, #36]	; (8002394 <runOledTask+0x40>)
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <runOledTask+0x44>)
 8002370:	f004 fafb 	bl	800696a <HAL_UART_Transmit>
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 8002374:	4a09      	ldr	r2, [pc, #36]	; (800239c <runOledTask+0x48>)
 8002376:	2128      	movs	r1, #40	; 0x28
 8002378:	2000      	movs	r0, #0
 800237a:	f008 fbb5 	bl	800aae8 <OLED_ShowString>

    OLED_Refresh_Gram();
 800237e:	f008 f9b5 	bl	800a6ec <OLED_Refresh_Gram>
    osDelay(10);
 8002382:	200a      	movs	r0, #10
 8002384:	f005 fc3c 	bl	8007c00 <osDelay>
    __ACK_TASK_DONE(&huart3, rxMsg);
 8002388:	e7e8      	b.n	800235c <runOledTask+0x8>
 800238a:	bf00      	nop
 800238c:	0800b654 	.word	0x0800b654
 8002390:	200003a0 	.word	0x200003a0
 8002394:	0800b65c 	.word	0x0800b65c
 8002398:	200002ec 	.word	0x200002ec
 800239c:	2000035c 	.word	0x2000035c

080023a0 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	6078      	str	r0, [r7, #4]
  for (;;)
  {
    // osDelay(100);
    // newDutyL = 500;
    // newDutyR = 500;
    if (curTask != TASK_MOVE_FOREWARD)
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <runFWTask+0xa8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <runFWTask+0x18>
      osDelay(100);
 80023b0:	2064      	movs	r0, #100	; 0x64
 80023b2:	f005 fc25 	bl	8007c00 <osDelay>
 80023b6:	e7f7      	b.n	80023a8 <runFWTask+0x8>
    else
    {

      targetDist = 120;
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <runFWTask+0xac>)
 80023ba:	4a25      	ldr	r2, [pc, #148]	; (8002450 <runFWTask+0xb0>)
 80023bc:	601a      	str	r2, [r3, #0]
      targetAngle = 120;
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <runFWTask+0xb4>)
 80023c0:	4a23      	ldr	r2, [pc, #140]	; (8002450 <runFWTask+0xb0>)
 80023c2:	601a      	str	r2, [r3, #0]
      OLED_ShowString(0, 25, (uint8_t *)("FW\0"));
 80023c4:	4a24      	ldr	r2, [pc, #144]	; (8002458 <runFWTask+0xb8>)
 80023c6:	2119      	movs	r1, #25
 80023c8:	2000      	movs	r0, #0
 80023ca:	f008 fb8d 	bl	800aae8 <OLED_ShowString>
      OLED_ShowNumber(40, 25, (uint32_t)pidFast.Kp, 5, 12);
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <runFWTask+0xbc>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d8:	230c      	movs	r3, #12
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2305      	movs	r3, #5
 80023de:	ee17 2a90 	vmov	r2, s15
 80023e2:	2119      	movs	r1, #25
 80023e4:	2028      	movs	r0, #40	; 0x28
 80023e6:	f008 fb11 	bl	800aa0c <OLED_ShowNumber>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	481c      	ldr	r0, [pc, #112]	; (8002460 <runFWTask+0xc0>)
 80023f0:	f001 fc20 	bl	8003c34 <HAL_GPIO_WritePin>
 80023f4:	2201      	movs	r2, #1
 80023f6:	2108      	movs	r1, #8
 80023f8:	4819      	ldr	r0, [pc, #100]	; (8002460 <runFWTask+0xc0>)
 80023fa:	f001 fc1b 	bl	8003c34 <HAL_GPIO_WritePin>
 80023fe:	2200      	movs	r2, #0
 8002400:	2120      	movs	r1, #32
 8002402:	4817      	ldr	r0, [pc, #92]	; (8002460 <runFWTask+0xc0>)
 8002404:	f001 fc16 	bl	8003c34 <HAL_GPIO_WritePin>
 8002408:	2201      	movs	r2, #1
 800240a:	2110      	movs	r1, #16
 800240c:	4814      	ldr	r0, [pc, #80]	; (8002460 <runFWTask+0xc0>)
 800240e:	f001 fc11 	bl	8003c34 <HAL_GPIO_WritePin>

      // __SET_SERVO_TURN_MAX(&htim1, 0);
      // osDelay(1000);
      // __SET_SERVO_TURN_MAX(&htim1, 1);
      // osDelay(1000);
      __RESET_SERVO_TURN(&htim1);
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <runFWTask+0xc4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	228e      	movs	r2, #142	; 0x8e
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
 800241a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800241e:	f001 f8d5 	bl	80035cc <HAL_Delay>

      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <runFWTask+0xc4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002428:	230c      	movs	r3, #12
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2305      	movs	r3, #5
 800242e:	2132      	movs	r1, #50	; 0x32
 8002430:	2000      	movs	r0, #0
 8002432:	f008 faeb 	bl	800aa0c <OLED_ShowNumber>
      // StraightLineMove(SPEED_MODE_2);
      RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 8002436:	2202      	movs	r2, #2
 8002438:	2101      	movs	r1, #1
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <runFWTask+0xac>)
 800243c:	f7ff fb88 	bl	8001b50 <RobotMoveDist>
      // RobotTurn(&targetAngle);

      osDelay(100);
 8002440:	2064      	movs	r0, #100	; 0x64
 8002442:	f005 fbdd 	bl	8007c00 <osDelay>
    if (curTask != TASK_MOVE_FOREWARD)
 8002446:	e7af      	b.n	80023a8 <runFWTask+0x8>
 8002448:	20000138 	.word	0x20000138
 800244c:	200003c4 	.word	0x200003c4
 8002450:	42f00000 	.word	0x42f00000
 8002454:	200003b0 	.word	0x200003b0
 8002458:	0800b664 	.word	0x0800b664
 800245c:	200003f8 	.word	0x200003f8
 8002460:	40020000 	.word	0x40020000
 8002464:	20000214 	.word	0x20000214

08002468 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <runBWTask+0x78>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d003      	beq.n	8002480 <runBWTask+0x18>
      osDelay(100);
 8002478:	2064      	movs	r0, #100	; 0x64
 800247a:	f005 fbc1 	bl	8007c00 <osDelay>
 800247e:	e7f7      	b.n	8002470 <runBWTask+0x8>

    else
    {
      OLED_ShowString(0, 25, (uint8_t *)("BW\0"));
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <runBWTask+0x7c>)
 8002482:	2119      	movs	r1, #25
 8002484:	2000      	movs	r0, #0
 8002486:	f008 fb2f 	bl	800aae8 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800248a:	2201      	movs	r2, #1
 800248c:	2104      	movs	r1, #4
 800248e:	4816      	ldr	r0, [pc, #88]	; (80024e8 <runBWTask+0x80>)
 8002490:	f001 fbd0 	bl	8003c34 <HAL_GPIO_WritePin>
 8002494:	2200      	movs	r2, #0
 8002496:	2108      	movs	r1, #8
 8002498:	4813      	ldr	r0, [pc, #76]	; (80024e8 <runBWTask+0x80>)
 800249a:	f001 fbcb 	bl	8003c34 <HAL_GPIO_WritePin>
 800249e:	2201      	movs	r2, #1
 80024a0:	2120      	movs	r1, #32
 80024a2:	4811      	ldr	r0, [pc, #68]	; (80024e8 <runBWTask+0x80>)
 80024a4:	f001 fbc6 	bl	8003c34 <HAL_GPIO_WritePin>
 80024a8:	2200      	movs	r2, #0
 80024aa:	2110      	movs	r1, #16
 80024ac:	480e      	ldr	r0, [pc, #56]	; (80024e8 <runBWTask+0x80>)
 80024ae:	f001 fbc1 	bl	8003c34 <HAL_GPIO_WritePin>
      __RESET_SERVO_TURN(&htim1);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <runBWTask+0x84>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	228e      	movs	r2, #142	; 0x8e
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
 80024ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024be:	f001 f885 	bl	80035cc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <runBWTask+0x84>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c8:	230c      	movs	r3, #12
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2305      	movs	r3, #5
 80024ce:	2132      	movs	r1, #50	; 0x32
 80024d0:	2000      	movs	r0, #0
 80024d2:	f008 fa9b 	bl	800aa0c <OLED_ShowNumber>
      StraightLineMove(SPEED_MODE_T);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7ff f982 	bl	80017e0 <StraightLineMove>
    if (curTask != TASK_MOVE_BACKWARD)
 80024dc:	e7c8      	b.n	8002470 <runBWTask+0x8>
 80024de:	bf00      	nop
 80024e0:	20000138 	.word	0x20000138
 80024e4:	0800b668 	.word	0x0800b668
 80024e8:	40020000 	.word	0x40020000
 80024ec:	20000214 	.word	0x20000214

080024f0 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 80024f8:	4b9d      	ldr	r3, [pc, #628]	; (8002770 <runFLTask+0x280>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d003      	beq.n	8002508 <runFLTask+0x18>
      osDelay(100);
 8002500:	2064      	movs	r0, #100	; 0x64
 8002502:	f005 fb7d 	bl	8007c00 <osDelay>
 8002506:	e7f7      	b.n	80024f8 <runFLTask+0x8>
      // __SET_SERVO_TURN_MAX(&htim1, 0);
      // OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
      // __SET_MOTOR_DUTY(&htim8, 1000, 2000);
      // osDelay(1000);

      switch (curCmd.val)
 8002508:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <runFLTask+0x284>)
 800250a:	885b      	ldrh	r3, [r3, #2]
 800250c:	2b14      	cmp	r3, #20
 800250e:	f000 8081 	beq.w	8002614 <runFLTask+0x124>
 8002512:	2b1e      	cmp	r3, #30
 8002514:	f040 8107 	bne.w	8002726 <runFLTask+0x236>
      {
      case 30: // FL30 (4x2)
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8002518:	4b97      	ldr	r3, [pc, #604]	; (8002778 <runFLTask+0x288>)
 800251a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800251e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800277c <runFLTask+0x28c>
 8002522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	dd01      	ble.n	8002530 <runFLTask+0x40>
 800252c:	23e1      	movs	r3, #225	; 0xe1
 800252e:	e012      	b.n	8002556 <runFLTask+0x66>
 8002530:	4b91      	ldr	r3, [pc, #580]	; (8002778 <runFLTask+0x288>)
 8002532:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8002536:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002780 <runFLTask+0x290>
 800253a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	d501      	bpl.n	8002548 <runFLTask+0x58>
 8002544:	2355      	movs	r3, #85	; 0x55
 8002546:	e006      	b.n	8002556 <runFLTask+0x66>
 8002548:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <runFLTask+0x288>)
 800254a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800254e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002552:	ee17 3a90 	vmov	r3, s15
 8002556:	4a8b      	ldr	r2, [pc, #556]	; (8002784 <runFLTask+0x294>)
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
 800255c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002560:	f001 f834 	bl	80035cc <HAL_Delay>
 8002564:	4b84      	ldr	r3, [pc, #528]	; (8002778 <runFLTask+0x288>)
 8002566:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800256a:	4a87      	ldr	r2, [pc, #540]	; (8002788 <runFLTask+0x298>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b82      	ldr	r3, [pc, #520]	; (8002778 <runFLTask+0x288>)
 8002570:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	2104      	movs	r1, #4
 8002582:	4882      	ldr	r0, [pc, #520]	; (800278c <runFLTask+0x29c>)
 8002584:	f001 fb56 	bl	8003c34 <HAL_GPIO_WritePin>
 8002588:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <runFLTask+0x288>)
 800258a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800258e:	2b00      	cmp	r3, #0
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	2108      	movs	r1, #8
 800259c:	487b      	ldr	r0, [pc, #492]	; (800278c <runFLTask+0x29c>)
 800259e:	f001 fb49 	bl	8003c34 <HAL_GPIO_WritePin>
 80025a2:	4b75      	ldr	r3, [pc, #468]	; (8002778 <runFLTask+0x288>)
 80025a4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	2120      	movs	r1, #32
 80025b6:	4875      	ldr	r0, [pc, #468]	; (800278c <runFLTask+0x29c>)
 80025b8:	f001 fb3c 	bl	8003c34 <HAL_GPIO_WritePin>
 80025bc:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <runFLTask+0x288>)
 80025be:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	2110      	movs	r1, #16
 80025d0:	486e      	ldr	r0, [pc, #440]	; (800278c <runFLTask+0x29c>)
 80025d2:	f001 fb2f 	bl	8003c34 <HAL_GPIO_WritePin>
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <runFLTask+0x288>)
 80025d8:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80025dc:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <runFLTask+0x2a0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <runFLTask+0x288>)
 80025e4:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 80025e8:	4b69      	ldr	r3, [pc, #420]	; (8002790 <runFLTask+0x2a0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80025ee:	4866      	ldr	r0, [pc, #408]	; (8002788 <runFLTask+0x298>)
 80025f0:	f7ff fd9e 	bl	8002130 <RobotTurn>
        osDelay(10);
 80025f4:	200a      	movs	r0, #10
 80025f6:	f005 fb03 	bl	8007c00 <osDelay>
        targetDist = 4;
 80025fa:	4b66      	ldr	r3, [pc, #408]	; (8002794 <runFLTask+0x2a4>)
 80025fc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002600:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	4863      	ldr	r0, [pc, #396]	; (8002794 <runFLTask+0x2a4>)
 8002608:	f7ff faa2 	bl	8001b50 <RobotMoveDist>
        osDelay(10);
 800260c:	200a      	movs	r0, #10
 800260e:	f005 faf7 	bl	8007c00 <osDelay>
        break;
 8002612:	e127      	b.n	8002864 <runFLTask+0x374>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 4;
 8002614:	4b5f      	ldr	r3, [pc, #380]	; (8002794 <runFLTask+0x2a4>)
 8002616:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800261a:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	485c      	ldr	r0, [pc, #368]	; (8002794 <runFLTask+0x2a4>)
 8002622:	f7ff fa95 	bl	8001b50 <RobotMoveDist>
        osDelay(10);
 8002626:	200a      	movs	r0, #10
 8002628:	f005 faea 	bl	8007c00 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 800262c:	4b52      	ldr	r3, [pc, #328]	; (8002778 <runFLTask+0x288>)
 800262e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002632:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800277c <runFLTask+0x28c>
 8002636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263e:	dd01      	ble.n	8002644 <runFLTask+0x154>
 8002640:	23e1      	movs	r3, #225	; 0xe1
 8002642:	e012      	b.n	800266a <runFLTask+0x17a>
 8002644:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <runFLTask+0x288>)
 8002646:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800264a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002780 <runFLTask+0x290>
 800264e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	d501      	bpl.n	800265c <runFLTask+0x16c>
 8002658:	2355      	movs	r3, #85	; 0x55
 800265a:	e006      	b.n	800266a <runFLTask+0x17a>
 800265c:	4b46      	ldr	r3, [pc, #280]	; (8002778 <runFLTask+0x288>)
 800265e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	4a46      	ldr	r2, [pc, #280]	; (8002784 <runFLTask+0x294>)
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
 8002670:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002674:	f000 ffaa 	bl	80035cc <HAL_Delay>
 8002678:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <runFLTask+0x288>)
 800267a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800267e:	4a42      	ldr	r2, [pc, #264]	; (8002788 <runFLTask+0x298>)
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <runFLTask+0x288>)
 8002684:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf0c      	ite	eq
 800268c:	2301      	moveq	r3, #1
 800268e:	2300      	movne	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	2104      	movs	r1, #4
 8002696:	483d      	ldr	r0, [pc, #244]	; (800278c <runFLTask+0x29c>)
 8002698:	f001 facc 	bl	8003c34 <HAL_GPIO_WritePin>
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <runFLTask+0x288>)
 800269e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	2108      	movs	r1, #8
 80026b0:	4836      	ldr	r0, [pc, #216]	; (800278c <runFLTask+0x29c>)
 80026b2:	f001 fabf 	bl	8003c34 <HAL_GPIO_WritePin>
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <runFLTask+0x288>)
 80026b8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	2120      	movs	r1, #32
 80026ca:	4830      	ldr	r0, [pc, #192]	; (800278c <runFLTask+0x29c>)
 80026cc:	f001 fab2 	bl	8003c34 <HAL_GPIO_WritePin>
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <runFLTask+0x288>)
 80026d2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	2110      	movs	r1, #16
 80026e4:	4829      	ldr	r0, [pc, #164]	; (800278c <runFLTask+0x29c>)
 80026e6:	f001 faa5 	bl	8003c34 <HAL_GPIO_WritePin>
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <runFLTask+0x288>)
 80026ec:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <runFLTask+0x2a0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <runFLTask+0x288>)
 80026f8:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <runFLTask+0x2a0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8002702:	4821      	ldr	r0, [pc, #132]	; (8002788 <runFLTask+0x298>)
 8002704:	f7ff fd14 	bl	8002130 <RobotTurn>
        osDelay(10);
 8002708:	200a      	movs	r0, #10
 800270a:	f005 fa79 	bl	8007c00 <osDelay>
        targetDist = 7;
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <runFLTask+0x2a4>)
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <runFLTask+0x2a8>)
 8002712:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8002714:	2200      	movs	r2, #0
 8002716:	2100      	movs	r1, #0
 8002718:	481e      	ldr	r0, [pc, #120]	; (8002794 <runFLTask+0x2a4>)
 800271a:	f7ff fa19 	bl	8001b50 <RobotMoveDist>
        osDelay(10);
 800271e:	200a      	movs	r0, #10
 8002720:	f005 fa6e 	bl	8007c00 <osDelay>
        break;
 8002724:	e09e      	b.n	8002864 <runFLTask+0x374>
      default: // FL00 (indoor 3x1)
        targetDist = 4;
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <runFLTask+0x2a4>)
 8002728:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800272c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	4818      	ldr	r0, [pc, #96]	; (8002794 <runFLTask+0x2a4>)
 8002734:	f7ff fa0c 	bl	8001b50 <RobotMoveDist>
        osDelay(10);
 8002738:	200a      	movs	r0, #10
 800273a:	f005 fa61 	bl	8007c00 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <runFLTask+0x288>)
 8002740:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002744:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800277c <runFLTask+0x28c>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	dd01      	ble.n	8002756 <runFLTask+0x266>
 8002752:	23e1      	movs	r3, #225	; 0xe1
 8002754:	e029      	b.n	80027aa <runFLTask+0x2ba>
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <runFLTask+0x288>)
 8002758:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800275c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002780 <runFLTask+0x290>
 8002760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	d518      	bpl.n	800279c <runFLTask+0x2ac>
 800276a:	2355      	movs	r3, #85	; 0x55
 800276c:	e01d      	b.n	80027aa <runFLTask+0x2ba>
 800276e:	bf00      	nop
 8002770:	20000138 	.word	0x20000138
 8002774:	2000039c 	.word	0x2000039c
 8002778:	20000008 	.word	0x20000008
 800277c:	43610000 	.word	0x43610000
 8002780:	42aa0000 	.word	0x42aa0000
 8002784:	20000214 	.word	0x20000214
 8002788:	200003b0 	.word	0x200003b0
 800278c:	40020000 	.word	0x40020000
 8002790:	200002a4 	.word	0x200002a4
 8002794:	200003c4 	.word	0x200003c4
 8002798:	40e00000 	.word	0x40e00000
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <runFLTask+0x378>)
 800279e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80027a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027a6:	ee17 3a90 	vmov	r3, s15
 80027aa:	4a30      	ldr	r2, [pc, #192]	; (800286c <runFLTask+0x37c>)
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
 80027b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80027b4:	f000 ff0a 	bl	80035cc <HAL_Delay>
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <runFLTask+0x378>)
 80027ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027bc:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <runFLTask+0x380>)
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <runFLTask+0x378>)
 80027c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	2104      	movs	r1, #4
 80027d4:	4827      	ldr	r0, [pc, #156]	; (8002874 <runFLTask+0x384>)
 80027d6:	f001 fa2d 	bl	8003c34 <HAL_GPIO_WritePin>
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <runFLTask+0x378>)
 80027dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	2108      	movs	r1, #8
 80027ee:	4821      	ldr	r0, [pc, #132]	; (8002874 <runFLTask+0x384>)
 80027f0:	f001 fa20 	bl	8003c34 <HAL_GPIO_WritePin>
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <runFLTask+0x378>)
 80027f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	2120      	movs	r1, #32
 8002808:	481a      	ldr	r0, [pc, #104]	; (8002874 <runFLTask+0x384>)
 800280a:	f001 fa13 	bl	8003c34 <HAL_GPIO_WritePin>
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <runFLTask+0x378>)
 8002810:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	2110      	movs	r1, #16
 8002822:	4814      	ldr	r0, [pc, #80]	; (8002874 <runFLTask+0x384>)
 8002824:	f001 fa06 	bl	8003c34 <HAL_GPIO_WritePin>
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <runFLTask+0x378>)
 800282a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <runFLTask+0x388>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	635a      	str	r2, [r3, #52]	; 0x34
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <runFLTask+0x378>)
 8002836:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800283a:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <runFLTask+0x388>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <runFLTask+0x380>)
 8002842:	f7ff fc75 	bl	8002130 <RobotTurn>
        osDelay(10);
 8002846:	200a      	movs	r0, #10
 8002848:	f005 f9da 	bl	8007c00 <osDelay>
        targetDist = 7;
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <runFLTask+0x38c>)
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <runFLTask+0x390>)
 8002850:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	4809      	ldr	r0, [pc, #36]	; (800287c <runFLTask+0x38c>)
 8002858:	f7ff f97a 	bl	8001b50 <RobotMoveDist>
        osDelay(10);
 800285c:	200a      	movs	r0, #10
 800285e:	f005 f9cf 	bl	8007c00 <osDelay>
        break;
 8002862:	bf00      	nop
    if (curTask != TASK_FL)
 8002864:	e648      	b.n	80024f8 <runFLTask+0x8>
 8002866:	bf00      	nop
 8002868:	20000008 	.word	0x20000008
 800286c:	20000214 	.word	0x20000214
 8002870:	200003b0 	.word	0x200003b0
 8002874:	40020000 	.word	0x40020000
 8002878:	200002a4 	.word	0x200002a4
 800287c:	200003c4 	.word	0x200003c4
 8002880:	40e00000 	.word	0x40e00000

08002884 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 800288c:	4b1f      	ldr	r3, [pc, #124]	; (800290c <runFRTask+0x88>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d003      	beq.n	800289c <runFRTask+0x18>
      osDelay(100);
 8002894:	2064      	movs	r0, #100	; 0x64
 8002896:	f005 f9b3 	bl	8007c00 <osDelay>
 800289a:	e7f7      	b.n	800288c <runFRTask+0x8>
    else
    {
      targetAngle = -90;
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <runFRTask+0x8c>)
 800289e:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <runFRTask+0x90>)
 80028a0:	601a      	str	r2, [r3, #0]
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2104      	movs	r1, #4
 80028a6:	481c      	ldr	r0, [pc, #112]	; (8002918 <runFRTask+0x94>)
 80028a8:	f001 f9c4 	bl	8003c34 <HAL_GPIO_WritePin>
 80028ac:	2201      	movs	r2, #1
 80028ae:	2108      	movs	r1, #8
 80028b0:	4819      	ldr	r0, [pc, #100]	; (8002918 <runFRTask+0x94>)
 80028b2:	f001 f9bf 	bl	8003c34 <HAL_GPIO_WritePin>
 80028b6:	2200      	movs	r2, #0
 80028b8:	2120      	movs	r1, #32
 80028ba:	4817      	ldr	r0, [pc, #92]	; (8002918 <runFRTask+0x94>)
 80028bc:	f001 f9ba 	bl	8003c34 <HAL_GPIO_WritePin>
 80028c0:	2201      	movs	r2, #1
 80028c2:	2110      	movs	r1, #16
 80028c4:	4814      	ldr	r0, [pc, #80]	; (8002918 <runFRTask+0x94>)
 80028c6:	f001 f9b5 	bl	8003c34 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 1);
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <runFRTask+0x98>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	22e1      	movs	r2, #225	; 0xe1
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
 80028d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80028d6:	f000 fe79 	bl	80035cc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <runFRTask+0x98>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e0:	230c      	movs	r3, #12
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2305      	movs	r3, #5
 80028e6:	2132      	movs	r1, #50	; 0x32
 80028e8:	2000      	movs	r0, #0
 80028ea:	f008 f88f 	bl	800aa0c <OLED_ShowNumber>
      __SET_MOTOR_DUTY(&htim8, 1000, 2000);
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <runFRTask+0x9c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <runFRTask+0x9c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
      osDelay(1000);
 8002902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002906:	f005 f97b 	bl	8007c00 <osDelay>
    if (curTask != TASK_FR)
 800290a:	e7bf      	b.n	800288c <runFRTask+0x8>
 800290c:	20000138 	.word	0x20000138
 8002910:	200003b0 	.word	0x200003b0
 8002914:	c2b40000 	.word	0xc2b40000
 8002918:	40020000 	.word	0x40020000
 800291c:	20000214 	.word	0x20000214
 8002920:	200002a4 	.word	0x200002a4

08002924 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af02      	add	r7, sp, #8
 800292a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <runBLTask+0x88>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d003      	beq.n	800293c <runBLTask+0x18>
      osDelay(100);
 8002934:	2064      	movs	r0, #100	; 0x64
 8002936:	f005 f963 	bl	8007c00 <osDelay>
 800293a:	e7f7      	b.n	800292c <runBLTask+0x8>
    else
    {
      targetAngle = -90;
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <runBLTask+0x8c>)
 800293e:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <runBLTask+0x90>)
 8002940:	601a      	str	r2, [r3, #0]
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8002942:	2201      	movs	r2, #1
 8002944:	2104      	movs	r1, #4
 8002946:	481c      	ldr	r0, [pc, #112]	; (80029b8 <runBLTask+0x94>)
 8002948:	f001 f974 	bl	8003c34 <HAL_GPIO_WritePin>
 800294c:	2200      	movs	r2, #0
 800294e:	2108      	movs	r1, #8
 8002950:	4819      	ldr	r0, [pc, #100]	; (80029b8 <runBLTask+0x94>)
 8002952:	f001 f96f 	bl	8003c34 <HAL_GPIO_WritePin>
 8002956:	2201      	movs	r2, #1
 8002958:	2120      	movs	r1, #32
 800295a:	4817      	ldr	r0, [pc, #92]	; (80029b8 <runBLTask+0x94>)
 800295c:	f001 f96a 	bl	8003c34 <HAL_GPIO_WritePin>
 8002960:	2200      	movs	r2, #0
 8002962:	2110      	movs	r1, #16
 8002964:	4814      	ldr	r0, [pc, #80]	; (80029b8 <runBLTask+0x94>)
 8002966:	f001 f965 	bl	8003c34 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 0);
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <runBLTask+0x98>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2255      	movs	r2, #85	; 0x55
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
 8002972:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002976:	f000 fe29 	bl	80035cc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <runBLTask+0x98>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002980:	230c      	movs	r3, #12
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2305      	movs	r3, #5
 8002986:	2132      	movs	r1, #50	; 0x32
 8002988:	2000      	movs	r0, #0
 800298a:	f008 f83f 	bl	800aa0c <OLED_ShowNumber>
      __SET_MOTOR_DUTY(&htim8, 1000, 2000);
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <runBLTask+0x9c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <runBLTask+0x9c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38
      osDelay(1000);
 80029a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a6:	f005 f92b 	bl	8007c00 <osDelay>
    if (curTask != TASK_BL)
 80029aa:	e7bf      	b.n	800292c <runBLTask+0x8>
 80029ac:	20000138 	.word	0x20000138
 80029b0:	200003b0 	.word	0x200003b0
 80029b4:	c2b40000 	.word	0xc2b40000
 80029b8:	40020000 	.word	0x40020000
 80029bc:	20000214 	.word	0x20000214
 80029c0:	200002a4 	.word	0x200002a4

080029c4 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <runBRTask+0xa8>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d003      	beq.n	80029dc <runBRTask+0x18>
      osDelay(100);
 80029d4:	2064      	movs	r0, #100	; 0x64
 80029d6:	f005 f913 	bl	8007c00 <osDelay>
 80029da:	e7f7      	b.n	80029cc <runBRTask+0x8>
    else
    {
      OLED_ShowString(0, 30, (uint8_t *)("FW\0"));
 80029dc:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <runBRTask+0xac>)
 80029de:	211e      	movs	r1, #30
 80029e0:	2000      	movs	r0, #0
 80029e2:	f008 f881 	bl	800aae8 <OLED_ShowString>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80029e6:	2201      	movs	r2, #1
 80029e8:	2104      	movs	r1, #4
 80029ea:	4822      	ldr	r0, [pc, #136]	; (8002a74 <runBRTask+0xb0>)
 80029ec:	f001 f922 	bl	8003c34 <HAL_GPIO_WritePin>
 80029f0:	2200      	movs	r2, #0
 80029f2:	2108      	movs	r1, #8
 80029f4:	481f      	ldr	r0, [pc, #124]	; (8002a74 <runBRTask+0xb0>)
 80029f6:	f001 f91d 	bl	8003c34 <HAL_GPIO_WritePin>
 80029fa:	2201      	movs	r2, #1
 80029fc:	2120      	movs	r1, #32
 80029fe:	481d      	ldr	r0, [pc, #116]	; (8002a74 <runBRTask+0xb0>)
 8002a00:	f001 f918 	bl	8003c34 <HAL_GPIO_WritePin>
 8002a04:	2200      	movs	r2, #0
 8002a06:	2110      	movs	r1, #16
 8002a08:	481a      	ldr	r0, [pc, #104]	; (8002a74 <runBRTask+0xb0>)
 8002a0a:	f001 f913 	bl	8003c34 <HAL_GPIO_WritePin>
      __SET_SERVO_TURN_MAX(&htim1, 1);
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <runBRTask+0xb4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	22e1      	movs	r2, #225	; 0xe1
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
 8002a16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a1a:	f000 fdd7 	bl	80035cc <HAL_Delay>
      OLED_ShowNumber(0, 50, (&htim1)->Instance->CCR4, 5, 12);
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <runBRTask+0xb4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a24:	230c      	movs	r3, #12
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2305      	movs	r3, #5
 8002a2a:	2132      	movs	r1, #50	; 0x32
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f007 ffed 	bl	800aa0c <OLED_ShowNumber>
      startTick = HAL_GetTick();
 8002a32:	f000 fdbf 	bl	80035b4 <HAL_GetTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <runBRTask+0xb8>)
 8002a3c:	801a      	strh	r2, [r3, #0]
      while (HAL_GetTick() - startTick < period)
 8002a3e:	e009      	b.n	8002a54 <runBRTask+0x90>
      {
        __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <runBRTask+0xbc>)
 8002a42:	881a      	ldrh	r2, [r3, #0]
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <runBRTask+0xc0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	635a      	str	r2, [r3, #52]	; 0x34
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <runBRTask+0xc4>)
 8002a4c:	881a      	ldrh	r2, [r3, #0]
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <runBRTask+0xc0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
      while (HAL_GetTick() - startTick < period)
 8002a54:	f000 fdae 	bl	80035b4 <HAL_GetTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <runBRTask+0xb8>)
 8002a5c:	8812      	ldrh	r2, [r2, #0]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <runBRTask+0xc8>)
 8002a62:	8812      	ldrh	r2, [r2, #0]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d3eb      	bcc.n	8002a40 <runBRTask+0x7c>
    if (curTask != TASK_BR)
 8002a68:	e7b0      	b.n	80029cc <runBRTask+0x8>
 8002a6a:	bf00      	nop
 8002a6c:	20000138 	.word	0x20000138
 8002a70:	0800b664 	.word	0x0800b664
 8002a74:	40020000 	.word	0x40020000
 8002a78:	20000214 	.word	0x20000214
 8002a7c:	20000410 	.word	0x20000410
 8002a80:	20000002 	.word	0x20000002
 8002a84:	200002a4 	.word	0x200002a4
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	20000142 	.word	0x20000142

08002a90 <runADCTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runADCTask */
void runADCTask(void *argument)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runADCTask */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f005 f8b1 	bl	8007c00 <osDelay>
 8002a9e:	e7fb      	b.n	8002a98 <runADCTask+0x8>

08002aa0 <runMoveDistTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistTask */
void runMoveDistTask(void *argument)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    //     // else
    //     //   __READ_COMMAND(cQueue, curCmd, rxMsg);
    //   }

    //   osDelay(100);
    osDelay(1);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f005 f8a9 	bl	8007c00 <osDelay>
 8002aae:	e7fb      	b.n	8002aa8 <runMoveDistTask+0x8>

08002ab0 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 8002ab8:	4bc6      	ldr	r3, [pc, #792]	; (8002dd4 <runCmdTask+0x324>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	2b63      	cmp	r3, #99	; 0x63
 8002ac0:	f200 8257 	bhi.w	8002f72 <runCmdTask+0x4c2>
 8002ac4:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <runCmdTask+0x1c>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002c5d 	.word	0x08002c5d
 8002ad0:	08002c5d 	.word	0x08002c5d
 8002ad4:	08002c79 	.word	0x08002c79
 8002ad8:	08002c79 	.word	0x08002c79
 8002adc:	08002c79 	.word	0x08002c79
 8002ae0:	08002c79 	.word	0x08002c79
 8002ae4:	08002e49 	.word	0x08002e49
 8002ae8:	08002e57 	.word	0x08002e57
 8002aec:	08002e65 	.word	0x08002e65
 8002af0:	08002e73 	.word	0x08002e73
 8002af4:	08002e81 	.word	0x08002e81
 8002af8:	08002e81 	.word	0x08002e81
 8002afc:	08002f73 	.word	0x08002f73
 8002b00:	08002f73 	.word	0x08002f73
 8002b04:	08002f73 	.word	0x08002f73
 8002b08:	08002f73 	.word	0x08002f73
 8002b0c:	08002f73 	.word	0x08002f73
 8002b10:	08002f73 	.word	0x08002f73
 8002b14:	08002f73 	.word	0x08002f73
 8002b18:	08002f73 	.word	0x08002f73
 8002b1c:	08002f73 	.word	0x08002f73
 8002b20:	08002f73 	.word	0x08002f73
 8002b24:	08002f73 	.word	0x08002f73
 8002b28:	08002f73 	.word	0x08002f73
 8002b2c:	08002f73 	.word	0x08002f73
 8002b30:	08002f73 	.word	0x08002f73
 8002b34:	08002f73 	.word	0x08002f73
 8002b38:	08002f73 	.word	0x08002f73
 8002b3c:	08002f73 	.word	0x08002f73
 8002b40:	08002f73 	.word	0x08002f73
 8002b44:	08002f73 	.word	0x08002f73
 8002b48:	08002f73 	.word	0x08002f73
 8002b4c:	08002f73 	.word	0x08002f73
 8002b50:	08002f73 	.word	0x08002f73
 8002b54:	08002f73 	.word	0x08002f73
 8002b58:	08002f73 	.word	0x08002f73
 8002b5c:	08002f73 	.word	0x08002f73
 8002b60:	08002f73 	.word	0x08002f73
 8002b64:	08002f73 	.word	0x08002f73
 8002b68:	08002f73 	.word	0x08002f73
 8002b6c:	08002f73 	.word	0x08002f73
 8002b70:	08002f73 	.word	0x08002f73
 8002b74:	08002f73 	.word	0x08002f73
 8002b78:	08002f73 	.word	0x08002f73
 8002b7c:	08002f73 	.word	0x08002f73
 8002b80:	08002f73 	.word	0x08002f73
 8002b84:	08002f73 	.word	0x08002f73
 8002b88:	08002f73 	.word	0x08002f73
 8002b8c:	08002f73 	.word	0x08002f73
 8002b90:	08002f73 	.word	0x08002f73
 8002b94:	08002f73 	.word	0x08002f73
 8002b98:	08002f73 	.word	0x08002f73
 8002b9c:	08002f73 	.word	0x08002f73
 8002ba0:	08002f73 	.word	0x08002f73
 8002ba4:	08002f73 	.word	0x08002f73
 8002ba8:	08002f73 	.word	0x08002f73
 8002bac:	08002f73 	.word	0x08002f73
 8002bb0:	08002f73 	.word	0x08002f73
 8002bb4:	08002f73 	.word	0x08002f73
 8002bb8:	08002f73 	.word	0x08002f73
 8002bbc:	08002f73 	.word	0x08002f73
 8002bc0:	08002f73 	.word	0x08002f73
 8002bc4:	08002f73 	.word	0x08002f73
 8002bc8:	08002f73 	.word	0x08002f73
 8002bcc:	08002f73 	.word	0x08002f73
 8002bd0:	08002f73 	.word	0x08002f73
 8002bd4:	08002f73 	.word	0x08002f73
 8002bd8:	08002f73 	.word	0x08002f73
 8002bdc:	08002f73 	.word	0x08002f73
 8002be0:	08002f73 	.word	0x08002f73
 8002be4:	08002f73 	.word	0x08002f73
 8002be8:	08002f73 	.word	0x08002f73
 8002bec:	08002f73 	.word	0x08002f73
 8002bf0:	08002f73 	.word	0x08002f73
 8002bf4:	08002f73 	.word	0x08002f73
 8002bf8:	08002f73 	.word	0x08002f73
 8002bfc:	08002f73 	.word	0x08002f73
 8002c00:	08002f73 	.word	0x08002f73
 8002c04:	08002f73 	.word	0x08002f73
 8002c08:	08002f73 	.word	0x08002f73
 8002c0c:	08002f73 	.word	0x08002f73
 8002c10:	08002f73 	.word	0x08002f73
 8002c14:	08002f73 	.word	0x08002f73
 8002c18:	08002f73 	.word	0x08002f73
 8002c1c:	08002f73 	.word	0x08002f73
 8002c20:	08002f73 	.word	0x08002f73
 8002c24:	08002f73 	.word	0x08002f73
 8002c28:	08002ec9 	.word	0x08002ec9
 8002c2c:	08002ec9 	.word	0x08002ec9
 8002c30:	08002f73 	.word	0x08002f73
 8002c34:	08002f73 	.word	0x08002f73
 8002c38:	08002f73 	.word	0x08002f73
 8002c3c:	08002f73 	.word	0x08002f73
 8002c40:	08002f73 	.word	0x08002f73
 8002c44:	08002f73 	.word	0x08002f73
 8002c48:	08002f73 	.word	0x08002f73
 8002c4c:	08002f73 	.word	0x08002f73
 8002c50:	08002f73 	.word	0x08002f73
 8002c54:	08002f73 	.word	0x08002f73
 8002c58:	08002f73 	.word	0x08002f73
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
    case 2: // BW
      curTask = curCmd.index == 1 ? TASK_MOVE_FOREWARD : TASK_MOVE_BACKWARD;
 8002c5c:	4b5d      	ldr	r3, [pc, #372]	; (8002dd4 <runCmdTask+0x324>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b5a      	ldr	r3, [pc, #360]	; (8002dd8 <runCmdTask+0x328>)
 8002c6e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002c70:	4b58      	ldr	r3, [pc, #352]	; (8002dd4 <runCmdTask+0x324>)
 8002c72:	2263      	movs	r2, #99	; 0x63
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e17d      	b.n	8002f74 <runCmdTask+0x4c4>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8002c78:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <runCmdTask+0x324>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <runCmdTask+0x32c>)
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	edd3 7a00 	vldr	s15, [r3]
 8002c88:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002de0 <runCmdTask+0x330>
 8002c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	dd01      	ble.n	8002c9a <runCmdTask+0x1ea>
 8002c96:	23e1      	movs	r3, #225	; 0xe1
 8002c98:	e01c      	b.n	8002cd4 <runCmdTask+0x224>
 8002c9a:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <runCmdTask+0x324>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	4a4f      	ldr	r2, [pc, #316]	; (8002ddc <runCmdTask+0x32c>)
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002de4 <runCmdTask+0x334>
 8002cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	d501      	bpl.n	8002cbc <runCmdTask+0x20c>
 8002cb8:	2355      	movs	r3, #85	; 0x55
 8002cba:	e00b      	b.n	8002cd4 <runCmdTask+0x224>
 8002cbc:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <runCmdTask+0x324>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4a46      	ldr	r2, [pc, #280]	; (8002ddc <runCmdTask+0x32c>)
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd0:	ee17 3a90 	vmov	r3, s15
 8002cd4:	4a44      	ldr	r2, [pc, #272]	; (8002de8 <runCmdTask+0x338>)
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002cde:	f000 fc75 	bl	80035cc <HAL_Delay>
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <runCmdTask+0x324>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <runCmdTask+0x32c>)
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	4413      	add	r3, r2
 8002cec:	3308      	adds	r3, #8
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3e      	ldr	r2, [pc, #248]	; (8002dec <runCmdTask+0x33c>)
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <runCmdTask+0x324>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <runCmdTask+0x32c>)
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	330c      	adds	r3, #12
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2104      	movs	r1, #4
 8002d10:	4837      	ldr	r0, [pc, #220]	; (8002df0 <runCmdTask+0x340>)
 8002d12:	f000 ff8f 	bl	8003c34 <HAL_GPIO_WritePin>
 8002d16:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <runCmdTask+0x324>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <runCmdTask+0x32c>)
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	330c      	adds	r3, #12
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2108      	movs	r1, #8
 8002d32:	482f      	ldr	r0, [pc, #188]	; (8002df0 <runCmdTask+0x340>)
 8002d34:	f000 ff7e 	bl	8003c34 <HAL_GPIO_WritePin>
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <runCmdTask+0x324>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4a27      	ldr	r2, [pc, #156]	; (8002ddc <runCmdTask+0x32c>)
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	330c      	adds	r3, #12
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	2120      	movs	r1, #32
 8002d54:	4826      	ldr	r0, [pc, #152]	; (8002df0 <runCmdTask+0x340>)
 8002d56:	f000 ff6d 	bl	8003c34 <HAL_GPIO_WritePin>
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <runCmdTask+0x324>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <runCmdTask+0x32c>)
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	330c      	adds	r3, #12
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	2110      	movs	r1, #16
 8002d76:	481e      	ldr	r0, [pc, #120]	; (8002df0 <runCmdTask+0x340>)
 8002d78:	f000 ff5c 	bl	8003c34 <HAL_GPIO_WritePin>
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <runCmdTask+0x324>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <runCmdTask+0x32c>)
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4413      	add	r3, r2
 8002d86:	881a      	ldrh	r2, [r3, #0]
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <runCmdTask+0x344>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <runCmdTask+0x324>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <runCmdTask+0x32c>)
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	4413      	add	r3, r2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <runCmdTask+0x344>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <runCmdTask+0x348>)
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <runCmdTask+0x348>)
 8002da8:	785b      	ldrb	r3, [r3, #1]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d12e      	bne.n	8002e0c <runCmdTask+0x35c>
      {
        __CLEAR_CURCMD(curCmd);
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <runCmdTask+0x324>)
 8002db0:	2264      	movs	r2, #100	; 0x64
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <runCmdTask+0x324>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <runCmdTask+0x34c>)
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	4810      	ldr	r0, [pc, #64]	; (8002e00 <runCmdTask+0x350>)
 8002dc0:	f007 ff50 	bl	800ac64 <sniprintf>
 8002dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc8:	2206      	movs	r2, #6
 8002dca:	490e      	ldr	r1, [pc, #56]	; (8002e04 <runCmdTask+0x354>)
 8002dcc:	480e      	ldr	r0, [pc, #56]	; (8002e08 <runCmdTask+0x358>)
 8002dce:	f003 fdcc 	bl	800696a <HAL_UART_Transmit>
 8002dd2:	e035      	b.n	8002e40 <runCmdTask+0x390>
 8002dd4:	2000039c 	.word	0x2000039c
 8002dd8:	20000138 	.word	0x20000138
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	43610000 	.word	0x43610000
 8002de4:	42aa0000 	.word	0x42aa0000
 8002de8:	20000214 	.word	0x20000214
 8002dec:	200003b0 	.word	0x200003b0
 8002df0:	40020000 	.word	0x40020000
 8002df4:	200002a4 	.word	0x200002a4
 8002df8:	20000368 	.word	0x20000368
 8002dfc:	0800b654 	.word	0x0800b654
 8002e00:	200003a0 	.word	0x200003a0
 8002e04:	0800b65c 	.word	0x0800b65c
 8002e08:	200002ec 	.word	0x200002ec
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8002e0c:	4b5b      	ldr	r3, [pc, #364]	; (8002f7c <runCmdTask+0x4cc>)
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <runCmdTask+0x4d0>)
 8002e12:	495a      	ldr	r1, [pc, #360]	; (8002f7c <runCmdTask+0x4cc>)
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <runCmdTask+0x4cc>)
 8002e1e:	785b      	ldrb	r3, [r3, #1]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a56      	ldr	r2, [pc, #344]	; (8002f7c <runCmdTask+0x4cc>)
 8002e24:	7892      	ldrb	r2, [r2, #2]
 8002e26:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e2a:	fb01 f202 	mul.w	r2, r1, r2
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b52      	ldr	r3, [pc, #328]	; (8002f7c <runCmdTask+0x4cc>)
 8002e34:	705a      	strb	r2, [r3, #1]
 8002e36:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <runCmdTask+0x4d4>)
 8002e38:	210f      	movs	r1, #15
 8002e3a:	4853      	ldr	r0, [pc, #332]	; (8002f88 <runCmdTask+0x4d8>)
 8002e3c:	f007 ff12 	bl	800ac64 <sniprintf>
      __PEND_CURCMD(curCmd);
 8002e40:	4b4f      	ldr	r3, [pc, #316]	; (8002f80 <runCmdTask+0x4d0>)
 8002e42:	2263      	movs	r2, #99	; 0x63
 8002e44:	701a      	strb	r2, [r3, #0]
      break;
 8002e46:	e095      	b.n	8002f74 <runCmdTask+0x4c4>
    case 7: // FL
      curTask = TASK_FL;
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <runCmdTask+0x4dc>)
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002e4e:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <runCmdTask+0x4d0>)
 8002e50:	2263      	movs	r2, #99	; 0x63
 8002e52:	701a      	strb	r2, [r3, #0]
      break;
 8002e54:	e08e      	b.n	8002f74 <runCmdTask+0x4c4>
    case 8: // FR
      curTask = TASK_FR;
 8002e56:	4b4d      	ldr	r3, [pc, #308]	; (8002f8c <runCmdTask+0x4dc>)
 8002e58:	2203      	movs	r2, #3
 8002e5a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002e5c:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <runCmdTask+0x4d0>)
 8002e5e:	2263      	movs	r2, #99	; 0x63
 8002e60:	701a      	strb	r2, [r3, #0]
      break;
 8002e62:	e087      	b.n	8002f74 <runCmdTask+0x4c4>
    case 9: // BL
      curTask = TASK_BL;
 8002e64:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <runCmdTask+0x4dc>)
 8002e66:	2204      	movs	r2, #4
 8002e68:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002e6a:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <runCmdTask+0x4d0>)
 8002e6c:	2263      	movs	r2, #99	; 0x63
 8002e6e:	701a      	strb	r2, [r3, #0]
      break;
 8002e70:	e080      	b.n	8002f74 <runCmdTask+0x4c4>
    case 10: // BR
      curTask = TASK_BR;
 8002e72:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <runCmdTask+0x4dc>)
 8002e74:	2205      	movs	r2, #5
 8002e76:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <runCmdTask+0x4d0>)
 8002e7a:	2263      	movs	r2, #99	; 0x63
 8002e7c:	701a      	strb	r2, [r3, #0]
      break;
 8002e7e:	e079      	b.n	8002f74 <runCmdTask+0x4c4>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8002e80:	4b3f      	ldr	r3, [pc, #252]	; (8002f80 <runCmdTask+0x4d0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b0b      	cmp	r3, #11
 8002e86:	d004      	beq.n	8002e92 <runCmdTask+0x3e2>
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <runCmdTask+0x4e0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	22e1      	movs	r2, #225	; 0xe1
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e90:	e003      	b.n	8002e9a <runCmdTask+0x3ea>
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <runCmdTask+0x4e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2255      	movs	r2, #85	; 0x55
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e9e:	f000 fb95 	bl	80035cc <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <runCmdTask+0x4d0>)
 8002ea4:	2264      	movs	r2, #100	; 0x64
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	4b35      	ldr	r3, [pc, #212]	; (8002f80 <runCmdTask+0x4d0>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8002eae:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <runCmdTask+0x4e4>)
 8002eb0:	210f      	movs	r1, #15
 8002eb2:	4835      	ldr	r0, [pc, #212]	; (8002f88 <runCmdTask+0x4d8>)
 8002eb4:	f007 fed6 	bl	800ac64 <sniprintf>
 8002eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	4936      	ldr	r1, [pc, #216]	; (8002f98 <runCmdTask+0x4e8>)
 8002ec0:	4836      	ldr	r0, [pc, #216]	; (8002f9c <runCmdTask+0x4ec>)
 8002ec2:	f003 fd52 	bl	800696a <HAL_UART_Transmit>
      break;
 8002ec6:	e055      	b.n	8002f74 <runCmdTask+0x4c4>
    //   curTask = TASK_FASTESTPATH_V2;
    //   __PEND_CURCMD(curCmd);
    //   break;
    case 88: // Axxx, rotate left by xxx degree
    case 89: // Cxxx, rotate right by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 88);
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <runCmdTask+0x4d0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b58      	cmp	r3, #88	; 0x58
 8002ece:	d004      	beq.n	8002eda <runCmdTask+0x42a>
 8002ed0:	4b2f      	ldr	r3, [pc, #188]	; (8002f90 <runCmdTask+0x4e0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	22e1      	movs	r2, #225	; 0xe1
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ed8:	e003      	b.n	8002ee2 <runCmdTask+0x432>
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <runCmdTask+0x4e0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2255      	movs	r2, #85	; 0x55
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ee2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ee6:	f000 fb71 	bl	80035cc <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2104      	movs	r1, #4
 8002eee:	482c      	ldr	r0, [pc, #176]	; (8002fa0 <runCmdTask+0x4f0>)
 8002ef0:	f000 fea0 	bl	8003c34 <HAL_GPIO_WritePin>
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	4829      	ldr	r0, [pc, #164]	; (8002fa0 <runCmdTask+0x4f0>)
 8002efa:	f000 fe9b 	bl	8003c34 <HAL_GPIO_WritePin>
 8002efe:	2200      	movs	r2, #0
 8002f00:	2120      	movs	r1, #32
 8002f02:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <runCmdTask+0x4f0>)
 8002f04:	f000 fe96 	bl	8003c34 <HAL_GPIO_WritePin>
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2110      	movs	r1, #16
 8002f0c:	4824      	ldr	r0, [pc, #144]	; (8002fa0 <runCmdTask+0x4f0>)
 8002f0e:	f000 fe91 	bl	8003c34 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <runCmdTask+0x4d0>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b58      	cmp	r3, #88	; 0x58
 8002f18:	d113      	bne.n	8002f42 <runCmdTask+0x492>
      {
        targetAngle = curCmd.val;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <runCmdTask+0x4d0>)
 8002f1c:	885b      	ldrh	r3, [r3, #2]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <runCmdTask+0x4f4>)
 8002f28:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 800, 1200);
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <runCmdTask+0x4f8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <runCmdTask+0x4f8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f40:	e013      	b.n	8002f6a <runCmdTask+0x4ba>
      }
      else
      {
        targetAngle = -curCmd.val;
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <runCmdTask+0x4d0>)
 8002f44:	885b      	ldrh	r3, [r3, #2]
 8002f46:	425b      	negs	r3, r3
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <runCmdTask+0x4f4>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1200, 800);
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <runCmdTask+0x4f8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <runCmdTask+0x4f8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <runCmdTask+0x4d0>)
 8002f6c:	2263      	movs	r2, #99	; 0x63
 8002f6e:	701a      	strb	r2, [r3, #0]
      // RobotTurn(&targetAngle);
      break;
 8002f70:	e000      	b.n	8002f74 <runCmdTask+0x4c4>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8002f72:	bf00      	nop
    }
    osDelay(1);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f004 fe43 	bl	8007c00 <osDelay>
    switch (curCmd.index)
 8002f7a:	e59d      	b.n	8002ab8 <runCmdTask+0x8>
 8002f7c:	20000368 	.word	0x20000368
 8002f80:	2000039c 	.word	0x2000039c
 8002f84:	0800b66c 	.word	0x0800b66c
 8002f88:	200003a0 	.word	0x200003a0
 8002f8c:	20000138 	.word	0x20000138
 8002f90:	20000214 	.word	0x20000214
 8002f94:	0800b654 	.word	0x0800b654
 8002f98:	0800b65c 	.word	0x0800b65c
 8002f9c:	200002ec 	.word	0x200002ec
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	200003b0 	.word	0x200003b0
 8002fa8:	200002a4 	.word	0x200002a4

08002fac <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002fbe:	f000 fae5 	bl	800358c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40000800 	.word	0x40000800

08002fd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd4:	b672      	cpsid	i
}
 8002fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <Error_Handler+0x8>
	...

08002fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_MspInit+0x54>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4a11      	ldr	r2, [pc, #68]	; (8003030 <HAL_MspInit+0x54>)
 8002fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_MspInit+0x54>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_MspInit+0x54>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_MspInit+0x54>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_MspInit+0x54>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	210f      	movs	r1, #15
 800301e:	f06f 0001 	mvn.w	r0, #1
 8003022:	f000 fbaf 	bl	8003784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800

08003034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_I2C_MspInit+0x84>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d12c      	bne.n	80030b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_I2C_MspInit+0x88>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_I2C_MspInit+0x88>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_I2C_MspInit+0x88>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003072:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003078:	2312      	movs	r3, #18
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003080:	2303      	movs	r3, #3
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003084:	2304      	movs	r3, #4
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	480c      	ldr	r0, [pc, #48]	; (80030c0 <HAL_I2C_MspInit+0x8c>)
 8003090:	f000 fc34 	bl	80038fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_I2C_MspInit+0x88>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a07      	ldr	r2, [pc, #28]	; (80030bc <HAL_I2C_MspInit+0x88>)
 800309e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_I2C_MspInit+0x88>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	; 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40005400 	.word	0x40005400
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020400 	.word	0x40020400

080030c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_TIM_Base_MspInit+0xac>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a21      	ldr	r2, [pc, #132]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003102:	e030      	b.n	8003166 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_TIM_Base_MspInit+0xb4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d12b      	bne.n	8003166 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6453      	str	r3, [r2, #68]	; 0x44
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_TIM_Base_MspInit+0xb0>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003156:	2303      	movs	r3, #3
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4806      	ldr	r0, [pc, #24]	; (800317c <HAL_TIM_Base_MspInit+0xb8>)
 8003162:	f000 fbcb 	bl	80038fc <HAL_GPIO_Init>
}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000
 8003174:	40023800 	.word	0x40023800
 8003178:	40010400 	.word	0x40010400
 800317c:	40020800 	.word	0x40020800

08003180 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a0:	d14a      	bne.n	8003238 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a25      	ldr	r2, [pc, #148]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a1e      	ldr	r2, [pc, #120]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_TIM_Encoder_MspInit+0xc0>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4619      	mov	r1, r3
 8003212:	480c      	ldr	r0, [pc, #48]	; (8003244 <HAL_TIM_Encoder_MspInit+0xc4>)
 8003214:	f000 fb72 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003218:	2308      	movs	r3, #8
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003228:	2301      	movs	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <HAL_TIM_Encoder_MspInit+0xc8>)
 8003234:	f000 fb62 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	; 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400

0800324c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <HAL_TIM_MspPostInit+0x68>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d11e      	bne.n	80032ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_TIM_MspPostInit+0x6c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_TIM_MspPostInit+0x6c>)
 8003278:	f043 0310 	orr.w	r3, r3, #16
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_TIM_MspPostInit+0x6c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800328a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800329c:	2301      	movs	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4619      	mov	r1, r3
 80032a6:	4805      	ldr	r0, [pc, #20]	; (80032bc <HAL_TIM_MspPostInit+0x70>)
 80032a8:	f000 fb28 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032ac:	bf00      	nop
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40010000 	.word	0x40010000
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <HAL_UART_MspInit+0x94>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d134      	bne.n	800334c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <HAL_UART_MspInit+0x98>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <HAL_UART_MspInit+0x98>)
 80032ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_UART_MspInit+0x98>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_UART_MspInit+0x98>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a14      	ldr	r2, [pc, #80]	; (8003358 <HAL_UART_MspInit+0x98>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_UART_MspInit+0x98>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800331a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800332c:	2307      	movs	r3, #7
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4619      	mov	r1, r3
 8003336:	4809      	ldr	r0, [pc, #36]	; (800335c <HAL_UART_MspInit+0x9c>)
 8003338:	f000 fae0 	bl	80038fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2105      	movs	r1, #5
 8003340:	2027      	movs	r0, #39	; 0x27
 8003342:	f000 fa1f 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003346:	2027      	movs	r0, #39	; 0x27
 8003348:	f000 fa38 	bl	80037bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800334c:	bf00      	nop
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40004800 	.word	0x40004800
 8003358:	40023800 	.word	0x40023800
 800335c:	40020800 	.word	0x40020800

08003360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08c      	sub	sp, #48	; 0x30
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003370:	2200      	movs	r2, #0
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	201e      	movs	r0, #30
 8003376:	f000 fa05 	bl	8003784 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800337a:	201e      	movs	r0, #30
 800337c:	f000 fa1e 	bl	80037bc <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_InitTick+0xa0>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_InitTick+0xa0>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_InitTick+0xa0>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800339c:	f107 0210 	add.w	r2, r7, #16
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 f89e 	bl	80054e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033ac:	f002 f874 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 80033b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_InitTick+0xa4>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	3b01      	subs	r3, #1
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_InitTick+0xa8>)
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_InitTick+0xac>)
 80033c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_InitTick+0xa8>)
 80033c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033cc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80033ce:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <HAL_InitTick+0xa8>)
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_InitTick+0xa8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_InitTick+0xa8>)
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80033e0:	4809      	ldr	r0, [pc, #36]	; (8003408 <HAL_InitTick+0xa8>)
 80033e2:	f002 f8b3 	bl	800554c <HAL_TIM_Base_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80033ec:	4806      	ldr	r0, [pc, #24]	; (8003408 <HAL_InitTick+0xa8>)
 80033ee:	f002 f8fd 	bl	80055ec <HAL_TIM_Base_Start_IT>
 80033f2:	4603      	mov	r3, r0
 80033f4:	e000      	b.n	80033f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3730      	adds	r7, #48	; 0x30
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	431bde83 	.word	0x431bde83
 8003408:	20000414 	.word	0x20000414
 800340c:	40000800 	.word	0x40000800

08003410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <NMI_Handler+0x4>

08003416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <HardFault_Handler+0x4>

0800341c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <MemManage_Handler+0x4>

08003422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003426:	e7fe      	b.n	8003426 <BusFault_Handler+0x4>

08003428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800342c:	e7fe      	b.n	800342c <UsageFault_Handler+0x4>

0800342e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <TIM4_IRQHandler+0x10>)
 8003442:	f002 fb99 	bl	8005b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000414 	.word	0x20000414

08003450 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <USART3_IRQHandler+0x10>)
 8003456:	f003 fb4b 	bl	8006af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200002ec 	.word	0x200002ec

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f007 fc22 	bl	800acdc <__errno>
 8003498:	4603      	mov	r3, r0
 800349a:	220c      	movs	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <_sbrk+0x64>)
 80034b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20020000 	.word	0x20020000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	2000045c 	.word	0x2000045c
 80034cc:	20005300 	.word	0x20005300

080034d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <SystemInit+0x20>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <SystemInit+0x20>)
 80034dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800352c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034f8:	480d      	ldr	r0, [pc, #52]	; (8003530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034fa:	490e      	ldr	r1, [pc, #56]	; (8003534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034fc:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003500:	e002      	b.n	8003508 <LoopCopyDataInit>

08003502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003506:	3304      	adds	r3, #4

08003508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800350c:	d3f9      	bcc.n	8003502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800350e:	4a0b      	ldr	r2, [pc, #44]	; (800353c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003510:	4c0b      	ldr	r4, [pc, #44]	; (8003540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003514:	e001      	b.n	800351a <LoopFillZerobss>

08003516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003518:	3204      	adds	r2, #4

0800351a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800351c:	d3fb      	bcc.n	8003516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800351e:	f7ff ffd7 	bl	80034d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003522:	f007 fbe1 	bl	800ace8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003526:	f7fd fce7 	bl	8000ef8 <main>
  bx  lr    
 800352a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800352c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003534:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003538:	0800c2d8 	.word	0x0800c2d8
  ldr r2, =_sbss
 800353c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8003540:	200052fc 	.word	0x200052fc

08003544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003544:	e7fe      	b.n	8003544 <ADC_IRQHandler>
	...

08003548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_Init+0x40>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_Init+0x40>)
 8003552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_Init+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_Init+0x40>)
 800355e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003564:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_Init+0x40>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <HAL_Init+0x40>)
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003570:	2003      	movs	r0, #3
 8003572:	f000 f8fc 	bl	800376e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003576:	200f      	movs	r0, #15
 8003578:	f7ff fef2 	bl	8003360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800357c:	f7ff fd2e 	bl	8002fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00

0800358c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_IncTick+0x20>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_IncTick+0x24>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_IncTick+0x24>)
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	2000014c 	.word	0x2000014c
 80035b0:	20000460 	.word	0x20000460

080035b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return uwTick;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_GetTick+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000460 	.word	0x20000460

080035cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff ffee 	bl	80035b4 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035e4:	d005      	beq.n	80035f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_Delay+0x44>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035f2:	bf00      	nop
 80035f4:	f7ff ffde 	bl	80035b4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	429a      	cmp	r2, r3
 8003602:	d8f7      	bhi.n	80035f4 <HAL_Delay+0x28>
  {
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000014c 	.word	0x2000014c

08003614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800363c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	60d3      	str	r3, [r2, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__NVIC_GetPriorityGrouping+0x18>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 0307 	and.w	r3, r3, #7
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	db0b      	blt.n	80036a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4907      	ldr	r1, [pc, #28]	; (80036b0 <__NVIC_EnableIRQ+0x38>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e100 	.word	0xe000e100

080036b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db0a      	blt.n	80036de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	490c      	ldr	r1, [pc, #48]	; (8003700 <__NVIC_SetPriority+0x4c>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036dc:	e00a      	b.n	80036f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4908      	ldr	r1, [pc, #32]	; (8003704 <__NVIC_SetPriority+0x50>)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3b04      	subs	r3, #4
 80036ec:	0112      	lsls	r2, r2, #4
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	440b      	add	r3, r1
 80036f2:	761a      	strb	r2, [r3, #24]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf28      	it	cs
 8003726:	2304      	movcs	r3, #4
 8003728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3304      	adds	r3, #4
 800372e:	2b06      	cmp	r3, #6
 8003730:	d902      	bls.n	8003738 <NVIC_EncodePriority+0x30>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3b03      	subs	r3, #3
 8003736:	e000      	b.n	800373a <NVIC_EncodePriority+0x32>
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43d9      	mvns	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	4313      	orrs	r3, r2
         );
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff4c 	bl	8003614 <__NVIC_SetPriorityGrouping>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003796:	f7ff ff61 	bl	800365c <__NVIC_GetPriorityGrouping>
 800379a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	6978      	ldr	r0, [r7, #20]
 80037a2:	f7ff ffb1 	bl	8003708 <NVIC_EncodePriority>
 80037a6:	4602      	mov	r2, r0
 80037a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff ff80 	bl	80036b4 <__NVIC_SetPriority>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff54 	bl	8003678 <__NVIC_EnableIRQ>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037e6:	f7ff fee5 	bl	80035b4 <HAL_GetTick>
 80037ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d008      	beq.n	800380a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e052      	b.n	80038b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0216 	bic.w	r2, r2, #22
 8003818:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003828:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <HAL_DMA_Abort+0x62>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0208 	bic.w	r2, r2, #8
 8003848:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385a:	e013      	b.n	8003884 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800385c:	f7ff feaa 	bl	80035b4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b05      	cmp	r3, #5
 8003868:	d90c      	bls.n	8003884 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2203      	movs	r2, #3
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e015      	b.n	80038b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e4      	bne.n	800385c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	223f      	movs	r2, #63	; 0x3f
 8003898:	409a      	lsls	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00c      	b.n	80038f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2205      	movs	r2, #5
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e16b      	b.n	8003bf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	f040 815a 	bne.w	8003bea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d005      	beq.n	800394e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394a:	2b02      	cmp	r3, #2
 800394c:	d130      	bne.n	80039b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2203      	movs	r2, #3
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003984:	2201      	movs	r2, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 0201 	and.w	r2, r3, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d017      	beq.n	80039ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d123      	bne.n	8003a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	08da      	lsrs	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3208      	adds	r2, #8
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b4 	beq.w	8003bea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <HAL_GPIO_Init+0x30c>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4a5f      	ldr	r2, [pc, #380]	; (8003c08 <HAL_GPIO_Init+0x30c>)
 8003a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a90:	6453      	str	r3, [r2, #68]	; 0x44
 8003a92:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <HAL_GPIO_Init+0x30c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a9e:	4a5b      	ldr	r2, [pc, #364]	; (8003c0c <HAL_GPIO_Init+0x310>)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_GPIO_Init+0x314>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02b      	beq.n	8003b22 <HAL_GPIO_Init+0x226>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <HAL_GPIO_Init+0x318>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d025      	beq.n	8003b1e <HAL_GPIO_Init+0x222>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a50      	ldr	r2, [pc, #320]	; (8003c18 <HAL_GPIO_Init+0x31c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <HAL_GPIO_Init+0x21e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4f      	ldr	r2, [pc, #316]	; (8003c1c <HAL_GPIO_Init+0x320>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d019      	beq.n	8003b16 <HAL_GPIO_Init+0x21a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4e      	ldr	r2, [pc, #312]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_GPIO_Init+0x216>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4d      	ldr	r2, [pc, #308]	; (8003c24 <HAL_GPIO_Init+0x328>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00d      	beq.n	8003b0e <HAL_GPIO_Init+0x212>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4c      	ldr	r2, [pc, #304]	; (8003c28 <HAL_GPIO_Init+0x32c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <HAL_GPIO_Init+0x20e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4b      	ldr	r2, [pc, #300]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_GPIO_Init+0x20a>
 8003b02:	2307      	movs	r3, #7
 8003b04:	e00e      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b06:	2308      	movs	r3, #8
 8003b08:	e00c      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	e00a      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b0e:	2305      	movs	r3, #5
 8003b10:	e008      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b12:	2304      	movs	r3, #4
 8003b14:	e006      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b16:	2303      	movs	r3, #3
 8003b18:	e004      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e002      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b22:	2300      	movs	r3, #0
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	f002 0203 	and.w	r2, r2, #3
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	4093      	lsls	r3, r2
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b34:	4935      	ldr	r1, [pc, #212]	; (8003c0c <HAL_GPIO_Init+0x310>)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b66:	4a32      	ldr	r2, [pc, #200]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b6c:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b90:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b96:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be4:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <HAL_GPIO_Init+0x334>)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3301      	adds	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	f67f ae90 	bls.w	8003918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3724      	adds	r7, #36	; 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	40020000 	.word	0x40020000
 8003c14:	40020400 	.word	0x40020400
 8003c18:	40020800 	.word	0x40020800
 8003c1c:	40020c00 	.word	0x40020c00
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40021400 	.word	0x40021400
 8003c28:	40021800 	.word	0x40021800
 8003c2c:	40021c00 	.word	0x40021c00
 8003c30:	40013c00 	.word	0x40013c00

08003c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
 8003c40:	4613      	mov	r3, r2
 8003c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c44:	787b      	ldrb	r3, [r7, #1]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c50:	e003      	b.n	8003c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	041a      	lsls	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	619a      	str	r2, [r3, #24]
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e12b      	b.n	8003ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff f9d0 	bl	8003034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f001 fbe4 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4a81      	ldr	r2, [pc, #516]	; (8003edc <HAL_I2C_Init+0x274>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d807      	bhi.n	8003cec <HAL_I2C_Init+0x84>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a80      	ldr	r2, [pc, #512]	; (8003ee0 <HAL_I2C_Init+0x278>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bf94      	ite	ls
 8003ce4:	2301      	movls	r3, #1
 8003ce6:	2300      	movhi	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e006      	b.n	8003cfa <HAL_I2C_Init+0x92>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4a7d      	ldr	r2, [pc, #500]	; (8003ee4 <HAL_I2C_Init+0x27c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	bf94      	ite	ls
 8003cf4:	2301      	movls	r3, #1
 8003cf6:	2300      	movhi	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0e7      	b.n	8003ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a78      	ldr	r2, [pc, #480]	; (8003ee8 <HAL_I2C_Init+0x280>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	0c9b      	lsrs	r3, r3, #18
 8003d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a6a      	ldr	r2, [pc, #424]	; (8003edc <HAL_I2C_Init+0x274>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d802      	bhi.n	8003d3c <HAL_I2C_Init+0xd4>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	e009      	b.n	8003d50 <HAL_I2C_Init+0xe8>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	4a69      	ldr	r2, [pc, #420]	; (8003eec <HAL_I2C_Init+0x284>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	3301      	adds	r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	495c      	ldr	r1, [pc, #368]	; (8003edc <HAL_I2C_Init+0x274>)
 8003d6c:	428b      	cmp	r3, r1
 8003d6e:	d819      	bhi.n	8003da4 <HAL_I2C_Init+0x13c>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e59      	subs	r1, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7e:	1c59      	adds	r1, r3, #1
 8003d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d84:	400b      	ands	r3, r1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_I2C_Init+0x138>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1e59      	subs	r1, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	e051      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003da0:	2304      	movs	r3, #4
 8003da2:	e04f      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d111      	bne.n	8003dd0 <HAL_I2C_Init+0x168>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e58      	subs	r0, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	440b      	add	r3, r1
 8003dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e012      	b.n	8003df6 <HAL_I2C_Init+0x18e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	0099      	lsls	r1, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Init+0x196>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e022      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <HAL_I2C_Init+0x1bc>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1e58      	subs	r0, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6859      	ldr	r1, [r3, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	440b      	add	r3, r1
 8003e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e18:	3301      	adds	r3, #1
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e22:	e00f      	b.n	8003e44 <HAL_I2C_Init+0x1dc>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	0099      	lsls	r1, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	6809      	ldr	r1, [r1, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6911      	ldr	r1, [r2, #16]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68d2      	ldr	r2, [r2, #12]
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6812      	ldr	r2, [r2, #0]
 8003e84:	430b      	orrs	r3, r1
 8003e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	000186a0 	.word	0x000186a0
 8003ee0:	001e847f 	.word	0x001e847f
 8003ee4:	003d08ff 	.word	0x003d08ff
 8003ee8:	431bde83 	.word	0x431bde83
 8003eec:	10624dd3 	.word	0x10624dd3

08003ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4603      	mov	r3, r0
 8003f00:	817b      	strh	r3, [r7, #10]
 8003f02:	460b      	mov	r3, r1
 8003f04:	813b      	strh	r3, [r7, #8]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f0a:	f7ff fb53 	bl	80035b4 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	f040 80d9 	bne.w	80040d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	496d      	ldr	r1, [pc, #436]	; (80040dc <HAL_I2C_Mem_Write+0x1ec>)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fc7f 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0cc      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Mem_Write+0x56>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0c5      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d007      	beq.n	8003f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2221      	movs	r2, #33	; 0x21
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a4d      	ldr	r2, [pc, #308]	; (80040e0 <HAL_I2C_Mem_Write+0x1f0>)
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fae:	88f8      	ldrh	r0, [r7, #6]
 8003fb0:	893a      	ldrh	r2, [r7, #8]
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fab6 	bl	8004530 <I2C_RequestMemoryWrite>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d052      	beq.n	8004070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e081      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fd00 	bl	80049d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06b      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11b      	bne.n	8004070 <HAL_I2C_Mem_Write+0x180>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1aa      	bne.n	8003fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fcec 	bl	8004a5a <I2C_WaitOnBTFFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	2b04      	cmp	r3, #4
 800408e:	d107      	bne.n	80040a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e016      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08c      	sub	sp, #48	; 0x30
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	817b      	strh	r3, [r7, #10]
 80040f6:	460b      	mov	r3, r1
 80040f8:	813b      	strh	r3, [r7, #8]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fe:	f7ff fa59 	bl	80035b4 <HAL_GetTick>
 8004102:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b20      	cmp	r3, #32
 800410e:	f040 8208 	bne.w	8004522 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2319      	movs	r3, #25
 8004118:	2201      	movs	r2, #1
 800411a:	497b      	ldr	r1, [pc, #492]	; (8004308 <HAL_I2C_Mem_Read+0x224>)
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fb85 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
 800412a:	e1fb      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_I2C_Mem_Read+0x56>
 8004136:	2302      	movs	r3, #2
 8004138:	e1f4      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b01      	cmp	r3, #1
 800414e:	d007      	beq.n	8004160 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2222      	movs	r2, #34	; 0x22
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a5b      	ldr	r2, [pc, #364]	; (800430c <HAL_I2C_Mem_Read+0x228>)
 80041a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041a2:	88f8      	ldrh	r0, [r7, #6]
 80041a4:	893a      	ldrh	r2, [r7, #8]
 80041a6:	8979      	ldrh	r1, [r7, #10]
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4603      	mov	r3, r0
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fa52 	bl	800465c <I2C_RequestMemoryRead>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e1b0      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d113      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ca:	2300      	movs	r3, #0
 80041cc:	623b      	str	r3, [r7, #32]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	623b      	str	r3, [r7, #32]
 80041de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e184      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d11b      	bne.n	8004232 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e164      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	2b02      	cmp	r3, #2
 8004238:	d11b      	bne.n	8004272 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	e144      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004288:	e138      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	2b03      	cmp	r3, #3
 8004290:	f200 80f1 	bhi.w	8004476 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	2b01      	cmp	r3, #1
 800429a:	d123      	bne.n	80042e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fc1b 	bl	8004adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e139      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042e2:	e10b      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d14e      	bne.n	800438a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	2200      	movs	r2, #0
 80042f4:	4906      	ldr	r1, [pc, #24]	; (8004310 <HAL_I2C_Mem_Read+0x22c>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa98 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e10e      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
 8004306:	bf00      	nop
 8004308:	00100002 	.word	0x00100002
 800430c:	ffff0000 	.word	0xffff0000
 8004310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004388:	e0b8      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	2200      	movs	r2, #0
 8004392:	4966      	ldr	r1, [pc, #408]	; (800452c <HAL_I2C_Mem_Read+0x448>)
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fa49 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0bf      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	2200      	movs	r2, #0
 80043ee:	494f      	ldr	r1, [pc, #316]	; (800452c <HAL_I2C_Mem_Read+0x448>)
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fa1b 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e091      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004474:	e042      	b.n	80044fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fb2e 	bl	8004adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e04c      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d118      	bne.n	80044fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	f47f aec2 	bne.w	800428a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	; 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	00010004 	.word	0x00010004

08004530 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	461a      	mov	r2, r3
 800453e:	4603      	mov	r3, r0
 8004540:	817b      	strh	r3, [r7, #10]
 8004542:	460b      	mov	r3, r1
 8004544:	813b      	strh	r3, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2200      	movs	r2, #0
 8004562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f960 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004580:	d103      	bne.n	800458a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e05f      	b.n	800464e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800458e:	897b      	ldrh	r3, [r7, #10]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800459c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	6a3a      	ldr	r2, [r7, #32]
 80045a2:	492d      	ldr	r1, [pc, #180]	; (8004658 <I2C_RequestMemoryWrite+0x128>)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f998 	bl	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e04c      	b.n	800464e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	6a39      	ldr	r1, [r7, #32]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fa02 	bl	80049d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d107      	bne.n	80045f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e02b      	b.n	800464e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]
 8004606:	e021      	b.n	800464c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	b29b      	uxth	r3, r3
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	6a39      	ldr	r1, [r7, #32]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f9dc 	bl	80049d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b04      	cmp	r3, #4
 800462c:	d107      	bne.n	800463e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e005      	b.n	800464e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	00010002 	.word	0x00010002

0800465c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	817b      	strh	r3, [r7, #10]
 800466e:	460b      	mov	r3, r1
 8004670:	813b      	strh	r3, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2200      	movs	r2, #0
 800469e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f8c2 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046bc:	d103      	bne.n	80046c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0aa      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	4952      	ldr	r1, [pc, #328]	; (8004828 <I2C_RequestMemoryRead+0x1cc>)
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f8fa 	bl	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e097      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f964 	bl	80049d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e076      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004738:	893b      	ldrh	r3, [r7, #8]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	611a      	str	r2, [r3, #16]
 8004742:	e021      	b.n	8004788 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004744:	893b      	ldrh	r3, [r7, #8]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b29b      	uxth	r3, r3
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	6a39      	ldr	r1, [r7, #32]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f93e 	bl	80049d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b04      	cmp	r3, #4
 8004768:	d107      	bne.n	800477a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e050      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477e:	893b      	ldrh	r3, [r7, #8]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	6a39      	ldr	r1, [r7, #32]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f923 	bl	80049d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b04      	cmp	r3, #4
 800479e:	d107      	bne.n	80047b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e035      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f82b 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d103      	bne.n	80047f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e013      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047f8:	897b      	ldrh	r3, [r7, #10]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	4906      	ldr	r1, [pc, #24]	; (8004828 <I2C_RequestMemoryRead+0x1cc>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f863 	bl	80048da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	00010002 	.word	0x00010002

0800482c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483c:	e025      	b.n	800488a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004844:	d021      	beq.n	800488a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe feb5 	bl	80035b4 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e023      	b.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10d      	bne.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	43da      	mvns	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4013      	ands	r3, r2
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	e00c      	b.n	80048ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4013      	ands	r3, r2
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d0b6      	beq.n	800483e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048e8:	e051      	b.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f8:	d123      	bne.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004908:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004912:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e046      	b.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004948:	d021      	beq.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494a:	f7fe fe33 	bl	80035b4 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e020      	b.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b01      	cmp	r3, #1
 8004996:	d10c      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	43da      	mvns	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bf14      	ite	ne
 80049aa:	2301      	movne	r3, #1
 80049ac:	2300      	moveq	r3, #0
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	e00b      	b.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d18d      	bne.n	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e4:	e02d      	b.n	8004a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f8ce 	bl	8004b88 <I2C_IsAcknowledgeFailed>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e02d      	b.n	8004a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fc:	d021      	beq.n	8004a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fe:	f7fe fdd9 	bl	80035b4 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d302      	bcc.n	8004a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d116      	bne.n	8004a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e007      	b.n	8004a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4c:	2b80      	cmp	r3, #128	; 0x80
 8004a4e:	d1ca      	bne.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a66:	e02d      	b.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f88d 	bl	8004b88 <I2C_IsAcknowledgeFailed>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e02d      	b.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7e:	d021      	beq.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fe fd98 	bl	80035b4 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e007      	b.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d1ca      	bne.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae8:	e042      	b.n	8004b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d119      	bne.n	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e029      	b.n	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2c:	f7fe fd42 	bl	80035b4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d116      	bne.n	8004b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e007      	b.n	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d1b5      	bne.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d11b      	bne.n	8004bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_PWR_EnableBkUpAccess+0x24>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004bfa:	687b      	ldr	r3, [r7, #4]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	420e0020 	.word	0x420e0020
 8004c0c:	40007000 	.word	0x40007000

08004c10 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004c22:	687b      	ldr	r3, [r7, #4]
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	420e0020 	.word	0x420e0020
 8004c34:	40007000 	.word	0x40007000

08004c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e267      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d075      	beq.n	8004d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c56:	4b88      	ldr	r3, [pc, #544]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d00c      	beq.n	8004c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c62:	4b85      	ldr	r3, [pc, #532]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d112      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4b82      	ldr	r3, [pc, #520]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7c:	4b7e      	ldr	r3, [pc, #504]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05b      	beq.n	8004d40 <HAL_RCC_OscConfig+0x108>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d157      	bne.n	8004d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e242      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_OscConfig+0x74>
 8004c9e:	4b76      	ldr	r3, [pc, #472]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a75      	ldr	r2, [pc, #468]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e01d      	b.n	8004ce8 <HAL_RCC_OscConfig+0xb0>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x98>
 8004cb6:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6f      	ldr	r2, [pc, #444]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b6d      	ldr	r3, [pc, #436]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a6c      	ldr	r2, [pc, #432]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCC_OscConfig+0xb0>
 8004cd0:	4b69      	ldr	r3, [pc, #420]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a68      	ldr	r2, [pc, #416]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b66      	ldr	r3, [pc, #408]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a65      	ldr	r2, [pc, #404]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fe fc60 	bl	80035b4 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf8:	f7fe fc5c 	bl	80035b4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e207      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0a:	4b5b      	ldr	r3, [pc, #364]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xc0>
 8004d16:	e014      	b.n	8004d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fe fc4c 	bl	80035b4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe fc48 	bl	80035b4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1f3      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d32:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0xe8>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d063      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d4e:	4b4a      	ldr	r3, [pc, #296]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11c      	bne.n	8004da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d66:	4b44      	ldr	r3, [pc, #272]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_RCC_OscConfig+0x152>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e1c7      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4937      	ldr	r1, [pc, #220]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	e03a      	b.n	8004e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da8:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCC_OscConfig+0x244>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fe fc01 	bl	80035b4 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db6:	f7fe fbfd 	bl	80035b4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1a8      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	4925      	ldr	r1, [pc, #148]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	e015      	b.n	8004e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCC_OscConfig+0x244>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fe fbe0 	bl	80035b4 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df8:	f7fe fbdc 	bl	80035b4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e187      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d036      	beq.n	8004e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <HAL_RCC_OscConfig+0x248>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7fe fbc0 	bl	80035b4 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e38:	f7fe fbbc 	bl	80035b4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e167      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x200>
 8004e56:	e01b      	b.n	8004e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_OscConfig+0x248>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5e:	f7fe fba9 	bl	80035b4 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e64:	e00e      	b.n	8004e84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e66:	f7fe fba5 	bl	80035b4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d907      	bls.n	8004e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e150      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	42470000 	.word	0x42470000
 8004e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e84:	4b88      	ldr	r3, [pc, #544]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ea      	bne.n	8004e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8097 	beq.w	8004fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea2:	4b81      	ldr	r3, [pc, #516]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	4b7d      	ldr	r3, [pc, #500]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a7c      	ldr	r2, [pc, #496]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	4b7a      	ldr	r3, [pc, #488]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	4b77      	ldr	r3, [pc, #476]	; (80050ac <HAL_RCC_OscConfig+0x474>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d118      	bne.n	8004f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eda:	4b74      	ldr	r3, [pc, #464]	; (80050ac <HAL_RCC_OscConfig+0x474>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a73      	ldr	r2, [pc, #460]	; (80050ac <HAL_RCC_OscConfig+0x474>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee6:	f7fe fb65 	bl	80035b4 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eee:	f7fe fb61 	bl	80035b4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e10c      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f00:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <HAL_RCC_OscConfig+0x474>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d106      	bne.n	8004f22 <HAL_RCC_OscConfig+0x2ea>
 8004f14:	4b64      	ldr	r3, [pc, #400]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	4a63      	ldr	r2, [pc, #396]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f20:	e01c      	b.n	8004f5c <HAL_RCC_OscConfig+0x324>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x30c>
 8004f2a:	4b5f      	ldr	r3, [pc, #380]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	4a5e      	ldr	r2, [pc, #376]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6713      	str	r3, [r2, #112]	; 0x70
 8004f36:	4b5c      	ldr	r3, [pc, #368]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	4a5b      	ldr	r2, [pc, #364]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6713      	str	r3, [r2, #112]	; 0x70
 8004f42:	e00b      	b.n	8004f5c <HAL_RCC_OscConfig+0x324>
 8004f44:	4b58      	ldr	r3, [pc, #352]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	4a57      	ldr	r2, [pc, #348]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f50:	4b55      	ldr	r3, [pc, #340]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	4a54      	ldr	r2, [pc, #336]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f56:	f023 0304 	bic.w	r3, r3, #4
 8004f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fe fb26 	bl	80035b4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7fe fb22 	bl	80035b4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0cb      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f82:	4b49      	ldr	r3, [pc, #292]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ee      	beq.n	8004f6c <HAL_RCC_OscConfig+0x334>
 8004f8e:	e014      	b.n	8004fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f90:	f7fe fb10 	bl	80035b4 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f98:	f7fe fb0c 	bl	80035b4 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0b5      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fae:	4b3e      	ldr	r3, [pc, #248]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ee      	bne.n	8004f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc0:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	4a38      	ldr	r2, [pc, #224]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80a1 	beq.w	8005118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fd6:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d05c      	beq.n	800509c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d141      	bne.n	800506e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fea:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <HAL_RCC_OscConfig+0x478>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fe fae0 	bl	80035b4 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fe fadc 	bl	80035b4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e087      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500a:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	019b      	lsls	r3, r3, #6
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	3b01      	subs	r3, #1
 8005030:	041b      	lsls	r3, r3, #16
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	061b      	lsls	r3, r3, #24
 800503a:	491b      	ldr	r1, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005040:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x478>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7fe fab5 	bl	80035b4 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504e:	f7fe fab1 	bl	80035b4 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e05c      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x416>
 800506c:	e054      	b.n	8005118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_RCC_OscConfig+0x478>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fe fa9e 	bl	80035b4 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507c:	f7fe fa9a 	bl	80035b4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e045      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_RCC_OscConfig+0x470>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x444>
 800509a:	e03d      	b.n	8005118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e038      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40007000 	.word	0x40007000
 80050b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b4:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <HAL_RCC_OscConfig+0x4ec>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d028      	beq.n	8005114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d121      	bne.n	8005114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d11a      	bne.n	8005114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d111      	bne.n	8005114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	3b01      	subs	r3, #1
 80050fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d107      	bne.n	8005114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800

08005128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e0cc      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800513c:	4b68      	ldr	r3, [pc, #416]	; (80052e0 <HAL_RCC_ClockConfig+0x1b8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d90c      	bls.n	8005164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b65      	ldr	r3, [pc, #404]	; (80052e0 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0b8      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800517c:	4b59      	ldr	r3, [pc, #356]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a58      	ldr	r2, [pc, #352]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005194:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4a52      	ldr	r2, [pc, #328]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800519e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a0:	4b50      	ldr	r3, [pc, #320]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	494d      	ldr	r1, [pc, #308]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d044      	beq.n	8005248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d107      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	4b47      	ldr	r3, [pc, #284]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d119      	bne.n	8005206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e07f      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d003      	beq.n	80051e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e6:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e06f      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f6:	4b3b      	ldr	r3, [pc, #236]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e067      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005206:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 0203 	bic.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4934      	ldr	r1, [pc, #208]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	4313      	orrs	r3, r2
 8005216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005218:	f7fe f9cc 	bl	80035b4 <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521e:	e00a      	b.n	8005236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005220:	f7fe f9c8 	bl	80035b4 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e04f      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005236:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 020c 	and.w	r2, r3, #12
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	429a      	cmp	r2, r3
 8005246:	d1eb      	bne.n	8005220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005248:	4b25      	ldr	r3, [pc, #148]	; (80052e0 <HAL_RCC_ClockConfig+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d20c      	bcs.n	8005270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005256:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e032      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4916      	ldr	r1, [pc, #88]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	490e      	ldr	r1, [pc, #56]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ae:	f000 f821 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 80052b2:	4602      	mov	r2, r0
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	490a      	ldr	r1, [pc, #40]	; (80052e8 <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	5ccb      	ldrb	r3, [r1, r3]
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	4a09      	ldr	r2, [pc, #36]	; (80052ec <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_ClockConfig+0x1c8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe f846 	bl	8003360 <HAL_InitTick>

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40023c00 	.word	0x40023c00
 80052e4:	40023800 	.word	0x40023800
 80052e8:	0800b818 	.word	0x0800b818
 80052ec:	20000144 	.word	0x20000144
 80052f0:	20000148 	.word	0x20000148

080052f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f8:	b090      	sub	sp, #64	; 0x40
 80052fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005300:	2300      	movs	r3, #0
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005304:	2300      	movs	r3, #0
 8005306:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800530c:	4b59      	ldr	r3, [pc, #356]	; (8005474 <HAL_RCC_GetSysClockFreq+0x180>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b08      	cmp	r3, #8
 8005316:	d00d      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x40>
 8005318:	2b08      	cmp	r3, #8
 800531a:	f200 80a1 	bhi.w	8005460 <HAL_RCC_GetSysClockFreq+0x16c>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x34>
 8005322:	2b04      	cmp	r3, #4
 8005324:	d003      	beq.n	800532e <HAL_RCC_GetSysClockFreq+0x3a>
 8005326:	e09b      	b.n	8005460 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b53      	ldr	r3, [pc, #332]	; (8005478 <HAL_RCC_GetSysClockFreq+0x184>)
 800532a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800532c:	e09b      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800532e:	4b53      	ldr	r3, [pc, #332]	; (800547c <HAL_RCC_GetSysClockFreq+0x188>)
 8005330:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005332:	e098      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005334:	4b4f      	ldr	r3, [pc, #316]	; (8005474 <HAL_RCC_GetSysClockFreq+0x180>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800533e:	4b4d      	ldr	r3, [pc, #308]	; (8005474 <HAL_RCC_GetSysClockFreq+0x180>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d028      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534a:	4b4a      	ldr	r3, [pc, #296]	; (8005474 <HAL_RCC_GetSysClockFreq+0x180>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	099b      	lsrs	r3, r3, #6
 8005350:	2200      	movs	r2, #0
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	627a      	str	r2, [r7, #36]	; 0x24
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800535c:	2100      	movs	r1, #0
 800535e:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_RCC_GetSysClockFreq+0x188>)
 8005360:	fb03 f201 	mul.w	r2, r3, r1
 8005364:	2300      	movs	r3, #0
 8005366:	fb00 f303 	mul.w	r3, r0, r3
 800536a:	4413      	add	r3, r2
 800536c:	4a43      	ldr	r2, [pc, #268]	; (800547c <HAL_RCC_GetSysClockFreq+0x188>)
 800536e:	fba0 1202 	umull	r1, r2, r0, r2
 8005372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005374:	460a      	mov	r2, r1
 8005376:	62ba      	str	r2, [r7, #40]	; 0x28
 8005378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537a:	4413      	add	r3, r2
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	2200      	movs	r2, #0
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	61fa      	str	r2, [r7, #28]
 8005386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800538e:	f7fb fc35 	bl	8000bfc <__aeabi_uldivmod>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4613      	mov	r3, r2
 8005398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539a:	e053      	b.n	8005444 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539c:	4b35      	ldr	r3, [pc, #212]	; (8005474 <HAL_RCC_GetSysClockFreq+0x180>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	2200      	movs	r2, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	617a      	str	r2, [r7, #20]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053ae:	f04f 0b00 	mov.w	fp, #0
 80053b2:	4652      	mov	r2, sl
 80053b4:	465b      	mov	r3, fp
 80053b6:	f04f 0000 	mov.w	r0, #0
 80053ba:	f04f 0100 	mov.w	r1, #0
 80053be:	0159      	lsls	r1, r3, #5
 80053c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c4:	0150      	lsls	r0, r2, #5
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	ebb2 080a 	subs.w	r8, r2, sl
 80053ce:	eb63 090b 	sbc.w	r9, r3, fp
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80053de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80053e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80053e6:	ebb2 0408 	subs.w	r4, r2, r8
 80053ea:	eb63 0509 	sbc.w	r5, r3, r9
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	00eb      	lsls	r3, r5, #3
 80053f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fc:	00e2      	lsls	r2, r4, #3
 80053fe:	4614      	mov	r4, r2
 8005400:	461d      	mov	r5, r3
 8005402:	eb14 030a 	adds.w	r3, r4, sl
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	eb45 030b 	adc.w	r3, r5, fp
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541a:	4629      	mov	r1, r5
 800541c:	028b      	lsls	r3, r1, #10
 800541e:	4621      	mov	r1, r4
 8005420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005424:	4621      	mov	r1, r4
 8005426:	028a      	lsls	r2, r1, #10
 8005428:	4610      	mov	r0, r2
 800542a:	4619      	mov	r1, r3
 800542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542e:	2200      	movs	r2, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	60fa      	str	r2, [r7, #12]
 8005434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005438:	f7fb fbe0 	bl	8000bfc <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4613      	mov	r3, r2
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_RCC_GetSysClockFreq+0x180>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	3301      	adds	r3, #1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800545e:	e002      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetSysClockFreq+0x184>)
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005468:	4618      	mov	r0, r3
 800546a:	3740      	adds	r7, #64	; 0x40
 800546c:	46bd      	mov	sp, r7
 800546e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	00f42400 	.word	0x00f42400
 800547c:	017d7840 	.word	0x017d7840

08005480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005484:	4b03      	ldr	r3, [pc, #12]	; (8005494 <HAL_RCC_GetHCLKFreq+0x14>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	20000144 	.word	0x20000144

08005498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800549c:	f7ff fff0 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	0a9b      	lsrs	r3, r3, #10
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4903      	ldr	r1, [pc, #12]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0800b828 	.word	0x0800b828

080054c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054c4:	f7ff ffdc 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0b5b      	lsrs	r3, r3, #13
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4903      	ldr	r1, [pc, #12]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	0800b828 	.word	0x0800b828

080054e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	220f      	movs	r2, #15
 80054f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0203 	and.w	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005504:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_GetClockConfig+0x5c>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_RCC_GetClockConfig+0x60>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0207 	and.w	r2, r3, #7
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	601a      	str	r2, [r3, #0]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	40023c00 	.word	0x40023c00

0800554c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e041      	b.n	80055e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd fda6 	bl	80030c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fdae 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d001      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e04e      	b.n	80056a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d022      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d01d      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d018      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_TIM_Base_Start_IT+0xd0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00e      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d009      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x80>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d111      	bne.n	8005690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b06      	cmp	r3, #6
 800567c:	d010      	beq.n	80056a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568e:	e007      	b.n	80056a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40010400 	.word	0x40010400
 80056c4:	40014000 	.word	0x40014000
 80056c8:	40001800 	.word	0x40001800

080056cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e041      	b.n	8005762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f839 	bl	800576a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f000 fcee 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <HAL_TIM_PWM_Start+0x24>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	e022      	b.n	80057ea <HAL_TIM_PWM_Start+0x6a>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d109      	bne.n	80057be <HAL_TIM_PWM_Start+0x3e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	bf14      	ite	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	2300      	moveq	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	e015      	b.n	80057ea <HAL_TIM_PWM_Start+0x6a>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d109      	bne.n	80057d8 <HAL_TIM_PWM_Start+0x58>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e008      	b.n	80057ea <HAL_TIM_PWM_Start+0x6a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	bf14      	ite	ne
 80057e4:	2301      	movne	r3, #1
 80057e6:	2300      	moveq	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e07c      	b.n	80058ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start+0x82>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005800:	e013      	b.n	800582a <HAL_TIM_PWM_Start+0xaa>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0x92>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005810:	e00b      	b.n	800582a <HAL_TIM_PWM_Start+0xaa>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b08      	cmp	r3, #8
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0xa2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005820:	e003      	b.n	800582a <HAL_TIM_PWM_Start+0xaa>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2201      	movs	r2, #1
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 ff44 	bl	80066c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2d      	ldr	r2, [pc, #180]	; (80058f4 <HAL_TIM_PWM_Start+0x174>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_PWM_Start+0xcc>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <HAL_TIM_PWM_Start+0x178>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d101      	bne.n	8005850 <HAL_TIM_PWM_Start+0xd0>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_TIM_PWM_Start+0xd2>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_TIM_PWM_Start+0x174>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d022      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d01d      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_TIM_PWM_Start+0x17c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d018      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <HAL_TIM_PWM_Start+0x180>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <HAL_TIM_PWM_Start+0x184>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_TIM_PWM_Start+0x178>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_TIM_PWM_Start+0x188>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x136>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a16      	ldr	r2, [pc, #88]	; (800590c <HAL_TIM_PWM_Start+0x18c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d111      	bne.n	80058da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d010      	beq.n	80058ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d8:	e007      	b.n	80058ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40014000 	.word	0x40014000
 800590c:	40001800 	.word	0x40001800

08005910 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e097      	b.n	8005a54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fd fc21 	bl	8003180 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005954:	f023 0307 	bic.w	r3, r3, #7
 8005958:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f000 fbc1 	bl	80060ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	4313      	orrs	r3, r2
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80059b0:	f023 030c 	bic.w	r3, r3, #12
 80059b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	4313      	orrs	r3, r2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	4313      	orrs	r3, r2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4313      	orrs	r3, r2
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d110      	bne.n	8005aae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a92:	7b7b      	ldrb	r3, [r7, #13]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d001      	beq.n	8005a9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e069      	b.n	8005b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aac:	e031      	b.n	8005b12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d110      	bne.n	8005ad6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d102      	bne.n	8005ac0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aba:	7b3b      	ldrb	r3, [r7, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d001      	beq.n	8005ac4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e055      	b.n	8005b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad4:	e01d      	b.n	8005b12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d108      	bne.n	8005aee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d105      	bne.n	8005aee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ae2:	7b7b      	ldrb	r3, [r7, #13]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ae8:	7b3b      	ldrb	r3, [r7, #12]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d001      	beq.n	8005af2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e03e      	b.n	8005b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_TIM_Encoder_Start+0xc4>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d008      	beq.n	8005b30 <HAL_TIM_Encoder_Start+0xd4>
 8005b1e:	e00f      	b.n	8005b40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2201      	movs	r2, #1
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fdc9 	bl	80066c0 <TIM_CCxChannelCmd>
      break;
 8005b2e:	e016      	b.n	8005b5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2201      	movs	r2, #1
 8005b36:	2104      	movs	r1, #4
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fdc1 	bl	80066c0 <TIM_CCxChannelCmd>
      break;
 8005b3e:	e00e      	b.n	8005b5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2201      	movs	r2, #1
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fdb9 	bl	80066c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2201      	movs	r2, #1
 8005b54:	2104      	movs	r1, #4
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fdb2 	bl	80066c0 <TIM_CCxChannelCmd>
      break;
 8005b5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0201 	orr.w	r2, r2, #1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0202 	mvn.w	r2, #2
 8005ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa77 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa69 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa7a 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0204 	mvn.w	r2, #4
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa4d 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa3f 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa50 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0208 	mvn.w	r2, #8
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa23 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa15 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa26 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0210 	mvn.w	r2, #16
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9f9 	bl	80060ae <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f9eb 	bl	800609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f9fc 	bl	80060c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10e      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d107      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0201 	mvn.w	r2, #1
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd f958 	bl	8002fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	d10e      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d14:	2b80      	cmp	r3, #128	; 0x80
 8005d16:	d107      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fdca 	bl	80068bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d107      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9c1 	bl	80060d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d10e      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d107      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0220 	mvn.w	r2, #32
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fd94 	bl	80068a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e0ae      	b.n	8005f04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	f200 809f 	bhi.w	8005ef4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005ef5 	.word	0x08005ef5
 8005dc4:	08005ef5 	.word	0x08005ef5
 8005dc8:	08005ef5 	.word	0x08005ef5
 8005dcc:	08005e31 	.word	0x08005e31
 8005dd0:	08005ef5 	.word	0x08005ef5
 8005dd4:	08005ef5 	.word	0x08005ef5
 8005dd8:	08005ef5 	.word	0x08005ef5
 8005ddc:	08005e73 	.word	0x08005e73
 8005de0:	08005ef5 	.word	0x08005ef5
 8005de4:	08005ef5 	.word	0x08005ef5
 8005de8:	08005ef5 	.word	0x08005ef5
 8005dec:	08005eb3 	.word	0x08005eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fa18 	bl	800622c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0208 	orr.w	r2, r2, #8
 8005e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0204 	bic.w	r2, r2, #4
 8005e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6999      	ldr	r1, [r3, #24]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	619a      	str	r2, [r3, #24]
      break;
 8005e2e:	e064      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fa68 	bl	800630c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6999      	ldr	r1, [r3, #24]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	619a      	str	r2, [r3, #24]
      break;
 8005e70:	e043      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fabd 	bl	80063f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0208 	orr.w	r2, r2, #8
 8005e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0204 	bic.w	r2, r2, #4
 8005e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69d9      	ldr	r1, [r3, #28]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	61da      	str	r2, [r3, #28]
      break;
 8005eb0:	e023      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fb11 	bl	80064e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69d9      	ldr	r1, [r3, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	021a      	lsls	r2, r3, #8
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	61da      	str	r2, [r3, #28]
      break;
 8005ef2:	e002      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIM_ConfigClockSource+0x1c>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e0b4      	b.n	8006092 <HAL_TIM_ConfigClockSource+0x186>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f60:	d03e      	beq.n	8005fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f66:	f200 8087 	bhi.w	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	f000 8086 	beq.w	800607e <HAL_TIM_ConfigClockSource+0x172>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	d87f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b70      	cmp	r3, #112	; 0x70
 8005f7a:	d01a      	beq.n	8005fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005f7c:	2b70      	cmp	r3, #112	; 0x70
 8005f7e:	d87b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d050      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x11a>
 8005f84:	2b60      	cmp	r3, #96	; 0x60
 8005f86:	d877      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b50      	cmp	r3, #80	; 0x50
 8005f8a:	d03c      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xfa>
 8005f8c:	2b50      	cmp	r3, #80	; 0x50
 8005f8e:	d873      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d058      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x13a>
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d86f      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b30      	cmp	r3, #48	; 0x30
 8005f9a:	d064      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005f9c:	2b30      	cmp	r3, #48	; 0x30
 8005f9e:	d86b      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d060      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d867      	bhi.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05c      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d05a      	beq.n	8006066 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	e062      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	6899      	ldr	r1, [r3, #8]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f000 fb5d 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	609a      	str	r2, [r3, #8]
      break;
 8005fde:	e04f      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f000 fb46 	bl	8006680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006002:	609a      	str	r2, [r3, #8]
      break;
 8006004:	e03c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	461a      	mov	r2, r3
 8006014:	f000 faba 	bl	800658c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2150      	movs	r1, #80	; 0x50
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fb13 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8006024:	e02c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 fad9 	bl	80065ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2160      	movs	r1, #96	; 0x60
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fb03 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8006044:	e01c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6859      	ldr	r1, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	461a      	mov	r2, r3
 8006054:	f000 fa9a 	bl	800658c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2140      	movs	r1, #64	; 0x40
 800605e:	4618      	mov	r0, r3
 8006060:	f000 faf3 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8006064:	e00c      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 faea 	bl	800664a <TIM_ITRx_SetConfig>
      break;
 8006076:	e003      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      break;
 800607c:	e000      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800607e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006090:	7bfb      	ldrb	r3, [r7, #15]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a40      	ldr	r2, [pc, #256]	; (8006200 <TIM_Base_SetConfig+0x114>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d013      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d00f      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a3d      	ldr	r2, [pc, #244]	; (8006204 <TIM_Base_SetConfig+0x118>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a3c      	ldr	r2, [pc, #240]	; (8006208 <TIM_Base_SetConfig+0x11c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a3b      	ldr	r2, [pc, #236]	; (800620c <TIM_Base_SetConfig+0x120>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3a      	ldr	r2, [pc, #232]	; (8006210 <TIM_Base_SetConfig+0x124>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2f      	ldr	r2, [pc, #188]	; (8006200 <TIM_Base_SetConfig+0x114>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d027      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a2c      	ldr	r2, [pc, #176]	; (8006204 <TIM_Base_SetConfig+0x118>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d023      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2b      	ldr	r2, [pc, #172]	; (8006208 <TIM_Base_SetConfig+0x11c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2a      	ldr	r2, [pc, #168]	; (800620c <TIM_Base_SetConfig+0x120>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d01b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a29      	ldr	r2, [pc, #164]	; (8006210 <TIM_Base_SetConfig+0x124>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d017      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a28      	ldr	r2, [pc, #160]	; (8006214 <TIM_Base_SetConfig+0x128>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <TIM_Base_SetConfig+0x12c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a26      	ldr	r2, [pc, #152]	; (800621c <TIM_Base_SetConfig+0x130>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a25      	ldr	r2, [pc, #148]	; (8006220 <TIM_Base_SetConfig+0x134>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a24      	ldr	r2, [pc, #144]	; (8006224 <TIM_Base_SetConfig+0x138>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a23      	ldr	r2, [pc, #140]	; (8006228 <TIM_Base_SetConfig+0x13c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d108      	bne.n	80061b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <TIM_Base_SetConfig+0x114>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <TIM_Base_SetConfig+0x124>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d103      	bne.n	80061ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	615a      	str	r2, [r3, #20]
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40010400 	.word	0x40010400
 8006214:	40014000 	.word	0x40014000
 8006218:	40014400 	.word	0x40014400
 800621c:	40014800 	.word	0x40014800
 8006220:	40001800 	.word	0x40001800
 8006224:	40001c00 	.word	0x40001c00
 8006228:	40002000 	.word	0x40002000

0800622c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f023 0201 	bic.w	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0302 	bic.w	r3, r3, #2
 8006274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a20      	ldr	r2, [pc, #128]	; (8006304 <TIM_OC1_SetConfig+0xd8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_OC1_SetConfig+0x64>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1f      	ldr	r2, [pc, #124]	; (8006308 <TIM_OC1_SetConfig+0xdc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d10c      	bne.n	80062aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0308 	bic.w	r3, r3, #8
 8006296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <TIM_OC1_SetConfig+0xd8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d003      	beq.n	80062ba <TIM_OC1_SetConfig+0x8e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a14      	ldr	r2, [pc, #80]	; (8006308 <TIM_OC1_SetConfig+0xdc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d111      	bne.n	80062de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	40010000 	.word	0x40010000
 8006308:	40010400 	.word	0x40010400

0800630c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0210 	bic.w	r2, r3, #16
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <TIM_OC2_SetConfig+0xe4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC2_SetConfig+0x68>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <TIM_OC2_SetConfig+0xe8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d10d      	bne.n	8006390 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800637a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800638e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a17      	ldr	r2, [pc, #92]	; (80063f0 <TIM_OC2_SetConfig+0xe4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_OC2_SetConfig+0x94>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <TIM_OC2_SetConfig+0xe8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d113      	bne.n	80063c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40010400 	.word	0x40010400

080063f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <TIM_OC3_SetConfig+0xe0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_OC3_SetConfig+0x66>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a20      	ldr	r2, [pc, #128]	; (80064dc <TIM_OC3_SetConfig+0xe4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d10d      	bne.n	800647a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <TIM_OC3_SetConfig+0xe0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_OC3_SetConfig+0x92>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <TIM_OC3_SetConfig+0xe4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d113      	bne.n	80064b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	621a      	str	r2, [r3, #32]
}
 80064cc:	bf00      	nop
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40010400 	.word	0x40010400

080064e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800652a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	031b      	lsls	r3, r3, #12
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a12      	ldr	r2, [pc, #72]	; (8006584 <TIM_OC4_SetConfig+0xa4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC4_SetConfig+0x68>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a11      	ldr	r2, [pc, #68]	; (8006588 <TIM_OC4_SetConfig+0xa8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d109      	bne.n	800655c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	019b      	lsls	r3, r3, #6
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40010400 	.word	0x40010400

0800658c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0201 	bic.w	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 030a 	bic.w	r3, r3, #10
 80065c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	bf00      	nop
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b087      	sub	sp, #28
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0210 	bic.w	r2, r3, #16
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	031b      	lsls	r3, r3, #12
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	f043 0307 	orr.w	r3, r3, #7
 800666c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800669a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	021a      	lsls	r2, r3, #8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	609a      	str	r2, [r3, #8]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2201      	movs	r2, #1
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1a      	ldr	r2, [r3, #32]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	fa01 f303 	lsl.w	r3, r1, r3
 80066f8:	431a      	orrs	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]
}
 80066fe:	bf00      	nop
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
	...

0800670c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d101      	bne.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006720:	2302      	movs	r3, #2
 8006722:	e05a      	b.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d022      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006770:	d01d      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d018      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00e      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a15      	ldr	r2, [pc, #84]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10c      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40010400 	.word	0x40010400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40001800 	.word	0x40001800

08006804 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800681c:	2302      	movs	r3, #2
 800681e:	e03d      	b.n	800689c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e03f      	b.n	8006962 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fc fce2 	bl	80032c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2224      	movs	r2, #36	; 0x24
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fddf 	bl	80074d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b08a      	sub	sp, #40	; 0x28
 800696e:	af02      	add	r7, sp, #8
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	603b      	str	r3, [r7, #0]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b20      	cmp	r3, #32
 8006988:	d17c      	bne.n	8006a84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_UART_Transmit+0x2c>
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e075      	b.n	8006a86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Transmit+0x3e>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e06e      	b.n	8006a86 <HAL_UART_Transmit+0x11c>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2221      	movs	r2, #33	; 0x21
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069be:	f7fc fdf9 	bl	80035b4 <HAL_GetTick>
 80069c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	88fa      	ldrh	r2, [r7, #6]
 80069ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d8:	d108      	bne.n	80069ec <HAL_UART_Transmit+0x82>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e003      	b.n	80069f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80069fc:	e02a      	b.n	8006a54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2200      	movs	r2, #0
 8006a06:	2180      	movs	r1, #128	; 0x80
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fb1f 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e036      	b.n	8006a86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	3302      	adds	r3, #2
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	e007      	b.n	8006a46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	3301      	adds	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1cf      	bne.n	80069fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2140      	movs	r1, #64	; 0x40
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 faef 	bl	800704c <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e006      	b.n	8006a86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e000      	b.n	8006a86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a84:	2302      	movs	r3, #2
  }
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d11d      	bne.n	8006ae4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_UART_Receive_IT+0x26>
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e016      	b.n	8006ae6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_UART_Receive_IT+0x38>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e00f      	b.n	8006ae6 <HAL_UART_Receive_IT+0x58>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fb24 	bl	8007128 <UART_Start_Receive_IT>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b0ba      	sub	sp, #232	; 0xe8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10f      	bne.n	8006b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <HAL_UART_IRQHandler+0x66>
 8006b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fc07 	bl	8007362 <UART_Receive_IT>
      return;
 8006b54:	e256      	b.n	8007004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80de 	beq.w	8006d1c <HAL_UART_IRQHandler+0x22c>
 8006b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d106      	bne.n	8006b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80d1 	beq.w	8006d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <HAL_UART_IRQHandler+0xae>
 8006b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f043 0201 	orr.w	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <HAL_UART_IRQHandler+0xd2>
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f043 0202 	orr.w	r2, r3, #2
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <HAL_UART_IRQHandler+0xf6>
 8006bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0204 	orr.w	r2, r3, #4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d011      	beq.n	8006c16 <HAL_UART_IRQHandler+0x126>
 8006bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f043 0208 	orr.w	r2, r3, #8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 81ed 	beq.w	8006ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <HAL_UART_IRQHandler+0x14e>
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fb92 	bl	8007362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	bf0c      	ite	eq
 8006c4c:	2301      	moveq	r3, #1
 8006c4e:	2300      	movne	r3, #0
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <HAL_UART_IRQHandler+0x17a>
 8006c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d04f      	beq.n	8006d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa9a 	bl	80071a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d141      	bne.n	8006d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3314      	adds	r3, #20
 8006c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1d9      	bne.n	8006c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d013      	beq.n	8006cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	4a7d      	ldr	r2, [pc, #500]	; (8006ecc <HAL_UART_IRQHandler+0x3dc>)
 8006cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fc fdea 	bl	80038b8 <HAL_DMA_Abort_IT>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d016      	beq.n	8006d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf8:	e00e      	b.n	8006d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f990 	bl	8007020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d00:	e00a      	b.n	8006d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f98c 	bl	8007020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d08:	e006      	b.n	8006d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f988 	bl	8007020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d16:	e170      	b.n	8006ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	bf00      	nop
    return;
 8006d1a:	e16e      	b.n	8006ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 814a 	bne.w	8006fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8143 	beq.w	8006fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 813c 	beq.w	8006fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	f040 80b4 	bne.w	8006ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8140 	beq.w	8006ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d86:	429a      	cmp	r2, r3
 8006d88:	f080 8139 	bcs.w	8006ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9e:	f000 8088 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d9      	bne.n	8006da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3314      	adds	r3, #20
 8006df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e1      	bne.n	8006dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3314      	adds	r3, #20
 8006e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3314      	adds	r3, #20
 8006e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e3      	bne.n	8006e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	330c      	adds	r3, #12
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e82:	f023 0310 	bic.w	r3, r3, #16
 8006e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e3      	bne.n	8006e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fc fc93 	bl	80037d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8b6 	bl	8007034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ec8:	e099      	b.n	8006ffe <HAL_UART_IRQHandler+0x50e>
 8006eca:	bf00      	nop
 8006ecc:	0800726b 	.word	0x0800726b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 808b 	beq.w	8007002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8086 	beq.w	8007002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f52:	633a      	str	r2, [r7, #48]	; 0x30
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e3      	bne.n	8006f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f98:	61fa      	str	r2, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f83e 	bl	8007034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fb8:	e023      	b.n	8007002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_UART_IRQHandler+0x4ea>
 8006fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f95d 	bl	8007292 <UART_Transmit_IT>
    return;
 8006fd8:	e014      	b.n	8007004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00e      	beq.n	8007004 <HAL_UART_IRQHandler+0x514>
 8006fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d008      	beq.n	8007004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f99d 	bl	8007332 <UART_EndTransmit_IT>
    return;
 8006ff8:	e004      	b.n	8007004 <HAL_UART_IRQHandler+0x514>
    return;
 8006ffa:	bf00      	nop
 8006ffc:	e002      	b.n	8007004 <HAL_UART_IRQHandler+0x514>
      return;
 8006ffe:	bf00      	nop
 8007000:	e000      	b.n	8007004 <HAL_UART_IRQHandler+0x514>
      return;
 8007002:	bf00      	nop
  }
}
 8007004:	37e8      	adds	r7, #232	; 0xe8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop

0800700c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b090      	sub	sp, #64	; 0x40
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705c:	e050      	b.n	8007100 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007064:	d04c      	beq.n	8007100 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x30>
 800706c:	f7fc faa2 	bl	80035b4 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007078:	429a      	cmp	r2, r3
 800707a:	d241      	bcs.n	8007100 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800709c:	637a      	str	r2, [r7, #52]	; 0x34
 800709e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070a4:	e841 2300 	strex	r3, r2, [r1]
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e5      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3314      	adds	r3, #20
 80070b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	613b      	str	r3, [r7, #16]
   return(result);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d0:	623a      	str	r2, [r7, #32]
 80070d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	69f9      	ldr	r1, [r7, #28]
 80070d6:	6a3a      	ldr	r2, [r7, #32]
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e5      	bne.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e00f      	b.n	8007120 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4013      	ands	r3, r2
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	429a      	cmp	r2, r3
 800710e:	bf0c      	ite	eq
 8007110:	2301      	moveq	r3, #1
 8007112:	2300      	movne	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	429a      	cmp	r2, r3
 800711c:	d09f      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3740      	adds	r7, #64	; 0x40
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	4613      	mov	r3, r2
 8007134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	88fa      	ldrh	r2, [r7, #6]
 8007140:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	88fa      	ldrh	r2, [r7, #6]
 8007146:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2222      	movs	r2, #34	; 0x22
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007174:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695a      	ldr	r2, [r3, #20]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0220 	orr.w	r2, r2, #32
 8007194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b095      	sub	sp, #84	; 0x54
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071cc:	643a      	str	r2, [r7, #64]	; 0x40
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3314      	adds	r3, #20
 80071e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e5      	bne.n	80071e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	2b01      	cmp	r3, #1
 800721a:	d119      	bne.n	8007250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60bb      	str	r3, [r7, #8]
   return(result);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 0310 	bic.w	r3, r3, #16
 8007232:	647b      	str	r3, [r7, #68]	; 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800723c:	61ba      	str	r2, [r7, #24]
 800723e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e5      	bne.n	800721c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800725e:	bf00      	nop
 8007260:	3754      	adds	r7, #84	; 0x54
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff fecb 	bl	8007020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b21      	cmp	r3, #33	; 0x21
 80072a4:	d13e      	bne.n	8007324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ae:	d114      	bne.n	80072da <UART_Transmit_IT+0x48>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d110      	bne.n	80072da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	621a      	str	r2, [r3, #32]
 80072d8:	e008      	b.n	80072ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6211      	str	r1, [r2, #32]
 80072e4:	781a      	ldrb	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4619      	mov	r1, r3
 80072fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10f      	bne.n	8007320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800730e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800731e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fe5a 	bl	800700c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b08c      	sub	sp, #48	; 0x30
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b22      	cmp	r3, #34	; 0x22
 8007374:	f040 80ab 	bne.w	80074ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d117      	bne.n	80073b2 <UART_Receive_IT+0x50>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d113      	bne.n	80073b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	1c9a      	adds	r2, r3, #2
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	629a      	str	r2, [r3, #40]	; 0x28
 80073b0:	e026      	b.n	8007400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c4:	d007      	beq.n	80073d6 <UART_Receive_IT+0x74>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10a      	bne.n	80073e4 <UART_Receive_IT+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e008      	b.n	80073f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29b      	uxth	r3, r3
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4619      	mov	r1, r3
 800740e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007410:	2b00      	cmp	r3, #0
 8007412:	d15a      	bne.n	80074ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0220 	bic.w	r2, r2, #32
 8007422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695a      	ldr	r2, [r3, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0201 	bic.w	r2, r2, #1
 8007442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	2b01      	cmp	r3, #1
 8007452:	d135      	bne.n	80074c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	613b      	str	r3, [r7, #16]
   return(result);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800747a:	623a      	str	r2, [r7, #32]
 800747c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	69f9      	ldr	r1, [r7, #28]
 8007480:	6a3a      	ldr	r2, [r7, #32]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	61bb      	str	r3, [r7, #24]
   return(result);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0310 	and.w	r3, r3, #16
 8007498:	2b10      	cmp	r3, #16
 800749a:	d10a      	bne.n	80074b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff fdbb 	bl	8007034 <HAL_UARTEx_RxEventCallback>
 80074be:	e002      	b.n	80074c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7fa f93f 	bl	8001744 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e002      	b.n	80074d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e000      	b.n	80074d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
  }
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3730      	adds	r7, #48	; 0x30
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074dc:	b0c0      	sub	sp, #256	; 0x100
 80074de:	af00      	add	r7, sp, #0
 80074e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	ea40 0301 	orr.w	r3, r0, r1
 8007500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	431a      	orrs	r2, r3
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	431a      	orrs	r2, r3
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007530:	f021 010c 	bic.w	r1, r1, #12
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800753e:	430b      	orrs	r3, r1
 8007540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007552:	6999      	ldr	r1, [r3, #24]
 8007554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	ea40 0301 	orr.w	r3, r0, r1
 800755e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <UART_SetConfig+0x2cc>)
 8007568:	429a      	cmp	r2, r3
 800756a:	d005      	beq.n	8007578 <UART_SetConfig+0xa0>
 800756c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b8d      	ldr	r3, [pc, #564]	; (80077a8 <UART_SetConfig+0x2d0>)
 8007574:	429a      	cmp	r2, r3
 8007576:	d104      	bne.n	8007582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fd ffa2 	bl	80054c0 <HAL_RCC_GetPCLK2Freq>
 800757c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007580:	e003      	b.n	800758a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007582:	f7fd ff89 	bl	8005498 <HAL_RCC_GetPCLK1Freq>
 8007586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007594:	f040 810c 	bne.w	80077b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800759c:	2200      	movs	r2, #0
 800759e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075aa:	4622      	mov	r2, r4
 80075ac:	462b      	mov	r3, r5
 80075ae:	1891      	adds	r1, r2, r2
 80075b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80075b2:	415b      	adcs	r3, r3
 80075b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075ba:	4621      	mov	r1, r4
 80075bc:	eb12 0801 	adds.w	r8, r2, r1
 80075c0:	4629      	mov	r1, r5
 80075c2:	eb43 0901 	adc.w	r9, r3, r1
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075da:	4690      	mov	r8, r2
 80075dc:	4699      	mov	r9, r3
 80075de:	4623      	mov	r3, r4
 80075e0:	eb18 0303 	adds.w	r3, r8, r3
 80075e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075e8:	462b      	mov	r3, r5
 80075ea:	eb49 0303 	adc.w	r3, r9, r3
 80075ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007606:	460b      	mov	r3, r1
 8007608:	18db      	adds	r3, r3, r3
 800760a:	653b      	str	r3, [r7, #80]	; 0x50
 800760c:	4613      	mov	r3, r2
 800760e:	eb42 0303 	adc.w	r3, r2, r3
 8007612:	657b      	str	r3, [r7, #84]	; 0x54
 8007614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800761c:	f7f9 faee 	bl	8000bfc <__aeabi_uldivmod>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4b61      	ldr	r3, [pc, #388]	; (80077ac <UART_SetConfig+0x2d4>)
 8007626:	fba3 2302 	umull	r2, r3, r3, r2
 800762a:	095b      	lsrs	r3, r3, #5
 800762c:	011c      	lsls	r4, r3, #4
 800762e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007632:	2200      	movs	r2, #0
 8007634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800763c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	1891      	adds	r1, r2, r2
 8007646:	64b9      	str	r1, [r7, #72]	; 0x48
 8007648:	415b      	adcs	r3, r3
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800764c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007650:	4641      	mov	r1, r8
 8007652:	eb12 0a01 	adds.w	sl, r2, r1
 8007656:	4649      	mov	r1, r9
 8007658:	eb43 0b01 	adc.w	fp, r3, r1
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800766c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007670:	4692      	mov	sl, r2
 8007672:	469b      	mov	fp, r3
 8007674:	4643      	mov	r3, r8
 8007676:	eb1a 0303 	adds.w	r3, sl, r3
 800767a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800767e:	464b      	mov	r3, r9
 8007680:	eb4b 0303 	adc.w	r3, fp, r3
 8007684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800769c:	460b      	mov	r3, r1
 800769e:	18db      	adds	r3, r3, r3
 80076a0:	643b      	str	r3, [r7, #64]	; 0x40
 80076a2:	4613      	mov	r3, r2
 80076a4:	eb42 0303 	adc.w	r3, r2, r3
 80076a8:	647b      	str	r3, [r7, #68]	; 0x44
 80076aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076b2:	f7f9 faa3 	bl	8000bfc <__aeabi_uldivmod>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4611      	mov	r1, r2
 80076bc:	4b3b      	ldr	r3, [pc, #236]	; (80077ac <UART_SetConfig+0x2d4>)
 80076be:	fba3 2301 	umull	r2, r3, r3, r1
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	2264      	movs	r2, #100	; 0x64
 80076c6:	fb02 f303 	mul.w	r3, r2, r3
 80076ca:	1acb      	subs	r3, r1, r3
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076d2:	4b36      	ldr	r3, [pc, #216]	; (80077ac <UART_SetConfig+0x2d4>)
 80076d4:	fba3 2302 	umull	r2, r3, r3, r2
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076e0:	441c      	add	r4, r3
 80076e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076f4:	4642      	mov	r2, r8
 80076f6:	464b      	mov	r3, r9
 80076f8:	1891      	adds	r1, r2, r2
 80076fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80076fc:	415b      	adcs	r3, r3
 80076fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007704:	4641      	mov	r1, r8
 8007706:	1851      	adds	r1, r2, r1
 8007708:	6339      	str	r1, [r7, #48]	; 0x30
 800770a:	4649      	mov	r1, r9
 800770c:	414b      	adcs	r3, r1
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800771c:	4659      	mov	r1, fp
 800771e:	00cb      	lsls	r3, r1, #3
 8007720:	4651      	mov	r1, sl
 8007722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007726:	4651      	mov	r1, sl
 8007728:	00ca      	lsls	r2, r1, #3
 800772a:	4610      	mov	r0, r2
 800772c:	4619      	mov	r1, r3
 800772e:	4603      	mov	r3, r0
 8007730:	4642      	mov	r2, r8
 8007732:	189b      	adds	r3, r3, r2
 8007734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007738:	464b      	mov	r3, r9
 800773a:	460a      	mov	r2, r1
 800773c:	eb42 0303 	adc.w	r3, r2, r3
 8007740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007758:	460b      	mov	r3, r1
 800775a:	18db      	adds	r3, r3, r3
 800775c:	62bb      	str	r3, [r7, #40]	; 0x28
 800775e:	4613      	mov	r3, r2
 8007760:	eb42 0303 	adc.w	r3, r2, r3
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800776a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800776e:	f7f9 fa45 	bl	8000bfc <__aeabi_uldivmod>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <UART_SetConfig+0x2d4>)
 8007778:	fba3 1302 	umull	r1, r3, r3, r2
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	2164      	movs	r1, #100	; 0x64
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	3332      	adds	r3, #50	; 0x32
 800778a:	4a08      	ldr	r2, [pc, #32]	; (80077ac <UART_SetConfig+0x2d4>)
 800778c:	fba2 2303 	umull	r2, r3, r2, r3
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	f003 0207 	and.w	r2, r3, #7
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4422      	add	r2, r4
 800779e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077a0:	e106      	b.n	80079b0 <UART_SetConfig+0x4d8>
 80077a2:	bf00      	nop
 80077a4:	40011000 	.word	0x40011000
 80077a8:	40011400 	.word	0x40011400
 80077ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077c2:	4642      	mov	r2, r8
 80077c4:	464b      	mov	r3, r9
 80077c6:	1891      	adds	r1, r2, r2
 80077c8:	6239      	str	r1, [r7, #32]
 80077ca:	415b      	adcs	r3, r3
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
 80077ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077d2:	4641      	mov	r1, r8
 80077d4:	1854      	adds	r4, r2, r1
 80077d6:	4649      	mov	r1, r9
 80077d8:	eb43 0501 	adc.w	r5, r3, r1
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	00eb      	lsls	r3, r5, #3
 80077e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077ea:	00e2      	lsls	r2, r4, #3
 80077ec:	4614      	mov	r4, r2
 80077ee:	461d      	mov	r5, r3
 80077f0:	4643      	mov	r3, r8
 80077f2:	18e3      	adds	r3, r4, r3
 80077f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077f8:	464b      	mov	r3, r9
 80077fa:	eb45 0303 	adc.w	r3, r5, r3
 80077fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800780e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800781e:	4629      	mov	r1, r5
 8007820:	008b      	lsls	r3, r1, #2
 8007822:	4621      	mov	r1, r4
 8007824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007828:	4621      	mov	r1, r4
 800782a:	008a      	lsls	r2, r1, #2
 800782c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007830:	f7f9 f9e4 	bl	8000bfc <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4b60      	ldr	r3, [pc, #384]	; (80079bc <UART_SetConfig+0x4e4>)
 800783a:	fba3 2302 	umull	r2, r3, r3, r2
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	011c      	lsls	r4, r3, #4
 8007842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800784c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	1891      	adds	r1, r2, r2
 800785a:	61b9      	str	r1, [r7, #24]
 800785c:	415b      	adcs	r3, r3
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007864:	4641      	mov	r1, r8
 8007866:	1851      	adds	r1, r2, r1
 8007868:	6139      	str	r1, [r7, #16]
 800786a:	4649      	mov	r1, r9
 800786c:	414b      	adcs	r3, r1
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800787c:	4659      	mov	r1, fp
 800787e:	00cb      	lsls	r3, r1, #3
 8007880:	4651      	mov	r1, sl
 8007882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007886:	4651      	mov	r1, sl
 8007888:	00ca      	lsls	r2, r1, #3
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	4603      	mov	r3, r0
 8007890:	4642      	mov	r2, r8
 8007892:	189b      	adds	r3, r3, r2
 8007894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007898:	464b      	mov	r3, r9
 800789a:	460a      	mov	r2, r1
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80078ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078bc:	4649      	mov	r1, r9
 80078be:	008b      	lsls	r3, r1, #2
 80078c0:	4641      	mov	r1, r8
 80078c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078c6:	4641      	mov	r1, r8
 80078c8:	008a      	lsls	r2, r1, #2
 80078ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078ce:	f7f9 f995 	bl	8000bfc <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	4b38      	ldr	r3, [pc, #224]	; (80079bc <UART_SetConfig+0x4e4>)
 80078da:	fba3 2301 	umull	r2, r3, r3, r1
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	2264      	movs	r2, #100	; 0x64
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	1acb      	subs	r3, r1, r3
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	3332      	adds	r3, #50	; 0x32
 80078ec:	4a33      	ldr	r2, [pc, #204]	; (80079bc <UART_SetConfig+0x4e4>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078f8:	441c      	add	r4, r3
 80078fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078fe:	2200      	movs	r2, #0
 8007900:	673b      	str	r3, [r7, #112]	; 0x70
 8007902:	677a      	str	r2, [r7, #116]	; 0x74
 8007904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	1891      	adds	r1, r2, r2
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	415b      	adcs	r3, r3
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007918:	4641      	mov	r1, r8
 800791a:	1851      	adds	r1, r2, r1
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	4649      	mov	r1, r9
 8007920:	414b      	adcs	r3, r1
 8007922:	607b      	str	r3, [r7, #4]
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007930:	4659      	mov	r1, fp
 8007932:	00cb      	lsls	r3, r1, #3
 8007934:	4651      	mov	r1, sl
 8007936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800793a:	4651      	mov	r1, sl
 800793c:	00ca      	lsls	r2, r1, #3
 800793e:	4610      	mov	r0, r2
 8007940:	4619      	mov	r1, r3
 8007942:	4603      	mov	r3, r0
 8007944:	4642      	mov	r2, r8
 8007946:	189b      	adds	r3, r3, r2
 8007948:	66bb      	str	r3, [r7, #104]	; 0x68
 800794a:	464b      	mov	r3, r9
 800794c:	460a      	mov	r2, r1
 800794e:	eb42 0303 	adc.w	r3, r2, r3
 8007952:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	663b      	str	r3, [r7, #96]	; 0x60
 800795e:	667a      	str	r2, [r7, #100]	; 0x64
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800796c:	4649      	mov	r1, r9
 800796e:	008b      	lsls	r3, r1, #2
 8007970:	4641      	mov	r1, r8
 8007972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007976:	4641      	mov	r1, r8
 8007978:	008a      	lsls	r2, r1, #2
 800797a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800797e:	f7f9 f93d 	bl	8000bfc <__aeabi_uldivmod>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <UART_SetConfig+0x4e4>)
 8007988:	fba3 1302 	umull	r1, r3, r3, r2
 800798c:	095b      	lsrs	r3, r3, #5
 800798e:	2164      	movs	r1, #100	; 0x64
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	3332      	adds	r3, #50	; 0x32
 800799a:	4a08      	ldr	r2, [pc, #32]	; (80079bc <UART_SetConfig+0x4e4>)
 800799c:	fba2 2303 	umull	r2, r3, r2, r3
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	f003 020f 	and.w	r2, r3, #15
 80079a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4422      	add	r2, r4
 80079ae:	609a      	str	r2, [r3, #8]
}
 80079b0:	bf00      	nop
 80079b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079b6:	46bd      	mov	sp, r7
 80079b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079bc:	51eb851f 	.word	0x51eb851f

080079c0 <__NVIC_SetPriority>:
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	6039      	str	r1, [r7, #0]
 80079ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	db0a      	blt.n	80079ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	490c      	ldr	r1, [pc, #48]	; (8007a0c <__NVIC_SetPriority+0x4c>)
 80079da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079de:	0112      	lsls	r2, r2, #4
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	440b      	add	r3, r1
 80079e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079e8:	e00a      	b.n	8007a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	4908      	ldr	r1, [pc, #32]	; (8007a10 <__NVIC_SetPriority+0x50>)
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	3b04      	subs	r3, #4
 80079f8:	0112      	lsls	r2, r2, #4
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	440b      	add	r3, r1
 80079fe:	761a      	strb	r2, [r3, #24]
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	e000e100 	.word	0xe000e100
 8007a10:	e000ed00 	.word	0xe000ed00

08007a14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <SysTick_Handler+0x1c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a1c:	f001 fcfe 	bl	800941c <xTaskGetSchedulerState>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d001      	beq.n	8007a2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a26:	f002 fae7 	bl	8009ff8 <xPortSysTickHandler>
  }
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	e000e010 	.word	0xe000e010

08007a34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f06f 0004 	mvn.w	r0, #4
 8007a3e:	f7ff ffbf 	bl	80079c0 <__NVIC_SetPriority>
#endif
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a4e:	f3ef 8305 	mrs	r3, IPSR
 8007a52:	603b      	str	r3, [r7, #0]
  return(result);
 8007a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a5a:	f06f 0305 	mvn.w	r3, #5
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	e00c      	b.n	8007a7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a62:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <osKernelInitialize+0x44>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <osKernelInitialize+0x44>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	e002      	b.n	8007a7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a7c:	687b      	ldr	r3, [r7, #4]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000464 	.word	0x20000464

08007a90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a96:	f3ef 8305 	mrs	r3, IPSR
 8007a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8007a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8007aa2:	f06f 0305 	mvn.w	r3, #5
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	e010      	b.n	8007acc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <osKernelStart+0x48>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d109      	bne.n	8007ac6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ab2:	f7ff ffbf 	bl	8007a34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ab6:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <osKernelStart+0x48>)
 8007ab8:	2202      	movs	r2, #2
 8007aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007abc:	f001 f866 	bl	8008b8c <vTaskStartScheduler>
      stat = osOK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	e002      	b.n	8007acc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007acc:	687b      	ldr	r3, [r7, #4]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000464 	.word	0x20000464

08007adc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08e      	sub	sp, #56	; 0x38
 8007ae0:	af04      	add	r7, sp, #16
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aec:	f3ef 8305 	mrs	r3, IPSR
 8007af0:	617b      	str	r3, [r7, #20]
  return(result);
 8007af2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d17e      	bne.n	8007bf6 <osThreadNew+0x11a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d07b      	beq.n	8007bf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007afe:	2380      	movs	r3, #128	; 0x80
 8007b00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b02:	2318      	movs	r3, #24
 8007b04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d045      	beq.n	8007ba2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <osThreadNew+0x48>
        name = attr->name;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <osThreadNew+0x6e>
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b38      	cmp	r3, #56	; 0x38
 8007b3c:	d805      	bhi.n	8007b4a <osThreadNew+0x6e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <osThreadNew+0x72>
        return (NULL);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e054      	b.n	8007bf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	089b      	lsrs	r3, r3, #2
 8007b5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00e      	beq.n	8007b84 <osThreadNew+0xa8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	2b5b      	cmp	r3, #91	; 0x5b
 8007b6c:	d90a      	bls.n	8007b84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d006      	beq.n	8007b84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <osThreadNew+0xa8>
        mem = 1;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	61bb      	str	r3, [r7, #24]
 8007b82:	e010      	b.n	8007ba6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10c      	bne.n	8007ba6 <osThreadNew+0xca>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d108      	bne.n	8007ba6 <osThreadNew+0xca>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d104      	bne.n	8007ba6 <osThreadNew+0xca>
          mem = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	e001      	b.n	8007ba6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d110      	bne.n	8007bce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bb4:	9202      	str	r2, [sp, #8]
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	6a3a      	ldr	r2, [r7, #32]
 8007bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fe0c 	bl	80087e0 <xTaskCreateStatic>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	e013      	b.n	8007bf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d110      	bne.n	8007bf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f107 0310 	add.w	r3, r7, #16
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fe57 	bl	800889a <xTaskCreate>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <osThreadNew+0x11a>
            hTask = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bf6:	693b      	ldr	r3, [r7, #16]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3728      	adds	r7, #40	; 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c08:	f3ef 8305 	mrs	r3, IPSR
 8007c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <osDelay+0x1c>
    stat = osErrorISR;
 8007c14:	f06f 0305 	mvn.w	r3, #5
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	e007      	b.n	8007c2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 ff7c 	bl	8008b24 <vTaskDelay>
    }
  }

  return (stat);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	4a06      	ldr	r2, [pc, #24]	; (8007c68 <vApplicationGetIdleTaskMemory+0x30>)
 8007c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2280      	movs	r2, #128	; 0x80
 8007c54:	601a      	str	r2, [r3, #0]
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000468 	.word	0x20000468
 8007c68:	200004c4 	.word	0x200004c4

08007c6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4a07      	ldr	r2, [pc, #28]	; (8007c98 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4a06      	ldr	r2, [pc, #24]	; (8007c9c <vApplicationGetTimerTaskMemory+0x30>)
 8007c82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c8a:	601a      	str	r2, [r3, #0]
}
 8007c8c:	bf00      	nop
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	200006c4 	.word	0x200006c4
 8007c9c:	20000720 	.word	0x20000720

08007ca0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f103 0208 	add.w	r2, r3, #8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f103 0208 	add.w	r2, r3, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
}
 8007d36:	bf00      	nop
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d42:	b480      	push	{r7}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d58:	d103      	bne.n	8007d62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e00c      	b.n	8007d7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3308      	adds	r3, #8
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e002      	b.n	8007d70 <vListInsert+0x2e>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d2f6      	bcs.n	8007d6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6892      	ldr	r2, [r2, #8]
 8007dca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6852      	ldr	r2, [r2, #4]
 8007dd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d103      	bne.n	8007de8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	1e5a      	subs	r2, r3, #1
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e32:	f002 f84f 	bl	8009ed4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	68f9      	ldr	r1, [r7, #12]
 8007e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	441a      	add	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	3b01      	subs	r3, #1
 8007e64:	68f9      	ldr	r1, [r7, #12]
 8007e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22ff      	movs	r2, #255	; 0xff
 8007e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22ff      	movs	r2, #255	; 0xff
 8007e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d114      	bne.n	8007eb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01a      	beq.n	8007ec6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3310      	adds	r3, #16
 8007e94:	4618      	mov	r0, r3
 8007e96:	f001 f903 	bl	80090a0 <xTaskRemoveFromEventList>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d012      	beq.n	8007ec6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <xQueueGenericReset+0xcc>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	e009      	b.n	8007ec6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fef2 	bl	8007ca0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff feed 	bl	8007ca0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ec6:	f002 f835 	bl	8009f34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007eca:	2301      	movs	r3, #1
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	; 0x38
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <xQueueGenericCreateStatic+0x52>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <xQueueGenericCreateStatic+0x56>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xQueueGenericCreateStatic+0x58>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	623b      	str	r3, [r7, #32]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <xQueueGenericCreateStatic+0x7e>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <xQueueGenericCreateStatic+0x82>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <xQueueGenericCreateStatic+0x84>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61fb      	str	r3, [r7, #28]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f76:	2350      	movs	r3, #80	; 0x50
 8007f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b50      	cmp	r3, #80	; 0x50
 8007f7e:	d00a      	beq.n	8007f96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00d      	beq.n	8007fbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007faa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f805 	bl	8007fc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3730      	adds	r7, #48	; 0x30
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e002      	b.n	8007fea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	69b8      	ldr	r0, [r7, #24]
 8007ffa:	f7ff ff05 	bl	8007e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008006:	bf00      	nop
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800801e:	2300      	movs	r3, #0
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xQueueGenericSend+0x32>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <xQueueGenericSend+0x40>
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <xQueueGenericSend+0x44>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <xQueueGenericSend+0x46>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10a      	bne.n	8008070 <xQueueGenericSend+0x60>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d103      	bne.n	800807e <xQueueGenericSend+0x6e>
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <xQueueGenericSend+0x72>
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <xQueueGenericSend+0x74>
 8008082:	2300      	movs	r3, #0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <xQueueGenericSend+0x8e>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	623b      	str	r3, [r7, #32]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800809e:	f001 f9bd 	bl	800941c <xTaskGetSchedulerState>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <xQueueGenericSend+0x9e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <xQueueGenericSend+0xa2>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <xQueueGenericSend+0xa4>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <xQueueGenericSend+0xbe>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	61fb      	str	r3, [r7, #28]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ce:	f001 ff01 	bl	8009ed4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d302      	bcc.n	80080e4 <xQueueGenericSend+0xd4>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d129      	bne.n	8008138 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ea:	f000 fa0b 	bl	8008504 <prvCopyDataToQueue>
 80080ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d010      	beq.n	800811a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 ffcf 	bl	80090a0 <xTaskRemoveFromEventList>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d013      	beq.n	8008130 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008108:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <xQueueGenericSend+0x1f8>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	e00a      	b.n	8008130 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008120:	4b39      	ldr	r3, [pc, #228]	; (8008208 <xQueueGenericSend+0x1f8>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008130:	f001 ff00 	bl	8009f34 <vPortExitCritical>
				return pdPASS;
 8008134:	2301      	movs	r3, #1
 8008136:	e063      	b.n	8008200 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800813e:	f001 fef9 	bl	8009f34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008142:	2300      	movs	r3, #0
 8008144:	e05c      	b.n	8008200 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f809 	bl	8009168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008156:	2301      	movs	r3, #1
 8008158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800815a:	f001 feeb 	bl	8009f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800815e:	f000 fd7b 	bl	8008c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008162:	f001 feb7 	bl	8009ed4 <vPortEnterCritical>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800816c:	b25b      	sxtb	r3, r3
 800816e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008172:	d103      	bne.n	800817c <xQueueGenericSend+0x16c>
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008182:	b25b      	sxtb	r3, r3
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008188:	d103      	bne.n	8008192 <xQueueGenericSend+0x182>
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008192:	f001 fecf 	bl	8009f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008196:	1d3a      	adds	r2, r7, #4
 8008198:	f107 0314 	add.w	r3, r7, #20
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fff8 	bl	8009194 <xTaskCheckForTimeOut>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d124      	bne.n	80081f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ac:	f000 faa2 	bl	80086f4 <prvIsQueueFull>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	3310      	adds	r3, #16
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 ff1e 	bl	8009000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081c6:	f000 fa2d 	bl	8008624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081ca:	f000 fd53 	bl	8008c74 <xTaskResumeAll>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f47f af7c 	bne.w	80080ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <xQueueGenericSend+0x1f8>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	e772      	b.n	80080ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ea:	f000 fa1b 	bl	8008624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ee:	f000 fd41 	bl	8008c74 <xTaskResumeAll>
 80081f2:	e76c      	b.n	80080ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081f6:	f000 fa15 	bl	8008624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fa:	f000 fd3b 	bl	8008c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008200:	4618      	mov	r0, r3
 8008202:	3738      	adds	r7, #56	; 0x38
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b090      	sub	sp, #64	; 0x40
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <xQueueGenericSendFromISR+0x3c>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <xQueueGenericSendFromISR+0x40>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <xQueueGenericSendFromISR+0x42>
 800824c:	2300      	movs	r3, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d103      	bne.n	8008276 <xQueueGenericSendFromISR+0x6a>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <xQueueGenericSendFromISR+0x6e>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueGenericSendFromISR+0x70>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	623b      	str	r3, [r7, #32]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008296:	f001 feff 	bl	800a098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800829a:	f3ef 8211 	mrs	r2, BASEPRI
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	61fa      	str	r2, [r7, #28]
 80082b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <xQueueGenericSendFromISR+0xbc>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d12f      	bne.n	8008328 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082de:	f000 f911 	bl	8008504 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ea:	d112      	bne.n	8008312 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d016      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	3324      	adds	r3, #36	; 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fed1 	bl	80090a0 <xTaskRemoveFromEventList>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e007      	b.n	8008322 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008316:	3301      	adds	r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	b25a      	sxtb	r2, r3
 800831c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008322:	2301      	movs	r3, #1
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008326:	e001      	b.n	800832c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008328:	2300      	movs	r3, #0
 800832a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008336:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800833a:	4618      	mov	r0, r3
 800833c:	3740      	adds	r7, #64	; 0x40
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xQueueReceive+0x30>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	623b      	str	r3, [r7, #32]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <xQueueReceive+0x3e>
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <xQueueReceive+0x42>
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <xQueueReceive+0x44>
 8008386:	2300      	movs	r3, #0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <xQueueReceive+0x5e>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	61fb      	str	r3, [r7, #28]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a2:	f001 f83b 	bl	800941c <xTaskGetSchedulerState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <xQueueReceive+0x6e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xQueueReceive+0x72>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueReceive+0x74>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueReceive+0x8e>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	61bb      	str	r3, [r7, #24]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d2:	f001 fd7f 	bl	8009ed4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01f      	beq.n	8008422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e6:	f000 f8f7 	bl	80085d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	1e5a      	subs	r2, r3, #1
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00f      	beq.n	800841a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	3310      	adds	r3, #16
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fe4e 	bl	80090a0 <xTaskRemoveFromEventList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800840a:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <xQueueReceive+0x1bc>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800841a:	f001 fd8b 	bl	8009f34 <vPortExitCritical>
				return pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	e069      	b.n	80084f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d103      	bne.n	8008430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008428:	f001 fd84 	bl	8009f34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800842c:	2300      	movs	r3, #0
 800842e:	e062      	b.n	80084f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008436:	f107 0310 	add.w	r3, r7, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fe94 	bl	8009168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008444:	f001 fd76 	bl	8009f34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008448:	f000 fc06 	bl	8008c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844c:	f001 fd42 	bl	8009ed4 <vPortEnterCritical>
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008456:	b25b      	sxtb	r3, r3
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845c:	d103      	bne.n	8008466 <xQueueReceive+0x122>
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008472:	d103      	bne.n	800847c <xQueueReceive+0x138>
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847c:	f001 fd5a 	bl	8009f34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008480:	1d3a      	adds	r2, r7, #4
 8008482:	f107 0310 	add.w	r3, r7, #16
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fe83 	bl	8009194 <xTaskCheckForTimeOut>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d123      	bne.n	80084dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008496:	f000 f917 	bl	80086c8 <prvIsQueueEmpty>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	3324      	adds	r3, #36	; 0x24
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	4611      	mov	r1, r2
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 fda9 	bl	8009000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b0:	f000 f8b8 	bl	8008624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084b4:	f000 fbde 	bl	8008c74 <xTaskResumeAll>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d189      	bne.n	80083d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <xQueueReceive+0x1bc>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	e780      	b.n	80083d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f000 f8a7 	bl	8008624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d6:	f000 fbcd 	bl	8008c74 <xTaskResumeAll>
 80084da:	e77a      	b.n	80083d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084de:	f000 f8a1 	bl	8008624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e2:	f000 fbc7 	bl	8008c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e8:	f000 f8ee 	bl	80086c8 <prvIsQueueEmpty>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f43f af6f 	beq.w	80083d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10d      	bne.n	800853e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d14d      	bne.n	80085c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 ff92 	bl	8009458 <xTaskPriorityDisinherit>
 8008534:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	e043      	b.n	80085c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d119      	bne.n	8008578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6858      	ldr	r0, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	461a      	mov	r2, r3
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	f002 fbf0 	bl	800ad34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	441a      	add	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	d32b      	bcc.n	80085c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	e026      	b.n	80085c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68d8      	ldr	r0, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	f002 fbd6 	bl	800ad34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	425b      	negs	r3, r3
 8008592:	441a      	add	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d207      	bcs.n	80085b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ac:	425b      	negs	r3, r3
 80085ae:	441a      	add	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d105      	bne.n	80085c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085ce:	697b      	ldr	r3, [r7, #20]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d018      	beq.n	800861c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	441a      	add	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	429a      	cmp	r2, r3
 8008602:	d303      	bcc.n	800860c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68d9      	ldr	r1, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	461a      	mov	r2, r3
 8008616:	6838      	ldr	r0, [r7, #0]
 8008618:	f002 fb8c 	bl	800ad34 <memcpy>
	}
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800862c:	f001 fc52 	bl	8009ed4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008638:	e011      	b.n	800865e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d012      	beq.n	8008668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3324      	adds	r3, #36	; 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fd2a 	bl	80090a0 <xTaskRemoveFromEventList>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008652:	f000 fe01 	bl	8009258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	3b01      	subs	r3, #1
 800865a:	b2db      	uxtb	r3, r3
 800865c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800865e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dce9      	bgt.n	800863a <prvUnlockQueue+0x16>
 8008666:	e000      	b.n	800866a <prvUnlockQueue+0x46>
					break;
 8008668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	22ff      	movs	r2, #255	; 0xff
 800866e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008672:	f001 fc5f 	bl	8009f34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008676:	f001 fc2d 	bl	8009ed4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008682:	e011      	b.n	80086a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d012      	beq.n	80086b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fd05 	bl	80090a0 <xTaskRemoveFromEventList>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800869c:	f000 fddc 	bl	8009258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dce9      	bgt.n	8008684 <prvUnlockQueue+0x60>
 80086b0:	e000      	b.n	80086b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	22ff      	movs	r2, #255	; 0xff
 80086b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086bc:	f001 fc3a 	bl	8009f34 <vPortExitCritical>
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086d0:	f001 fc00 	bl	8009ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e001      	b.n	80086e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086e6:	f001 fc25 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 80086ea:	68fb      	ldr	r3, [r7, #12]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086fc:	f001 fbea 	bl	8009ed4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	429a      	cmp	r2, r3
 800870a:	d102      	bne.n	8008712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e001      	b.n	8008716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008716:	f001 fc0d 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 800871a:	68fb      	ldr	r3, [r7, #12]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e014      	b.n	800875e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008734:	4a0f      	ldr	r2, [pc, #60]	; (8008774 <vQueueAddToRegistry+0x50>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008740:	490c      	ldr	r1, [pc, #48]	; (8008774 <vQueueAddToRegistry+0x50>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800874a:	4a0a      	ldr	r2, [pc, #40]	; (8008774 <vQueueAddToRegistry+0x50>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008756:	e006      	b.n	8008766 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b07      	cmp	r3, #7
 8008762:	d9e7      	bls.n	8008734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000b20 	.word	0x20000b20

08008778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008788:	f001 fba4 	bl	8009ed4 <vPortEnterCritical>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008792:	b25b      	sxtb	r3, r3
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008798:	d103      	bne.n	80087a2 <vQueueWaitForMessageRestricted+0x2a>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a8:	b25b      	sxtb	r3, r3
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087ae:	d103      	bne.n	80087b8 <vQueueWaitForMessageRestricted+0x40>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b8:	f001 fbbc 	bl	8009f34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d106      	bne.n	80087d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	3324      	adds	r3, #36	; 0x24
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fc3b 	bl	8009048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	f7ff ff26 	bl	8008624 <prvUnlockQueue>
	}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08e      	sub	sp, #56	; 0x38
 80087e4:	af04      	add	r7, sp, #16
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <xTaskCreateStatic+0x2a>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	623b      	str	r3, [r7, #32]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xTaskCreateStatic+0x46>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	61fb      	str	r3, [r7, #28]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008826:	235c      	movs	r3, #92	; 0x5c
 8008828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b5c      	cmp	r3, #92	; 0x5c
 800882e:	d00a      	beq.n	8008846 <xTaskCreateStatic+0x66>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	61bb      	str	r3, [r7, #24]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008846:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01e      	beq.n	800888c <xTaskCreateStatic+0xac>
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800885c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2202      	movs	r2, #2
 8008862:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008866:	2300      	movs	r3, #0
 8008868:	9303      	str	r3, [sp, #12]
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	68b9      	ldr	r1, [r7, #8]
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 f850 	bl	8008924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008886:	f000 f8dd 	bl	8008a44 <prvAddNewTaskToReadyList>
 800888a:	e001      	b.n	8008890 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800888c:	2300      	movs	r3, #0
 800888e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008890:	697b      	ldr	r3, [r7, #20]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800889a:	b580      	push	{r7, lr}
 800889c:	b08c      	sub	sp, #48	; 0x30
 800889e:	af04      	add	r7, sp, #16
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 fc32 	bl	800a118 <pvPortMalloc>
 80088b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088bc:	205c      	movs	r0, #92	; 0x5c
 80088be:	f001 fc2b 	bl	800a118 <pvPortMalloc>
 80088c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	631a      	str	r2, [r3, #48]	; 0x30
 80088d0:	e005      	b.n	80088de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088d2:	6978      	ldr	r0, [r7, #20]
 80088d4:	f001 fcec 	bl	800a2b0 <vPortFree>
 80088d8:	e001      	b.n	80088de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d017      	beq.n	8008914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	2300      	movs	r3, #0
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	9302      	str	r3, [sp, #8]
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 f80e 	bl	8008924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008908:	69f8      	ldr	r0, [r7, #28]
 800890a:	f000 f89b 	bl	8008a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800890e:	2301      	movs	r3, #1
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	e002      	b.n	800891a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800891a:	69bb      	ldr	r3, [r7, #24]
	}
 800891c:	4618      	mov	r0, r3
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	461a      	mov	r2, r3
 800893c:	21a5      	movs	r1, #165	; 0xa5
 800893e:	f002 f9c5 	bl	800accc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800894c:	3b01      	subs	r3, #1
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f023 0307 	bic.w	r3, r3, #7
 800895a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	617b      	str	r3, [r7, #20]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01f      	beq.n	80089c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008982:	2300      	movs	r3, #0
 8008984:	61fb      	str	r3, [r7, #28]
 8008986:	e012      	b.n	80089ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	4413      	add	r3, r2
 800898e:	7819      	ldrb	r1, [r3, #0]
 8008990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	3334      	adds	r3, #52	; 0x34
 8008998:	460a      	mov	r2, r1
 800899a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d006      	beq.n	80089b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	3301      	adds	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b0f      	cmp	r3, #15
 80089b2:	d9e9      	bls.n	8008988 <prvInitialiseNewTask+0x64>
 80089b4:	e000      	b.n	80089b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80089b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089c0:	e003      	b.n	80089ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	2b37      	cmp	r3, #55	; 0x37
 80089ce:	d901      	bls.n	80089d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089d0:	2337      	movs	r3, #55	; 0x37
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	2200      	movs	r2, #0
 80089e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	3304      	adds	r3, #4
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff f978 	bl	8007ce0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	3318      	adds	r3, #24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff f973 	bl	8007ce0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	2200      	movs	r2, #0
 8008a14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	68f9      	ldr	r1, [r7, #12]
 8008a22:	69b8      	ldr	r0, [r7, #24]
 8008a24:	f001 f928 	bl	8009c78 <pxPortInitialiseStack>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	3720      	adds	r7, #32
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a4c:	f001 fa42 	bl	8009ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a50:	4b2d      	ldr	r3, [pc, #180]	; (8008b08 <prvAddNewTaskToReadyList+0xc4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3301      	adds	r3, #1
 8008a56:	4a2c      	ldr	r2, [pc, #176]	; (8008b08 <prvAddNewTaskToReadyList+0xc4>)
 8008a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a5a:	4b2c      	ldr	r3, [pc, #176]	; (8008b0c <prvAddNewTaskToReadyList+0xc8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d109      	bne.n	8008a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a62:	4a2a      	ldr	r2, [pc, #168]	; (8008b0c <prvAddNewTaskToReadyList+0xc8>)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a68:	4b27      	ldr	r3, [pc, #156]	; (8008b08 <prvAddNewTaskToReadyList+0xc4>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d110      	bne.n	8008a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a70:	f000 fc16 	bl	80092a0 <prvInitialiseTaskLists>
 8008a74:	e00d      	b.n	8008a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a76:	4b26      	ldr	r3, [pc, #152]	; (8008b10 <prvAddNewTaskToReadyList+0xcc>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d109      	bne.n	8008a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a7e:	4b23      	ldr	r3, [pc, #140]	; (8008b0c <prvAddNewTaskToReadyList+0xc8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d802      	bhi.n	8008a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a8c:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <prvAddNewTaskToReadyList+0xc8>)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a92:	4b20      	ldr	r3, [pc, #128]	; (8008b14 <prvAddNewTaskToReadyList+0xd0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3301      	adds	r3, #1
 8008a98:	4a1e      	ldr	r2, [pc, #120]	; (8008b14 <prvAddNewTaskToReadyList+0xd0>)
 8008a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a9c:	4b1d      	ldr	r3, [pc, #116]	; (8008b14 <prvAddNewTaskToReadyList+0xd0>)
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <prvAddNewTaskToReadyList+0xd4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d903      	bls.n	8008ab8 <prvAddNewTaskToReadyList+0x74>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4a18      	ldr	r2, [pc, #96]	; (8008b18 <prvAddNewTaskToReadyList+0xd4>)
 8008ab6:	6013      	str	r3, [r2, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <prvAddNewTaskToReadyList+0xd8>)
 8008ac6:	441a      	add	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f7ff f913 	bl	8007cfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ad4:	f001 fa2e 	bl	8009f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ad8:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <prvAddNewTaskToReadyList+0xcc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00e      	beq.n	8008afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <prvAddNewTaskToReadyList+0xc8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d207      	bcs.n	8008afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008aee:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <prvAddNewTaskToReadyList+0xdc>)
 8008af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20001034 	.word	0x20001034
 8008b0c:	20000b60 	.word	0x20000b60
 8008b10:	20001040 	.word	0x20001040
 8008b14:	20001050 	.word	0x20001050
 8008b18:	2000103c 	.word	0x2000103c
 8008b1c:	20000b64 	.word	0x20000b64
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d017      	beq.n	8008b66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b36:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <vTaskDelay+0x60>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <vTaskDelay+0x30>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	60bb      	str	r3, [r7, #8]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b54:	f000 f880 	bl	8008c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fcea 	bl	8009534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b60:	f000 f888 	bl	8008c74 <xTaskResumeAll>
 8008b64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d107      	bne.n	8008b7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <vTaskDelay+0x64>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	2000105c 	.word	0x2000105c
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08a      	sub	sp, #40	; 0x28
 8008b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b9a:	463a      	mov	r2, r7
 8008b9c:	1d39      	adds	r1, r7, #4
 8008b9e:	f107 0308 	add.w	r3, r7, #8
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff f848 	bl	8007c38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	9202      	str	r2, [sp, #8]
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	460a      	mov	r2, r1
 8008bba:	4921      	ldr	r1, [pc, #132]	; (8008c40 <vTaskStartScheduler+0xb4>)
 8008bbc:	4821      	ldr	r0, [pc, #132]	; (8008c44 <vTaskStartScheduler+0xb8>)
 8008bbe:	f7ff fe0f 	bl	80087e0 <xTaskCreateStatic>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4a20      	ldr	r2, [pc, #128]	; (8008c48 <vTaskStartScheduler+0xbc>)
 8008bc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bc8:	4b1f      	ldr	r3, [pc, #124]	; (8008c48 <vTaskStartScheduler+0xbc>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	e001      	b.n	8008bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d102      	bne.n	8008be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008be0:	f000 fcfc 	bl	80095dc <xTimerCreateTimerTask>
 8008be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d116      	bne.n	8008c1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	613b      	str	r3, [r7, #16]
}
 8008bfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <vTaskStartScheduler+0xc0>)
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c08:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <vTaskStartScheduler+0xc4>)
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c0e:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <vTaskStartScheduler+0xc8>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c14:	f001 f8bc 	bl	8009d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c18:	e00e      	b.n	8008c38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c20:	d10a      	bne.n	8008c38 <vTaskStartScheduler+0xac>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60fb      	str	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <vTaskStartScheduler+0xaa>
}
 8008c38:	bf00      	nop
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	0800b674 	.word	0x0800b674
 8008c44:	08009271 	.word	0x08009271
 8008c48:	20001058 	.word	0x20001058
 8008c4c:	20001054 	.word	0x20001054
 8008c50:	20001040 	.word	0x20001040
 8008c54:	20001038 	.word	0x20001038

08008c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <vTaskSuspendAll+0x18>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	4a03      	ldr	r2, [pc, #12]	; (8008c70 <vTaskSuspendAll+0x18>)
 8008c64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c66:	bf00      	nop
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	2000105c 	.word	0x2000105c

08008c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c82:	4b42      	ldr	r3, [pc, #264]	; (8008d8c <xTaskResumeAll+0x118>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	603b      	str	r3, [r7, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ca0:	f001 f918 	bl	8009ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ca4:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <xTaskResumeAll+0x118>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	4a38      	ldr	r2, [pc, #224]	; (8008d8c <xTaskResumeAll+0x118>)
 8008cac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cae:	4b37      	ldr	r3, [pc, #220]	; (8008d8c <xTaskResumeAll+0x118>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d162      	bne.n	8008d7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cb6:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <xTaskResumeAll+0x11c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d05e      	beq.n	8008d7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cbe:	e02f      	b.n	8008d20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc0:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <xTaskResumeAll+0x120>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3318      	adds	r3, #24
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff f871 	bl	8007db4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff f86c 	bl	8007db4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <xTaskResumeAll+0x124>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d903      	bls.n	8008cf0 <xTaskResumeAll+0x7c>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	4a2a      	ldr	r2, [pc, #168]	; (8008d98 <xTaskResumeAll+0x124>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4a27      	ldr	r2, [pc, #156]	; (8008d9c <xTaskResumeAll+0x128>)
 8008cfe:	441a      	add	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f7fe fff7 	bl	8007cfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	4b23      	ldr	r3, [pc, #140]	; (8008da0 <xTaskResumeAll+0x12c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d302      	bcc.n	8008d20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d1a:	4b22      	ldr	r3, [pc, #136]	; (8008da4 <xTaskResumeAll+0x130>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d20:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <xTaskResumeAll+0x120>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1cb      	bne.n	8008cc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d2e:	f000 fb55 	bl	80093dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d32:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <xTaskResumeAll+0x134>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d010      	beq.n	8008d60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d3e:	f000 f847 	bl	8008dd0 <xTaskIncrementTick>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d48:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <xTaskResumeAll+0x130>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1f1      	bne.n	8008d3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d5a:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <xTaskResumeAll+0x134>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d60:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <xTaskResumeAll+0x130>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <xTaskResumeAll+0x138>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d7c:	f001 f8da 	bl	8009f34 <vPortExitCritical>

	return xAlreadyYielded;
 8008d80:	68bb      	ldr	r3, [r7, #8]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	2000105c 	.word	0x2000105c
 8008d90:	20001034 	.word	0x20001034
 8008d94:	20000ff4 	.word	0x20000ff4
 8008d98:	2000103c 	.word	0x2000103c
 8008d9c:	20000b64 	.word	0x20000b64
 8008da0:	20000b60 	.word	0x20000b60
 8008da4:	20001048 	.word	0x20001048
 8008da8:	20001044 	.word	0x20001044
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <xTaskGetTickCount+0x1c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008dbc:	687b      	ldr	r3, [r7, #4]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	20001038 	.word	0x20001038

08008dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dda:	4b4f      	ldr	r3, [pc, #316]	; (8008f18 <xTaskIncrementTick+0x148>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f040 808f 	bne.w	8008f02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008de4:	4b4d      	ldr	r3, [pc, #308]	; (8008f1c <xTaskIncrementTick+0x14c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dec:	4a4b      	ldr	r2, [pc, #300]	; (8008f1c <xTaskIncrementTick+0x14c>)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d120      	bne.n	8008e3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008df8:	4b49      	ldr	r3, [pc, #292]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <xTaskIncrementTick+0x48>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	603b      	str	r3, [r7, #0]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <xTaskIncrementTick+0x46>
 8008e18:	4b41      	ldr	r3, [pc, #260]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	4b41      	ldr	r3, [pc, #260]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a3f      	ldr	r2, [pc, #252]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	4a3f      	ldr	r2, [pc, #252]	; (8008f24 <xTaskIncrementTick+0x154>)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	4b3e      	ldr	r3, [pc, #248]	; (8008f28 <xTaskIncrementTick+0x158>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	4a3d      	ldr	r2, [pc, #244]	; (8008f28 <xTaskIncrementTick+0x158>)
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	f000 fad1 	bl	80093dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e3a:	4b3c      	ldr	r3, [pc, #240]	; (8008f2c <xTaskIncrementTick+0x15c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d349      	bcc.n	8008ed8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e44:	4b36      	ldr	r3, [pc, #216]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d104      	bne.n	8008e58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e4e:	4b37      	ldr	r3, [pc, #220]	; (8008f2c <xTaskIncrementTick+0x15c>)
 8008e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e54:	601a      	str	r2, [r3, #0]
					break;
 8008e56:	e03f      	b.n	8008ed8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e58:	4b31      	ldr	r3, [pc, #196]	; (8008f20 <xTaskIncrementTick+0x150>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d203      	bcs.n	8008e78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e70:	4a2e      	ldr	r2, [pc, #184]	; (8008f2c <xTaskIncrementTick+0x15c>)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e76:	e02f      	b.n	8008ed8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe ff99 	bl	8007db4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d004      	beq.n	8008e94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3318      	adds	r3, #24
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe ff90 	bl	8007db4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e98:	4b25      	ldr	r3, [pc, #148]	; (8008f30 <xTaskIncrementTick+0x160>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d903      	bls.n	8008ea8 <xTaskIncrementTick+0xd8>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	4a22      	ldr	r2, [pc, #136]	; (8008f30 <xTaskIncrementTick+0x160>)
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4a1f      	ldr	r2, [pc, #124]	; (8008f34 <xTaskIncrementTick+0x164>)
 8008eb6:	441a      	add	r2, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	f7fe ff1b 	bl	8007cfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4b1b      	ldr	r3, [pc, #108]	; (8008f38 <xTaskIncrementTick+0x168>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d3b8      	bcc.n	8008e44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ed6:	e7b5      	b.n	8008e44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ed8:	4b17      	ldr	r3, [pc, #92]	; (8008f38 <xTaskIncrementTick+0x168>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ede:	4915      	ldr	r1, [pc, #84]	; (8008f34 <xTaskIncrementTick+0x164>)
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d901      	bls.n	8008ef4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ef4:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <xTaskIncrementTick+0x16c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008efc:	2301      	movs	r3, #1
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	e004      	b.n	8008f0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <xTaskIncrementTick+0x170>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3301      	adds	r3, #1
 8008f08:	4a0d      	ldr	r2, [pc, #52]	; (8008f40 <xTaskIncrementTick+0x170>)
 8008f0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f0c:	697b      	ldr	r3, [r7, #20]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	2000105c 	.word	0x2000105c
 8008f1c:	20001038 	.word	0x20001038
 8008f20:	20000fec 	.word	0x20000fec
 8008f24:	20000ff0 	.word	0x20000ff0
 8008f28:	2000104c 	.word	0x2000104c
 8008f2c:	20001054 	.word	0x20001054
 8008f30:	2000103c 	.word	0x2000103c
 8008f34:	20000b64 	.word	0x20000b64
 8008f38:	20000b60 	.word	0x20000b60
 8008f3c:	20001048 	.word	0x20001048
 8008f40:	20001044 	.word	0x20001044

08008f44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f4a:	4b28      	ldr	r3, [pc, #160]	; (8008fec <vTaskSwitchContext+0xa8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f52:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <vTaskSwitchContext+0xac>)
 8008f54:	2201      	movs	r2, #1
 8008f56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f58:	e041      	b.n	8008fde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008f5a:	4b25      	ldr	r3, [pc, #148]	; (8008ff0 <vTaskSwitchContext+0xac>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <vTaskSwitchContext+0xb0>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	e010      	b.n	8008f8a <vTaskSwitchContext+0x46>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	607b      	str	r3, [r7, #4]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <vTaskSwitchContext+0x3e>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	491b      	ldr	r1, [pc, #108]	; (8008ff8 <vTaskSwitchContext+0xb4>)
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0e4      	beq.n	8008f68 <vTaskSwitchContext+0x24>
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4a13      	ldr	r2, [pc, #76]	; (8008ff8 <vTaskSwitchContext+0xb4>)
 8008faa:	4413      	add	r3, r2
 8008fac:	60bb      	str	r3, [r7, #8]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	605a      	str	r2, [r3, #4]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	3308      	adds	r3, #8
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d104      	bne.n	8008fce <vTaskSwitchContext+0x8a>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	605a      	str	r2, [r3, #4]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <vTaskSwitchContext+0xb8>)
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	4a06      	ldr	r2, [pc, #24]	; (8008ff4 <vTaskSwitchContext+0xb0>)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6013      	str	r3, [r2, #0]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	2000105c 	.word	0x2000105c
 8008ff0:	20001048 	.word	0x20001048
 8008ff4:	2000103c 	.word	0x2000103c
 8008ff8:	20000b64 	.word	0x20000b64
 8008ffc:	20000b60 	.word	0x20000b60

08009000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10a      	bne.n	8009026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009014:	f383 8811 	msr	BASEPRI, r3
 8009018:	f3bf 8f6f 	isb	sy
 800901c:	f3bf 8f4f 	dsb	sy
 8009020:	60fb      	str	r3, [r7, #12]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009026:	4b07      	ldr	r3, [pc, #28]	; (8009044 <vTaskPlaceOnEventList+0x44>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3318      	adds	r3, #24
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fe fe87 	bl	8007d42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009034:	2101      	movs	r1, #1
 8009036:	6838      	ldr	r0, [r7, #0]
 8009038:	f000 fa7c 	bl	8009534 <prvAddCurrentTaskToDelayedList>
}
 800903c:	bf00      	nop
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000b60 	.word	0x20000b60

08009048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10a      	bne.n	8009070 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	617b      	str	r3, [r7, #20]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <vTaskPlaceOnEventListRestricted+0x54>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3318      	adds	r3, #24
 8009076:	4619      	mov	r1, r3
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7fe fe3e 	bl	8007cfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009088:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	68b8      	ldr	r0, [r7, #8]
 800908e:	f000 fa51 	bl	8009534 <prvAddCurrentTaskToDelayedList>
	}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000b60 	.word	0x20000b60

080090a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10a      	bne.n	80090cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	60fb      	str	r3, [r7, #12]
}
 80090c8:	bf00      	nop
 80090ca:	e7fe      	b.n	80090ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fe6f 	bl	8007db4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090d6:	4b1e      	ldr	r3, [pc, #120]	; (8009150 <xTaskRemoveFromEventList+0xb0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d11d      	bne.n	800911a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fe66 	bl	8007db4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4b19      	ldr	r3, [pc, #100]	; (8009154 <xTaskRemoveFromEventList+0xb4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d903      	bls.n	80090fc <xTaskRemoveFromEventList+0x5c>
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	4a16      	ldr	r2, [pc, #88]	; (8009154 <xTaskRemoveFromEventList+0xb4>)
 80090fa:	6013      	str	r3, [r2, #0]
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	4613      	mov	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4a13      	ldr	r2, [pc, #76]	; (8009158 <xTaskRemoveFromEventList+0xb8>)
 800910a:	441a      	add	r2, r3
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fe fdf1 	bl	8007cfa <vListInsertEnd>
 8009118:	e005      	b.n	8009126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	3318      	adds	r3, #24
 800911e:	4619      	mov	r1, r3
 8009120:	480e      	ldr	r0, [pc, #56]	; (800915c <xTaskRemoveFromEventList+0xbc>)
 8009122:	f7fe fdea 	bl	8007cfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <xTaskRemoveFromEventList+0xc0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	429a      	cmp	r2, r3
 8009132:	d905      	bls.n	8009140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <xTaskRemoveFromEventList+0xc4>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e001      	b.n	8009144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009144:	697b      	ldr	r3, [r7, #20]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	2000105c 	.word	0x2000105c
 8009154:	2000103c 	.word	0x2000103c
 8009158:	20000b64 	.word	0x20000b64
 800915c:	20000ff4 	.word	0x20000ff4
 8009160:	20000b60 	.word	0x20000b60
 8009164:	20001048 	.word	0x20001048

08009168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <vTaskInternalSetTimeOutState+0x24>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009178:	4b05      	ldr	r3, [pc, #20]	; (8009190 <vTaskInternalSetTimeOutState+0x28>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	605a      	str	r2, [r3, #4]
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	2000104c 	.word	0x2000104c
 8009190:	20001038 	.word	0x20001038

08009194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	613b      	str	r3, [r7, #16]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091d6:	f000 fe7d 	bl	8009ed4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091da:	4b1d      	ldr	r3, [pc, #116]	; (8009250 <xTaskCheckForTimeOut+0xbc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f2:	d102      	bne.n	80091fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e023      	b.n	8009242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	4b15      	ldr	r3, [pc, #84]	; (8009254 <xTaskCheckForTimeOut+0xc0>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	429a      	cmp	r2, r3
 8009204:	d007      	beq.n	8009216 <xTaskCheckForTimeOut+0x82>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	429a      	cmp	r2, r3
 800920e:	d302      	bcc.n	8009216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	61fb      	str	r3, [r7, #28]
 8009214:	e015      	b.n	8009242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	429a      	cmp	r2, r3
 800921e:	d20b      	bcs.n	8009238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1ad2      	subs	r2, r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7ff ff9b 	bl	8009168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009232:	2300      	movs	r3, #0
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	e004      	b.n	8009242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800923e:	2301      	movs	r3, #1
 8009240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009242:	f000 fe77 	bl	8009f34 <vPortExitCritical>

	return xReturn;
 8009246:	69fb      	ldr	r3, [r7, #28]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20001038 	.word	0x20001038
 8009254:	2000104c 	.word	0x2000104c

08009258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <vTaskMissedYield+0x14>)
 800925e:	2201      	movs	r2, #1
 8009260:	601a      	str	r2, [r3, #0]
}
 8009262:	bf00      	nop
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	20001048 	.word	0x20001048

08009270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009278:	f000 f852 	bl	8009320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <prvIdleTask+0x28>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d9f9      	bls.n	8009278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <prvIdleTask+0x2c>)
 8009286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009294:	e7f0      	b.n	8009278 <prvIdleTask+0x8>
 8009296:	bf00      	nop
 8009298:	20000b64 	.word	0x20000b64
 800929c:	e000ed04 	.word	0xe000ed04

080092a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092a6:	2300      	movs	r3, #0
 80092a8:	607b      	str	r3, [r7, #4]
 80092aa:	e00c      	b.n	80092c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4a12      	ldr	r2, [pc, #72]	; (8009300 <prvInitialiseTaskLists+0x60>)
 80092b8:	4413      	add	r3, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fcf0 	bl	8007ca0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3301      	adds	r3, #1
 80092c4:	607b      	str	r3, [r7, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b37      	cmp	r3, #55	; 0x37
 80092ca:	d9ef      	bls.n	80092ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092cc:	480d      	ldr	r0, [pc, #52]	; (8009304 <prvInitialiseTaskLists+0x64>)
 80092ce:	f7fe fce7 	bl	8007ca0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092d2:	480d      	ldr	r0, [pc, #52]	; (8009308 <prvInitialiseTaskLists+0x68>)
 80092d4:	f7fe fce4 	bl	8007ca0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <prvInitialiseTaskLists+0x6c>)
 80092da:	f7fe fce1 	bl	8007ca0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092de:	480c      	ldr	r0, [pc, #48]	; (8009310 <prvInitialiseTaskLists+0x70>)
 80092e0:	f7fe fcde 	bl	8007ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092e4:	480b      	ldr	r0, [pc, #44]	; (8009314 <prvInitialiseTaskLists+0x74>)
 80092e6:	f7fe fcdb 	bl	8007ca0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <prvInitialiseTaskLists+0x78>)
 80092ec:	4a05      	ldr	r2, [pc, #20]	; (8009304 <prvInitialiseTaskLists+0x64>)
 80092ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	; (800931c <prvInitialiseTaskLists+0x7c>)
 80092f2:	4a05      	ldr	r2, [pc, #20]	; (8009308 <prvInitialiseTaskLists+0x68>)
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000b64 	.word	0x20000b64
 8009304:	20000fc4 	.word	0x20000fc4
 8009308:	20000fd8 	.word	0x20000fd8
 800930c:	20000ff4 	.word	0x20000ff4
 8009310:	20001008 	.word	0x20001008
 8009314:	20001020 	.word	0x20001020
 8009318:	20000fec 	.word	0x20000fec
 800931c:	20000ff0 	.word	0x20000ff0

08009320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009326:	e019      	b.n	800935c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009328:	f000 fdd4 	bl	8009ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800932c:	4b10      	ldr	r3, [pc, #64]	; (8009370 <prvCheckTasksWaitingTermination+0x50>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fd3b 	bl	8007db4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800933e:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <prvCheckTasksWaitingTermination+0x54>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3b01      	subs	r3, #1
 8009344:	4a0b      	ldr	r2, [pc, #44]	; (8009374 <prvCheckTasksWaitingTermination+0x54>)
 8009346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009348:	4b0b      	ldr	r3, [pc, #44]	; (8009378 <prvCheckTasksWaitingTermination+0x58>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	3b01      	subs	r3, #1
 800934e:	4a0a      	ldr	r2, [pc, #40]	; (8009378 <prvCheckTasksWaitingTermination+0x58>)
 8009350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009352:	f000 fdef 	bl	8009f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f810 	bl	800937c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <prvCheckTasksWaitingTermination+0x58>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e1      	bne.n	8009328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20001008 	.word	0x20001008
 8009374:	20001034 	.word	0x20001034
 8009378:	2000101c 	.word	0x2000101c

0800937c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800938a:	2b00      	cmp	r3, #0
 800938c:	d108      	bne.n	80093a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	4618      	mov	r0, r3
 8009394:	f000 ff8c 	bl	800a2b0 <vPortFree>
				vPortFree( pxTCB );
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 ff89 	bl	800a2b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800939e:	e018      	b.n	80093d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d103      	bne.n	80093b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 ff80 	bl	800a2b0 <vPortFree>
	}
 80093b0:	e00f      	b.n	80093d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d00a      	beq.n	80093d2 <prvDeleteTCB+0x56>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	60fb      	str	r3, [r7, #12]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <prvDeleteTCB+0x54>
	}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093e2:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <prvResetNextTaskUnblockTime+0x38>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d104      	bne.n	80093f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093ec:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <prvResetNextTaskUnblockTime+0x3c>)
 80093ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093f4:	e008      	b.n	8009408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f6:	4b07      	ldr	r3, [pc, #28]	; (8009414 <prvResetNextTaskUnblockTime+0x38>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4a04      	ldr	r2, [pc, #16]	; (8009418 <prvResetNextTaskUnblockTime+0x3c>)
 8009406:	6013      	str	r3, [r2, #0]
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	20000fec 	.word	0x20000fec
 8009418:	20001054 	.word	0x20001054

0800941c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009422:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <xTaskGetSchedulerState+0x34>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d102      	bne.n	8009430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800942a:	2301      	movs	r3, #1
 800942c:	607b      	str	r3, [r7, #4]
 800942e:	e008      	b.n	8009442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009430:	4b08      	ldr	r3, [pc, #32]	; (8009454 <xTaskGetSchedulerState+0x38>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d102      	bne.n	800943e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009438:	2302      	movs	r3, #2
 800943a:	607b      	str	r3, [r7, #4]
 800943c:	e001      	b.n	8009442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800943e:	2300      	movs	r3, #0
 8009440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009442:	687b      	ldr	r3, [r7, #4]
	}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20001040 	.word	0x20001040
 8009454:	2000105c 	.word	0x2000105c

08009458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d056      	beq.n	800951c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <xTaskPriorityDisinherit+0xd0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	429a      	cmp	r2, r3
 8009476:	d00a      	beq.n	800948e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60fb      	str	r3, [r7, #12]
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60bb      	str	r3, [r7, #8]
}
 80094a8:	bf00      	nop
 80094aa:	e7fe      	b.n	80094aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b0:	1e5a      	subs	r2, r3, #1
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094be:	429a      	cmp	r2, r3
 80094c0:	d02c      	beq.n	800951c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d128      	bne.n	800951c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fe fc70 	bl	8007db4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ec:	4b0f      	ldr	r3, [pc, #60]	; (800952c <xTaskPriorityDisinherit+0xd4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d903      	bls.n	80094fc <xTaskPriorityDisinherit+0xa4>
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	4a0c      	ldr	r2, [pc, #48]	; (800952c <xTaskPriorityDisinherit+0xd4>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <xTaskPriorityDisinherit+0xd8>)
 800950a:	441a      	add	r2, r3
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe fbf1 	bl	8007cfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800951c:	697b      	ldr	r3, [r7, #20]
	}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20000b60 	.word	0x20000b60
 800952c:	2000103c 	.word	0x2000103c
 8009530:	20000b64 	.word	0x20000b64

08009534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800953e:	4b21      	ldr	r3, [pc, #132]	; (80095c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009544:	4b20      	ldr	r3, [pc, #128]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3304      	adds	r3, #4
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fc32 	bl	8007db4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009556:	d10a      	bne.n	800956e <prvAddCurrentTaskToDelayedList+0x3a>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d007      	beq.n	800956e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800955e:	4b1a      	ldr	r3, [pc, #104]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4819      	ldr	r0, [pc, #100]	; (80095cc <prvAddCurrentTaskToDelayedList+0x98>)
 8009568:	f7fe fbc7 	bl	8007cfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800956c:	e026      	b.n	80095bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d209      	bcs.n	800959a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009586:	4b12      	ldr	r3, [pc, #72]	; (80095d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4b0f      	ldr	r3, [pc, #60]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3304      	adds	r3, #4
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f7fe fbd5 	bl	8007d42 <vListInsert>
}
 8009598:	e010      	b.n	80095bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800959a:	4b0e      	ldr	r3, [pc, #56]	; (80095d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3304      	adds	r3, #4
 80095a4:	4619      	mov	r1, r3
 80095a6:	4610      	mov	r0, r2
 80095a8:	f7fe fbcb 	bl	8007d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d202      	bcs.n	80095bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095b6:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	6013      	str	r3, [r2, #0]
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20001038 	.word	0x20001038
 80095c8:	20000b60 	.word	0x20000b60
 80095cc:	20001020 	.word	0x20001020
 80095d0:	20000ff0 	.word	0x20000ff0
 80095d4:	20000fec 	.word	0x20000fec
 80095d8:	20001054 	.word	0x20001054

080095dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80095e6:	f000 fb07 	bl	8009bf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095ea:	4b1c      	ldr	r3, [pc, #112]	; (800965c <xTimerCreateTimerTask+0x80>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d021      	beq.n	8009636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095fa:	1d3a      	adds	r2, r7, #4
 80095fc:	f107 0108 	add.w	r1, r7, #8
 8009600:	f107 030c 	add.w	r3, r7, #12
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fb31 	bl	8007c6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	9202      	str	r2, [sp, #8]
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	2302      	movs	r3, #2
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	460a      	mov	r2, r1
 800961c:	4910      	ldr	r1, [pc, #64]	; (8009660 <xTimerCreateTimerTask+0x84>)
 800961e:	4811      	ldr	r0, [pc, #68]	; (8009664 <xTimerCreateTimerTask+0x88>)
 8009620:	f7ff f8de 	bl	80087e0 <xTaskCreateStatic>
 8009624:	4603      	mov	r3, r0
 8009626:	4a10      	ldr	r2, [pc, #64]	; (8009668 <xTimerCreateTimerTask+0x8c>)
 8009628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <xTimerCreateTimerTask+0x8c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009632:	2301      	movs	r3, #1
 8009634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	613b      	str	r3, [r7, #16]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009652:	697b      	ldr	r3, [r7, #20]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	20001090 	.word	0x20001090
 8009660:	0800b67c 	.word	0x0800b67c
 8009664:	080097a1 	.word	0x080097a1
 8009668:	20001094 	.word	0x20001094

0800966c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	; 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800967a:	2300      	movs	r3, #0
 800967c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800969a:	4b1a      	ldr	r3, [pc, #104]	; (8009704 <xTimerGenericCommand+0x98>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d02a      	beq.n	80096f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b05      	cmp	r3, #5
 80096b2:	dc18      	bgt.n	80096e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096b4:	f7ff feb2 	bl	800941c <xTaskGetSchedulerState>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d109      	bne.n	80096d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096be:	4b11      	ldr	r3, [pc, #68]	; (8009704 <xTimerGenericCommand+0x98>)
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f107 0110 	add.w	r1, r7, #16
 80096c6:	2300      	movs	r3, #0
 80096c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ca:	f7fe fca1 	bl	8008010 <xQueueGenericSend>
 80096ce:	6278      	str	r0, [r7, #36]	; 0x24
 80096d0:	e012      	b.n	80096f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <xTimerGenericCommand+0x98>)
 80096d4:	6818      	ldr	r0, [r3, #0]
 80096d6:	f107 0110 	add.w	r1, r7, #16
 80096da:	2300      	movs	r3, #0
 80096dc:	2200      	movs	r2, #0
 80096de:	f7fe fc97 	bl	8008010 <xQueueGenericSend>
 80096e2:	6278      	str	r0, [r7, #36]	; 0x24
 80096e4:	e008      	b.n	80096f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096e6:	4b07      	ldr	r3, [pc, #28]	; (8009704 <xTimerGenericCommand+0x98>)
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	f107 0110 	add.w	r1, r7, #16
 80096ee:	2300      	movs	r3, #0
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	f7fe fd8b 	bl	800820c <xQueueGenericSendFromISR>
 80096f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3728      	adds	r7, #40	; 0x28
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20001090 	.word	0x20001090

08009708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af02      	add	r7, sp, #8
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009712:	4b22      	ldr	r3, [pc, #136]	; (800979c <prvProcessExpiredTimer+0x94>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	3304      	adds	r3, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe fb47 	bl	8007db4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d022      	beq.n	800977a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	699a      	ldr	r2, [r3, #24]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	18d1      	adds	r1, r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	6978      	ldr	r0, [r7, #20]
 8009742:	f000 f8d1 	bl	80098e8 <prvInsertTimerInActiveList>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01f      	beq.n	800978c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800974c:	2300      	movs	r3, #0
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	2300      	movs	r3, #0
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	2100      	movs	r1, #0
 8009756:	6978      	ldr	r0, [r7, #20]
 8009758:	f7ff ff88 	bl	800966c <xTimerGenericCommand>
 800975c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d113      	bne.n	800978c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009780:	f023 0301 	bic.w	r3, r3, #1
 8009784:	b2da      	uxtb	r2, r3
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	6978      	ldr	r0, [r7, #20]
 8009792:	4798      	blx	r3
}
 8009794:	bf00      	nop
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20001088 	.word	0x20001088

080097a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 f857 	bl	8009860 <prvGetNextExpireTime>
 80097b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4619      	mov	r1, r3
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f803 	bl	80097c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097be:	f000 f8d5 	bl	800996c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097c2:	e7f1      	b.n	80097a8 <prvTimerTask+0x8>

080097c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097ce:	f7ff fa43 	bl	8008c58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097d2:	f107 0308 	add.w	r3, r7, #8
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f866 	bl	80098a8 <prvSampleTimeNow>
 80097dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d130      	bne.n	8009846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10a      	bne.n	8009800 <prvProcessTimerOrBlockTask+0x3c>
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d806      	bhi.n	8009800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097f2:	f7ff fa3f 	bl	8008c74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff ff85 	bl	8009708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097fe:	e024      	b.n	800984a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009806:	4b13      	ldr	r3, [pc, #76]	; (8009854 <prvProcessTimerOrBlockTask+0x90>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <prvProcessTimerOrBlockTask+0x50>
 8009810:	2301      	movs	r3, #1
 8009812:	e000      	b.n	8009816 <prvProcessTimerOrBlockTask+0x52>
 8009814:	2300      	movs	r3, #0
 8009816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <prvProcessTimerOrBlockTask+0x94>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	4619      	mov	r1, r3
 8009826:	f7fe ffa7 	bl	8008778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800982a:	f7ff fa23 	bl	8008c74 <xTaskResumeAll>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <prvProcessTimerOrBlockTask+0x98>)
 8009836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	f3bf 8f6f 	isb	sy
}
 8009844:	e001      	b.n	800984a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009846:	f7ff fa15 	bl	8008c74 <xTaskResumeAll>
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	2000108c 	.word	0x2000108c
 8009858:	20001090 	.word	0x20001090
 800985c:	e000ed04 	.word	0xe000ed04

08009860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009868:	4b0e      	ldr	r3, [pc, #56]	; (80098a4 <prvGetNextExpireTime+0x44>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <prvGetNextExpireTime+0x16>
 8009872:	2201      	movs	r2, #1
 8009874:	e000      	b.n	8009878 <prvGetNextExpireTime+0x18>
 8009876:	2200      	movs	r2, #0
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d105      	bne.n	8009890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009884:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <prvGetNextExpireTime+0x44>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	e001      	b.n	8009894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009894:	68fb      	ldr	r3, [r7, #12]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20001088 	.word	0x20001088

080098a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098b0:	f7ff fa7e 	bl	8008db0 <xTaskGetTickCount>
 80098b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098b6:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <prvSampleTimeNow+0x3c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d205      	bcs.n	80098cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098c0:	f000 f936 	bl	8009b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e002      	b.n	80098d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098d2:	4a04      	ldr	r2, [pc, #16]	; (80098e4 <prvSampleTimeNow+0x3c>)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80098d8:	68fb      	ldr	r3, [r7, #12]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20001098 	.word	0x20001098

080098e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	429a      	cmp	r2, r3
 800990c:	d812      	bhi.n	8009934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	1ad2      	subs	r2, r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	429a      	cmp	r2, r3
 800991a:	d302      	bcc.n	8009922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800991c:	2301      	movs	r3, #1
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	e01b      	b.n	800995a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009922:	4b10      	ldr	r3, [pc, #64]	; (8009964 <prvInsertTimerInActiveList+0x7c>)
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3304      	adds	r3, #4
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f7fe fa08 	bl	8007d42 <vListInsert>
 8009932:	e012      	b.n	800995a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d206      	bcs.n	800994a <prvInsertTimerInActiveList+0x62>
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d302      	bcc.n	800994a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009944:	2301      	movs	r3, #1
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	e007      	b.n	800995a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <prvInsertTimerInActiveList+0x80>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f7fe f9f4 	bl	8007d42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800995a:	697b      	ldr	r3, [r7, #20]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	2000108c 	.word	0x2000108c
 8009968:	20001088 	.word	0x20001088

0800996c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08e      	sub	sp, #56	; 0x38
 8009970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009972:	e0ca      	b.n	8009b0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	da18      	bge.n	80099ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800997a:	1d3b      	adds	r3, r7, #4
 800997c:	3304      	adds	r3, #4
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	61fb      	str	r3, [r7, #28]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a2:	6850      	ldr	r0, [r2, #4]
 80099a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099a6:	6892      	ldr	r2, [r2, #8]
 80099a8:	4611      	mov	r1, r2
 80099aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f2c0 80ab 	blt.w	8009b0a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	3304      	adds	r3, #4
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe f9f5 	bl	8007db4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099ca:	463b      	mov	r3, r7
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff ff6b 	bl	80098a8 <prvSampleTimeNow>
 80099d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b09      	cmp	r3, #9
 80099d8:	f200 8096 	bhi.w	8009b08 <prvProcessReceivedCommands+0x19c>
 80099dc:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <prvProcessReceivedCommands+0x78>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	08009a0d 	.word	0x08009a0d
 80099e8:	08009a0d 	.word	0x08009a0d
 80099ec:	08009a0d 	.word	0x08009a0d
 80099f0:	08009a81 	.word	0x08009a81
 80099f4:	08009a95 	.word	0x08009a95
 80099f8:	08009adf 	.word	0x08009adf
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a0d 	.word	0x08009a0d
 8009a04:	08009a81 	.word	0x08009a81
 8009a08:	08009a95 	.word	0x08009a95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	18d1      	adds	r1, r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a2c:	f7ff ff5c 	bl	80098e8 <prvInsertTimerInActiveList>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d069      	beq.n	8009b0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d05e      	beq.n	8009b0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	441a      	add	r2, r3
 8009a54:	2300      	movs	r3, #0
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5e:	f7ff fe05 	bl	800966c <xTimerGenericCommand>
 8009a62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d14f      	bne.n	8009b0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	61bb      	str	r3, [r7, #24]
}
 8009a7c:	bf00      	nop
 8009a7e:	e7fe      	b.n	8009a7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a86:	f023 0301 	bic.w	r3, r3, #1
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a92:	e03a      	b.n	8009b0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a9a:	f043 0301 	orr.w	r3, r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	617b      	str	r3, [r7, #20]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	699a      	ldr	r2, [r3, #24]
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	18d1      	adds	r1, r2, r3
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad8:	f7ff ff06 	bl	80098e8 <prvInsertTimerInActiveList>
					break;
 8009adc:	e015      	b.n	8009b0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d103      	bne.n	8009af4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aee:	f000 fbdf 	bl	800a2b0 <vPortFree>
 8009af2:	e00a      	b.n	8009b0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009afa:	f023 0301 	bic.w	r3, r3, #1
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b06:	e000      	b.n	8009b0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009b08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b0a:	4b08      	ldr	r3, [pc, #32]	; (8009b2c <prvProcessReceivedCommands+0x1c0>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	1d39      	adds	r1, r7, #4
 8009b10:	2200      	movs	r2, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fc16 	bl	8008344 <xQueueReceive>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f47f af2a 	bne.w	8009974 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	3730      	adds	r7, #48	; 0x30
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20001090 	.word	0x20001090

08009b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b36:	e048      	b.n	8009bca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b38:	4b2d      	ldr	r3, [pc, #180]	; (8009bf0 <prvSwitchTimerLists+0xc0>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b42:	4b2b      	ldr	r3, [pc, #172]	; (8009bf0 <prvSwitchTimerLists+0xc0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe f92f 	bl	8007db4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d02e      	beq.n	8009bca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d90e      	bls.n	8009b9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b8a:	4b19      	ldr	r3, [pc, #100]	; (8009bf0 <prvSwitchTimerLists+0xc0>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fe f8d4 	bl	8007d42 <vListInsert>
 8009b9a:	e016      	b.n	8009bca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff fd60 	bl	800966c <xTimerGenericCommand>
 8009bac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10a      	bne.n	8009bca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	603b      	str	r3, [r7, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <prvSwitchTimerLists+0xc0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1b1      	bne.n	8009b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <prvSwitchTimerLists+0xc0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009bda:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <prvSwitchTimerLists+0xc4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a04      	ldr	r2, [pc, #16]	; (8009bf0 <prvSwitchTimerLists+0xc0>)
 8009be0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009be2:	4a04      	ldr	r2, [pc, #16]	; (8009bf4 <prvSwitchTimerLists+0xc4>)
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	6013      	str	r3, [r2, #0]
}
 8009be8:	bf00      	nop
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20001088 	.word	0x20001088
 8009bf4:	2000108c 	.word	0x2000108c

08009bf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bfe:	f000 f969 	bl	8009ed4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c02:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d120      	bne.n	8009c4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c0a:	4814      	ldr	r0, [pc, #80]	; (8009c5c <prvCheckForValidListAndQueue+0x64>)
 8009c0c:	f7fe f848 	bl	8007ca0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c10:	4813      	ldr	r0, [pc, #76]	; (8009c60 <prvCheckForValidListAndQueue+0x68>)
 8009c12:	f7fe f845 	bl	8007ca0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c16:	4b13      	ldr	r3, [pc, #76]	; (8009c64 <prvCheckForValidListAndQueue+0x6c>)
 8009c18:	4a10      	ldr	r2, [pc, #64]	; (8009c5c <prvCheckForValidListAndQueue+0x64>)
 8009c1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c1c:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <prvCheckForValidListAndQueue+0x70>)
 8009c1e:	4a10      	ldr	r2, [pc, #64]	; (8009c60 <prvCheckForValidListAndQueue+0x68>)
 8009c20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c22:	2300      	movs	r3, #0
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <prvCheckForValidListAndQueue+0x74>)
 8009c28:	4a11      	ldr	r2, [pc, #68]	; (8009c70 <prvCheckForValidListAndQueue+0x78>)
 8009c2a:	2110      	movs	r1, #16
 8009c2c:	200a      	movs	r0, #10
 8009c2e:	f7fe f953 	bl	8007ed8 <xQueueGenericCreateStatic>
 8009c32:	4603      	mov	r3, r0
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c38:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <prvCheckForValidListAndQueue+0x60>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	490b      	ldr	r1, [pc, #44]	; (8009c74 <prvCheckForValidListAndQueue+0x7c>)
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe fd6c 	bl	8008724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c4c:	f000 f972 	bl	8009f34 <vPortExitCritical>
}
 8009c50:	bf00      	nop
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	20001090 	.word	0x20001090
 8009c5c:	20001060 	.word	0x20001060
 8009c60:	20001074 	.word	0x20001074
 8009c64:	20001088 	.word	0x20001088
 8009c68:	2000108c 	.word	0x2000108c
 8009c6c:	2000113c 	.word	0x2000113c
 8009c70:	2000109c 	.word	0x2000109c
 8009c74:	0800b684 	.word	0x0800b684

08009c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3b04      	subs	r3, #4
 8009c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b04      	subs	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f023 0201 	bic.w	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3b04      	subs	r3, #4
 8009ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ca8:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <pxPortInitialiseStack+0x64>)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b14      	subs	r3, #20
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f06f 0202 	mvn.w	r2, #2
 8009cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3b20      	subs	r3, #32
 8009ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cce:	68fb      	ldr	r3, [r7, #12]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	08009ce1 	.word	0x08009ce1

08009ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <prvTaskExitError+0x54>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf2:	d00a      	beq.n	8009d0a <prvTaskExitError+0x2a>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	60fb      	str	r3, [r7, #12]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <prvTaskExitError+0x28>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	60bb      	str	r3, [r7, #8]
}
 8009d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d1e:	bf00      	nop
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0fc      	beq.n	8009d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d26:	bf00      	nop
 8009d28:	bf00      	nop
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	20000150 	.word	0x20000150
	...

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	20000b60 	.word	0x20000b60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d96:	4b46      	ldr	r3, [pc, #280]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a46      	ldr	r2, [pc, #280]	; (8009eb4 <xPortStartScheduler+0x124>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10a      	bne.n	8009db6 <xPortStartScheduler+0x26>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a3f      	ldr	r2, [pc, #252]	; (8009eb8 <xPortStartScheduler+0x128>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10a      	bne.n	8009dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60fb      	str	r3, [r7, #12]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dd6:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <xPortStartScheduler+0x12c>)
 8009dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	22ff      	movs	r2, #255	; 0xff
 8009de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	4b31      	ldr	r3, [pc, #196]	; (8009ec0 <xPortStartScheduler+0x130>)
 8009dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e00:	2207      	movs	r2, #7
 8009e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e04:	e009      	b.n	8009e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d0ef      	beq.n	8009e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f1c3 0307 	rsb	r3, r3, #7
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d00a      	beq.n	8009e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e66:	4b18      	ldr	r3, [pc, #96]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a14      	ldr	r2, [pc, #80]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e7e:	f000 f8dd 	bl	800a03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e82:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <xPortStartScheduler+0x13c>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e88:	f000 f8fc 	bl	800a084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e8c:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a0f      	ldr	r2, [pc, #60]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e98:	f7ff ff66 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e9c:	f7ff f852 	bl	8008f44 <vTaskSwitchContext>
	prvTaskExitError();
 8009ea0:	f7ff ff1e 	bl	8009ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	e000ed00 	.word	0xe000ed00
 8009eb4:	410fc271 	.word	0x410fc271
 8009eb8:	410fc270 	.word	0x410fc270
 8009ebc:	e000e400 	.word	0xe000e400
 8009ec0:	2000118c 	.word	0x2000118c
 8009ec4:	20001190 	.word	0x20001190
 8009ec8:	e000ed20 	.word	0xe000ed20
 8009ecc:	20000150 	.word	0x20000150
 8009ed0:	e000ef34 	.word	0xe000ef34

08009ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	607b      	str	r3, [r7, #4]
}
 8009eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ef8:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <vPortEnterCritical+0x58>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d10f      	bne.n	8009f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <vPortEnterCritical+0x5c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	603b      	str	r3, [r7, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <vPortEnterCritical+0x4a>
	}
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20000150 	.word	0x20000150
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <vPortExitCritical+0x50>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <vPortExitCritical+0x24>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <vPortExitCritical+0x50>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	4a09      	ldr	r2, [pc, #36]	; (8009f84 <vPortExitCritical+0x50>)
 8009f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <vPortExitCritical+0x42>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f383 8811 	msr	BASEPRI, r3
}
 8009f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20000150 	.word	0x20000150
	...

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7fe ffc0 	bl	8008f44 <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	20000b60 	.word	0x20000b60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a012:	f7fe fedd 	bl	8008dd0 <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <xPortSysTickHandler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <vPortSetupTimerInterrupt+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <vPortSetupTimerInterrupt+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <vPortSetupTimerInterrupt+0x40>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	4a09      	ldr	r2, [pc, #36]	; (800a080 <vPortSetupTimerInterrupt+0x44>)
 800a05a:	3b01      	subs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a060:	2207      	movs	r2, #7
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	e000e010 	.word	0xe000e010
 800a074:	e000e018 	.word	0xe000e018
 800a078:	20000144 	.word	0x20000144
 800a07c:	10624dd3 	.word	0x10624dd3
 800a080:	e000e014 	.word	0xe000e014

0800a084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a094 <vPortEnableVFP+0x10>
 800a088:	6801      	ldr	r1, [r0, #0]
 800a08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a08e:	6001      	str	r1, [r0, #0]
 800a090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a092:	bf00      	nop
 800a094:	e000ed88 	.word	0xe000ed88

0800a098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a09e:	f3ef 8305 	mrs	r3, IPSR
 800a0a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b0f      	cmp	r3, #15
 800a0a8:	d914      	bls.n	800a0d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0aa:	4a17      	ldr	r2, [pc, #92]	; (800a108 <vPortValidateInterruptPriority+0x70>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0b4:	4b15      	ldr	r3, [pc, #84]	; (800a10c <vPortValidateInterruptPriority+0x74>)
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	7afa      	ldrb	r2, [r7, #11]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d20a      	bcs.n	800a0d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0d4:	4b0e      	ldr	r3, [pc, #56]	; (800a110 <vPortValidateInterruptPriority+0x78>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0dc:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <vPortValidateInterruptPriority+0x7c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d90a      	bls.n	800a0fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	603b      	str	r3, [r7, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	e7fe      	b.n	800a0f8 <vPortValidateInterruptPriority+0x60>
	}
 800a0fa:	bf00      	nop
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	e000e3f0 	.word	0xe000e3f0
 800a10c:	2000118c 	.word	0x2000118c
 800a110:	e000ed0c 	.word	0xe000ed0c
 800a114:	20001190 	.word	0x20001190

0800a118 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a120:	2300      	movs	r3, #0
 800a122:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a124:	f7fe fd98 	bl	8008c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a128:	4b5b      	ldr	r3, [pc, #364]	; (800a298 <pvPortMalloc+0x180>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a130:	f000 f920 	bl	800a374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a134:	4b59      	ldr	r3, [pc, #356]	; (800a29c <pvPortMalloc+0x184>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	4013      	ands	r3, r2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f040 8093 	bne.w	800a268 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01d      	beq.n	800a184 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a148:	2208      	movs	r2, #8
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	2b00      	cmp	r3, #0
 800a158:	d014      	beq.n	800a184 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f023 0307 	bic.w	r3, r3, #7
 800a160:	3308      	adds	r3, #8
 800a162:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <pvPortMalloc+0x6c>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	617b      	str	r3, [r7, #20]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d06e      	beq.n	800a268 <pvPortMalloc+0x150>
 800a18a:	4b45      	ldr	r3, [pc, #276]	; (800a2a0 <pvPortMalloc+0x188>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	429a      	cmp	r2, r3
 800a192:	d869      	bhi.n	800a268 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a194:	4b43      	ldr	r3, [pc, #268]	; (800a2a4 <pvPortMalloc+0x18c>)
 800a196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a198:	4b42      	ldr	r3, [pc, #264]	; (800a2a4 <pvPortMalloc+0x18c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a19e:	e004      	b.n	800a1aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d903      	bls.n	800a1bc <pvPortMalloc+0xa4>
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1f1      	bne.n	800a1a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1bc:	4b36      	ldr	r3, [pc, #216]	; (800a298 <pvPortMalloc+0x180>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d050      	beq.n	800a268 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2208      	movs	r2, #8
 800a1cc:	4413      	add	r3, r2
 800a1ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	1ad2      	subs	r2, r2, r3
 800a1e0:	2308      	movs	r3, #8
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d91f      	bls.n	800a228 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00a      	beq.n	800a210 <pvPortMalloc+0xf8>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	613b      	str	r3, [r7, #16]
}
 800a20c:	bf00      	nop
 800a20e:	e7fe      	b.n	800a20e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	1ad2      	subs	r2, r2, r3
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a222:	69b8      	ldr	r0, [r7, #24]
 800a224:	f000 f908 	bl	800a438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a228:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <pvPortMalloc+0x188>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	4a1b      	ldr	r2, [pc, #108]	; (800a2a0 <pvPortMalloc+0x188>)
 800a234:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a236:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <pvPortMalloc+0x188>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <pvPortMalloc+0x190>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d203      	bcs.n	800a24a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a242:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <pvPortMalloc+0x188>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <pvPortMalloc+0x190>)
 800a248:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	4b13      	ldr	r3, [pc, #76]	; (800a29c <pvPortMalloc+0x184>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	431a      	orrs	r2, r3
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	2200      	movs	r2, #0
 800a25c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a25e:	4b13      	ldr	r3, [pc, #76]	; (800a2ac <pvPortMalloc+0x194>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a11      	ldr	r2, [pc, #68]	; (800a2ac <pvPortMalloc+0x194>)
 800a266:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a268:	f7fe fd04 	bl	8008c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <pvPortMalloc+0x174>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	60fb      	str	r3, [r7, #12]
}
 800a288:	bf00      	nop
 800a28a:	e7fe      	b.n	800a28a <pvPortMalloc+0x172>
	return pvReturn;
 800a28c:	69fb      	ldr	r3, [r7, #28]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3728      	adds	r7, #40	; 0x28
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20004d9c 	.word	0x20004d9c
 800a29c:	20004db0 	.word	0x20004db0
 800a2a0:	20004da0 	.word	0x20004da0
 800a2a4:	20004d94 	.word	0x20004d94
 800a2a8:	20004da4 	.word	0x20004da4
 800a2ac:	20004da8 	.word	0x20004da8

0800a2b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d04d      	beq.n	800a35e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	425b      	negs	r3, r3
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	4b24      	ldr	r3, [pc, #144]	; (800a368 <vPortFree+0xb8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <vPortFree+0x44>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	60fb      	str	r3, [r7, #12]
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <vPortFree+0x62>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	60bb      	str	r3, [r7, #8]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <vPortFree+0xb8>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01e      	beq.n	800a35e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d11a      	bne.n	800a35e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <vPortFree+0xb8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	43db      	mvns	r3, r3
 800a332:	401a      	ands	r2, r3
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a338:	f7fe fc8e 	bl	8008c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <vPortFree+0xbc>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4413      	add	r3, r2
 800a346:	4a09      	ldr	r2, [pc, #36]	; (800a36c <vPortFree+0xbc>)
 800a348:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a34a:	6938      	ldr	r0, [r7, #16]
 800a34c:	f000 f874 	bl	800a438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <vPortFree+0xc0>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3301      	adds	r3, #1
 800a356:	4a06      	ldr	r2, [pc, #24]	; (800a370 <vPortFree+0xc0>)
 800a358:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a35a:	f7fe fc8b 	bl	8008c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a35e:	bf00      	nop
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20004db0 	.word	0x20004db0
 800a36c:	20004da0 	.word	0x20004da0
 800a370:	20004dac 	.word	0x20004dac

0800a374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a37a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a37e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a380:	4b27      	ldr	r3, [pc, #156]	; (800a420 <prvHeapInit+0xac>)
 800a382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00c      	beq.n	800a3a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3307      	adds	r3, #7
 800a392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	4a1f      	ldr	r2, [pc, #124]	; (800a420 <prvHeapInit+0xac>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3ac:	4a1d      	ldr	r2, [pc, #116]	; (800a424 <prvHeapInit+0xb0>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3b2:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <prvHeapInit+0xb0>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0307 	bic.w	r3, r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4a15      	ldr	r2, [pc, #84]	; (800a428 <prvHeapInit+0xb4>)
 800a3d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3d6:	4b14      	ldr	r3, [pc, #80]	; (800a428 <prvHeapInit+0xb4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3de:	4b12      	ldr	r3, [pc, #72]	; (800a428 <prvHeapInit+0xb4>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvHeapInit+0xb4>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <prvHeapInit+0xb8>)
 800a402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a09      	ldr	r2, [pc, #36]	; (800a430 <prvHeapInit+0xbc>)
 800a40a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a40c:	4b09      	ldr	r3, [pc, #36]	; (800a434 <prvHeapInit+0xc0>)
 800a40e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a412:	601a      	str	r2, [r3, #0]
}
 800a414:	bf00      	nop
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20001194 	.word	0x20001194
 800a424:	20004d94 	.word	0x20004d94
 800a428:	20004d9c 	.word	0x20004d9c
 800a42c:	20004da4 	.word	0x20004da4
 800a430:	20004da0 	.word	0x20004da0
 800a434:	20004db0 	.word	0x20004db0

0800a438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a440:	4b28      	ldr	r3, [pc, #160]	; (800a4e4 <prvInsertBlockIntoFreeList+0xac>)
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	e002      	b.n	800a44c <prvInsertBlockIntoFreeList+0x14>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d8f7      	bhi.n	800a446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	4413      	add	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d108      	bne.n	800a47a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	441a      	add	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	441a      	add	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d118      	bne.n	800a4c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d00d      	beq.n	800a4b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685a      	ldr	r2, [r3, #4]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	e008      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4b6:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e003      	b.n	800a4c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d002      	beq.n	800a4d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20004d94 	.word	0x20004d94
 800a4e8:	20004d9c 	.word	0x20004d9c

0800a4ec <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	; 0x28
 800a4f0:	af04      	add	r7, sp, #16
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	011b      	lsls	r3, r3, #4
 800a504:	b2db      	uxtb	r3, r3
 800a506:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800a508:	7afb      	ldrb	r3, [r7, #11]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <_ICM20948_SelectUserBank+0x26>
 800a50e:	2368      	movs	r3, #104	; 0x68
 800a510:	e000      	b.n	800a514 <_ICM20948_SelectUserBank+0x28>
 800a512:	2369      	movs	r3, #105	; 0x69
 800a514:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800a516:	7dbb      	ldrb	r3, [r7, #22]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	b299      	uxth	r1, r3
 800a51e:	230a      	movs	r3, #10
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	2301      	movs	r3, #1
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	f107 0315 	add.w	r3, r7, #21
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	2301      	movs	r3, #1
 800a52e:	227f      	movs	r2, #127	; 0x7f
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f7f9 fcdd 	bl	8003ef0 <HAL_I2C_Mem_Write>
 800a536:	4603      	mov	r3, r0
 800a538:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af04      	add	r7, sp, #16
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	4608      	mov	r0, r1
 800a54e:	4611      	mov	r1, r2
 800a550:	461a      	mov	r2, r3
 800a552:	4603      	mov	r3, r0
 800a554:	70fb      	strb	r3, [r7, #3]
 800a556:	460b      	mov	r3, r1
 800a558:	70bb      	strb	r3, [r7, #2]
 800a55a:	4613      	mov	r3, r2
 800a55c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <_ICM20948_WriteByte+0x28>
 800a568:	2368      	movs	r3, #104	; 0x68
 800a56a:	e000      	b.n	800a56e <_ICM20948_WriteByte+0x2a>
 800a56c:	2369      	movs	r3, #105	; 0x69
 800a56e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	b29b      	uxth	r3, r3
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	b299      	uxth	r1, r3
 800a578:	78bb      	ldrb	r3, [r7, #2]
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	230a      	movs	r3, #10
 800a57e:	9302      	str	r3, [sp, #8]
 800a580:	2301      	movs	r3, #1
 800a582:	9301      	str	r3, [sp, #4]
 800a584:	1c7b      	adds	r3, r7, #1
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	2301      	movs	r3, #1
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7f9 fcb0 	bl	8003ef0 <HAL_I2C_Mem_Write>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	70fb      	strb	r3, [r7, #3]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70bb      	strb	r3, [r7, #2]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7ff ff92 	bl	800a4ec <_ICM20948_SelectUserBank>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800a5cc:	78f9      	ldrb	r1, [r7, #3]
 800a5ce:	2380      	movs	r3, #128	; 0x80
 800a5d0:	2206      	movs	r2, #6
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff ffb6 	bl	800a544 <_ICM20948_WriteByte>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800a5dc:	20c8      	movs	r0, #200	; 0xc8
 800a5de:	f7f8 fff5 	bl	80035cc <HAL_Delay>

	status = _ICM20948_WriteByte(
 800a5e2:	78f9      	ldrb	r1, [r7, #3]
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	2206      	movs	r2, #6
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff ffab 	bl	800a544 <_ICM20948_WriteByte>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800a5f2:	78f9      	ldrb	r1, [r7, #3]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2207      	movs	r2, #7
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff ffa3 	bl	800a544 <_ICM20948_WriteByte>
 800a5fe:	4603      	mov	r3, r0
 800a600:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	2202      	movs	r2, #2
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff6f 	bl	800a4ec <_ICM20948_SelectUserBank>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800a612:	78bb      	ldrb	r3, [r7, #2]
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	b25b      	sxtb	r3, r3
 800a618:	f043 0319 	orr.w	r3, r3, #25
 800a61c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	78f9      	ldrb	r1, [r7, #3]
 800a622:	2201      	movs	r2, #1
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff ff8d 	bl	800a544 <_ICM20948_WriteByte>
 800a62a:	4603      	mov	r3, r0
 800a62c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800a62e:	78f9      	ldrb	r1, [r7, #3]
 800a630:	2303      	movs	r3, #3
 800a632:	2253      	movs	r2, #83	; 0x53
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff ff85 	bl	800a544 <_ICM20948_WriteByte>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800a63e:	78f9      	ldrb	r1, [r7, #3]
 800a640:	2304      	movs	r3, #4
 800a642:	2200      	movs	r2, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff7d 	bl	800a544 <_ICM20948_WriteByte>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800a64e:	787b      	ldrb	r3, [r7, #1]
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	b25b      	sxtb	r3, r3
 800a654:	f043 0319 	orr.w	r3, r3, #25
 800a658:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	78f9      	ldrb	r1, [r7, #3]
 800a65e:	2214      	movs	r2, #20
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff ff6f 	bl	800a544 <_ICM20948_WriteByte>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800a66a:	78f9      	ldrb	r1, [r7, #3]
 800a66c:	2304      	movs	r3, #4
 800a66e:	2211      	movs	r2, #17
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7ff ff67 	bl	800a544 <_ICM20948_WriteByte>
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	2200      	movs	r2, #0
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff ff33 	bl	800a4ec <_ICM20948_SelectUserBank>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800a68a:	78f9      	ldrb	r1, [r7, #3]
 800a68c:	2302      	movs	r3, #2
 800a68e:	220f      	movs	r2, #15
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff ff57 	bl	800a544 <_ICM20948_WriteByte>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800a69a:	2208      	movs	r2, #8
 800a69c:	2131      	movs	r1, #49	; 0x31
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f806 	bl	800a6b0 <_AK09918_WriteByte>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	73fb      	strb	r3, [r7, #15]
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af04      	add	r7, sp, #16
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	70fb      	strb	r3, [r7, #3]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	230a      	movs	r3, #10
 800a6ca:	9302      	str	r3, [sp, #8]
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	1cbb      	adds	r3, r7, #2
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	2118      	movs	r1, #24
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7f9 fc09 	bl	8003ef0 <HAL_I2C_Mem_Write>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	71fb      	strb	r3, [r7, #7]
 800a6f6:	e026      	b.n	800a746 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	3b50      	subs	r3, #80	; 0x50
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f000 f82b 	bl	800a75c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800a706:	2100      	movs	r1, #0
 800a708:	2000      	movs	r0, #0
 800a70a:	f000 f827 	bl	800a75c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800a70e:	2100      	movs	r1, #0
 800a710:	2010      	movs	r0, #16
 800a712:	f000 f823 	bl	800a75c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a716:	2300      	movs	r3, #0
 800a718:	71bb      	strb	r3, [r7, #6]
 800a71a:	e00d      	b.n	800a738 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800a71c:	79ba      	ldrb	r2, [r7, #6]
 800a71e:	79fb      	ldrb	r3, [r7, #7]
 800a720:	490d      	ldr	r1, [pc, #52]	; (800a758 <OLED_Refresh_Gram+0x6c>)
 800a722:	00d2      	lsls	r2, r2, #3
 800a724:	440a      	add	r2, r1
 800a726:	4413      	add	r3, r2
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	2101      	movs	r1, #1
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 f815 	bl	800a75c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800a732:	79bb      	ldrb	r3, [r7, #6]
 800a734:	3301      	adds	r3, #1
 800a736:	71bb      	strb	r3, [r7, #6]
 800a738:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	daed      	bge.n	800a71c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800a740:	79fb      	ldrb	r3, [r7, #7]
 800a742:	3301      	adds	r3, #1
 800a744:	71fb      	strb	r3, [r7, #7]
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2b07      	cmp	r3, #7
 800a74a:	d9d5      	bls.n	800a6f8 <OLED_Refresh_Gram+0xc>
	}
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20004db4 	.word	0x20004db4

0800a75c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	4603      	mov	r3, r0
 800a764:	460a      	mov	r2, r1
 800a766:	71fb      	strb	r3, [r7, #7]
 800a768:	4613      	mov	r3, r2
 800a76a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800a76c:	79bb      	ldrb	r3, [r7, #6]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d006      	beq.n	800a780 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800a772:	2201      	movs	r2, #1
 800a774:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a778:	481c      	ldr	r0, [pc, #112]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a77a:	f7f9 fa5b 	bl	8003c34 <HAL_GPIO_WritePin>
 800a77e:	e005      	b.n	800a78c <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800a780:	2200      	movs	r2, #0
 800a782:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a786:	4819      	ldr	r0, [pc, #100]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a788:	f7f9 fa54 	bl	8003c34 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800a78c:	2300      	movs	r3, #0
 800a78e:	73fb      	strb	r3, [r7, #15]
 800a790:	e01e      	b.n	800a7d0 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800a792:	2200      	movs	r2, #0
 800a794:	2120      	movs	r1, #32
 800a796:	4815      	ldr	r0, [pc, #84]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a798:	f7f9 fa4c 	bl	8003c34 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800a79c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	da05      	bge.n	800a7b0 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	2140      	movs	r1, #64	; 0x40
 800a7a8:	4810      	ldr	r0, [pc, #64]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a7aa:	f7f9 fa43 	bl	8003c34 <HAL_GPIO_WritePin>
 800a7ae:	e004      	b.n	800a7ba <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2140      	movs	r1, #64	; 0x40
 800a7b4:	480d      	ldr	r0, [pc, #52]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a7b6:	f7f9 fa3d 	bl	8003c34 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	2120      	movs	r1, #32
 800a7be:	480b      	ldr	r0, [pc, #44]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a7c0:	f7f9 fa38 	bl	8003c34 <HAL_GPIO_WritePin>
		dat <<= 1;
 800a7c4:	79fb      	ldrb	r3, [r7, #7]
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	73fb      	strb	r3, [r7, #15]
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	2b07      	cmp	r3, #7
 800a7d4:	d9dd      	bls.n	800a792 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7dc:	4803      	ldr	r0, [pc, #12]	; (800a7ec <OLED_WR_Byte+0x90>)
 800a7de:	f7f9 fa29 	bl	8003c34 <HAL_GPIO_WritePin>
}
 800a7e2:	bf00      	nop
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	40021000 	.word	0x40021000

0800a7f0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	71fb      	strb	r3, [r7, #7]
 800a7fa:	e014      	b.n	800a826 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	71bb      	strb	r3, [r7, #6]
 800a800:	e00a      	b.n	800a818 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800a802:	79ba      	ldrb	r2, [r7, #6]
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	490c      	ldr	r1, [pc, #48]	; (800a838 <OLED_Clear+0x48>)
 800a808:	00d2      	lsls	r2, r2, #3
 800a80a:	440a      	add	r2, r1
 800a80c:	4413      	add	r3, r2
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800a812:	79bb      	ldrb	r3, [r7, #6]
 800a814:	3301      	adds	r3, #1
 800a816:	71bb      	strb	r3, [r7, #6]
 800a818:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	daf0      	bge.n	800a802 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	3301      	adds	r3, #1
 800a824:	71fb      	strb	r3, [r7, #7]
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	2b07      	cmp	r3, #7
 800a82a:	d9e7      	bls.n	800a7fc <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800a82c:	f7ff ff5e 	bl	800a6ec <OLED_Refresh_Gram>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20004db4 	.word	0x20004db4

0800a83c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	71fb      	strb	r3, [r7, #7]
 800a846:	460b      	mov	r3, r1
 800a848:	71bb      	strb	r3, [r7, #6]
 800a84a:	4613      	mov	r3, r2
 800a84c:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800a852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a856:	2b00      	cmp	r3, #0
 800a858:	db41      	blt.n	800a8de <OLED_DrawPoint+0xa2>
 800a85a:	79bb      	ldrb	r3, [r7, #6]
 800a85c:	2b3f      	cmp	r3, #63	; 0x3f
 800a85e:	d83e      	bhi.n	800a8de <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800a860:	79bb      	ldrb	r3, [r7, #6]
 800a862:	08db      	lsrs	r3, r3, #3
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f1c3 0307 	rsb	r3, r3, #7
 800a86a:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800a86c:	79bb      	ldrb	r3, [r7, #6]
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800a874:	7b7b      	ldrb	r3, [r7, #13]
 800a876:	f1c3 0307 	rsb	r3, r3, #7
 800a87a:	2201      	movs	r2, #1
 800a87c:	fa02 f303 	lsl.w	r3, r2, r3
 800a880:	73fb      	strb	r3, [r7, #15]
	if (t)
 800a882:	797b      	ldrb	r3, [r7, #5]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d012      	beq.n	800a8ae <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800a888:	79fa      	ldrb	r2, [r7, #7]
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	4917      	ldr	r1, [pc, #92]	; (800a8ec <OLED_DrawPoint+0xb0>)
 800a88e:	00d2      	lsls	r2, r2, #3
 800a890:	440a      	add	r2, r1
 800a892:	4413      	add	r3, r2
 800a894:	7818      	ldrb	r0, [r3, #0]
 800a896:	79fa      	ldrb	r2, [r7, #7]
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	7bf9      	ldrb	r1, [r7, #15]
 800a89c:	4301      	orrs	r1, r0
 800a89e:	b2c8      	uxtb	r0, r1
 800a8a0:	4912      	ldr	r1, [pc, #72]	; (800a8ec <OLED_DrawPoint+0xb0>)
 800a8a2:	00d2      	lsls	r2, r2, #3
 800a8a4:	440a      	add	r2, r1
 800a8a6:	4413      	add	r3, r2
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	e018      	b.n	800a8e0 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800a8ae:	79fa      	ldrb	r2, [r7, #7]
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	490e      	ldr	r1, [pc, #56]	; (800a8ec <OLED_DrawPoint+0xb0>)
 800a8b4:	00d2      	lsls	r2, r2, #3
 800a8b6:	440a      	add	r2, r1
 800a8b8:	4413      	add	r3, r2
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	b25a      	sxtb	r2, r3
 800a8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c2:	43db      	mvns	r3, r3
 800a8c4:	b25b      	sxtb	r3, r3
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	b259      	sxtb	r1, r3
 800a8ca:	79fa      	ldrb	r2, [r7, #7]
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	b2c8      	uxtb	r0, r1
 800a8d0:	4906      	ldr	r1, [pc, #24]	; (800a8ec <OLED_DrawPoint+0xb0>)
 800a8d2:	00d2      	lsls	r2, r2, #3
 800a8d4:	440a      	add	r2, r1
 800a8d6:	4413      	add	r3, r2
 800a8d8:	4602      	mov	r2, r0
 800a8da:	701a      	strb	r2, [r3, #0]
 800a8dc:	e000      	b.n	800a8e0 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800a8de:	bf00      	nop
}
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	20004db4 	.word	0x20004db4

0800a8f0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800a8f0:	b590      	push	{r4, r7, lr}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4623      	mov	r3, r4
 800a900:	71fb      	strb	r3, [r7, #7]
 800a902:	4603      	mov	r3, r0
 800a904:	71bb      	strb	r3, [r7, #6]
 800a906:	460b      	mov	r3, r1
 800a908:	717b      	strb	r3, [r7, #5]
 800a90a:	4613      	mov	r3, r2
 800a90c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800a90e:	79bb      	ldrb	r3, [r7, #6]
 800a910:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800a912:	797b      	ldrb	r3, [r7, #5]
 800a914:	3b20      	subs	r3, #32
 800a916:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800a918:	2300      	movs	r3, #0
 800a91a:	73bb      	strb	r3, [r7, #14]
 800a91c:	e04d      	b.n	800a9ba <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800a91e:	793b      	ldrb	r3, [r7, #4]
 800a920:	2b0c      	cmp	r3, #12
 800a922:	d10b      	bne.n	800a93c <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800a924:	797a      	ldrb	r2, [r7, #5]
 800a926:	7bb9      	ldrb	r1, [r7, #14]
 800a928:	4828      	ldr	r0, [pc, #160]	; (800a9cc <OLED_ShowChar+0xdc>)
 800a92a:	4613      	mov	r3, r2
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4403      	add	r3, r0
 800a934:	440b      	add	r3, r1
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	73fb      	strb	r3, [r7, #15]
 800a93a:	e007      	b.n	800a94c <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800a93c:	797a      	ldrb	r2, [r7, #5]
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	4923      	ldr	r1, [pc, #140]	; (800a9d0 <OLED_ShowChar+0xe0>)
 800a942:	0112      	lsls	r2, r2, #4
 800a944:	440a      	add	r2, r1
 800a946:	4413      	add	r3, r2
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800a94c:	2300      	movs	r3, #0
 800a94e:	737b      	strb	r3, [r7, #13]
 800a950:	e02d      	b.n	800a9ae <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800a952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a956:	2b00      	cmp	r3, #0
 800a958:	da07      	bge.n	800a96a <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800a95a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a95e:	79b9      	ldrb	r1, [r7, #6]
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff ff6a 	bl	800a83c <OLED_DrawPoint>
 800a968:	e00c      	b.n	800a984 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800a96a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bf0c      	ite	eq
 800a972:	2301      	moveq	r3, #1
 800a974:	2300      	movne	r3, #0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	79b9      	ldrb	r1, [r7, #6]
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff ff5c 	bl	800a83c <OLED_DrawPoint>
			temp <<= 1;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	73fb      	strb	r3, [r7, #15]
			y++;
 800a98a:	79bb      	ldrb	r3, [r7, #6]
 800a98c:	3301      	adds	r3, #1
 800a98e:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800a990:	79ba      	ldrb	r2, [r7, #6]
 800a992:	7b3b      	ldrb	r3, [r7, #12]
 800a994:	1ad2      	subs	r2, r2, r3
 800a996:	793b      	ldrb	r3, [r7, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d105      	bne.n	800a9a8 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800a99c:	7b3b      	ldrb	r3, [r7, #12]
 800a99e:	71bb      	strb	r3, [r7, #6]
				x++;
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	71fb      	strb	r3, [r7, #7]
				break;
 800a9a6:	e005      	b.n	800a9b4 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800a9a8:	7b7b      	ldrb	r3, [r7, #13]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	737b      	strb	r3, [r7, #13]
 800a9ae:	7b7b      	ldrb	r3, [r7, #13]
 800a9b0:	2b07      	cmp	r3, #7
 800a9b2:	d9ce      	bls.n	800a952 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	73bb      	strb	r3, [r7, #14]
 800a9ba:	7bba      	ldrb	r2, [r7, #14]
 800a9bc:	793b      	ldrb	r3, [r7, #4]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d3ad      	bcc.n	800a91e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd90      	pop	{r4, r7, pc}
 800a9cc:	0800b830 	.word	0x0800b830
 800a9d0:	0800bca4 	.word	0x0800bca4

0800a9d4 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	460a      	mov	r2, r1
 800a9de:	71fb      	strb	r3, [r7, #7]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	60fb      	str	r3, [r7, #12]
	while (n--)
 800a9e8:	e004      	b.n	800a9f4 <oled_pow+0x20>
		result *= m;
 800a9ea:	79fa      	ldrb	r2, [r7, #7]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	60fb      	str	r3, [r7, #12]
	while (n--)
 800a9f4:	79bb      	ldrb	r3, [r7, #6]
 800a9f6:	1e5a      	subs	r2, r3, #1
 800a9f8:	71ba      	strb	r2, [r7, #6]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f5      	bne.n	800a9ea <oled_pow+0x16>
	return result;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800aa0c:	b590      	push	{r4, r7, lr}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af02      	add	r7, sp, #8
 800aa12:	603a      	str	r2, [r7, #0]
 800aa14:	461a      	mov	r2, r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	71bb      	strb	r3, [r7, #6]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]
 800aa2a:	e051      	b.n	800aad0 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800aa2c:	797a      	ldrb	r2, [r7, #5]
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	3b01      	subs	r3, #1
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	200a      	movs	r0, #10
 800aa3c:	f7ff ffca 	bl	800a9d4 <oled_pow>
 800aa40:	4602      	mov	r2, r0
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa48:	4b26      	ldr	r3, [pc, #152]	; (800aae4 <OLED_ShowNumber+0xd8>)
 800aa4a:	fba3 2301 	umull	r2, r3, r3, r1
 800aa4e:	08da      	lsrs	r2, r3, #3
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	1aca      	subs	r2, r1, r3
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800aa5e:	7bbb      	ldrb	r3, [r7, #14]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d11d      	bne.n	800aaa0 <OLED_ShowNumber+0x94>
 800aa64:	7bfa      	ldrb	r2, [r7, #15]
 800aa66:	797b      	ldrb	r3, [r7, #5]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	da18      	bge.n	800aaa0 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800aa6e:	7b7b      	ldrb	r3, [r7, #13]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d113      	bne.n	800aa9c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800aa74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa78:	085b      	lsrs	r3, r3, #1
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	7bfa      	ldrb	r2, [r7, #15]
 800aa7e:	fb12 f303 	smulbb	r3, r2, r3
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	79fb      	ldrb	r3, [r7, #7]
 800aa86:	4413      	add	r3, r2
 800aa88:	b2d8      	uxtb	r0, r3
 800aa8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa8e:	79b9      	ldrb	r1, [r7, #6]
 800aa90:	2201      	movs	r2, #1
 800aa92:	9200      	str	r2, [sp, #0]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f7ff ff2b 	bl	800a8f0 <OLED_ShowChar>
				continue;
 800aa9a:	e016      	b.n	800aaca <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800aaa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aaa4:	085b      	lsrs	r3, r3, #1
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	7bfa      	ldrb	r2, [r7, #15]
 800aaaa:	fb12 f303 	smulbb	r3, r2, r3
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	4413      	add	r3, r2
 800aab4:	b2d8      	uxtb	r0, r3
 800aab6:	7b7b      	ldrb	r3, [r7, #13]
 800aab8:	3330      	adds	r3, #48	; 0x30
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aac0:	79b9      	ldrb	r1, [r7, #6]
 800aac2:	2401      	movs	r4, #1
 800aac4:	9400      	str	r4, [sp, #0]
 800aac6:	f7ff ff13 	bl	800a8f0 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
 800aacc:	3301      	adds	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
 800aad0:	7bfa      	ldrb	r2, [r7, #15]
 800aad2:	797b      	ldrb	r3, [r7, #5]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d3a9      	bcc.n	800aa2c <OLED_ShowNumber+0x20>
	}
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd90      	pop	{r4, r7, pc}
 800aae2:	bf00      	nop
 800aae4:	cccccccd 	.word	0xcccccccd

0800aae8 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af02      	add	r7, sp, #8
 800aaee:	4603      	mov	r3, r0
 800aaf0:	603a      	str	r2, [r7, #0]
 800aaf2:	71fb      	strb	r3, [r7, #7]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800aaf8:	e01f      	b.n	800ab3a <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	2b7a      	cmp	r3, #122	; 0x7a
 800aafe:	d904      	bls.n	800ab0a <OLED_ShowString+0x22>
		{
			x = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800ab04:	79bb      	ldrb	r3, [r7, #6]
 800ab06:	3310      	adds	r3, #16
 800ab08:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800ab0a:	79bb      	ldrb	r3, [r7, #6]
 800ab0c:	2b3a      	cmp	r3, #58	; 0x3a
 800ab0e:	d905      	bls.n	800ab1c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	71fb      	strb	r3, [r7, #7]
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800ab18:	f7ff fe6a 	bl	800a7f0 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	781a      	ldrb	r2, [r3, #0]
 800ab20:	79b9      	ldrb	r1, [r7, #6]
 800ab22:	79f8      	ldrb	r0, [r7, #7]
 800ab24:	2301      	movs	r3, #1
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	230c      	movs	r3, #12
 800ab2a:	f7ff fee1 	bl	800a8f0 <OLED_ShowChar>
		x += 8;
 800ab2e:	79fb      	ldrb	r3, [r7, #7]
 800ab30:	3308      	adds	r3, #8
 800ab32:	71fb      	strb	r3, [r7, #7]
		p++;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1db      	bne.n	800aafa <OLED_ShowString+0x12>
	}
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800ab50:	f7fa f84a 	bl	8004be8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800ab54:	4b41      	ldr	r3, [pc, #260]	; (800ac5c <OLED_Init+0x110>)
 800ab56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab58:	4a40      	ldr	r2, [pc, #256]	; (800ac5c <OLED_Init+0x110>)
 800ab5a:	f023 0301 	bic.w	r3, r3, #1
 800ab5e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab60:	4b3e      	ldr	r3, [pc, #248]	; (800ac5c <OLED_Init+0x110>)
 800ab62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab64:	4a3d      	ldr	r2, [pc, #244]	; (800ac5c <OLED_Init+0x110>)
 800ab66:	f023 0304 	bic.w	r3, r3, #4
 800ab6a:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800ab6c:	f7fa f850 	bl	8004c10 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800ab70:	2200      	movs	r2, #0
 800ab72:	2180      	movs	r1, #128	; 0x80
 800ab74:	483a      	ldr	r0, [pc, #232]	; (800ac60 <OLED_Init+0x114>)
 800ab76:	f7f9 f85d 	bl	8003c34 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800ab7a:	2064      	movs	r0, #100	; 0x64
 800ab7c:	f7f8 fd26 	bl	80035cc <HAL_Delay>
	OLED_RST_Set();
 800ab80:	2201      	movs	r2, #1
 800ab82:	2180      	movs	r1, #128	; 0x80
 800ab84:	4836      	ldr	r0, [pc, #216]	; (800ac60 <OLED_Init+0x114>)
 800ab86:	f7f9 f855 	bl	8003c34 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	20ae      	movs	r0, #174	; 0xae
 800ab8e:	f7ff fde5 	bl	800a75c <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800ab92:	2100      	movs	r1, #0
 800ab94:	20d5      	movs	r0, #213	; 0xd5
 800ab96:	f7ff fde1 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	2050      	movs	r0, #80	; 0x50
 800ab9e:	f7ff fddd 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800aba2:	2100      	movs	r1, #0
 800aba4:	20a8      	movs	r0, #168	; 0xa8
 800aba6:	f7ff fdd9 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800abaa:	2100      	movs	r1, #0
 800abac:	203f      	movs	r0, #63	; 0x3f
 800abae:	f7ff fdd5 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800abb2:	2100      	movs	r1, #0
 800abb4:	20d3      	movs	r0, #211	; 0xd3
 800abb6:	f7ff fdd1 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800abba:	2100      	movs	r1, #0
 800abbc:	2000      	movs	r0, #0
 800abbe:	f7ff fdcd 	bl	800a75c <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800abc2:	2100      	movs	r1, #0
 800abc4:	2040      	movs	r0, #64	; 0x40
 800abc6:	f7ff fdc9 	bl	800a75c <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800abca:	2100      	movs	r1, #0
 800abcc:	208d      	movs	r0, #141	; 0x8d
 800abce:	f7ff fdc5 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800abd2:	2100      	movs	r1, #0
 800abd4:	2014      	movs	r0, #20
 800abd6:	f7ff fdc1 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800abda:	2100      	movs	r1, #0
 800abdc:	2020      	movs	r0, #32
 800abde:	f7ff fdbd 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800abe2:	2100      	movs	r1, #0
 800abe4:	2002      	movs	r0, #2
 800abe6:	f7ff fdb9 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800abea:	2100      	movs	r1, #0
 800abec:	20a1      	movs	r0, #161	; 0xa1
 800abee:	f7ff fdb5 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800abf2:	2100      	movs	r1, #0
 800abf4:	20c0      	movs	r0, #192	; 0xc0
 800abf6:	f7ff fdb1 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800abfa:	2100      	movs	r1, #0
 800abfc:	20da      	movs	r0, #218	; 0xda
 800abfe:	f7ff fdad 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800ac02:	2100      	movs	r1, #0
 800ac04:	2012      	movs	r0, #18
 800ac06:	f7ff fda9 	bl	800a75c <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	2081      	movs	r0, #129	; 0x81
 800ac0e:	f7ff fda5 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800ac12:	2100      	movs	r1, #0
 800ac14:	20ef      	movs	r0, #239	; 0xef
 800ac16:	f7ff fda1 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	20d9      	movs	r0, #217	; 0xd9
 800ac1e:	f7ff fd9d 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ac22:	2100      	movs	r1, #0
 800ac24:	20f1      	movs	r0, #241	; 0xf1
 800ac26:	f7ff fd99 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	20db      	movs	r0, #219	; 0xdb
 800ac2e:	f7ff fd95 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800ac32:	2100      	movs	r1, #0
 800ac34:	2030      	movs	r0, #48	; 0x30
 800ac36:	f7ff fd91 	bl	800a75c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	20a4      	movs	r0, #164	; 0xa4
 800ac3e:	f7ff fd8d 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800ac42:	2100      	movs	r1, #0
 800ac44:	20a6      	movs	r0, #166	; 0xa6
 800ac46:	f7ff fd89 	bl	800a75c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	20af      	movs	r0, #175	; 0xaf
 800ac4e:	f7ff fd85 	bl	800a75c <OLED_WR_Byte>
	OLED_Clear();
 800ac52:	f7ff fdcd 	bl	800a7f0 <OLED_Clear>
 800ac56:	bf00      	nop
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	40023800 	.word	0x40023800
 800ac60:	40021000 	.word	0x40021000

0800ac64 <sniprintf>:
 800ac64:	b40c      	push	{r2, r3}
 800ac66:	b530      	push	{r4, r5, lr}
 800ac68:	4b17      	ldr	r3, [pc, #92]	; (800acc8 <sniprintf+0x64>)
 800ac6a:	1e0c      	subs	r4, r1, #0
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	b09d      	sub	sp, #116	; 0x74
 800ac70:	da08      	bge.n	800ac84 <sniprintf+0x20>
 800ac72:	238b      	movs	r3, #139	; 0x8b
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac7a:	b01d      	add	sp, #116	; 0x74
 800ac7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac80:	b002      	add	sp, #8
 800ac82:	4770      	bx	lr
 800ac84:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac8c:	bf14      	ite	ne
 800ac8e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ac92:	4623      	moveq	r3, r4
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac9c:	9002      	str	r0, [sp, #8]
 800ac9e:	9006      	str	r0, [sp, #24]
 800aca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aca6:	ab21      	add	r3, sp, #132	; 0x84
 800aca8:	a902      	add	r1, sp, #8
 800acaa:	4628      	mov	r0, r5
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	f000 f8a9 	bl	800ae04 <_svfiprintf_r>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	bfbc      	itt	lt
 800acb6:	238b      	movlt	r3, #139	; 0x8b
 800acb8:	602b      	strlt	r3, [r5, #0]
 800acba:	2c00      	cmp	r4, #0
 800acbc:	d0dd      	beq.n	800ac7a <sniprintf+0x16>
 800acbe:	9b02      	ldr	r3, [sp, #8]
 800acc0:	2200      	movs	r2, #0
 800acc2:	701a      	strb	r2, [r3, #0]
 800acc4:	e7d9      	b.n	800ac7a <sniprintf+0x16>
 800acc6:	bf00      	nop
 800acc8:	200001a0 	.word	0x200001a0

0800accc <memset>:
 800accc:	4402      	add	r2, r0
 800acce:	4603      	mov	r3, r0
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d100      	bne.n	800acd6 <memset+0xa>
 800acd4:	4770      	bx	lr
 800acd6:	f803 1b01 	strb.w	r1, [r3], #1
 800acda:	e7f9      	b.n	800acd0 <memset+0x4>

0800acdc <__errno>:
 800acdc:	4b01      	ldr	r3, [pc, #4]	; (800ace4 <__errno+0x8>)
 800acde:	6818      	ldr	r0, [r3, #0]
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	200001a0 	.word	0x200001a0

0800ace8 <__libc_init_array>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	4d0d      	ldr	r5, [pc, #52]	; (800ad20 <__libc_init_array+0x38>)
 800acec:	4c0d      	ldr	r4, [pc, #52]	; (800ad24 <__libc_init_array+0x3c>)
 800acee:	1b64      	subs	r4, r4, r5
 800acf0:	10a4      	asrs	r4, r4, #2
 800acf2:	2600      	movs	r6, #0
 800acf4:	42a6      	cmp	r6, r4
 800acf6:	d109      	bne.n	800ad0c <__libc_init_array+0x24>
 800acf8:	4d0b      	ldr	r5, [pc, #44]	; (800ad28 <__libc_init_array+0x40>)
 800acfa:	4c0c      	ldr	r4, [pc, #48]	; (800ad2c <__libc_init_array+0x44>)
 800acfc:	f000 fc6a 	bl	800b5d4 <_init>
 800ad00:	1b64      	subs	r4, r4, r5
 800ad02:	10a4      	asrs	r4, r4, #2
 800ad04:	2600      	movs	r6, #0
 800ad06:	42a6      	cmp	r6, r4
 800ad08:	d105      	bne.n	800ad16 <__libc_init_array+0x2e>
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad10:	4798      	blx	r3
 800ad12:	3601      	adds	r6, #1
 800ad14:	e7ee      	b.n	800acf4 <__libc_init_array+0xc>
 800ad16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad1a:	4798      	blx	r3
 800ad1c:	3601      	adds	r6, #1
 800ad1e:	e7f2      	b.n	800ad06 <__libc_init_array+0x1e>
 800ad20:	0800c2d0 	.word	0x0800c2d0
 800ad24:	0800c2d0 	.word	0x0800c2d0
 800ad28:	0800c2d0 	.word	0x0800c2d0
 800ad2c:	0800c2d4 	.word	0x0800c2d4

0800ad30 <__retarget_lock_acquire_recursive>:
 800ad30:	4770      	bx	lr

0800ad32 <__retarget_lock_release_recursive>:
 800ad32:	4770      	bx	lr

0800ad34 <memcpy>:
 800ad34:	440a      	add	r2, r1
 800ad36:	4291      	cmp	r1, r2
 800ad38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ad3c:	d100      	bne.n	800ad40 <memcpy+0xc>
 800ad3e:	4770      	bx	lr
 800ad40:	b510      	push	{r4, lr}
 800ad42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	d1f9      	bne.n	800ad42 <memcpy+0xe>
 800ad4e:	bd10      	pop	{r4, pc}

0800ad50 <__ssputs_r>:
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	688e      	ldr	r6, [r1, #8]
 800ad56:	461f      	mov	r7, r3
 800ad58:	42be      	cmp	r6, r7
 800ad5a:	680b      	ldr	r3, [r1, #0]
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	4690      	mov	r8, r2
 800ad62:	d82c      	bhi.n	800adbe <__ssputs_r+0x6e>
 800ad64:	898a      	ldrh	r2, [r1, #12]
 800ad66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad6a:	d026      	beq.n	800adba <__ssputs_r+0x6a>
 800ad6c:	6965      	ldr	r5, [r4, #20]
 800ad6e:	6909      	ldr	r1, [r1, #16]
 800ad70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad74:	eba3 0901 	sub.w	r9, r3, r1
 800ad78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad7c:	1c7b      	adds	r3, r7, #1
 800ad7e:	444b      	add	r3, r9
 800ad80:	106d      	asrs	r5, r5, #1
 800ad82:	429d      	cmp	r5, r3
 800ad84:	bf38      	it	cc
 800ad86:	461d      	movcc	r5, r3
 800ad88:	0553      	lsls	r3, r2, #21
 800ad8a:	d527      	bpl.n	800addc <__ssputs_r+0x8c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	f000 f957 	bl	800b040 <_malloc_r>
 800ad92:	4606      	mov	r6, r0
 800ad94:	b360      	cbz	r0, 800adf0 <__ssputs_r+0xa0>
 800ad96:	6921      	ldr	r1, [r4, #16]
 800ad98:	464a      	mov	r2, r9
 800ad9a:	f7ff ffcb 	bl	800ad34 <memcpy>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ada4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada8:	81a3      	strh	r3, [r4, #12]
 800adaa:	6126      	str	r6, [r4, #16]
 800adac:	6165      	str	r5, [r4, #20]
 800adae:	444e      	add	r6, r9
 800adb0:	eba5 0509 	sub.w	r5, r5, r9
 800adb4:	6026      	str	r6, [r4, #0]
 800adb6:	60a5      	str	r5, [r4, #8]
 800adb8:	463e      	mov	r6, r7
 800adba:	42be      	cmp	r6, r7
 800adbc:	d900      	bls.n	800adc0 <__ssputs_r+0x70>
 800adbe:	463e      	mov	r6, r7
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	4632      	mov	r2, r6
 800adc4:	4641      	mov	r1, r8
 800adc6:	f000 fb86 	bl	800b4d6 <memmove>
 800adca:	68a3      	ldr	r3, [r4, #8]
 800adcc:	1b9b      	subs	r3, r3, r6
 800adce:	60a3      	str	r3, [r4, #8]
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	4433      	add	r3, r6
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	2000      	movs	r0, #0
 800add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800addc:	462a      	mov	r2, r5
 800adde:	f000 fb4b 	bl	800b478 <_realloc_r>
 800ade2:	4606      	mov	r6, r0
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d1e0      	bne.n	800adaa <__ssputs_r+0x5a>
 800ade8:	6921      	ldr	r1, [r4, #16]
 800adea:	4650      	mov	r0, sl
 800adec:	f000 fb9e 	bl	800b52c <_free_r>
 800adf0:	230c      	movs	r3, #12
 800adf2:	f8ca 3000 	str.w	r3, [sl]
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae02:	e7e9      	b.n	800add8 <__ssputs_r+0x88>

0800ae04 <_svfiprintf_r>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	4698      	mov	r8, r3
 800ae0a:	898b      	ldrh	r3, [r1, #12]
 800ae0c:	061b      	lsls	r3, r3, #24
 800ae0e:	b09d      	sub	sp, #116	; 0x74
 800ae10:	4607      	mov	r7, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	d50e      	bpl.n	800ae36 <_svfiprintf_r+0x32>
 800ae18:	690b      	ldr	r3, [r1, #16]
 800ae1a:	b963      	cbnz	r3, 800ae36 <_svfiprintf_r+0x32>
 800ae1c:	2140      	movs	r1, #64	; 0x40
 800ae1e:	f000 f90f 	bl	800b040 <_malloc_r>
 800ae22:	6028      	str	r0, [r5, #0]
 800ae24:	6128      	str	r0, [r5, #16]
 800ae26:	b920      	cbnz	r0, 800ae32 <_svfiprintf_r+0x2e>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae30:	e0d0      	b.n	800afd4 <_svfiprintf_r+0x1d0>
 800ae32:	2340      	movs	r3, #64	; 0x40
 800ae34:	616b      	str	r3, [r5, #20]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3a:	2320      	movs	r3, #32
 800ae3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae44:	2330      	movs	r3, #48	; 0x30
 800ae46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800afec <_svfiprintf_r+0x1e8>
 800ae4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae4e:	f04f 0901 	mov.w	r9, #1
 800ae52:	4623      	mov	r3, r4
 800ae54:	469a      	mov	sl, r3
 800ae56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae5a:	b10a      	cbz	r2, 800ae60 <_svfiprintf_r+0x5c>
 800ae5c:	2a25      	cmp	r2, #37	; 0x25
 800ae5e:	d1f9      	bne.n	800ae54 <_svfiprintf_r+0x50>
 800ae60:	ebba 0b04 	subs.w	fp, sl, r4
 800ae64:	d00b      	beq.n	800ae7e <_svfiprintf_r+0x7a>
 800ae66:	465b      	mov	r3, fp
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7ff ff6f 	bl	800ad50 <__ssputs_r>
 800ae72:	3001      	adds	r0, #1
 800ae74:	f000 80a9 	beq.w	800afca <_svfiprintf_r+0x1c6>
 800ae78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae7a:	445a      	add	r2, fp
 800ae7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 80a1 	beq.w	800afca <_svfiprintf_r+0x1c6>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae92:	f10a 0a01 	add.w	sl, sl, #1
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	9307      	str	r3, [sp, #28]
 800ae9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae9e:	931a      	str	r3, [sp, #104]	; 0x68
 800aea0:	4654      	mov	r4, sl
 800aea2:	2205      	movs	r2, #5
 800aea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea8:	4850      	ldr	r0, [pc, #320]	; (800afec <_svfiprintf_r+0x1e8>)
 800aeaa:	f7f5 f991 	bl	80001d0 <memchr>
 800aeae:	9a04      	ldr	r2, [sp, #16]
 800aeb0:	b9d8      	cbnz	r0, 800aeea <_svfiprintf_r+0xe6>
 800aeb2:	06d0      	lsls	r0, r2, #27
 800aeb4:	bf44      	itt	mi
 800aeb6:	2320      	movmi	r3, #32
 800aeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aebc:	0711      	lsls	r1, r2, #28
 800aebe:	bf44      	itt	mi
 800aec0:	232b      	movmi	r3, #43	; 0x2b
 800aec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeca:	2b2a      	cmp	r3, #42	; 0x2a
 800aecc:	d015      	beq.n	800aefa <_svfiprintf_r+0xf6>
 800aece:	9a07      	ldr	r2, [sp, #28]
 800aed0:	4654      	mov	r4, sl
 800aed2:	2000      	movs	r0, #0
 800aed4:	f04f 0c0a 	mov.w	ip, #10
 800aed8:	4621      	mov	r1, r4
 800aeda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aede:	3b30      	subs	r3, #48	; 0x30
 800aee0:	2b09      	cmp	r3, #9
 800aee2:	d94d      	bls.n	800af80 <_svfiprintf_r+0x17c>
 800aee4:	b1b0      	cbz	r0, 800af14 <_svfiprintf_r+0x110>
 800aee6:	9207      	str	r2, [sp, #28]
 800aee8:	e014      	b.n	800af14 <_svfiprintf_r+0x110>
 800aeea:	eba0 0308 	sub.w	r3, r0, r8
 800aeee:	fa09 f303 	lsl.w	r3, r9, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	46a2      	mov	sl, r4
 800aef8:	e7d2      	b.n	800aea0 <_svfiprintf_r+0x9c>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	1d19      	adds	r1, r3, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	9103      	str	r1, [sp, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfbb      	ittet	lt
 800af06:	425b      	neglt	r3, r3
 800af08:	f042 0202 	orrlt.w	r2, r2, #2
 800af0c:	9307      	strge	r3, [sp, #28]
 800af0e:	9307      	strlt	r3, [sp, #28]
 800af10:	bfb8      	it	lt
 800af12:	9204      	strlt	r2, [sp, #16]
 800af14:	7823      	ldrb	r3, [r4, #0]
 800af16:	2b2e      	cmp	r3, #46	; 0x2e
 800af18:	d10c      	bne.n	800af34 <_svfiprintf_r+0x130>
 800af1a:	7863      	ldrb	r3, [r4, #1]
 800af1c:	2b2a      	cmp	r3, #42	; 0x2a
 800af1e:	d134      	bne.n	800af8a <_svfiprintf_r+0x186>
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	9203      	str	r2, [sp, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfb8      	it	lt
 800af2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800af30:	3402      	adds	r4, #2
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800affc <_svfiprintf_r+0x1f8>
 800af38:	7821      	ldrb	r1, [r4, #0]
 800af3a:	2203      	movs	r2, #3
 800af3c:	4650      	mov	r0, sl
 800af3e:	f7f5 f947 	bl	80001d0 <memchr>
 800af42:	b138      	cbz	r0, 800af54 <_svfiprintf_r+0x150>
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	eba0 000a 	sub.w	r0, r0, sl
 800af4a:	2240      	movs	r2, #64	; 0x40
 800af4c:	4082      	lsls	r2, r0
 800af4e:	4313      	orrs	r3, r2
 800af50:	3401      	adds	r4, #1
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af58:	4825      	ldr	r0, [pc, #148]	; (800aff0 <_svfiprintf_r+0x1ec>)
 800af5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af5e:	2206      	movs	r2, #6
 800af60:	f7f5 f936 	bl	80001d0 <memchr>
 800af64:	2800      	cmp	r0, #0
 800af66:	d038      	beq.n	800afda <_svfiprintf_r+0x1d6>
 800af68:	4b22      	ldr	r3, [pc, #136]	; (800aff4 <_svfiprintf_r+0x1f0>)
 800af6a:	bb1b      	cbnz	r3, 800afb4 <_svfiprintf_r+0x1b0>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	3307      	adds	r3, #7
 800af70:	f023 0307 	bic.w	r3, r3, #7
 800af74:	3308      	adds	r3, #8
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7a:	4433      	add	r3, r6
 800af7c:	9309      	str	r3, [sp, #36]	; 0x24
 800af7e:	e768      	b.n	800ae52 <_svfiprintf_r+0x4e>
 800af80:	fb0c 3202 	mla	r2, ip, r2, r3
 800af84:	460c      	mov	r4, r1
 800af86:	2001      	movs	r0, #1
 800af88:	e7a6      	b.n	800aed8 <_svfiprintf_r+0xd4>
 800af8a:	2300      	movs	r3, #0
 800af8c:	3401      	adds	r4, #1
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	4619      	mov	r1, r3
 800af92:	f04f 0c0a 	mov.w	ip, #10
 800af96:	4620      	mov	r0, r4
 800af98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af9c:	3a30      	subs	r2, #48	; 0x30
 800af9e:	2a09      	cmp	r2, #9
 800afa0:	d903      	bls.n	800afaa <_svfiprintf_r+0x1a6>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0c6      	beq.n	800af34 <_svfiprintf_r+0x130>
 800afa6:	9105      	str	r1, [sp, #20]
 800afa8:	e7c4      	b.n	800af34 <_svfiprintf_r+0x130>
 800afaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800afae:	4604      	mov	r4, r0
 800afb0:	2301      	movs	r3, #1
 800afb2:	e7f0      	b.n	800af96 <_svfiprintf_r+0x192>
 800afb4:	ab03      	add	r3, sp, #12
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	462a      	mov	r2, r5
 800afba:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <_svfiprintf_r+0x1f4>)
 800afbc:	a904      	add	r1, sp, #16
 800afbe:	4638      	mov	r0, r7
 800afc0:	f3af 8000 	nop.w
 800afc4:	1c42      	adds	r2, r0, #1
 800afc6:	4606      	mov	r6, r0
 800afc8:	d1d6      	bne.n	800af78 <_svfiprintf_r+0x174>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	065b      	lsls	r3, r3, #25
 800afce:	f53f af2d 	bmi.w	800ae2c <_svfiprintf_r+0x28>
 800afd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afd4:	b01d      	add	sp, #116	; 0x74
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afda:	ab03      	add	r3, sp, #12
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	462a      	mov	r2, r5
 800afe0:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <_svfiprintf_r+0x1f4>)
 800afe2:	a904      	add	r1, sp, #16
 800afe4:	4638      	mov	r0, r7
 800afe6:	f000 f919 	bl	800b21c <_printf_i>
 800afea:	e7eb      	b.n	800afc4 <_svfiprintf_r+0x1c0>
 800afec:	0800c294 	.word	0x0800c294
 800aff0:	0800c29e 	.word	0x0800c29e
 800aff4:	00000000 	.word	0x00000000
 800aff8:	0800ad51 	.word	0x0800ad51
 800affc:	0800c29a 	.word	0x0800c29a

0800b000 <sbrk_aligned>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	4e0e      	ldr	r6, [pc, #56]	; (800b03c <sbrk_aligned+0x3c>)
 800b004:	460c      	mov	r4, r1
 800b006:	6831      	ldr	r1, [r6, #0]
 800b008:	4605      	mov	r5, r0
 800b00a:	b911      	cbnz	r1, 800b012 <sbrk_aligned+0x12>
 800b00c:	f000 fa7e 	bl	800b50c <_sbrk_r>
 800b010:	6030      	str	r0, [r6, #0]
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
 800b016:	f000 fa79 	bl	800b50c <_sbrk_r>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	d00a      	beq.n	800b034 <sbrk_aligned+0x34>
 800b01e:	1cc4      	adds	r4, r0, #3
 800b020:	f024 0403 	bic.w	r4, r4, #3
 800b024:	42a0      	cmp	r0, r4
 800b026:	d007      	beq.n	800b038 <sbrk_aligned+0x38>
 800b028:	1a21      	subs	r1, r4, r0
 800b02a:	4628      	mov	r0, r5
 800b02c:	f000 fa6e 	bl	800b50c <_sbrk_r>
 800b030:	3001      	adds	r0, #1
 800b032:	d101      	bne.n	800b038 <sbrk_aligned+0x38>
 800b034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b038:	4620      	mov	r0, r4
 800b03a:	bd70      	pop	{r4, r5, r6, pc}
 800b03c:	200052f4 	.word	0x200052f4

0800b040 <_malloc_r>:
 800b040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b044:	1ccd      	adds	r5, r1, #3
 800b046:	f025 0503 	bic.w	r5, r5, #3
 800b04a:	3508      	adds	r5, #8
 800b04c:	2d0c      	cmp	r5, #12
 800b04e:	bf38      	it	cc
 800b050:	250c      	movcc	r5, #12
 800b052:	2d00      	cmp	r5, #0
 800b054:	4607      	mov	r7, r0
 800b056:	db01      	blt.n	800b05c <_malloc_r+0x1c>
 800b058:	42a9      	cmp	r1, r5
 800b05a:	d905      	bls.n	800b068 <_malloc_r+0x28>
 800b05c:	230c      	movs	r3, #12
 800b05e:	603b      	str	r3, [r7, #0]
 800b060:	2600      	movs	r6, #0
 800b062:	4630      	mov	r0, r6
 800b064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b068:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b13c <_malloc_r+0xfc>
 800b06c:	f000 f9f8 	bl	800b460 <__malloc_lock>
 800b070:	f8d8 3000 	ldr.w	r3, [r8]
 800b074:	461c      	mov	r4, r3
 800b076:	bb5c      	cbnz	r4, 800b0d0 <_malloc_r+0x90>
 800b078:	4629      	mov	r1, r5
 800b07a:	4638      	mov	r0, r7
 800b07c:	f7ff ffc0 	bl	800b000 <sbrk_aligned>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	4604      	mov	r4, r0
 800b084:	d155      	bne.n	800b132 <_malloc_r+0xf2>
 800b086:	f8d8 4000 	ldr.w	r4, [r8]
 800b08a:	4626      	mov	r6, r4
 800b08c:	2e00      	cmp	r6, #0
 800b08e:	d145      	bne.n	800b11c <_malloc_r+0xdc>
 800b090:	2c00      	cmp	r4, #0
 800b092:	d048      	beq.n	800b126 <_malloc_r+0xe6>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	4631      	mov	r1, r6
 800b098:	4638      	mov	r0, r7
 800b09a:	eb04 0903 	add.w	r9, r4, r3
 800b09e:	f000 fa35 	bl	800b50c <_sbrk_r>
 800b0a2:	4581      	cmp	r9, r0
 800b0a4:	d13f      	bne.n	800b126 <_malloc_r+0xe6>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	1a6d      	subs	r5, r5, r1
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff ffa7 	bl	800b000 <sbrk_aligned>
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d037      	beq.n	800b126 <_malloc_r+0xe6>
 800b0b6:	6823      	ldr	r3, [r4, #0]
 800b0b8:	442b      	add	r3, r5
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d038      	beq.n	800b136 <_malloc_r+0xf6>
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	42a2      	cmp	r2, r4
 800b0c8:	d12b      	bne.n	800b122 <_malloc_r+0xe2>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
 800b0ce:	e00f      	b.n	800b0f0 <_malloc_r+0xb0>
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	1b52      	subs	r2, r2, r5
 800b0d4:	d41f      	bmi.n	800b116 <_malloc_r+0xd6>
 800b0d6:	2a0b      	cmp	r2, #11
 800b0d8:	d917      	bls.n	800b10a <_malloc_r+0xca>
 800b0da:	1961      	adds	r1, r4, r5
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	6025      	str	r5, [r4, #0]
 800b0e0:	bf18      	it	ne
 800b0e2:	6059      	strne	r1, [r3, #4]
 800b0e4:	6863      	ldr	r3, [r4, #4]
 800b0e6:	bf08      	it	eq
 800b0e8:	f8c8 1000 	streq.w	r1, [r8]
 800b0ec:	5162      	str	r2, [r4, r5]
 800b0ee:	604b      	str	r3, [r1, #4]
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f104 060b 	add.w	r6, r4, #11
 800b0f6:	f000 f9b9 	bl	800b46c <__malloc_unlock>
 800b0fa:	f026 0607 	bic.w	r6, r6, #7
 800b0fe:	1d23      	adds	r3, r4, #4
 800b100:	1af2      	subs	r2, r6, r3
 800b102:	d0ae      	beq.n	800b062 <_malloc_r+0x22>
 800b104:	1b9b      	subs	r3, r3, r6
 800b106:	50a3      	str	r3, [r4, r2]
 800b108:	e7ab      	b.n	800b062 <_malloc_r+0x22>
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	6862      	ldr	r2, [r4, #4]
 800b10e:	d1dd      	bne.n	800b0cc <_malloc_r+0x8c>
 800b110:	f8c8 2000 	str.w	r2, [r8]
 800b114:	e7ec      	b.n	800b0f0 <_malloc_r+0xb0>
 800b116:	4623      	mov	r3, r4
 800b118:	6864      	ldr	r4, [r4, #4]
 800b11a:	e7ac      	b.n	800b076 <_malloc_r+0x36>
 800b11c:	4634      	mov	r4, r6
 800b11e:	6876      	ldr	r6, [r6, #4]
 800b120:	e7b4      	b.n	800b08c <_malloc_r+0x4c>
 800b122:	4613      	mov	r3, r2
 800b124:	e7cc      	b.n	800b0c0 <_malloc_r+0x80>
 800b126:	230c      	movs	r3, #12
 800b128:	603b      	str	r3, [r7, #0]
 800b12a:	4638      	mov	r0, r7
 800b12c:	f000 f99e 	bl	800b46c <__malloc_unlock>
 800b130:	e797      	b.n	800b062 <_malloc_r+0x22>
 800b132:	6025      	str	r5, [r4, #0]
 800b134:	e7dc      	b.n	800b0f0 <_malloc_r+0xb0>
 800b136:	605b      	str	r3, [r3, #4]
 800b138:	deff      	udf	#255	; 0xff
 800b13a:	bf00      	nop
 800b13c:	200052f0 	.word	0x200052f0

0800b140 <_printf_common>:
 800b140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	4616      	mov	r6, r2
 800b146:	4699      	mov	r9, r3
 800b148:	688a      	ldr	r2, [r1, #8]
 800b14a:	690b      	ldr	r3, [r1, #16]
 800b14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b150:	4293      	cmp	r3, r2
 800b152:	bfb8      	it	lt
 800b154:	4613      	movlt	r3, r2
 800b156:	6033      	str	r3, [r6, #0]
 800b158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b15c:	4607      	mov	r7, r0
 800b15e:	460c      	mov	r4, r1
 800b160:	b10a      	cbz	r2, 800b166 <_printf_common+0x26>
 800b162:	3301      	adds	r3, #1
 800b164:	6033      	str	r3, [r6, #0]
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	0699      	lsls	r1, r3, #26
 800b16a:	bf42      	ittt	mi
 800b16c:	6833      	ldrmi	r3, [r6, #0]
 800b16e:	3302      	addmi	r3, #2
 800b170:	6033      	strmi	r3, [r6, #0]
 800b172:	6825      	ldr	r5, [r4, #0]
 800b174:	f015 0506 	ands.w	r5, r5, #6
 800b178:	d106      	bne.n	800b188 <_printf_common+0x48>
 800b17a:	f104 0a19 	add.w	sl, r4, #25
 800b17e:	68e3      	ldr	r3, [r4, #12]
 800b180:	6832      	ldr	r2, [r6, #0]
 800b182:	1a9b      	subs	r3, r3, r2
 800b184:	42ab      	cmp	r3, r5
 800b186:	dc26      	bgt.n	800b1d6 <_printf_common+0x96>
 800b188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b18c:	1e13      	subs	r3, r2, #0
 800b18e:	6822      	ldr	r2, [r4, #0]
 800b190:	bf18      	it	ne
 800b192:	2301      	movne	r3, #1
 800b194:	0692      	lsls	r2, r2, #26
 800b196:	d42b      	bmi.n	800b1f0 <_printf_common+0xb0>
 800b198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b19c:	4649      	mov	r1, r9
 800b19e:	4638      	mov	r0, r7
 800b1a0:	47c0      	blx	r8
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	d01e      	beq.n	800b1e4 <_printf_common+0xa4>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	6922      	ldr	r2, [r4, #16]
 800b1aa:	f003 0306 	and.w	r3, r3, #6
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	bf02      	ittt	eq
 800b1b2:	68e5      	ldreq	r5, [r4, #12]
 800b1b4:	6833      	ldreq	r3, [r6, #0]
 800b1b6:	1aed      	subeq	r5, r5, r3
 800b1b8:	68a3      	ldr	r3, [r4, #8]
 800b1ba:	bf0c      	ite	eq
 800b1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1c0:	2500      	movne	r5, #0
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	bfc4      	itt	gt
 800b1c6:	1a9b      	subgt	r3, r3, r2
 800b1c8:	18ed      	addgt	r5, r5, r3
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	341a      	adds	r4, #26
 800b1ce:	42b5      	cmp	r5, r6
 800b1d0:	d11a      	bne.n	800b208 <_printf_common+0xc8>
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	e008      	b.n	800b1e8 <_printf_common+0xa8>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4652      	mov	r2, sl
 800b1da:	4649      	mov	r1, r9
 800b1dc:	4638      	mov	r0, r7
 800b1de:	47c0      	blx	r8
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d103      	bne.n	800b1ec <_printf_common+0xac>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ec:	3501      	adds	r5, #1
 800b1ee:	e7c6      	b.n	800b17e <_printf_common+0x3e>
 800b1f0:	18e1      	adds	r1, r4, r3
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	2030      	movs	r0, #48	; 0x30
 800b1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1fa:	4422      	add	r2, r4
 800b1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b204:	3302      	adds	r3, #2
 800b206:	e7c7      	b.n	800b198 <_printf_common+0x58>
 800b208:	2301      	movs	r3, #1
 800b20a:	4622      	mov	r2, r4
 800b20c:	4649      	mov	r1, r9
 800b20e:	4638      	mov	r0, r7
 800b210:	47c0      	blx	r8
 800b212:	3001      	adds	r0, #1
 800b214:	d0e6      	beq.n	800b1e4 <_printf_common+0xa4>
 800b216:	3601      	adds	r6, #1
 800b218:	e7d9      	b.n	800b1ce <_printf_common+0x8e>
	...

0800b21c <_printf_i>:
 800b21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b220:	7e0f      	ldrb	r7, [r1, #24]
 800b222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b224:	2f78      	cmp	r7, #120	; 0x78
 800b226:	4691      	mov	r9, r2
 800b228:	4680      	mov	r8, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	469a      	mov	sl, r3
 800b22e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b232:	d807      	bhi.n	800b244 <_printf_i+0x28>
 800b234:	2f62      	cmp	r7, #98	; 0x62
 800b236:	d80a      	bhi.n	800b24e <_printf_i+0x32>
 800b238:	2f00      	cmp	r7, #0
 800b23a:	f000 80d4 	beq.w	800b3e6 <_printf_i+0x1ca>
 800b23e:	2f58      	cmp	r7, #88	; 0x58
 800b240:	f000 80c0 	beq.w	800b3c4 <_printf_i+0x1a8>
 800b244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b24c:	e03a      	b.n	800b2c4 <_printf_i+0xa8>
 800b24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b252:	2b15      	cmp	r3, #21
 800b254:	d8f6      	bhi.n	800b244 <_printf_i+0x28>
 800b256:	a101      	add	r1, pc, #4	; (adr r1, 800b25c <_printf_i+0x40>)
 800b258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b25c:	0800b2b5 	.word	0x0800b2b5
 800b260:	0800b2c9 	.word	0x0800b2c9
 800b264:	0800b245 	.word	0x0800b245
 800b268:	0800b245 	.word	0x0800b245
 800b26c:	0800b245 	.word	0x0800b245
 800b270:	0800b245 	.word	0x0800b245
 800b274:	0800b2c9 	.word	0x0800b2c9
 800b278:	0800b245 	.word	0x0800b245
 800b27c:	0800b245 	.word	0x0800b245
 800b280:	0800b245 	.word	0x0800b245
 800b284:	0800b245 	.word	0x0800b245
 800b288:	0800b3cd 	.word	0x0800b3cd
 800b28c:	0800b2f5 	.word	0x0800b2f5
 800b290:	0800b387 	.word	0x0800b387
 800b294:	0800b245 	.word	0x0800b245
 800b298:	0800b245 	.word	0x0800b245
 800b29c:	0800b3ef 	.word	0x0800b3ef
 800b2a0:	0800b245 	.word	0x0800b245
 800b2a4:	0800b2f5 	.word	0x0800b2f5
 800b2a8:	0800b245 	.word	0x0800b245
 800b2ac:	0800b245 	.word	0x0800b245
 800b2b0:	0800b38f 	.word	0x0800b38f
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	1d1a      	adds	r2, r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	602a      	str	r2, [r5, #0]
 800b2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e09f      	b.n	800b408 <_printf_i+0x1ec>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	0607      	lsls	r7, r0, #24
 800b2ce:	f103 0104 	add.w	r1, r3, #4
 800b2d2:	6029      	str	r1, [r5, #0]
 800b2d4:	d501      	bpl.n	800b2da <_printf_i+0xbe>
 800b2d6:	681e      	ldr	r6, [r3, #0]
 800b2d8:	e003      	b.n	800b2e2 <_printf_i+0xc6>
 800b2da:	0646      	lsls	r6, r0, #25
 800b2dc:	d5fb      	bpl.n	800b2d6 <_printf_i+0xba>
 800b2de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2e2:	2e00      	cmp	r6, #0
 800b2e4:	da03      	bge.n	800b2ee <_printf_i+0xd2>
 800b2e6:	232d      	movs	r3, #45	; 0x2d
 800b2e8:	4276      	negs	r6, r6
 800b2ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ee:	485a      	ldr	r0, [pc, #360]	; (800b458 <_printf_i+0x23c>)
 800b2f0:	230a      	movs	r3, #10
 800b2f2:	e012      	b.n	800b31a <_printf_i+0xfe>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	6820      	ldr	r0, [r4, #0]
 800b2f8:	1d19      	adds	r1, r3, #4
 800b2fa:	6029      	str	r1, [r5, #0]
 800b2fc:	0605      	lsls	r5, r0, #24
 800b2fe:	d501      	bpl.n	800b304 <_printf_i+0xe8>
 800b300:	681e      	ldr	r6, [r3, #0]
 800b302:	e002      	b.n	800b30a <_printf_i+0xee>
 800b304:	0641      	lsls	r1, r0, #25
 800b306:	d5fb      	bpl.n	800b300 <_printf_i+0xe4>
 800b308:	881e      	ldrh	r6, [r3, #0]
 800b30a:	4853      	ldr	r0, [pc, #332]	; (800b458 <_printf_i+0x23c>)
 800b30c:	2f6f      	cmp	r7, #111	; 0x6f
 800b30e:	bf0c      	ite	eq
 800b310:	2308      	moveq	r3, #8
 800b312:	230a      	movne	r3, #10
 800b314:	2100      	movs	r1, #0
 800b316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b31a:	6865      	ldr	r5, [r4, #4]
 800b31c:	60a5      	str	r5, [r4, #8]
 800b31e:	2d00      	cmp	r5, #0
 800b320:	bfa2      	ittt	ge
 800b322:	6821      	ldrge	r1, [r4, #0]
 800b324:	f021 0104 	bicge.w	r1, r1, #4
 800b328:	6021      	strge	r1, [r4, #0]
 800b32a:	b90e      	cbnz	r6, 800b330 <_printf_i+0x114>
 800b32c:	2d00      	cmp	r5, #0
 800b32e:	d04b      	beq.n	800b3c8 <_printf_i+0x1ac>
 800b330:	4615      	mov	r5, r2
 800b332:	fbb6 f1f3 	udiv	r1, r6, r3
 800b336:	fb03 6711 	mls	r7, r3, r1, r6
 800b33a:	5dc7      	ldrb	r7, [r0, r7]
 800b33c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b340:	4637      	mov	r7, r6
 800b342:	42bb      	cmp	r3, r7
 800b344:	460e      	mov	r6, r1
 800b346:	d9f4      	bls.n	800b332 <_printf_i+0x116>
 800b348:	2b08      	cmp	r3, #8
 800b34a:	d10b      	bne.n	800b364 <_printf_i+0x148>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	07de      	lsls	r6, r3, #31
 800b350:	d508      	bpl.n	800b364 <_printf_i+0x148>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	4299      	cmp	r1, r3
 800b358:	bfde      	ittt	le
 800b35a:	2330      	movle	r3, #48	; 0x30
 800b35c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b360:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b364:	1b52      	subs	r2, r2, r5
 800b366:	6122      	str	r2, [r4, #16]
 800b368:	f8cd a000 	str.w	sl, [sp]
 800b36c:	464b      	mov	r3, r9
 800b36e:	aa03      	add	r2, sp, #12
 800b370:	4621      	mov	r1, r4
 800b372:	4640      	mov	r0, r8
 800b374:	f7ff fee4 	bl	800b140 <_printf_common>
 800b378:	3001      	adds	r0, #1
 800b37a:	d14a      	bne.n	800b412 <_printf_i+0x1f6>
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b380:	b004      	add	sp, #16
 800b382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	f043 0320 	orr.w	r3, r3, #32
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	4833      	ldr	r0, [pc, #204]	; (800b45c <_printf_i+0x240>)
 800b390:	2778      	movs	r7, #120	; 0x78
 800b392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b396:	6823      	ldr	r3, [r4, #0]
 800b398:	6829      	ldr	r1, [r5, #0]
 800b39a:	061f      	lsls	r7, r3, #24
 800b39c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3a0:	d402      	bmi.n	800b3a8 <_printf_i+0x18c>
 800b3a2:	065f      	lsls	r7, r3, #25
 800b3a4:	bf48      	it	mi
 800b3a6:	b2b6      	uxthmi	r6, r6
 800b3a8:	07df      	lsls	r7, r3, #31
 800b3aa:	bf48      	it	mi
 800b3ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b3b0:	6029      	str	r1, [r5, #0]
 800b3b2:	bf48      	it	mi
 800b3b4:	6023      	strmi	r3, [r4, #0]
 800b3b6:	b91e      	cbnz	r6, 800b3c0 <_printf_i+0x1a4>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	f023 0320 	bic.w	r3, r3, #32
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	2310      	movs	r3, #16
 800b3c2:	e7a7      	b.n	800b314 <_printf_i+0xf8>
 800b3c4:	4824      	ldr	r0, [pc, #144]	; (800b458 <_printf_i+0x23c>)
 800b3c6:	e7e4      	b.n	800b392 <_printf_i+0x176>
 800b3c8:	4615      	mov	r5, r2
 800b3ca:	e7bd      	b.n	800b348 <_printf_i+0x12c>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	6826      	ldr	r6, [r4, #0]
 800b3d0:	6961      	ldr	r1, [r4, #20]
 800b3d2:	1d18      	adds	r0, r3, #4
 800b3d4:	6028      	str	r0, [r5, #0]
 800b3d6:	0635      	lsls	r5, r6, #24
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	d501      	bpl.n	800b3e0 <_printf_i+0x1c4>
 800b3dc:	6019      	str	r1, [r3, #0]
 800b3de:	e002      	b.n	800b3e6 <_printf_i+0x1ca>
 800b3e0:	0670      	lsls	r0, r6, #25
 800b3e2:	d5fb      	bpl.n	800b3dc <_printf_i+0x1c0>
 800b3e4:	8019      	strh	r1, [r3, #0]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6123      	str	r3, [r4, #16]
 800b3ea:	4615      	mov	r5, r2
 800b3ec:	e7bc      	b.n	800b368 <_printf_i+0x14c>
 800b3ee:	682b      	ldr	r3, [r5, #0]
 800b3f0:	1d1a      	adds	r2, r3, #4
 800b3f2:	602a      	str	r2, [r5, #0]
 800b3f4:	681d      	ldr	r5, [r3, #0]
 800b3f6:	6862      	ldr	r2, [r4, #4]
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f7f4 fee8 	bl	80001d0 <memchr>
 800b400:	b108      	cbz	r0, 800b406 <_printf_i+0x1ea>
 800b402:	1b40      	subs	r0, r0, r5
 800b404:	6060      	str	r0, [r4, #4]
 800b406:	6863      	ldr	r3, [r4, #4]
 800b408:	6123      	str	r3, [r4, #16]
 800b40a:	2300      	movs	r3, #0
 800b40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b410:	e7aa      	b.n	800b368 <_printf_i+0x14c>
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	462a      	mov	r2, r5
 800b416:	4649      	mov	r1, r9
 800b418:	4640      	mov	r0, r8
 800b41a:	47d0      	blx	sl
 800b41c:	3001      	adds	r0, #1
 800b41e:	d0ad      	beq.n	800b37c <_printf_i+0x160>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	079b      	lsls	r3, r3, #30
 800b424:	d413      	bmi.n	800b44e <_printf_i+0x232>
 800b426:	68e0      	ldr	r0, [r4, #12]
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	4298      	cmp	r0, r3
 800b42c:	bfb8      	it	lt
 800b42e:	4618      	movlt	r0, r3
 800b430:	e7a6      	b.n	800b380 <_printf_i+0x164>
 800b432:	2301      	movs	r3, #1
 800b434:	4632      	mov	r2, r6
 800b436:	4649      	mov	r1, r9
 800b438:	4640      	mov	r0, r8
 800b43a:	47d0      	blx	sl
 800b43c:	3001      	adds	r0, #1
 800b43e:	d09d      	beq.n	800b37c <_printf_i+0x160>
 800b440:	3501      	adds	r5, #1
 800b442:	68e3      	ldr	r3, [r4, #12]
 800b444:	9903      	ldr	r1, [sp, #12]
 800b446:	1a5b      	subs	r3, r3, r1
 800b448:	42ab      	cmp	r3, r5
 800b44a:	dcf2      	bgt.n	800b432 <_printf_i+0x216>
 800b44c:	e7eb      	b.n	800b426 <_printf_i+0x20a>
 800b44e:	2500      	movs	r5, #0
 800b450:	f104 0619 	add.w	r6, r4, #25
 800b454:	e7f5      	b.n	800b442 <_printf_i+0x226>
 800b456:	bf00      	nop
 800b458:	0800c2a5 	.word	0x0800c2a5
 800b45c:	0800c2b6 	.word	0x0800c2b6

0800b460 <__malloc_lock>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__malloc_lock+0x8>)
 800b462:	f7ff bc65 	b.w	800ad30 <__retarget_lock_acquire_recursive>
 800b466:	bf00      	nop
 800b468:	200052ec 	.word	0x200052ec

0800b46c <__malloc_unlock>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__malloc_unlock+0x8>)
 800b46e:	f7ff bc60 	b.w	800ad32 <__retarget_lock_release_recursive>
 800b472:	bf00      	nop
 800b474:	200052ec 	.word	0x200052ec

0800b478 <_realloc_r>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	4680      	mov	r8, r0
 800b47e:	4614      	mov	r4, r2
 800b480:	460e      	mov	r6, r1
 800b482:	b921      	cbnz	r1, 800b48e <_realloc_r+0x16>
 800b484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	4611      	mov	r1, r2
 800b48a:	f7ff bdd9 	b.w	800b040 <_malloc_r>
 800b48e:	b92a      	cbnz	r2, 800b49c <_realloc_r+0x24>
 800b490:	f000 f84c 	bl	800b52c <_free_r>
 800b494:	4625      	mov	r5, r4
 800b496:	4628      	mov	r0, r5
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49c:	f000 f892 	bl	800b5c4 <_malloc_usable_size_r>
 800b4a0:	4284      	cmp	r4, r0
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	d802      	bhi.n	800b4ac <_realloc_r+0x34>
 800b4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4aa:	d812      	bhi.n	800b4d2 <_realloc_r+0x5a>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	f7ff fdc6 	bl	800b040 <_malloc_r>
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d0ed      	beq.n	800b496 <_realloc_r+0x1e>
 800b4ba:	42bc      	cmp	r4, r7
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4631      	mov	r1, r6
 800b4c0:	bf28      	it	cs
 800b4c2:	463a      	movcs	r2, r7
 800b4c4:	f7ff fc36 	bl	800ad34 <memcpy>
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f000 f82e 	bl	800b52c <_free_r>
 800b4d0:	e7e1      	b.n	800b496 <_realloc_r+0x1e>
 800b4d2:	4635      	mov	r5, r6
 800b4d4:	e7df      	b.n	800b496 <_realloc_r+0x1e>

0800b4d6 <memmove>:
 800b4d6:	4288      	cmp	r0, r1
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	eb01 0402 	add.w	r4, r1, r2
 800b4de:	d902      	bls.n	800b4e6 <memmove+0x10>
 800b4e0:	4284      	cmp	r4, r0
 800b4e2:	4623      	mov	r3, r4
 800b4e4:	d807      	bhi.n	800b4f6 <memmove+0x20>
 800b4e6:	1e43      	subs	r3, r0, #1
 800b4e8:	42a1      	cmp	r1, r4
 800b4ea:	d008      	beq.n	800b4fe <memmove+0x28>
 800b4ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4f4:	e7f8      	b.n	800b4e8 <memmove+0x12>
 800b4f6:	4402      	add	r2, r0
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	428a      	cmp	r2, r1
 800b4fc:	d100      	bne.n	800b500 <memmove+0x2a>
 800b4fe:	bd10      	pop	{r4, pc}
 800b500:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b504:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b508:	e7f7      	b.n	800b4fa <memmove+0x24>
	...

0800b50c <_sbrk_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d06      	ldr	r5, [pc, #24]	; (800b528 <_sbrk_r+0x1c>)
 800b510:	2300      	movs	r3, #0
 800b512:	4604      	mov	r4, r0
 800b514:	4608      	mov	r0, r1
 800b516:	602b      	str	r3, [r5, #0]
 800b518:	f7f7 ffa4 	bl	8003464 <_sbrk>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	d102      	bne.n	800b526 <_sbrk_r+0x1a>
 800b520:	682b      	ldr	r3, [r5, #0]
 800b522:	b103      	cbz	r3, 800b526 <_sbrk_r+0x1a>
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	200052f8 	.word	0x200052f8

0800b52c <_free_r>:
 800b52c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b52e:	2900      	cmp	r1, #0
 800b530:	d044      	beq.n	800b5bc <_free_r+0x90>
 800b532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b536:	9001      	str	r0, [sp, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f1a1 0404 	sub.w	r4, r1, #4
 800b53e:	bfb8      	it	lt
 800b540:	18e4      	addlt	r4, r4, r3
 800b542:	f7ff ff8d 	bl	800b460 <__malloc_lock>
 800b546:	4a1e      	ldr	r2, [pc, #120]	; (800b5c0 <_free_r+0x94>)
 800b548:	9801      	ldr	r0, [sp, #4]
 800b54a:	6813      	ldr	r3, [r2, #0]
 800b54c:	b933      	cbnz	r3, 800b55c <_free_r+0x30>
 800b54e:	6063      	str	r3, [r4, #4]
 800b550:	6014      	str	r4, [r2, #0]
 800b552:	b003      	add	sp, #12
 800b554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b558:	f7ff bf88 	b.w	800b46c <__malloc_unlock>
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	d908      	bls.n	800b572 <_free_r+0x46>
 800b560:	6825      	ldr	r5, [r4, #0]
 800b562:	1961      	adds	r1, r4, r5
 800b564:	428b      	cmp	r3, r1
 800b566:	bf01      	itttt	eq
 800b568:	6819      	ldreq	r1, [r3, #0]
 800b56a:	685b      	ldreq	r3, [r3, #4]
 800b56c:	1949      	addeq	r1, r1, r5
 800b56e:	6021      	streq	r1, [r4, #0]
 800b570:	e7ed      	b.n	800b54e <_free_r+0x22>
 800b572:	461a      	mov	r2, r3
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	b10b      	cbz	r3, 800b57c <_free_r+0x50>
 800b578:	42a3      	cmp	r3, r4
 800b57a:	d9fa      	bls.n	800b572 <_free_r+0x46>
 800b57c:	6811      	ldr	r1, [r2, #0]
 800b57e:	1855      	adds	r5, r2, r1
 800b580:	42a5      	cmp	r5, r4
 800b582:	d10b      	bne.n	800b59c <_free_r+0x70>
 800b584:	6824      	ldr	r4, [r4, #0]
 800b586:	4421      	add	r1, r4
 800b588:	1854      	adds	r4, r2, r1
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	6011      	str	r1, [r2, #0]
 800b58e:	d1e0      	bne.n	800b552 <_free_r+0x26>
 800b590:	681c      	ldr	r4, [r3, #0]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	6053      	str	r3, [r2, #4]
 800b596:	440c      	add	r4, r1
 800b598:	6014      	str	r4, [r2, #0]
 800b59a:	e7da      	b.n	800b552 <_free_r+0x26>
 800b59c:	d902      	bls.n	800b5a4 <_free_r+0x78>
 800b59e:	230c      	movs	r3, #12
 800b5a0:	6003      	str	r3, [r0, #0]
 800b5a2:	e7d6      	b.n	800b552 <_free_r+0x26>
 800b5a4:	6825      	ldr	r5, [r4, #0]
 800b5a6:	1961      	adds	r1, r4, r5
 800b5a8:	428b      	cmp	r3, r1
 800b5aa:	bf04      	itt	eq
 800b5ac:	6819      	ldreq	r1, [r3, #0]
 800b5ae:	685b      	ldreq	r3, [r3, #4]
 800b5b0:	6063      	str	r3, [r4, #4]
 800b5b2:	bf04      	itt	eq
 800b5b4:	1949      	addeq	r1, r1, r5
 800b5b6:	6021      	streq	r1, [r4, #0]
 800b5b8:	6054      	str	r4, [r2, #4]
 800b5ba:	e7ca      	b.n	800b552 <_free_r+0x26>
 800b5bc:	b003      	add	sp, #12
 800b5be:	bd30      	pop	{r4, r5, pc}
 800b5c0:	200052f0 	.word	0x200052f0

0800b5c4 <_malloc_usable_size_r>:
 800b5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c8:	1f18      	subs	r0, r3, #4
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	bfbc      	itt	lt
 800b5ce:	580b      	ldrlt	r3, [r1, r0]
 800b5d0:	18c0      	addlt	r0, r0, r3
 800b5d2:	4770      	bx	lr

0800b5d4 <_init>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr

0800b5e0 <_fini>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr
