
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  0801015c  0801015c  0002015c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ee8  08010ee8  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010ee8  08010ee8  00020ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ef0  08010ef0  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ef0  08010ef0  00020ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ef4  08010ef4  00020ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08010ef8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a4  2**0
                  CONTENTS
 10 .bss          000052b0  200001a4  200001a4  000301a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005454  20005454  000301a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e163  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ed2  00000000  00000000  0004e37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b28  00000000  00000000  00052250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000155d  00000000  00000000  00053d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056e8  00000000  00000000  000552d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f7ac  00000000  00000000  0005a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9807  00000000  00000000  0007a169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a90  00000000  00000000  00163970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010144 	.word	0x08010144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	08010144 	.word	0x08010144

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f006 f843 	bl	8006f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f995 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fd2f 	bl	8001968 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fd03 	bl	8001914 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 fa91 	bl	8001434 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fc55 	bl	80017c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fb59 	bl	80015cc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 fab9 	bl	8001490 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fba9 	bl	8001674 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fc17 	bl	8001754 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000f26:	f000 f9e1 	bl	80012ec <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f000 fa31 	bl	8001390 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f2e:	f00e fbc5 	bl	800f6bc <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f32:	2300      	movs	r3, #0
 8000f34:	2203      	movs	r2, #3
 8000f36:	2100      	movs	r1, #0
 8000f38:	487b      	ldr	r0, [pc, #492]	; (8001128 <main+0x230>)
 8000f3a:	f00e f8e8 	bl	800f10e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f3e:	210c      	movs	r1, #12
 8000f40:	487a      	ldr	r0, [pc, #488]	; (800112c <main+0x234>)
 8000f42:	f008 fda5 	bl	8009a90 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4879      	ldr	r0, [pc, #484]	; (8001130 <main+0x238>)
 8000f4a:	f008 fda1 	bl	8009a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4877      	ldr	r0, [pc, #476]	; (8001130 <main+0x238>)
 8000f52:	f008 fd9d 	bl	8009a90 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f56:	213c      	movs	r1, #60	; 0x3c
 8000f58:	4876      	ldr	r0, [pc, #472]	; (8001134 <main+0x23c>)
 8000f5a:	f009 f937 	bl	800a1cc <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f5e:	4b76      	ldr	r3, [pc, #472]	; (8001138 <main+0x240>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4975      	ldr	r1, [pc, #468]	; (800113c <main+0x244>)
 8000f68:	4875      	ldr	r0, [pc, #468]	; (8001140 <main+0x248>)
 8000f6a:	f00a fb48 	bl	800b5fe <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f6e:	4875      	ldr	r0, [pc, #468]	; (8001144 <main+0x24c>)
 8000f70:	f008 fc5c 	bl	800982c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4874      	ldr	r0, [pc, #464]	; (8001148 <main+0x250>)
 8000f78:	f008 feac 	bl	8009cd4 <HAL_TIM_IC_Start_IT>

  // IR
  // HAL_ADC_Start(&hadc1);
  // HAL_ADC_Start(&hadc2);

  __RESET_SERVO_TURN(&htim1);
 8000f7c:	4b6b      	ldr	r3, [pc, #428]	; (800112c <main+0x234>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2291      	movs	r2, #145	; 0x91
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
 8000f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f88:	f006 f840 	bl	800700c <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f8c:	4b6f      	ldr	r3, [pc, #444]	; (800114c <main+0x254>)
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f92:	4b6e      	ldr	r3, [pc, #440]	; (800114c <main+0x254>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <main+0x258>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f9e:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <main+0x258>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <main+0x25c>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <main+0x258>)
 8000faa:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e00c      	b.n	8000fcc <main+0xd4>
  {
    Command cmd;
    cmd.index = 100;
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fba:	4a65      	ldr	r2, [pc, #404]	; (8001150 <main+0x258>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <main+0x25c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	dbec      	blt.n	8000fb2 <main+0xba>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd8:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8001158 <main+0x260>
 8000fdc:	eddf 0a5f 	vldr	s1, [pc, #380]	; 800115c <main+0x264>
 8000fe0:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001160 <main+0x268>
 8000fe4:	485f      	ldr	r0, [pc, #380]	; (8001164 <main+0x26c>)
 8000fe6:	f001 facf 	bl	8002588 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fea:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8001158 <main+0x260>
 8000fee:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800115c <main+0x264>
 8000ff2:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001160 <main+0x268>
 8000ff6:	485c      	ldr	r0, [pc, #368]	; (8001168 <main+0x270>)
 8000ff8:	f001 fac6 	bl	8002588 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ffc:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800116c <main+0x274>
 8001000:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8001170 <main+0x278>
 8001004:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001174 <main+0x27c>
 8001008:	485b      	ldr	r0, [pc, #364]	; (8001178 <main+0x280>)
 800100a:	f001 fabd 	bl	8002588 <PIDConfigInit>
  // TODO:overwrite curCmd for debugging individual task
  // curCmd.index = 1;
  // curCmd.val = 30;

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 800100e:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <main+0x240>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	4949      	ldr	r1, [pc, #292]	; (800113c <main+0x244>)
 8001018:	4849      	ldr	r0, [pc, #292]	; (8001140 <main+0x248>)
 800101a:	f00a faf0 	bl	800b5fe <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <main+0x234>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2291      	movs	r2, #145	; 0x91
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
 8001026:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800102a:	f005 ffef 	bl	800700c <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800102e:	f00b fac3 	bl	800c5b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001032:	4a52      	ldr	r2, [pc, #328]	; (800117c <main+0x284>)
 8001034:	2100      	movs	r1, #0
 8001036:	4852      	ldr	r0, [pc, #328]	; (8001180 <main+0x288>)
 8001038:	f00b fb08 	bl	800c64c <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <main+0x28c>)
 8001040:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001042:	4a51      	ldr	r2, [pc, #324]	; (8001188 <main+0x290>)
 8001044:	2100      	movs	r1, #0
 8001046:	4851      	ldr	r0, [pc, #324]	; (800118c <main+0x294>)
 8001048:	f00b fb00 	bl	800c64c <osThreadNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a50      	ldr	r2, [pc, #320]	; (8001190 <main+0x298>)
 8001050:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001052:	4a50      	ldr	r2, [pc, #320]	; (8001194 <main+0x29c>)
 8001054:	2100      	movs	r1, #0
 8001056:	4850      	ldr	r0, [pc, #320]	; (8001198 <main+0x2a0>)
 8001058:	f00b faf8 	bl	800c64c <osThreadNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a4f      	ldr	r2, [pc, #316]	; (800119c <main+0x2a4>)
 8001060:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <main+0x2a8>)
 8001064:	2100      	movs	r1, #0
 8001066:	484f      	ldr	r0, [pc, #316]	; (80011a4 <main+0x2ac>)
 8001068:	f00b faf0 	bl	800c64c <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <main+0x2b0>)
 8001070:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001072:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <main+0x2b4>)
 8001074:	2100      	movs	r1, #0
 8001076:	484e      	ldr	r0, [pc, #312]	; (80011b0 <main+0x2b8>)
 8001078:	f00b fae8 	bl	800c64c <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <main+0x2bc>)
 8001080:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001082:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <main+0x2c0>)
 8001084:	2100      	movs	r1, #0
 8001086:	484d      	ldr	r0, [pc, #308]	; (80011bc <main+0x2c4>)
 8001088:	f00b fae0 	bl	800c64c <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <main+0x2c8>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001092:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <main+0x2cc>)
 8001094:	2100      	movs	r1, #0
 8001096:	484c      	ldr	r0, [pc, #304]	; (80011c8 <main+0x2d0>)
 8001098:	f00b fad8 	bl	800c64c <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <main+0x2d4>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <main+0x2d8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	484b      	ldr	r0, [pc, #300]	; (80011d4 <main+0x2dc>)
 80010a8:	f00b fad0 	bl	800c64c <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <main+0x2e0>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010b2:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <main+0x2e4>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	484a      	ldr	r0, [pc, #296]	; (80011e0 <main+0x2e8>)
 80010b8:	f00b fac8 	bl	800c64c <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a49      	ldr	r2, [pc, #292]	; (80011e4 <main+0x2ec>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010c2:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <main+0x2f0>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4849      	ldr	r0, [pc, #292]	; (80011ec <main+0x2f4>)
 80010c8:	f00b fac0 	bl	800c64c <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <main+0x2f8>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of turnATask */
  turnATaskHandle = osThreadNew(runTurnATask, NULL, &turnATask_attributes);
 80010d2:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <main+0x2fc>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4848      	ldr	r0, [pc, #288]	; (80011f8 <main+0x300>)
 80010d8:	f00b fab8 	bl	800c64c <osThreadNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a47      	ldr	r2, [pc, #284]	; (80011fc <main+0x304>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* creation of TDTask */
  TDTaskHandle = osThreadNew(runTDTask, NULL, &TDTask_attributes);
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <main+0x308>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4847      	ldr	r0, [pc, #284]	; (8001204 <main+0x30c>)
 80010e8:	f00b fab0 	bl	800c64c <osThreadNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a46      	ldr	r2, [pc, #280]	; (8001208 <main+0x310>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* creation of turnBTask */
  turnBTaskHandle = osThreadNew(runTurnBTask, NULL, &turnBTask_attributes);
 80010f2:	4a46      	ldr	r2, [pc, #280]	; (800120c <main+0x314>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4846      	ldr	r0, [pc, #280]	; (8001210 <main+0x318>)
 80010f8:	f00b faa8 	bl	800c64c <osThreadNew>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a45      	ldr	r2, [pc, #276]	; (8001214 <main+0x31c>)
 8001100:	6013      	str	r3, [r2, #0]

  /* creation of GHTask */
  GHTaskHandle = osThreadNew(runGHTask, NULL, &GHTask_attributes);
 8001102:	4a45      	ldr	r2, [pc, #276]	; (8001218 <main+0x320>)
 8001104:	2100      	movs	r1, #0
 8001106:	4845      	ldr	r0, [pc, #276]	; (800121c <main+0x324>)
 8001108:	f00b faa0 	bl	800c64c <osThreadNew>
 800110c:	4603      	mov	r3, r0
 800110e:	4a44      	ldr	r2, [pc, #272]	; (8001220 <main+0x328>)
 8001110:	6013      	str	r3, [r2, #0]

  /* creation of AMTask */
  AMTaskHandle = osThreadNew(runAMTask, NULL, &AMTask_attributes);
 8001112:	4a44      	ldr	r2, [pc, #272]	; (8001224 <main+0x32c>)
 8001114:	2100      	movs	r1, #0
 8001116:	4844      	ldr	r0, [pc, #272]	; (8001228 <main+0x330>)
 8001118:	f00b fa98 	bl	800c64c <osThreadNew>
 800111c:	4603      	mov	r3, r0
 800111e:	4a43      	ldr	r2, [pc, #268]	; (800122c <main+0x334>)
 8001120:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001122:	f00b fa6d 	bl	800c600 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001126:	e7fe      	b.n	8001126 <main+0x22e>
 8001128:	20000250 	.word	0x20000250
 800112c:	200002a4 	.word	0x200002a4
 8001130:	200003c4 	.word	0x200003c4
 8001134:	200002ec 	.word	0x200002ec
 8001138:	20000000 	.word	0x20000000
 800113c:	2000048c 	.word	0x2000048c
 8001140:	2000040c 	.word	0x2000040c
 8001144:	2000037c 	.word	0x2000037c
 8001148:	20000334 	.word	0x20000334
 800114c:	200004cc 	.word	0x200004cc
 8001150:	20000498 	.word	0x20000498
 8001154:	20000001 	.word	0x20000001
 8001158:	3f4ccccd 	.word	0x3f4ccccd
 800115c:	3d3851ec 	.word	0x3d3851ec
 8001160:	40066666 	.word	0x40066666
 8001164:	20000518 	.word	0x20000518
 8001168:	20000504 	.word	0x20000504
 800116c:	3e99999a 	.word	0x3e99999a
 8001170:	3d4ccccd 	.word	0x3d4ccccd
 8001174:	3f8ccccd 	.word	0x3f8ccccd
 8001178:	2000052c 	.word	0x2000052c
 800117c:	0801021c 	.word	0x0801021c
 8001180:	08004369 	.word	0x08004369
 8001184:	20000450 	.word	0x20000450
 8001188:	08010240 	.word	0x08010240
 800118c:	08004379 	.word	0x08004379
 8001190:	20000454 	.word	0x20000454
 8001194:	08010264 	.word	0x08010264
 8001198:	080043f9 	.word	0x080043f9
 800119c:	20000458 	.word	0x20000458
 80011a0:	08010288 	.word	0x08010288
 80011a4:	0800464d 	.word	0x0800464d
 80011a8:	2000045c 	.word	0x2000045c
 80011ac:	080102ac 	.word	0x080102ac
 80011b0:	08004875 	.word	0x08004875
 80011b4:	20000460 	.word	0x20000460
 80011b8:	080102d0 	.word	0x080102d0
 80011bc:	08004c81 	.word	0x08004c81
 80011c0:	20000464 	.word	0x20000464
 80011c4:	080102f4 	.word	0x080102f4
 80011c8:	08005099 	.word	0x08005099
 80011cc:	20000468 	.word	0x20000468
 80011d0:	08010318 	.word	0x08010318
 80011d4:	080054a5 	.word	0x080054a5
 80011d8:	2000046c 	.word	0x2000046c
 80011dc:	0801033c 	.word	0x0801033c
 80011e0:	080058b5 	.word	0x080058b5
 80011e4:	20000470 	.word	0x20000470
 80011e8:	08010360 	.word	0x08010360
 80011ec:	08005f99 	.word	0x08005f99
 80011f0:	20000474 	.word	0x20000474
 80011f4:	08010384 	.word	0x08010384
 80011f8:	08006091 	.word	0x08006091
 80011fc:	20000478 	.word	0x20000478
 8001200:	080103a8 	.word	0x080103a8
 8001204:	080061d9 	.word	0x080061d9
 8001208:	2000047c 	.word	0x2000047c
 800120c:	080103cc 	.word	0x080103cc
 8001210:	080062e9 	.word	0x080062e9
 8001214:	20000480 	.word	0x20000480
 8001218:	080103f0 	.word	0x080103f0
 800121c:	08006501 	.word	0x08006501
 8001220:	20000484 	.word	0x20000484
 8001224:	08010414 	.word	0x08010414
 8001228:	08006665 	.word	0x08006665
 800122c:	20000488 	.word	0x20000488

08001230 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f00e fafc 	bl	800f83c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <SystemClock_Config+0xb4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <SystemClock_Config+0xb4>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <SystemClock_Config+0xb4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <SystemClock_Config+0xb8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <SystemClock_Config+0xb8>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <SystemClock_Config+0xb8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fde9 	bl	8008e78 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012ac:	f005 facc 	bl	8006848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 f84c 	bl	8009368 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012d6:	f005 fab7 	bl	8006848 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	; 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_ADC1_Init+0x98>)
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_ADC1_Init+0x9c>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_ADC1_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_ADC1_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_ADC1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_ADC1_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_ADC1_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_ADC1_Init+0x98>)
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_ADC1_Init+0xa0>)
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_ADC1_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_ADC1_Init+0x98>)
 8001338:	2201      	movs	r2, #1
 800133a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_ADC1_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_ADC1_Init+0x98>)
 8001346:	2201      	movs	r2, #1
 8001348:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134a:	480e      	ldr	r0, [pc, #56]	; (8001384 <MX_ADC1_Init+0x98>)
 800134c:	f005 fe82 	bl	8007054 <HAL_ADC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001356:	f005 fa77 	bl	8006848 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 800135a:	230b      	movs	r3, #11
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_ADC1_Init+0x98>)
 800136c:	f006 f854 	bl	8007418 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001376:	f005 fa67 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001c0 	.word	0x200001c0
 8001388:	40012000 	.word	0x40012000
 800138c:	0f000001 	.word	0x0f000001

08001390 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc2.Instance = ADC2;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_ADC2_Init+0x98>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <MX_ADC2_Init+0x9c>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_ADC2_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_ADC2_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_ADC2_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_ADC2_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_ADC2_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_ADC2_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_ADC2_Init+0x98>)
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <MX_ADC2_Init+0xa0>)
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_ADC2_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_ADC2_Init+0x98>)
 80013dc:	2201      	movs	r2, #1
 80013de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_ADC2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_ADC2_Init+0x98>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <MX_ADC2_Init+0x98>)
 80013f0:	f005 fe30 	bl	8007054 <HAL_ADC_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80013fa:	f005 fa25 	bl	8006848 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 80013fe:	230c      	movs	r3, #12
 8001400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_ADC2_Init+0x98>)
 8001410:	f006 f802 	bl	8007418 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f005 fa15 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000208 	.word	0x20000208
 800142c:	40012100 	.word	0x40012100
 8001430:	0f000001 	.word	0x0f000001

08001434 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f006 fd19 	bl	8007ea8 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f005 f9e4 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000250 	.word	0x20000250
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b096      	sub	sp, #88	; 0x58
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2220      	movs	r2, #32
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00e f9b7 	bl	800f83c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014d0:	4a3d      	ldr	r2, [pc, #244]	; (80015c8 <MX_TIM1_Init+0x138>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014d6:	22a0      	movs	r2, #160	; 0xa0
 80014d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014fc:	f008 f946 	bl	800978c <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001506:	f005 f99f 	bl	8006848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001514:	4619      	mov	r1, r3
 8001516:	482b      	ldr	r0, [pc, #172]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001518:	f009 f94c 	bl	800a7b4 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001522:	f005 f991 	bl	8006848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001526:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001528:	f008 fa58 	bl	80099dc <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001532:	f005 f989 	bl	8006848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001542:	4619      	mov	r1, r3
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001546:	f009 fe99 	bl	800b27c <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001550:	f005 f97a 	bl	8006848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	220c      	movs	r2, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4813      	ldr	r0, [pc, #76]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001576:	f009 f85b 	bl	800a630 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001580:	f005 f962 	bl	8006848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM1_Init+0x134>)
 80015a8:	f009 fee4 	bl	800b374 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80015b2:	f005 f949 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM1_Init+0x134>)
 80015b8:	f005 fb54 	bl	8006c64 <HAL_TIM_MspPostInit>
}
 80015bc:	bf00      	nop
 80015be:	3758      	adds	r7, #88	; 0x58
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200002a4 	.word	0x200002a4
 80015c8:	40010000 	.word	0x40010000

080015cc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2224      	movs	r2, #36	; 0x24
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00e f92e 	bl	800f83c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM2_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM2_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001610:	2303      	movs	r3, #3
 8001612:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001620:	230a      	movs	r3, #10
 8001622:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001630:	230a      	movs	r3, #10
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM2_Init+0xa4>)
 800163c:	f008 fd20 	bl	800a080 <HAL_TIM_Encoder_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001646:	f005 f8ff 	bl	8006848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM2_Init+0xa4>)
 8001658:	f009 fe10 	bl	800b27c <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001662:	f005 f8f1 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	; 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002ec 	.word	0x200002ec

08001674 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_TIM3_Init+0xd8>)
 80016a0:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <MX_TIM3_Init+0xdc>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <MX_TIM3_Init+0xd8>)
 80016a6:	220f      	movs	r2, #15
 80016a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_TIM3_Init+0xd8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_TIM3_Init+0xd8>)
 80016b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <MX_TIM3_Init+0xd8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_TIM3_Init+0xd8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c4:	4821      	ldr	r0, [pc, #132]	; (800174c <MX_TIM3_Init+0xd8>)
 80016c6:	f008 f861 	bl	800978c <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80016d0:	f005 f8ba 	bl	8006848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	4619      	mov	r1, r3
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_TIM3_Init+0xd8>)
 80016e2:	f009 f867 	bl	800a7b4 <HAL_TIM_ConfigClockSource>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f005 f8ac 	bl	8006848 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016f0:	4816      	ldr	r0, [pc, #88]	; (800174c <MX_TIM3_Init+0xd8>)
 80016f2:	f008 fa95 	bl	8009c20 <HAL_TIM_IC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f005 f8a4 	bl	8006848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <MX_TIM3_Init+0xd8>)
 8001710:	f009 fdb4 	bl	800b27c <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800171a:	f005 f895 	bl	8006848 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800171e:	230a      	movs	r3, #10
 8001720:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001722:	2301      	movs	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	2204      	movs	r2, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_TIM3_Init+0xd8>)
 8001736:	f008 fedf 	bl	800a4f8 <HAL_TIM_IC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001740:	f005 f882 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000334 	.word	0x20000334
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175a:	463b      	mov	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001764:	4a15      	ldr	r2, [pc, #84]	; (80017bc <MX_TIM6_Init+0x68>)
 8001766:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_TIM6_Init+0x64>)
 800176a:	220f      	movs	r2, #15
 800176c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_TIM6_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001784:	f008 f802 	bl	800978c <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800178e:	f005 f85b 	bl	8006848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <MX_TIM6_Init+0x64>)
 80017a0:	f009 fd6c 	bl	800b27c <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80017aa:	f005 f84d 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000037c 	.word	0x2000037c
 80017bc:	40001000 	.word	0x40001000

080017c0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b096      	sub	sp, #88	; 0x58
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00e f81f 	bl	800f83c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <MX_TIM8_Init+0x14c>)
 8001800:	4a43      	ldr	r2, [pc, #268]	; (8001910 <MX_TIM8_Init+0x150>)
 8001802:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <MX_TIM8_Init+0x14c>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <MX_TIM8_Init+0x14c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MX_TIM8_Init+0x14c>)
 8001812:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001816:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <MX_TIM8_Init+0x14c>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <MX_TIM8_Init+0x14c>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <MX_TIM8_Init+0x14c>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800182a:	4838      	ldr	r0, [pc, #224]	; (800190c <MX_TIM8_Init+0x14c>)
 800182c:	f007 ffae 	bl	800978c <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001836:	f005 f807 	bl	8006848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001844:	4619      	mov	r1, r3
 8001846:	4831      	ldr	r0, [pc, #196]	; (800190c <MX_TIM8_Init+0x14c>)
 8001848:	f008 ffb4 	bl	800a7b4 <HAL_TIM_ConfigClockSource>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001852:	f004 fff9 	bl	8006848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001856:	482d      	ldr	r0, [pc, #180]	; (800190c <MX_TIM8_Init+0x14c>)
 8001858:	f008 f8c0 	bl	80099dc <HAL_TIM_PWM_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001862:	f004 fff1 	bl	8006848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800186e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001872:	4619      	mov	r1, r3
 8001874:	4825      	ldr	r0, [pc, #148]	; (800190c <MX_TIM8_Init+0x14c>)
 8001876:	f009 fd01 	bl	800b27c <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001880:	f004 ffe2 	bl	8006848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001884:	2360      	movs	r3, #96	; 0x60
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <MX_TIM8_Init+0x14c>)
 80018aa:	f008 fec1 	bl	800a630 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80018b4:	f004 ffc8 	bl	8006848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	2204      	movs	r2, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <MX_TIM8_Init+0x14c>)
 80018c2:	f008 feb5 	bl	800a630 <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80018cc:	f004 ffbc 	bl	8006848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_TIM8_Init+0x14c>)
 80018f4:	f009 fd3e 	bl	800b374 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80018fe:	f004 ffa3 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001902:	bf00      	nop
 8001904:	3758      	adds	r7, #88	; 0x58
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200003c4 	.word	0x200003c4
 8001910:	40010400 	.word	0x40010400

08001914 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_USART3_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800194c:	f009 fd78 	bl	800b440 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f004 ff77 	bl	8006848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000040c 	.word	0x2000040c
 8001964:	40004800 	.word	0x40004800

08001968 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_GPIO_Init+0x100>)
 80019f6:	f006 fa3d 	bl	8007e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	213c      	movs	r1, #60	; 0x3c
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <MX_GPIO_Init+0x104>)
 8001a00:	f006 fa38 	bl	8007e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 8001a04:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4812      	ldr	r0, [pc, #72]	; (8001a68 <MX_GPIO_Init+0x100>)
 8001a1e:	f006 f88d 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_GPIO_Init+0x104>)
 8001a3a:	f006 f87f 	bl	8007b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 8001a3e:	2330      	movs	r3, #48	; 0x30
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_GPIO_Init+0x104>)
 8001a56:	f006 f871 	bl	8007b3c <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7f1b      	ldrb	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 808c 	bne.w	8001b9a <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11a      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f008 ff59 	bl	800a944 <HAL_TIM_ReadCapturedValue>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001a96:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 8001a98:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a1a      	ldr	r2, [r3, #32]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001aac:	621a      	str	r2, [r3, #32]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 8001abe:	e06c      	b.n	8001b9a <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d168      	bne.n	8001b9a <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001ac8:	2104      	movs	r1, #4
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f008 ff3a 	bl	800a944 <HAL_TIM_ReadCapturedValue>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ad4:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_US = IC_Val2 - IC_Val1;
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]
 8001b02:	e014      	b.n	8001b2e <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d90e      	bls.n	8001b2e <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_US = (0xffff - IC_Val1) + IC_Val2;
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b1e:	33ff      	adds	r3, #255	; 0xff
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
      obsDist_US = obsDist_US * .034 / 2;
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd00 	bl	8000538 <__aeabi_f2d>
 8001b38:	a31b      	add	r3, pc, #108	; (adr r3, 8001ba8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd53 	bl	80005e8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b52:	f7fe fe73 	bl	800083c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7fe fffd 	bl	8000b5c <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b66:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7c:	621a      	str	r2, [r3, #32]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a12      	ldr	r2, [r2, #32]
 8001b88:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0204 	bic.w	r2, r2, #4
 8001b98:	60da      	str	r2, [r3, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	b020c49c 	.word	0xb020c49c
 8001bac:	3fa16872 	.word	0x3fa16872
 8001bb0:	20000560 	.word	0x20000560
 8001bb4:	20000558 	.word	0x20000558
 8001bb8:	2000055c 	.word	0x2000055c
 8001bbc:	20000554 	.word	0x20000554
 8001bc0:	20000334 	.word	0x20000334

08001bc4 <HAL_UART_RxCpltCallback>:
// int targetD = 5;
// uint8_t tempDir = 1;
// int8_t step = 0;
// uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  // TODO: add delimeter at end of command
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001bcc:	4b95      	ldr	r3, [pc, #596]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001be0:	78db      	ldrb	r3, [r3, #3]
 8001be2:	3b30      	subs	r3, #48	; 0x30
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001be8:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	2b2f      	cmp	r3, #47	; 0x2f
 8001bee:	d90e      	bls.n	8001c0e <HAL_UART_RxCpltCallback+0x4a>
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	2b39      	cmp	r3, #57	; 0x39
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b87      	ldr	r3, [pc, #540]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	3b30      	subs	r3, #48	; 0x30
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001c0e:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <HAL_UART_RxCpltCallback+0x264>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b53      	cmp	r3, #83	; 0x53
 8001c1a:	d15b      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x110>
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b54      	cmp	r3, #84	; 0x54
 8001c22:	d157      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x110>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001c24:	4b81      	ldr	r3, [pc, #516]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2c:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
 8001c34:	4b7e      	ldr	r3, [pc, #504]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <HAL_UART_RxCpltCallback+0x270>)
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001c3e:	2211      	movs	r2, #17
 8001c40:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_UART_RxCpltCallback+0x274>)
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_UART_RxCpltCallback+0x278>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001c50:	487b      	ldr	r0, [pc, #492]	; (8001e40 <HAL_UART_RxCpltCallback+0x27c>)
 8001c52:	f000 fcba 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001c56:	487b      	ldr	r0, [pc, #492]	; (8001e44 <HAL_UART_RxCpltCallback+0x280>)
 8001c58:	f000 fcb7 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001c5c:	487a      	ldr	r0, [pc, #488]	; (8001e48 <HAL_UART_RxCpltCallback+0x284>)
 8001c5e:	f000 fcb4 	bl	80025ca <PIDConfigReset>
    curDistTick = 0;
 8001c62:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <HAL_UART_RxCpltCallback+0x288>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c68:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d113      	bne.n	8001c9c <HAL_UART_RxCpltCallback+0xd8>
    {
      __CLEAR_CURCMD(curCmd);
 8001c74:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001c76:	2264      	movs	r2, #100	; 0x64
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001c80:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_UART_RxCpltCallback+0x294>)
 8001c82:	210f      	movs	r1, #15
 8001c84:	4875      	ldr	r0, [pc, #468]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001c86:	f00d fda5 	bl	800f7d4 <sniprintf>
 8001c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8e:	2206      	movs	r2, #6
 8001c90:	4973      	ldr	r1, [pc, #460]	; (8001e60 <HAL_UART_RxCpltCallback+0x29c>)
 8001c92:	4874      	ldr	r0, [pc, #464]	; (8001e64 <HAL_UART_RxCpltCallback+0x2a0>)
 8001c94:	f009 fc21 	bl	800b4da <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c98:	f000 bc39 	b.w	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001c9c:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	4a6c      	ldr	r2, [pc, #432]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001ca2:	496b      	ldr	r1, [pc, #428]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001cb4:	7892      	ldrb	r2, [r2, #2]
 8001cb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cba:	fb01 f202 	mul.w	r2, r1, r2
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	4a68      	ldr	r2, [pc, #416]	; (8001e68 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cc8:	210f      	movs	r1, #15
 8001cca:	4864      	ldr	r0, [pc, #400]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001ccc:	f00d fd82 	bl	800f7d4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001cd0:	f000 bc1d 	b.w	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b52      	cmp	r3, #82	; 0x52
 8001cda:	d161      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x1dc>
 8001cdc:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001cde:	785b      	ldrb	r3, [r3, #1]
 8001ce0:	2b53      	cmp	r3, #83	; 0x53
 8001ce2:	d15d      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x1dc>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf4:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_UART_RxCpltCallback+0x270>)
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001cfe:	2211      	movs	r2, #17
 8001d00:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001d02:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_UART_RxCpltCallback+0x274>)
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_UART_RxCpltCallback+0x278>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001d10:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <HAL_UART_RxCpltCallback+0x2a8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2291      	movs	r2, #145	; 0x91
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
 8001d18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d1c:	f005 f976 	bl	800700c <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001d20:	4847      	ldr	r0, [pc, #284]	; (8001e40 <HAL_UART_RxCpltCallback+0x27c>)
 8001d22:	f000 fc52 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001d26:	4847      	ldr	r0, [pc, #284]	; (8001e44 <HAL_UART_RxCpltCallback+0x280>)
 8001d28:	f000 fc4f 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001d2c:	4846      	ldr	r0, [pc, #280]	; (8001e48 <HAL_UART_RxCpltCallback+0x284>)
 8001d2e:	f000 fc4c 	bl	80025ca <PIDConfigReset>
    curDistTick = 0;
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_UART_RxCpltCallback+0x288>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d38:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d112      	bne.n	8001d6a <HAL_UART_RxCpltCallback+0x1a6>
    {
      __CLEAR_CURCMD(curCmd);
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001d46:	2264      	movs	r2, #100	; 0x64
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001d50:	4a41      	ldr	r2, [pc, #260]	; (8001e58 <HAL_UART_RxCpltCallback+0x294>)
 8001d52:	210f      	movs	r1, #15
 8001d54:	4841      	ldr	r0, [pc, #260]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001d56:	f00d fd3d 	bl	800f7d4 <sniprintf>
 8001d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5e:	2206      	movs	r2, #6
 8001d60:	493f      	ldr	r1, [pc, #252]	; (8001e60 <HAL_UART_RxCpltCallback+0x29c>)
 8001d62:	4840      	ldr	r0, [pc, #256]	; (8001e64 <HAL_UART_RxCpltCallback+0x2a0>)
 8001d64:	f009 fbb9 	bl	800b4da <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d68:	e3d1      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d82:	7892      	ldrb	r2, [r2, #2]
 8001d84:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d88:	fb01 f202 	mul.w	r2, r1, r2
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d92:	705a      	strb	r2, [r3, #1]
 8001d94:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <HAL_UART_RxCpltCallback+0x2a4>)
 8001d96:	210f      	movs	r1, #15
 8001d98:	4830      	ldr	r0, [pc, #192]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001d9a:	f00d fd1b 	bl	800f7d4 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d9e:	e3b6      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b46      	cmp	r3, #70	; 0x46
 8001da6:	d165      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0x2b0>
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b57      	cmp	r3, #87	; 0x57
 8001dae:	d003      	beq.n	8001db8 <HAL_UART_RxCpltCallback+0x1f4>
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	2b53      	cmp	r3, #83	; 0x53
 8001db6:	d15d      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0x2b0>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	2b2d      	cmp	r3, #45	; 0x2d
 8001dbe:	d105      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x208>
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001dc2:	78db      	ldrb	r3, [r3, #3]
 8001dc4:	2b2d      	cmp	r3, #45	; 0x2d
 8001dc6:	d101      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x208>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_UART_RxCpltCallback+0x20a>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_UART_RxCpltCallback+0x264>)
 8001dd2:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	2b53      	cmp	r3, #83	; 0x53
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_UART_RxCpltCallback+0x2ac>)
 8001de6:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	2201      	movs	r2, #1
 8001df4:	711a      	strb	r2, [r3, #4]
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	b291      	uxth	r1, r2
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	460a      	mov	r2, r1
 8001e06:	80da      	strh	r2, [r3, #6]
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e10:	7892      	ldrb	r2, [r2, #2]
 8001e12:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e16:	fb01 f202 	mul.w	r2, r1, r2
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e374      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 8001e24:	2000048c 	.word	0x2000048c
 8001e28:	200004e0 	.word	0x200004e0
 8001e2c:	200003c4 	.word	0x200003c4
 8001e30:	20000134 	.word	0x20000134
 8001e34:	20000135 	.word	0x20000135
 8001e38:	200004e8 	.word	0x200004e8
 8001e3c:	200004ee 	.word	0x200004ee
 8001e40:	20000518 	.word	0x20000518
 8001e44:	20000504 	.word	0x20000504
 8001e48:	2000052c 	.word	0x2000052c
 8001e4c:	200004fc 	.word	0x200004fc
 8001e50:	20000498 	.word	0x20000498
 8001e54:	200004cc 	.word	0x200004cc
 8001e58:	080101ec 	.word	0x080101ec
 8001e5c:	200004d0 	.word	0x200004d0
 8001e60:	080101f4 	.word	0x080101f4
 8001e64:	2000040c 	.word	0x2000040c
 8001e68:	080101fc 	.word	0x080101fc
 8001e6c:	200002a4 	.word	0x200002a4
 8001e70:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001e74:	4b96      	ldr	r3, [pc, #600]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b42      	cmp	r3, #66	; 0x42
 8001e7a:	d13d      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x334>
 8001e7c:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e7e:	785b      	ldrb	r3, [r3, #1]
 8001e80:	2b57      	cmp	r3, #87	; 0x57
 8001e82:	d003      	beq.n	8001e8c <HAL_UART_RxCpltCallback+0x2c8>
 8001e84:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b53      	cmp	r3, #83	; 0x53
 8001e8a:	d135      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x334>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e8c:	4b90      	ldr	r3, [pc, #576]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e8e:	789b      	ldrb	r3, [r3, #2]
 8001e90:	2b2d      	cmp	r3, #45	; 0x2d
 8001e92:	d105      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x2dc>
 8001e94:	4b8e      	ldr	r3, [pc, #568]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	2b2d      	cmp	r3, #45	; 0x2d
 8001e9a:	d101      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x2dc>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_UART_RxCpltCallback+0x2de>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001ea6:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001ea8:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b53      	cmp	r3, #83	; 0x53
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b87      	ldr	r3, [pc, #540]	; (80020d8 <HAL_UART_RxCpltCallback+0x514>)
 8001eba:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001ebc:	4b87      	ldr	r3, [pc, #540]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4a86      	ldr	r2, [pc, #536]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	711a      	strb	r2, [r3, #4]
 8001eca:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	b291      	uxth	r1, r2
 8001ed2:	4a82      	ldr	r2, [pc, #520]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	460a      	mov	r2, r1
 8001eda:	80da      	strh	r2, [r3, #6]
 8001edc:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ee4:	7892      	ldrb	r2, [r2, #2]
 8001ee6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eea:	fb01 f202 	mul.w	r2, r1, r2
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b7a      	ldr	r3, [pc, #488]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e30a      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b46      	cmp	r3, #70	; 0x46
 8001efe:	d136      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x3aa>
 8001f00:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b4c      	cmp	r3, #76	; 0x4c
 8001f06:	d132      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x3aa>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f08:	4b71      	ldr	r3, [pc, #452]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	2b2d      	cmp	r3, #45	; 0x2d
 8001f0e:	d105      	bne.n	8001f1c <HAL_UART_RxCpltCallback+0x358>
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	2b2d      	cmp	r3, #45	; 0x2d
 8001f16:	d101      	bne.n	8001f1c <HAL_UART_RxCpltCallback+0x358>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_UART_RxCpltCallback+0x35a>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f22:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_RxCpltCallback+0x36c>
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	e000      	b.n	8001f32 <HAL_UART_RxCpltCallback+0x36e>
 8001f30:	2107      	movs	r1, #7
 8001f32:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4a69      	ldr	r2, [pc, #420]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	711a      	strb	r2, [r3, #4]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	b291      	uxth	r1, r2
 8001f48:	4a64      	ldr	r2, [pc, #400]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	460a      	mov	r2, r1
 8001f50:	80da      	strh	r2, [r3, #6]
 8001f52:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a60      	ldr	r2, [pc, #384]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f5a:	7892      	ldrb	r2, [r2, #2]
 8001f5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f60:	fb01 f202 	mul.w	r2, r1, r2
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e2cf      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001f6e:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b46      	cmp	r3, #70	; 0x46
 8001f74:	d136      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0x420>
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b52      	cmp	r3, #82	; 0x52
 8001f7c:	d132      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0x420>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f7e:	4b54      	ldr	r3, [pc, #336]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f80:	789b      	ldrb	r3, [r3, #2]
 8001f82:	2b2d      	cmp	r3, #45	; 0x2d
 8001f84:	d105      	bne.n	8001f92 <HAL_UART_RxCpltCallback+0x3ce>
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f88:	78db      	ldrb	r3, [r3, #3]
 8001f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_RxCpltCallback+0x3ce>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_UART_RxCpltCallback+0x3d0>
 8001f92:	2300      	movs	r3, #0
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f98:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_RxCpltCallback+0x3e2>
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	e000      	b.n	8001fa8 <HAL_UART_RxCpltCallback+0x3e4>
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	711a      	strb	r2, [r3, #4]
 8001fb6:	4b49      	ldr	r3, [pc, #292]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	b291      	uxth	r1, r2
 8001fbe:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	80da      	strh	r2, [r3, #6]
 8001fc8:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a43      	ldr	r2, [pc, #268]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fd0:	7892      	ldrb	r2, [r2, #2]
 8001fd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fd6:	fb01 f202 	mul.w	r2, r1, r2
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e294      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b42      	cmp	r3, #66	; 0x42
 8001fea:	d136      	bne.n	800205a <HAL_UART_RxCpltCallback+0x496>
 8001fec:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ff2:	d132      	bne.n	800205a <HAL_UART_RxCpltCallback+0x496>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001ff6:	789b      	ldrb	r3, [r3, #2]
 8001ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8001ffa:	d105      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x444>
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	2b2d      	cmp	r3, #45	; 0x2d
 8002002:	d101      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x444>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_UART_RxCpltCallback+0x446>
 8002008:	2300      	movs	r3, #0
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 800200e:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_UART_RxCpltCallback+0x458>
 8002018:	2105      	movs	r1, #5
 800201a:	e000      	b.n	800201e <HAL_UART_RxCpltCallback+0x45a>
 800201c:	2109      	movs	r1, #9
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	460a      	mov	r2, r1
 800202a:	711a      	strb	r2, [r3, #4]
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	b291      	uxth	r1, r2
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	460a      	mov	r2, r1
 800203c:	80da      	strh	r2, [r3, #6]
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002046:	7892      	ldrb	r2, [r2, #2]
 8002048:	fb93 f1f2 	sdiv	r1, r3, r2
 800204c:	fb01 f202 	mul.w	r2, r1, r2
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e259      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b42      	cmp	r3, #66	; 0x42
 8002060:	d13e      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x51c>
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b52      	cmp	r3, #82	; 0x52
 8002068:	d13a      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x51c>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 800206c:	789b      	ldrb	r3, [r3, #2]
 800206e:	2b2d      	cmp	r3, #45	; 0x2d
 8002070:	d105      	bne.n	800207e <HAL_UART_RxCpltCallback+0x4ba>
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8002074:	78db      	ldrb	r3, [r3, #3]
 8002076:	2b2d      	cmp	r3, #45	; 0x2d
 8002078:	d101      	bne.n	800207e <HAL_UART_RxCpltCallback+0x4ba>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_UART_RxCpltCallback+0x4bc>
 800207e:	2300      	movs	r3, #0
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8002084:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_RxCpltCallback+0x4ce>
 800208e:	2106      	movs	r1, #6
 8002090:	e000      	b.n	8002094 <HAL_UART_RxCpltCallback+0x4d0>
 8002092:	210a      	movs	r1, #10
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	460a      	mov	r2, r1
 80020a0:	711a      	strb	r2, [r3, #4]
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	b291      	uxth	r1, r2
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	460a      	mov	r2, r1
 80020b2:	80da      	strh	r2, [r3, #6]
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020bc:	7892      	ldrb	r2, [r2, #2]
 80020be:	fb93 f1f2 	sdiv	r1, r3, r2
 80020c2:	fb01 f202 	mul.w	r2, r1, r2
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e21e      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 80020d0:	2000048c 	.word	0x2000048c
 80020d4:	200004e0 	.word	0x200004e0
 80020d8:	20000136 	.word	0x20000136
 80020dc:	20000498 	.word	0x20000498
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 80020e0:	4b97      	ldr	r3, [pc, #604]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b54      	cmp	r3, #84	; 0x54
 80020e6:	d121      	bne.n	800212c <HAL_UART_RxCpltCallback+0x568>
 80020e8:	4b95      	ldr	r3, [pc, #596]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b4c      	cmp	r3, #76	; 0x4c
 80020ee:	d11d      	bne.n	800212c <HAL_UART_RxCpltCallback+0x568>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 80020f0:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4a93      	ldr	r2, [pc, #588]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	220b      	movs	r2, #11
 80020fc:	711a      	strb	r2, [r3, #4]
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	b291      	uxth	r1, r2
 8002106:	4a8f      	ldr	r2, [pc, #572]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	460a      	mov	r2, r1
 800210e:	80da      	strh	r2, [r3, #6]
 8002110:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a8b      	ldr	r2, [pc, #556]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002118:	7892      	ldrb	r2, [r2, #2]
 800211a:	fb93 f1f2 	sdiv	r1, r3, r2
 800211e:	fb01 f202 	mul.w	r2, r1, r2
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b87      	ldr	r3, [pc, #540]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e1f0      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 800212c:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b54      	cmp	r3, #84	; 0x54
 8002132:	d121      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x5b4>
 8002134:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002136:	785b      	ldrb	r3, [r3, #1]
 8002138:	2b52      	cmp	r3, #82	; 0x52
 800213a:	d11d      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x5b4>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	220c      	movs	r2, #12
 8002148:	711a      	strb	r2, [r3, #4]
 800214a:	4b7e      	ldr	r3, [pc, #504]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	b291      	uxth	r1, r2
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	460a      	mov	r2, r1
 800215a:	80da      	strh	r2, [r3, #6]
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a78      	ldr	r2, [pc, #480]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002164:	7892      	ldrb	r2, [r2, #2]
 8002166:	fb93 f1f2 	sdiv	r1, r3, r2
 800216a:	fb01 f202 	mul.w	r2, r1, r2
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b74      	ldr	r3, [pc, #464]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e1ca      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002178:	4b71      	ldr	r3, [pc, #452]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b44      	cmp	r3, #68	; 0x44
 800217e:	d121      	bne.n	80021c4 <HAL_UART_RxCpltCallback+0x600>
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	2b54      	cmp	r3, #84	; 0x54
 8002186:	d11d      	bne.n	80021c4 <HAL_UART_RxCpltCallback+0x600>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002188:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4a6d      	ldr	r2, [pc, #436]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	220e      	movs	r2, #14
 8002194:	711a      	strb	r2, [r3, #4]
 8002196:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	b291      	uxth	r1, r2
 800219e:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	460a      	mov	r2, r1
 80021a6:	80da      	strh	r2, [r3, #6]
 80021a8:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a65      	ldr	r2, [pc, #404]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021b0:	7892      	ldrb	r2, [r2, #2]
 80021b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80021b6:	fb01 f202 	mul.w	r2, r1, r2
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e1a4      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'D')
 80021c4:	4b5e      	ldr	r3, [pc, #376]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b54      	cmp	r3, #84	; 0x54
 80021ca:	d121      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x64c>
 80021cc:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b44      	cmp	r3, #68	; 0x44
 80021d2:	d11d      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x64c>
    __ADD_COMMAND(cQueue, 15, val); // TD move until specified distance from obstacle and record distance travelled,
 80021d4:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	220f      	movs	r2, #15
 80021e0:	711a      	strb	r2, [r3, #4]
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	b291      	uxth	r1, r2
 80021ea:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	460a      	mov	r2, r1
 80021f2:	80da      	strh	r2, [r3, #6]
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021fc:	7892      	ldrb	r2, [r2, #2]
 80021fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002202:	fb01 f202 	mul.w	r2, r1, r2
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e17e      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
                                    // and travelled backward to staring point - for debugging only
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'A')
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b46      	cmp	r3, #70	; 0x46
 8002216:	d121      	bne.n	800225c <HAL_UART_RxCpltCallback+0x698>
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b41      	cmp	r3, #65	; 0x41
 800221e:	d11d      	bne.n	800225c <HAL_UART_RxCpltCallback+0x698>
    __ADD_COMMAND(cQueue, 88, val); // forward anti-clockwise rotation with variable
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	2258      	movs	r2, #88	; 0x58
 800222c:	711a      	strb	r2, [r3, #4]
 800222e:	4b45      	ldr	r3, [pc, #276]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	b291      	uxth	r1, r2
 8002236:	4a43      	ldr	r2, [pc, #268]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	460a      	mov	r2, r1
 800223e:	80da      	strh	r2, [r3, #6]
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002248:	7892      	ldrb	r2, [r2, #2]
 800224a:	fb93 f1f2 	sdiv	r1, r3, r2
 800224e:	fb01 f202 	mul.w	r2, r1, r2
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e158      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C')
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b46      	cmp	r3, #70	; 0x46
 8002262:	d121      	bne.n	80022a8 <HAL_UART_RxCpltCallback+0x6e4>
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b43      	cmp	r3, #67	; 0x43
 800226a:	d11d      	bne.n	80022a8 <HAL_UART_RxCpltCallback+0x6e4>
    __ADD_COMMAND(cQueue, 89, val); // forward clockwise rotation with variable
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4a34      	ldr	r2, [pc, #208]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	2259      	movs	r2, #89	; 0x59
 8002278:	711a      	strb	r2, [r3, #4]
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	b291      	uxth	r1, r2
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	460a      	mov	r2, r1
 800228a:	80da      	strh	r2, [r3, #6]
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002294:	7892      	ldrb	r2, [r2, #2]
 8002296:	fb93 f1f2 	sdiv	r1, r3, r2
 800229a:	fb01 f202 	mul.w	r2, r1, r2
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e132      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'A')
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b42      	cmp	r3, #66	; 0x42
 80022ae:	d121      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x730>
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b41      	cmp	r3, #65	; 0x41
 80022b6:	d11d      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x730>
    __ADD_COMMAND(cQueue, 90, val); // backward anti-clockwise rotation with variable
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	225a      	movs	r2, #90	; 0x5a
 80022c4:	711a      	strb	r2, [r3, #4]
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	b291      	uxth	r1, r2
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	460a      	mov	r2, r1
 80022d6:	80da      	strh	r2, [r3, #6]
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022e0:	7892      	ldrb	r2, [r2, #2]
 80022e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80022e6:	fb01 f202 	mul.w	r2, r1, r2
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e10c      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'C')
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b42      	cmp	r3, #66	; 0x42
 80022fa:	d125      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x784>
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b43      	cmp	r3, #67	; 0x43
 8002302:	d121      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x784>
    __ADD_COMMAND(cQueue, 91, val); // backward clockwise rotation with variable
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	225b      	movs	r2, #91	; 0x5b
 8002310:	711a      	strb	r2, [r3, #4]
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b291      	uxth	r1, r2
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	460a      	mov	r2, r1
 8002322:	80da      	strh	r2, [r3, #6]
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800232c:	7892      	ldrb	r2, [r2, #2]
 800232e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002332:	fb01 f202 	mul.w	r2, r1, r2
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b02      	ldr	r3, [pc, #8]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e0e6      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 8002340:	2000048c 	.word	0x2000048c
 8002344:	20000498 	.word	0x20000498
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'A')
 8002348:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b54      	cmp	r3, #84	; 0x54
 800234e:	d121      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x7d0>
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b41      	cmp	r3, #65	; 0x41
 8002356:	d11d      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x7d0>
    __ADD_COMMAND(cQueue, 92, val);
 8002358:	4b85      	ldr	r3, [pc, #532]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4a84      	ldr	r2, [pc, #528]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	225c      	movs	r2, #92	; 0x5c
 8002364:	711a      	strb	r2, [r3, #4]
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	b291      	uxth	r1, r2
 800236e:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	80da      	strh	r2, [r3, #6]
 8002378:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002380:	7892      	ldrb	r2, [r2, #2]
 8002382:	fb93 f1f2 	sdiv	r1, r3, r2
 8002386:	fb01 f202 	mul.w	r2, r1, r2
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e0bc      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b49      	cmp	r3, #73	; 0x49
 800239a:	d121      	bne.n	80023e0 <HAL_UART_RxCpltCallback+0x81c>
 800239c:	4b73      	ldr	r3, [pc, #460]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	2b52      	cmp	r3, #82	; 0x52
 80023a2:	d11d      	bne.n	80023e0 <HAL_UART_RxCpltCallback+0x81c>
    __ADD_COMMAND(cQueue, 93, val);
 80023a4:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	225d      	movs	r2, #93	; 0x5d
 80023b0:	711a      	strb	r2, [r3, #4]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	b291      	uxth	r1, r2
 80023ba:	4a6d      	ldr	r2, [pc, #436]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	460a      	mov	r2, r1
 80023c2:	80da      	strh	r2, [r3, #6]
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023cc:	7892      	ldrb	r2, [r2, #2]
 80023ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d2:	fb01 f202 	mul.w	r2, r1, r2
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e096      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'C')
 80023e0:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b49      	cmp	r3, #73	; 0x49
 80023e6:	d121      	bne.n	800242c <HAL_UART_RxCpltCallback+0x868>
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b43      	cmp	r3, #67	; 0x43
 80023ee:	d11d      	bne.n	800242c <HAL_UART_RxCpltCallback+0x868>
    __ADD_COMMAND(cQueue, 94, val);
 80023f0:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	225e      	movs	r2, #94	; 0x5e
 80023fc:	711a      	strb	r2, [r3, #4]
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b291      	uxth	r1, r2
 8002406:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	460a      	mov	r2, r1
 800240e:	80da      	strh	r2, [r3, #6]
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002418:	7892      	ldrb	r2, [r2, #2]
 800241a:	fb93 f1f2 	sdiv	r1, r3, r2
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b52      	ldr	r3, [pc, #328]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e070      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'B')
 800242c:	4b4f      	ldr	r3, [pc, #316]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b54      	cmp	r3, #84	; 0x54
 8002432:	d121      	bne.n	8002478 <HAL_UART_RxCpltCallback+0x8b4>
 8002434:	4b4d      	ldr	r3, [pc, #308]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	2b42      	cmp	r3, #66	; 0x42
 800243a:	d11d      	bne.n	8002478 <HAL_UART_RxCpltCallback+0x8b4>
    __ADD_COMMAND(cQueue, 95, val);
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	225f      	movs	r2, #95	; 0x5f
 8002448:	711a      	strb	r2, [r3, #4]
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	b291      	uxth	r1, r2
 8002452:	4a47      	ldr	r2, [pc, #284]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	460a      	mov	r2, r1
 800245a:	80da      	strh	r2, [r3, #6]
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002464:	7892      	ldrb	r2, [r2, #2]
 8002466:	fb93 f1f2 	sdiv	r1, r3, r2
 800246a:	fb01 f202 	mul.w	r2, r1, r2
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e04a      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'G' && aRxBuffer[1] == 'H')
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b47      	cmp	r3, #71	; 0x47
 800247e:	d121      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x900>
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b48      	cmp	r3, #72	; 0x48
 8002486:	d11d      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x900>
    __ADD_COMMAND(cQueue, 96, val);
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	2260      	movs	r2, #96	; 0x60
 8002494:	711a      	strb	r2, [r3, #4]
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	b291      	uxth	r1, r2
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	460a      	mov	r2, r1
 80024a6:	80da      	strh	r2, [r3, #6]
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a30      	ldr	r2, [pc, #192]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024b0:	7892      	ldrb	r2, [r2, #2]
 80024b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80024b6:	fb01 f202 	mul.w	r2, r1, r2
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e024      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'A' && aRxBuffer[1] == 'M')
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b41      	cmp	r3, #65	; 0x41
 80024ca:	d120      	bne.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2b4d      	cmp	r3, #77	; 0x4d
 80024d2:	d11c      	bne.n	800250e <HAL_UART_RxCpltCallback+0x94a>
    __ADD_COMMAND(cQueue, 97, val);
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	2261      	movs	r2, #97	; 0x61
 80024e0:	711a      	strb	r2, [r3, #4]
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	b291      	uxth	r1, r2
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	460a      	mov	r2, r1
 80024f2:	80da      	strh	r2, [r3, #6]
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024fc:	7892      	ldrb	r2, [r2, #2]
 80024fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002502:	fb01 f202 	mul.w	r2, r1, r2
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800250c:	701a      	strb	r2, [r3, #0]
  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	429a      	cmp	r2, r3
 8002518:	d019      	beq.n	800254e <HAL_UART_RxCpltCallback+0x98a>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <HAL_UART_RxCpltCallback+0x9b0>)
 8002520:	4913      	ldr	r1, [pc, #76]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	3301      	adds	r3, #1
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002532:	7892      	ldrb	r2, [r2, #2]
 8002534:	fb93 f1f2 	sdiv	r1, r3, r2
 8002538:	fb01 f202 	mul.w	r2, r1, r2
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002542:	705a      	strb	r2, [r3, #1]
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_UART_RxCpltCallback+0x9b4>)
 8002546:	210f      	movs	r1, #15
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <HAL_UART_RxCpltCallback+0x9b8>)
 800254a:	f00d f943 	bl	800f7d4 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_UART_RxCpltCallback+0x9bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_UART_RxCpltCallback+0x9c0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <HAL_UART_RxCpltCallback+0x9bc>)
 8002560:	f009 f84d 	bl	800b5fe <HAL_UART_Receive_IT>
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2000048c 	.word	0x2000048c
 8002570:	20000498 	.word	0x20000498
 8002574:	200004cc 	.word	0x200004cc
 8002578:	080101fc 	.word	0x080101fc
 800257c:	200004d0 	.word	0x200004d0
 8002580:	2000040c 	.word	0x2000040c
 8002584:	20000000 	.word	0x20000000

08002588 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	ed87 0a02 	vstr	s0, [r7, #8]
 8002594:	edc7 0a01 	vstr	s1, [r7, #4]
 8002598:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HCSR04_Read>:

void HCSR04_Read(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fa:	481a      	ldr	r0, [pc, #104]	; (8002664 <HCSR04_Read+0x74>)
 80025fc:	f005 fc3a 	bl	8007e74 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HCSR04_Read+0x78>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HCSR04_Read+0x78>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b31      	cmp	r3, #49	; 0x31
 8002610:	d9fa      	bls.n	8002608 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002618:	4812      	ldr	r0, [pc, #72]	; (8002664 <HCSR04_Read+0x74>)
 800261a:	f005 fc2b 	bl	8007e74 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HCSR04_Read+0x78>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HCSR04_Read+0x78>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b09      	cmp	r3, #9
 800262e:	d9fa      	bls.n	8002626 <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002636:	480b      	ldr	r0, [pc, #44]	; (8002664 <HCSR04_Read+0x74>)
 8002638:	f005 fc1c 	bl	8007e74 <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HCSR04_Read+0x78>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HCSR04_Read+0x78>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b31      	cmp	r3, #49	; 0x31
 800264c:	d9fa      	bls.n	8002644 <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HCSR04_Read+0x7c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HCSR04_Read+0x7c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	60da      	str	r2, [r3, #12]
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	2000037c 	.word	0x2000037c
 800266c:	20000334 	.word	0x20000334

08002670 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af04      	add	r7, sp, #16
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800267a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	2302      	movs	r3, #2
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	4ba9      	ldr	r3, [pc, #676]	; (800292c <StraightLineMove+0x2bc>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	2237      	movs	r2, #55	; 0x37
 800268c:	21d0      	movs	r1, #208	; 0xd0
 800268e:	48a8      	ldr	r0, [pc, #672]	; (8002930 <StraightLineMove+0x2c0>)
 8002690:	f005 fe48 	bl	8008324 <HAL_I2C_Mem_Read>
 8002694:	4ba5      	ldr	r3, [pc, #660]	; (800292c <StraightLineMove+0x2bc>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21a      	sxth	r2, r3
 800269c:	4ba3      	ldr	r3, [pc, #652]	; (800292c <StraightLineMove+0x2bc>)
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	4ba3      	ldr	r3, [pc, #652]	; (8002934 <StraightLineMove+0x2c4>)
 80026a8:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80026aa:	4ba3      	ldr	r3, [pc, #652]	; (8002938 <StraightLineMove+0x2c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	4b9e      	ldr	r3, [pc, #632]	; (800293c <StraightLineMove+0x2cc>)
 80026c2:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 80026c4:	4b9b      	ldr	r3, [pc, #620]	; (8002934 <StraightLineMove+0x2c4>)
 80026c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ca:	f113 0f04 	cmn.w	r3, #4
 80026ce:	db04      	blt.n	80026da <StraightLineMove+0x6a>
 80026d0:	4b98      	ldr	r3, [pc, #608]	; (8002934 <StraightLineMove+0x2c4>)
 80026d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d6:	2b0b      	cmp	r3, #11
 80026d8:	dd07      	ble.n	80026ea <StraightLineMove+0x7a>
 80026da:	4b96      	ldr	r3, [pc, #600]	; (8002934 <StraightLineMove+0x2c4>)
 80026dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e8:	e001      	b.n	80026ee <StraightLineMove+0x7e>
 80026ea:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002940 <StraightLineMove+0x2d0>
 80026ee:	4b95      	ldr	r3, [pc, #596]	; (8002944 <StraightLineMove+0x2d4>)
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f8:	4b92      	ldr	r3, [pc, #584]	; (8002944 <StraightLineMove+0x2d4>)
 80026fa:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d164      	bne.n	80027ce <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <StraightLineMove+0x2d8>)
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <StraightLineMove+0x2d4>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <StraightLineMove+0x2d8>)
 8002716:	edd3 6a01 	vldr	s13, [r3, #4]
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <StraightLineMove+0x2d8>)
 800271c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002728:	4b87      	ldr	r3, [pc, #540]	; (8002948 <StraightLineMove+0x2d8>)
 800272a:	edd3 6a02 	vldr	s13, [r3, #8]
 800272e:	4b86      	ldr	r3, [pc, #536]	; (8002948 <StraightLineMove+0x2d8>)
 8002730:	ed93 6a03 	vldr	s12, [r3, #12]
 8002734:	4b83      	ldr	r3, [pc, #524]	; (8002944 <StraightLineMove+0x2d4>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274a:	ee17 2a90 	vmov	r2, s15
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <StraightLineMove+0x2dc>)
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <StraightLineMove+0x2d4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7c      	ldr	r2, [pc, #496]	; (8002948 <StraightLineMove+0x2d8>)
 8002758:	60d3      	str	r3, [r2, #12]
 800275a:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <StraightLineMove+0x2d8>)
 800275c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <StraightLineMove+0x2d4>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b77      	ldr	r3, [pc, #476]	; (8002948 <StraightLineMove+0x2d8>)
 800276c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <StraightLineMove+0x2dc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002778:	dc06      	bgt.n	8002788 <StraightLineMove+0x118>
 800277a:	4b74      	ldr	r3, [pc, #464]	; (800294c <StraightLineMove+0x2dc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a74      	ldr	r2, [pc, #464]	; (8002950 <StraightLineMove+0x2e0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bfb8      	it	lt
 8002784:	4613      	movlt	r3, r2
 8002786:	e001      	b.n	800278c <StraightLineMove+0x11c>
 8002788:	f44f 7316 	mov.w	r3, #600	; 0x258
 800278c:	4a6f      	ldr	r2, [pc, #444]	; (800294c <StraightLineMove+0x2dc>)
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <StraightLineMove+0x2cc>)
 8002792:	f993 3000 	ldrsb.w	r3, [r3]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b6c      	ldr	r3, [pc, #432]	; (800294c <StraightLineMove+0x2dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	fb12 f303 	smulbb	r3, r2, r3
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <StraightLineMove+0x2e4>)
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <StraightLineMove+0x2cc>)
 80027b0:	f993 3000 	ldrsb.w	r3, [r3]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <StraightLineMove+0x2dc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	fb12 f303 	smulbb	r3, r2, r3
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b63      	ldr	r3, [pc, #396]	; (8002958 <StraightLineMove+0x2e8>)
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e0ef      	b.n	80029ae <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d165      	bne.n	80028a0 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <StraightLineMove+0x2ec>)
 80027d6:	ed93 7a00 	vldr	s14, [r3]
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <StraightLineMove+0x2d4>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <StraightLineMove+0x2ec>)
 80027e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80027ea:	4b5c      	ldr	r3, [pc, #368]	; (800295c <StraightLineMove+0x2ec>)
 80027ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80027f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f8:	4b58      	ldr	r3, [pc, #352]	; (800295c <StraightLineMove+0x2ec>)
 80027fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <StraightLineMove+0x2ec>)
 8002800:	ed93 6a03 	vldr	s12, [r3, #12]
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <StraightLineMove+0x2d4>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800280e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281a:	ee17 2a90 	vmov	r2, s15
 800281e:	4b4b      	ldr	r3, [pc, #300]	; (800294c <StraightLineMove+0x2dc>)
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <StraightLineMove+0x2d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4d      	ldr	r2, [pc, #308]	; (800295c <StraightLineMove+0x2ec>)
 8002828:	60d3      	str	r3, [r2, #12]
 800282a:	4b4c      	ldr	r3, [pc, #304]	; (800295c <StraightLineMove+0x2ec>)
 800282c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <StraightLineMove+0x2d4>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	4b48      	ldr	r3, [pc, #288]	; (800295c <StraightLineMove+0x2ec>)
 800283c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <StraightLineMove+0x2dc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002848:	dc06      	bgt.n	8002858 <StraightLineMove+0x1e8>
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <StraightLineMove+0x2dc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a44      	ldr	r2, [pc, #272]	; (8002960 <StraightLineMove+0x2f0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	bfb8      	it	lt
 8002854:	4613      	movlt	r3, r2
 8002856:	e001      	b.n	800285c <StraightLineMove+0x1ec>
 8002858:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <StraightLineMove+0x2dc>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <StraightLineMove+0x2cc>)
 8002862:	f993 3000 	ldrsb.w	r3, [r3]
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b38      	ldr	r3, [pc, #224]	; (800294c <StraightLineMove+0x2dc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	fb12 f303 	smulbb	r3, r2, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <StraightLineMove+0x2e4>)
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <StraightLineMove+0x2cc>)
 8002880:	f993 3000 	ldrsb.w	r3, [r3]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <StraightLineMove+0x2dc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	fb12 f303 	smulbb	r3, r2, r3
 8002890:	b29b      	uxth	r3, r3
 8002892:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002896:	3308      	adds	r3, #8
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <StraightLineMove+0x2e8>)
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	e086      	b.n	80029ae <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 8083 	bne.w	80029ae <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <StraightLineMove+0x2f4>)
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <StraightLineMove+0x2d4>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <StraightLineMove+0x2f4>)
 80028ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <StraightLineMove+0x2f4>)
 80028c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <StraightLineMove+0x2f4>)
 80028ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <StraightLineMove+0x2f4>)
 80028d4:	ed93 6a03 	vldr	s12, [r3, #12]
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <StraightLineMove+0x2d4>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80028e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <StraightLineMove+0x2dc>)
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <StraightLineMove+0x2d4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <StraightLineMove+0x2f4>)
 80028fc:	60d3      	str	r3, [r2, #12]
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <StraightLineMove+0x2f4>)
 8002900:	ed93 7a04 	vldr	s14, [r3, #16]
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <StraightLineMove+0x2d4>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <StraightLineMove+0x2f4>)
 8002910:	edc3 7a04 	vstr	s15, [r3, #16]
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <StraightLineMove+0x2dc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800291c:	dc24      	bgt.n	8002968 <StraightLineMove+0x2f8>
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <StraightLineMove+0x2dc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <StraightLineMove+0x2f0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bfb8      	it	lt
 8002928:	4613      	movlt	r3, r2
 800292a:	e01f      	b.n	800296c <StraightLineMove+0x2fc>
 800292c:	200004ec 	.word	0x200004ec
 8002930:	20000250 	.word	0x20000250
 8002934:	200004ee 	.word	0x200004ee
 8002938:	200002ec 	.word	0x200002ec
 800293c:	20000140 	.word	0x20000140
 8002940:	00000000 	.word	0x00000000
 8002944:	200004e8 	.word	0x200004e8
 8002948:	20000518 	.word	0x20000518
 800294c:	20000568 	.word	0x20000568
 8002950:	fffffda8 	.word	0xfffffda8
 8002954:	200004f0 	.word	0x200004f0
 8002958:	200004f2 	.word	0x200004f2
 800295c:	2000052c 	.word	0x2000052c
 8002960:	fffffd44 	.word	0xfffffd44
 8002964:	20000504 	.word	0x20000504
 8002968:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <StraightLineMove+0x35c>)
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <StraightLineMove+0x360>)
 8002972:	f993 3000 	ldrsb.w	r3, [r3]
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <StraightLineMove+0x35c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	fb12 f303 	smulbb	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <StraightLineMove+0x364>)
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <StraightLineMove+0x360>)
 8002990:	f993 3000 	ldrsb.w	r3, [r3]
 8002994:	b29a      	uxth	r2, r3
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <StraightLineMove+0x35c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	fb12 f303 	smulbb	r3, r2, r3
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 80029a6:	330c      	adds	r3, #12
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <StraightLineMove+0x368>)
 80029ac:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <StraightLineMove+0x364>)
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <StraightLineMove+0x36c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <StraightLineMove+0x368>)
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <StraightLineMove+0x36c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000568 	.word	0x20000568
 80029d0:	20000140 	.word	0x20000140
 80029d4:	200004f0 	.word	0x200004f0
 80029d8:	200004f2 	.word	0x200004f2
 80029dc:	200003c4 	.word	0x200003c4

080029e0 <RobotMoveDist>:
 * @param targetDist Pointer to the target distance to move.
 * @param dir The direction to move the robot in.
 * @param speedMode The speed mode to use for the movement.
 */
void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
 80029ec:	4613      	mov	r3, r2
 80029ee:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 80029f0:	4ba1      	ldr	r3, [pc, #644]	; (8002c78 <RobotMoveDist+0x298>)
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 80029f8:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <RobotMoveDist+0x29c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80029fe:	48a0      	ldr	r0, [pc, #640]	; (8002c80 <RobotMoveDist+0x2a0>)
 8002a00:	f7ff fde3 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002a04:	489f      	ldr	r0, [pc, #636]	; (8002c84 <RobotMoveDist+0x2a4>)
 8002a06:	f7ff fde0 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002a0a:	489f      	ldr	r0, [pc, #636]	; (8002c88 <RobotMoveDist+0x2a8>)
 8002a0c:	f7ff fddd 	bl	80025ca <PIDConfigReset>
  curDistTick = 0;
 8002a10:	4b9e      	ldr	r3, [pc, #632]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 8002a16:	4b9e      	ldr	r3, [pc, #632]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
  __GET_TARGETTICK(*targetDist, targetDistTick);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd89 	bl	8000538 <__aeabi_f2d>
 8002a26:	a38e      	add	r3, pc, #568	; (adr r3, 8002c60 <RobotMoveDist+0x280>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fddc 	bl	80005e8 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	a38b      	add	r3, pc, #556	; (adr r3, 8002c68 <RobotMoveDist+0x288>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fc1b 	bl	8000278 <__aeabi_dsub>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <RobotMoveDist+0x2b4>)
 8002a50:	f7fd fef4 	bl	800083c <__aeabi_ddiv>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	4b8d      	ldr	r3, [pc, #564]	; (8002c98 <RobotMoveDist+0x2b8>)
 8002a62:	f7fd fdc1 	bl	80005e8 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b8a      	ldr	r3, [pc, #552]	; (8002c9c <RobotMoveDist+0x2bc>)
 8002a74:	f7fd fc00 	bl	8000278 <__aeabi_dsub>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f84c 	bl	8000b1c <__aeabi_d2uiz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <RobotMoveDist+0x2c0>)
 8002a8a:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8002a8c:	f004 fab2 	bl	8006ff4 <HAL_GetTick>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a84      	ldr	r2, [pc, #528]	; (8002ca4 <RobotMoveDist+0x2c4>)
 8002a94:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4880      	ldr	r0, [pc, #512]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002aa8:	f005 f9e4 	bl	8007e74 <HAL_GPIO_WritePin>
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2108      	movs	r1, #8
 8002abc:	487a      	ldr	r0, [pc, #488]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002abe:	f005 f9d9 	bl	8007e74 <HAL_GPIO_WritePin>
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	4875      	ldr	r0, [pc, #468]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002ad4:	f005 f9ce 	bl	8007e74 <HAL_GPIO_WritePin>
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	486f      	ldr	r0, [pc, #444]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002aea:	f005 f9c3 	bl	8007e74 <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <RobotMoveDist+0x2cc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002af8:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <RobotMoveDist+0x2cc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <RobotMoveDist+0x2cc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d117      	bne.n	8002b40 <RobotMoveDist+0x160>
 8002b10:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d806      	bhi.n	8002b2a <RobotMoveDist+0x14a>
 8002b1c:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	e007      	b.n	8002b3a <RobotMoveDist+0x15a>
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002b3c:	8013      	strh	r3, [r2, #0]
 8002b3e:	e016      	b.n	8002b6e <RobotMoveDist+0x18e>
 8002b40:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d306      	bcc.n	8002b5a <RobotMoveDist+0x17a>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	e007      	b.n	8002b6a <RobotMoveDist+0x18a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4a49      	ldr	r2, [pc, #292]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002b6c:	8013      	strh	r3, [r2, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b74:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002b76:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002b84:	801a      	strh	r2, [r3, #0]
    if (curDistTick >= targetDistTick)
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <RobotMoveDist+0x2c0>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	f080 80a5 	bcs.w	8002cde <RobotMoveDist+0x2fe>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002b94:	f004 fa2e 	bl	8006ff4 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <RobotMoveDist+0x2c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d9aa      	bls.n	8002afa <RobotMoveDist+0x11a>
    {
      if (speedMode == SPEED_MODE_T)
 8002ba4:	78bb      	ldrb	r3, [r7, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <RobotMoveDist+0x1d2>
      {
        StraightLineMove(SPEED_MODE_T);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff fd60 	bl	8002670 <StraightLineMove>
 8002bb0:	e08f      	b.n	8002cd2 <RobotMoveDist+0x2f2>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <RobotMoveDist+0x2c0>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bfb8      	it	lt
 8002bc2:	425b      	neglt	r3, r3
 8002bc4:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <RobotMoveDist+0x2d4>)
 8002bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8002bca:	11d2      	asrs	r2, r2, #7
 8002bcc:	17db      	asrs	r3, r3, #31
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11e      	bne.n	8002c22 <RobotMoveDist+0x242>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd02      	ble.n	8002bfe <RobotMoveDist+0x21e>
 8002bf8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002bfc:	e00e      	b.n	8002c1c <RobotMoveDist+0x23c>
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d502      	bpl.n	8002c18 <RobotMoveDist+0x238>
 8002c12:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002c16:	e001      	b.n	8002c1c <RobotMoveDist+0x23c>
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e052      	b.n	8002cc8 <RobotMoveDist+0x2e8>
        else if (speedMode == SPEED_MODE_2)
 8002c22:	78bb      	ldrb	r3, [r7, #2]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d14f      	bne.n	8002cc8 <RobotMoveDist+0x2e8>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dd02      	ble.n	8002c42 <RobotMoveDist+0x262>
 8002c3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c40:	e040      	b.n	8002cc4 <RobotMoveDist+0x2e4>
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc76 	bl	8000538 <__aeabi_f2d>
 8002c4c:	a308      	add	r3, pc, #32	; (adr r3, 8002c70 <RobotMoveDist+0x290>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd ff3b 	bl	8000acc <__aeabi_dcmplt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <RobotMoveDist+0x2e0>
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <RobotMoveDist+0x2dc>)
 8002c5e:	e031      	b.n	8002cc4 <RobotMoveDist+0x2e4>
 8002c60:	fc66b22a 	.word	0xfc66b22a
 8002c64:	3ff266ac 	.word	0x3ff266ac
 8002c68:	bb2526f8 	.word	0xbb2526f8
 8002c6c:	3feee3d4 	.word	0x3feee3d4
 8002c70:	9999999a 	.word	0x9999999a
 8002c74:	3fd99999 	.word	0x3fd99999
 8002c78:	200004e8 	.word	0x200004e8
 8002c7c:	200004ee 	.word	0x200004ee
 8002c80:	20000518 	.word	0x20000518
 8002c84:	20000504 	.word	0x20000504
 8002c88:	2000052c 	.word	0x2000052c
 8002c8c:	200004fc 	.word	0x200004fc
 8002c90:	20000500 	.word	0x20000500
 8002c94:	40340000 	.word	0x40340000
 8002c98:	4094a000 	.word	0x4094a000
 8002c9c:	40240000 	.word	0x40240000
 8002ca0:	200004fe 	.word	0x200004fe
 8002ca4:	200004f4 	.word	0x200004f4
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	200002ec 	.word	0x200002ec
 8002cb0:	20000502 	.word	0x20000502
 8002cb4:	21195767 	.word	0x21195767
 8002cb8:	20000138 	.word	0x20000138
 8002cbc:	3ecccccd 	.word	0x3ecccccd
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <RobotMoveDist+0x318>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <RobotMoveDist+0x318>)
 8002cc6:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002cc8:	78bb      	ldrb	r3, [r7, #2]
 8002cca:	490b      	ldr	r1, [pc, #44]	; (8002cf8 <RobotMoveDist+0x318>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f963 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002cd2:	f004 f98f 	bl	8006ff4 <HAL_GetTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <RobotMoveDist+0x31c>)
 8002cda:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002cdc:	e70d      	b.n	8002afa <RobotMoveDist+0x11a>
      break;
 8002cde:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <RobotMoveDist+0x320>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <RobotMoveDist+0x320>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000138 	.word	0x20000138
 8002cfc:	200004f4 	.word	0x200004f4
 8002d00:	200003c4 	.word	0x200003c4
 8002d04:	00000000 	.word	0x00000000

08002d08 <RobotMoveTick>:
 * @param targetTick Pointer to the target number of encoder ticks to move the robot.
 * @param dir The direction to move the robot in (1 for forward, 0 for backward).
 * @param speedMode The speed mode to use for the movement (SPEED_MODE_T, SPEED_MODE_1, or SPEED_MODE_2).
 */
void RobotMoveTick(uint16_t *targetTick, const uint8_t dir, uint8_t speedMode)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
 8002d14:	4613      	mov	r3, r2
 8002d16:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <RobotMoveTick+0x250>)
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 8002d20:	4b8e      	ldr	r3, [pc, #568]	; (8002f5c <RobotMoveTick+0x254>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8002d26:	488e      	ldr	r0, [pc, #568]	; (8002f60 <RobotMoveTick+0x258>)
 8002d28:	f7ff fc4f 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002d2c:	488d      	ldr	r0, [pc, #564]	; (8002f64 <RobotMoveTick+0x25c>)
 8002d2e:	f7ff fc4c 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002d32:	488d      	ldr	r0, [pc, #564]	; (8002f68 <RobotMoveTick+0x260>)
 8002d34:	f7ff fc49 	bl	80025ca <PIDConfigReset>
  curDistTick = 0;
 8002d38:	4b8c      	ldr	r3, [pc, #560]	; (8002f6c <RobotMoveTick+0x264>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 8002d3e:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <RobotMoveTick+0x268>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8002d44:	f004 f956 	bl	8006ff4 <HAL_GetTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4a8a      	ldr	r2, [pc, #552]	; (8002f74 <RobotMoveTick+0x26c>)
 8002d4c:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	4886      	ldr	r0, [pc, #536]	; (8002f78 <RobotMoveTick+0x270>)
 8002d60:	f005 f888 	bl	8007e74 <HAL_GPIO_WritePin>
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	2108      	movs	r1, #8
 8002d74:	4880      	ldr	r0, [pc, #512]	; (8002f78 <RobotMoveTick+0x270>)
 8002d76:	f005 f87d 	bl	8007e74 <HAL_GPIO_WritePin>
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	2120      	movs	r1, #32
 8002d8a:	487b      	ldr	r0, [pc, #492]	; (8002f78 <RobotMoveTick+0x270>)
 8002d8c:	f005 f872 	bl	8007e74 <HAL_GPIO_WritePin>
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2110      	movs	r1, #16
 8002da0:	4875      	ldr	r0, [pc, #468]	; (8002f78 <RobotMoveTick+0x270>)
 8002da2:	f005 f867 	bl	8007e74 <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002da6:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <RobotMoveTick+0x274>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b74      	ldr	r3, [pc, #464]	; (8002f80 <RobotMoveTick+0x278>)
 8002db0:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002db2:	4b72      	ldr	r3, [pc, #456]	; (8002f7c <RobotMoveTick+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <RobotMoveTick+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d117      	bne.n	8002df8 <RobotMoveTick+0xf0>
 8002dc8:	4b6d      	ldr	r3, [pc, #436]	; (8002f80 <RobotMoveTick+0x278>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d806      	bhi.n	8002de2 <RobotMoveTick+0xda>
 8002dd4:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <RobotMoveTick+0x278>)
 8002dd6:	881a      	ldrh	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	e007      	b.n	8002df2 <RobotMoveTick+0xea>
 8002de2:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <RobotMoveTick+0x278>)
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <RobotMoveTick+0x268>)
 8002df4:	8013      	strh	r3, [r2, #0]
 8002df6:	e016      	b.n	8002e26 <RobotMoveTick+0x11e>
 8002df8:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <RobotMoveTick+0x278>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d306      	bcc.n	8002e12 <RobotMoveTick+0x10a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <RobotMoveTick+0x278>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	e007      	b.n	8002e22 <RobotMoveTick+0x11a>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <RobotMoveTick+0x278>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4a53      	ldr	r2, [pc, #332]	; (8002f70 <RobotMoveTick+0x268>)
 8002e24:	8013      	strh	r3, [r2, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <RobotMoveTick+0x278>)
 8002e2c:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <RobotMoveTick+0x264>)
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <RobotMoveTick+0x268>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <RobotMoveTick+0x264>)
 8002e3c:	801a      	strh	r2, [r3, #0]

    if (curDistTick >= targetTick)
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <RobotMoveTick+0x264>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d974      	bls.n	8002f34 <RobotMoveTick+0x22c>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002e4a:	f004 f8d3 	bl	8006ff4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <RobotMoveTick+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b09      	cmp	r3, #9
 8002e58:	d9ab      	bls.n	8002db2 <RobotMoveTick+0xaa>
    {
      if (speedMode == SPEED_MODE_T)
 8002e5a:	78bb      	ldrb	r3, [r7, #2]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <RobotMoveTick+0x160>
      {
        StraightLineMove(SPEED_MODE_T);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff fc05 	bl	8002670 <StraightLineMove>
 8002e66:	e05f      	b.n	8002f28 <RobotMoveTick+0x220>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <RobotMoveTick+0x264>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <RobotMoveTick+0x27c>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bfb8      	it	lt
 8002e78:	425b      	neglt	r3, r3
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <RobotMoveTick+0x280>)
 8002e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e80:	11d2      	asrs	r2, r2, #7
 8002e82:	17db      	asrs	r3, r3, #31
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <RobotMoveTick+0x284>)
 8002e90:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002e94:	78bb      	ldrb	r3, [r7, #2]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d11e      	bne.n	8002ed8 <RobotMoveTick+0x1d0>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <RobotMoveTick+0x284>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	dd02      	ble.n	8002eb4 <RobotMoveTick+0x1ac>
 8002eae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002eb2:	e00e      	b.n	8002ed2 <RobotMoveTick+0x1ca>
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <RobotMoveTick+0x284>)
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d502      	bpl.n	8002ece <RobotMoveTick+0x1c6>
 8002ec8:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002ecc:	e001      	b.n	8002ed2 <RobotMoveTick+0x1ca>
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <RobotMoveTick+0x284>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2e      	ldr	r2, [pc, #184]	; (8002f8c <RobotMoveTick+0x284>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e022      	b.n	8002f1e <RobotMoveTick+0x216>
        else if (speedMode == SPEED_MODE_2)
 8002ed8:	78bb      	ldrb	r3, [r7, #2]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11f      	bne.n	8002f1e <RobotMoveTick+0x216>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <RobotMoveTick+0x284>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	dd02      	ble.n	8002ef8 <RobotMoveTick+0x1f0>
 8002ef2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ef6:	e010      	b.n	8002f1a <RobotMoveTick+0x212>
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <RobotMoveTick+0x284>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb1b 	bl	8000538 <__aeabi_f2d>
 8002f02:	a313      	add	r3, pc, #76	; (adr r3, 8002f50 <RobotMoveTick+0x248>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fde0 	bl	8000acc <__aeabi_dcmplt>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <RobotMoveTick+0x20e>
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <RobotMoveTick+0x288>)
 8002f14:	e001      	b.n	8002f1a <RobotMoveTick+0x212>
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <RobotMoveTick+0x284>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <RobotMoveTick+0x284>)
 8002f1c:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002f1e:	78bb      	ldrb	r3, [r7, #2]
 8002f20:	491a      	ldr	r1, [pc, #104]	; (8002f8c <RobotMoveTick+0x284>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f838 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002f28:	f004 f864 	bl	8006ff4 <HAL_GetTick>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <RobotMoveTick+0x26c>)
 8002f30:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002f32:	e73e      	b.n	8002db2 <RobotMoveTick+0xaa>
      break;
 8002f34:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <RobotMoveTick+0x28c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <RobotMoveTick+0x28c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	9999999a 	.word	0x9999999a
 8002f54:	3fd99999 	.word	0x3fd99999
 8002f58:	200004e8 	.word	0x200004e8
 8002f5c:	200004ee 	.word	0x200004ee
 8002f60:	20000518 	.word	0x20000518
 8002f64:	20000504 	.word	0x20000504
 8002f68:	2000052c 	.word	0x2000052c
 8002f6c:	200004fc 	.word	0x200004fc
 8002f70:	20000500 	.word	0x20000500
 8002f74:	200004f4 	.word	0x200004f4
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	200002ec 	.word	0x200002ec
 8002f80:	20000502 	.word	0x20000502
 8002f84:	200004fe 	.word	0x200004fe
 8002f88:	21195767 	.word	0x21195767
 8002f8c:	20000138 	.word	0x20000138
 8002f90:	3ecccccd 	.word	0x3ecccccd
 8002f94:	200003c4 	.word	0x200003c4

08002f98 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8002fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2302      	movs	r3, #2
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	4b9b      	ldr	r3, [pc, #620]	; (800321c <StraightLineMoveSpeedScale+0x284>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2237      	movs	r2, #55	; 0x37
 8002fb6:	21d0      	movs	r1, #208	; 0xd0
 8002fb8:	4899      	ldr	r0, [pc, #612]	; (8003220 <StraightLineMoveSpeedScale+0x288>)
 8002fba:	f005 f9b3 	bl	8008324 <HAL_I2C_Mem_Read>
 8002fbe:	4b97      	ldr	r3, [pc, #604]	; (800321c <StraightLineMoveSpeedScale+0x284>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	4b95      	ldr	r3, [pc, #596]	; (800321c <StraightLineMoveSpeedScale+0x284>)
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	4b94      	ldr	r3, [pc, #592]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8002fd2:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <StraightLineMoveSpeedScale+0x290>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d101      	bne.n	8002fe6 <StraightLineMoveSpeedScale+0x4e>
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	e001      	b.n	8002fea <StraightLineMoveSpeedScale+0x52>
 8002fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fea:	4b90      	ldr	r3, [pc, #576]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 8002fec:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002fee:	4b8d      	ldr	r3, [pc, #564]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	f113 0f04 	cmn.w	r3, #4
 8002ff8:	db04      	blt.n	8003004 <StraightLineMoveSpeedScale+0x6c>
 8002ffa:	4b8a      	ldr	r3, [pc, #552]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8002ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003000:	2b0b      	cmp	r3, #11
 8003002:	dd07      	ble.n	8003014 <StraightLineMoveSpeedScale+0x7c>
 8003004:	4b87      	ldr	r3, [pc, #540]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8003006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003012:	e001      	b.n	8003018 <StraightLineMoveSpeedScale+0x80>
 8003014:	eddf 7a86 	vldr	s15, [pc, #536]	; 8003230 <StraightLineMoveSpeedScale+0x298>
 8003018:	4b86      	ldr	r3, [pc, #536]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800301a:	ed93 7a00 	vldr	s14, [r3]
 800301e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003022:	4b84      	ldr	r3, [pc, #528]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003024:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d165      	bne.n	80030fa <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 800302e:	4b82      	ldr	r3, [pc, #520]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003030:	ed93 7a00 	vldr	s14, [r3]
 8003034:	4b7f      	ldr	r3, [pc, #508]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303e:	4b7e      	ldr	r3, [pc, #504]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003040:	edd3 6a01 	vldr	s13, [r3, #4]
 8003044:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003046:	edd3 7a04 	vldr	s15, [r3, #16]
 800304a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003052:	4b79      	ldr	r3, [pc, #484]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003054:	edd3 6a02 	vldr	s13, [r3, #8]
 8003058:	4b77      	ldr	r3, [pc, #476]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 800305a:	ed93 6a03 	vldr	s12, [r3, #12]
 800305e:	4b75      	ldr	r3, [pc, #468]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003074:	ee17 2a90 	vmov	r2, s15
 8003078:	4b70      	ldr	r3, [pc, #448]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6d      	ldr	r2, [pc, #436]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003086:	ed93 7a04 	vldr	s14, [r3, #16]
 800308a:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003096:	edc3 7a04 	vstr	s15, [r3, #16]
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80030a2:	dc06      	bgt.n	80030b2 <StraightLineMoveSpeedScale+0x11a>
 80030a4:	4b65      	ldr	r3, [pc, #404]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <StraightLineMoveSpeedScale+0x2a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bfb8      	it	lt
 80030ae:	4613      	movlt	r3, r2
 80030b0:	e001      	b.n	80030b6 <StraightLineMoveSpeedScale+0x11e>
 80030b2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80030b6:	4a61      	ldr	r2, [pc, #388]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 80030bc:	f993 3000 	ldrsb.w	r3, [r3]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	4b5e      	ldr	r3, [pc, #376]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	fb12 f303 	smulbb	r3, r2, r3
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <StraightLineMoveSpeedScale+0x2ac>)
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	4b54      	ldr	r3, [pc, #336]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 80030da:	f993 3000 	ldrsb.w	r3, [r3]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b56      	ldr	r3, [pc, #344]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	fb12 f303 	smulbb	r3, r2, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 80030f0:	330c      	adds	r3, #12
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b54      	ldr	r3, [pc, #336]	; (8003248 <StraightLineMoveSpeedScale+0x2b0>)
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e067      	b.n	80031ca <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d164      	bne.n	80031ca <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8003100:	4b52      	ldr	r3, [pc, #328]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003102:	ed93 7a00 	vldr	s14, [r3]
 8003106:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	4b4e      	ldr	r3, [pc, #312]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003112:	edd3 6a01 	vldr	s13, [r3, #4]
 8003116:	4b4d      	ldr	r3, [pc, #308]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003118:	edd3 7a04 	vldr	s15, [r3, #16]
 800311c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003124:	4b49      	ldr	r3, [pc, #292]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003126:	edd3 6a02 	vldr	s13, [r3, #8]
 800312a:	4b48      	ldr	r3, [pc, #288]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 800312c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee76 7a67 	vsub.f32	s15, s12, s15
 800313a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003146:	ee17 2a90 	vmov	r2, s15
 800314a:	4b3c      	ldr	r3, [pc, #240]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3e      	ldr	r2, [pc, #248]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003154:	60d3      	str	r3, [r2, #12]
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003158:	ed93 7a04 	vldr	s14, [r3, #16]
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003168:	edc3 7a04 	vstr	s15, [r3, #16]
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003174:	dc06      	bgt.n	8003184 <StraightLineMoveSpeedScale+0x1ec>
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a31      	ldr	r2, [pc, #196]	; (8003240 <StraightLineMoveSpeedScale+0x2a8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bfb8      	it	lt
 8003180:	4613      	movlt	r3, r2
 8003182:	e001      	b.n	8003188 <StraightLineMoveSpeedScale+0x1f0>
 8003184:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 800318e:	f993 3000 	ldrsb.w	r3, [r3]
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	fb12 f303 	smulbb	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <StraightLineMoveSpeedScale+0x2ac>)
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 80031ac:	f993 3000 	ldrsb.w	r3, [r3]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	fb12 f303 	smulbb	r3, r2, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80031c2:	3308      	adds	r3, #8
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <StraightLineMoveSpeedScale+0x2b0>)
 80031c8:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <StraightLineMoveSpeedScale+0x2ac>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <StraightLineMoveSpeedScale+0x2b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e8:	ee17 2a90 	vmov	r2, s15
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <StraightLineMoveSpeedScale+0x2b0>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <StraightLineMoveSpeedScale+0x2b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320c:	ee17 2a90 	vmov	r2, s15
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200004ec 	.word	0x200004ec
 8003220:	20000250 	.word	0x20000250
 8003224:	200004ee 	.word	0x200004ee
 8003228:	200002ec 	.word	0x200002ec
 800322c:	20000140 	.word	0x20000140
 8003230:	00000000 	.word	0x00000000
 8003234:	200004e8 	.word	0x200004e8
 8003238:	20000504 	.word	0x20000504
 800323c:	20000568 	.word	0x20000568
 8003240:	fffffd44 	.word	0xfffffd44
 8003244:	200004f0 	.word	0x200004f0
 8003248:	200004f2 	.word	0x200004f2
 800324c:	2000052c 	.word	0x2000052c
 8003250:	200003c4 	.word	0x200003c4
 8003254:	00000000 	.word	0x00000000

08003258 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af04      	add	r7, sp, #16
 800325e:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <RobotTurn+0x138>)
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <RobotTurn+0x13c>)
 800326a:	2200      	movs	r2, #0
 800326c:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 800326e:	f003 fec1 	bl	8006ff4 <HAL_GetTick>
 8003272:	4603      	mov	r3, r0
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <RobotTurn+0x140>)
 8003276:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8003278:	f003 febc 	bl	8006ff4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <RobotTurn+0x140>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b09      	cmp	r3, #9
 8003286:	d9f7      	bls.n	8003278 <RobotTurn+0x20>
    { // sample gyro every 5ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800328c:	9302      	str	r3, [sp, #8]
 800328e:	2302      	movs	r3, #2
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <RobotTurn+0x144>)
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	2237      	movs	r2, #55	; 0x37
 800329a:	21d0      	movs	r1, #208	; 0xd0
 800329c:	4840      	ldr	r0, [pc, #256]	; (80033a0 <RobotTurn+0x148>)
 800329e:	f005 f841 	bl	8008324 <HAL_I2C_Mem_Read>
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <RobotTurn+0x144>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b21a      	sxth	r2, r3
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <RobotTurn+0x144>)
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	4b37      	ldr	r3, [pc, #220]	; (8003394 <RobotTurn+0x13c>)
 80032b6:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <RobotTurn+0x138>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f93b 	bl	8000538 <__aeabi_f2d>
 80032c2:	4604      	mov	r4, r0
 80032c4:	460d      	mov	r5, r1
 80032c6:	4b33      	ldr	r3, [pc, #204]	; (8003394 <RobotTurn+0x13c>)
 80032c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f921 	bl	8000514 <__aeabi_i2d>
 80032d2:	a32b      	add	r3, pc, #172	; (adr r3, 8003380 <RobotTurn+0x128>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd fab0 	bl	800083c <__aeabi_ddiv>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	a328      	add	r3, pc, #160	; (adr r3, 8003388 <RobotTurn+0x130>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd f97d 	bl	80005e8 <__aeabi_dmul>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4620      	mov	r0, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	f7fc ffc1 	bl	800027c <__adddf3>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f7fd fc2b 	bl	8000b5c <__aeabi_d2f>
 8003306:	4603      	mov	r3, r0
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <RobotTurn+0x138>)
 800330a:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <RobotTurn+0x138>)
 800330e:	ed93 7a00 	vldr	s14, [r3]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003320:	ee17 3a90 	vmov	r3, s15
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0d      	blt.n	8003344 <RobotTurn+0xec>
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <RobotTurn+0x138>)
 800332a:	ed93 7a00 	vldr	s14, [r3]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800333c:	ee17 3a90 	vmov	r3, s15
 8003340:	2b00      	cmp	r3, #0
 8003342:	dd05      	ble.n	8003350 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8003344:	f003 fe56 	bl	8006ff4 <HAL_GetTick>
 8003348:	4603      	mov	r3, r0
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <RobotTurn+0x140>)
 800334c:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 800334e:	e793      	b.n	8003278 <RobotTurn+0x20>
        break;
 8003350:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <RobotTurn+0x14c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <RobotTurn+0x14c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <RobotTurn+0x150>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2291      	movs	r2, #145	; 0x91
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
 800336a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800336e:	f003 fe4d 	bl	800700c <HAL_Delay>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bdb0      	pop	{r4, r5, r7, pc}
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w
 8003380:	66666666 	.word	0x66666666
 8003384:	40306666 	.word	0x40306666
 8003388:	47ae147b 	.word	0x47ae147b
 800338c:	3f847ae1 	.word	0x3f847ae1
 8003390:	200004e8 	.word	0x200004e8
 8003394:	200004ee 	.word	0x200004ee
 8003398:	200004f4 	.word	0x200004f4
 800339c:	200004ec 	.word	0x200004ec
 80033a0:	20000250 	.word	0x20000250
 80033a4:	200003c4 	.word	0x200003c4
 80033a8:	200002a4 	.word	0x200002a4
 80033ac:	00000000 	.word	0x00000000

080033b0 <RobotMoveDistObstacle>:
}

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float *targetDist, const uint8_t speedMode)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 80033bc:	4bbe      	ldr	r3, [pc, #760]	; (80036b8 <RobotMoveDistObstacle+0x308>)
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 80033c4:	4bbd      	ldr	r3, [pc, #756]	; (80036bc <RobotMoveDistObstacle+0x30c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80033ca:	48bd      	ldr	r0, [pc, #756]	; (80036c0 <RobotMoveDistObstacle+0x310>)
 80033cc:	f7ff f8fd 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80033d0:	48bc      	ldr	r0, [pc, #752]	; (80036c4 <RobotMoveDistObstacle+0x314>)
 80033d2:	f7ff f8fa 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80033d6:	48bc      	ldr	r0, [pc, #752]	; (80036c8 <RobotMoveDistObstacle+0x318>)
 80033d8:	f7ff f8f7 	bl	80025ca <PIDConfigReset>
  obsDist_US = 1000;
 80033dc:	4bbb      	ldr	r3, [pc, #748]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 80033de:	4abc      	ldr	r2, [pc, #752]	; (80036d0 <RobotMoveDistObstacle+0x320>)
 80033e0:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Ultrasonic sensor start
 80033e2:	2104      	movs	r1, #4
 80033e4:	48bb      	ldr	r0, [pc, #748]	; (80036d4 <RobotMoveDistObstacle+0x324>)
 80033e6:	f006 fc75 	bl	8009cd4 <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 80033ea:	f003 fe03 	bl	8006ff4 <HAL_GetTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4ab9      	ldr	r2, [pc, #740]	; (80036d8 <RobotMoveDistObstacle+0x328>)
 80033f2:	6013      	str	r3, [r2, #0]
  int counter = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  int oldspeed = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  do
  {
    HCSR04_Read();
 80033fc:	f7ff f8f8 	bl	80025f0 <HCSR04_Read>
    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8003400:	200a      	movs	r0, #10
 8003402:	f009 f9b5 	bl	800c770 <osDelay>
    if (abs(*targetDist - obsDist_US) <= 1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	ed93 7a00 	vldr	s14, [r3]
 800340c:	4baf      	ldr	r3, [pc, #700]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341a:	ee17 3a90 	vmov	r3, s15
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003422:	db0e      	blt.n	8003442 <RobotMoveDistObstacle+0x92>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	4ba8      	ldr	r3, [pc, #672]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003438:	ee17 3a90 	vmov	r3, s15
 800343c:	2b01      	cmp	r3, #1
 800343e:	f340 8155 	ble.w	80036ec <RobotMoveDistObstacle+0x33c>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	2104      	movs	r1, #4
 800346a:	489c      	ldr	r0, [pc, #624]	; (80036dc <RobotMoveDistObstacle+0x32c>)
 800346c:	f004 fd02 	bl	8007e74 <HAL_GPIO_WritePin>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	4b95      	ldr	r3, [pc, #596]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	bf94      	ite	ls
 8003486:	2301      	movls	r3, #1
 8003488:	2300      	movhi	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	2108      	movs	r1, #8
 8003490:	4892      	ldr	r0, [pc, #584]	; (80036dc <RobotMoveDistObstacle+0x32c>)
 8003492:	f004 fcef 	bl	8007e74 <HAL_GPIO_WritePin>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	ed93 7a00 	vldr	s14, [r3]
 800349c:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f083 0301 	eor.w	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	2120      	movs	r1, #32
 80034be:	4887      	ldr	r0, [pc, #540]	; (80036dc <RobotMoveDistObstacle+0x32c>)
 80034c0:	f004 fcd8 	bl	8007e74 <HAL_GPIO_WritePin>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4b80      	ldr	r3, [pc, #512]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	bf94      	ite	ls
 80034da:	2301      	movls	r3, #1
 80034dc:	2300      	movhi	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	2110      	movs	r1, #16
 80034e4:	487d      	ldr	r0, [pc, #500]	; (80036dc <RobotMoveDistObstacle+0x32c>)
 80034e6:	f004 fcc5 	bl	8007e74 <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 80034ea:	f003 fd83 	bl	8006ff4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b79      	ldr	r3, [pc, #484]	; (80036d8 <RobotMoveDistObstacle+0x328>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b13      	cmp	r3, #19
 80034f8:	d980      	bls.n	80033fc <RobotMoveDistObstacle+0x4c>
    {
      if (speedMode == SPEED_MODE_1)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d166      	bne.n	80035ce <RobotMoveDistObstacle+0x21e>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003500:	4b72      	ldr	r3, [pc, #456]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 8003502:	ed93 7a00 	vldr	s14, [r3]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	425b      	neglt	r3, r3
 800351e:	4a70      	ldr	r2, [pc, #448]	; (80036e0 <RobotMoveDistObstacle+0x330>)
 8003520:	fb82 1203 	smull	r1, r2, r2, r3
 8003524:	441a      	add	r2, r3
 8003526:	10d2      	asrs	r2, r2, #3
 8003528:	17db      	asrs	r3, r3, #31
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003534:	4b6b      	ldr	r3, [pc, #428]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003536:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 800353a:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	dd02      	ble.n	8003554 <RobotMoveDistObstacle+0x1a4>
 800354e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003552:	e00e      	b.n	8003572 <RobotMoveDistObstacle+0x1c2>
 8003554:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003556:	edd3 7a00 	vldr	s15, [r3]
 800355a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800355e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	d502      	bpl.n	800356e <RobotMoveDistObstacle+0x1be>
 8003568:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800356c:	e001      	b.n	8003572 <RobotMoveDistObstacle+0x1c2>
 800356e:	4b5d      	ldr	r3, [pc, #372]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a5c      	ldr	r2, [pc, #368]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003574:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_US) <= 5)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	ed93 7a00 	vldr	s14, [r3]
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800358a:	ee17 3a90 	vmov	r3, s15
 800358e:	f113 0f05 	cmn.w	r3, #5
 8003592:	db17      	blt.n	80035c4 <RobotMoveDistObstacle+0x214>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	ed93 7a00 	vldr	s14, [r3]
 800359a:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035a8:	ee17 3a90 	vmov	r3, s15
 80035ac:	2b05      	cmp	r3, #5
 80035ae:	dc09      	bgt.n	80035c4 <RobotMoveDistObstacle+0x214>
          speedScale *= 0.75;
 80035b0:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80035ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035be:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 80035c0:	edc3 7a00 	vstr	s15, [r3]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 80035c4:	4947      	ldr	r1, [pc, #284]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 80035c6:	2001      	movs	r0, #1
 80035c8:	f7ff fce6 	bl	8002f98 <StraightLineMoveSpeedScale>
 80035cc:	e067      	b.n	800369e <RobotMoveDistObstacle+0x2ee>
          oldspeed = speedScale;
        }*/
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 80035d0:	ed93 7a00 	vldr	s14, [r3]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035e2:	ee17 3a90 	vmov	r3, s15
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bfb8      	it	lt
 80035ea:	425b      	neglt	r3, r3
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <RobotMoveDistObstacle+0x330>)
 80035ee:	fb82 1203 	smull	r1, r2, r2, r3
 80035f2:	441a      	add	r2, r3
 80035f4:	10d2      	asrs	r2, r2, #3
 80035f6:	17db      	asrs	r3, r3, #31
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003602:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003604:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 800360a:	edd3 7a00 	vldr	s15, [r3]
 800360e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	dd02      	ble.n	8003622 <RobotMoveDistObstacle+0x272>
 800361c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003620:	e010      	b.n	8003644 <RobotMoveDistObstacle+0x294>
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc ff86 	bl	8000538 <__aeabi_f2d>
 800362c:	a320      	add	r3, pc, #128	; (adr r3, 80036b0 <RobotMoveDistObstacle+0x300>)
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f7fd fa4b 	bl	8000acc <__aeabi_dcmplt>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <RobotMoveDistObstacle+0x290>
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <RobotMoveDistObstacle+0x338>)
 800363e:	e001      	b.n	8003644 <RobotMoveDistObstacle+0x294>
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003646:	6013      	str	r3, [r2, #0]
        if (abs(*targetDist - obsDist_US) <= 5)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	ed93 7a00 	vldr	s14, [r3]
 800364e:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365c:	ee17 3a90 	vmov	r3, s15
 8003660:	f113 0f05 	cmn.w	r3, #5
 8003664:	db17      	blt.n	8003696 <RobotMoveDistObstacle+0x2e6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	ed93 7a00 	vldr	s14, [r3]
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <RobotMoveDistObstacle+0x31c>)
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800367a:	ee17 3a90 	vmov	r3, s15
 800367e:	2b05      	cmp	r3, #5
 8003680:	dc09      	bgt.n	8003696 <RobotMoveDistObstacle+0x2e6>
          speedScale *= 0.75;
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800368c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003696:	4913      	ldr	r1, [pc, #76]	; (80036e4 <RobotMoveDistObstacle+0x334>)
 8003698:	2002      	movs	r0, #2
 800369a:	f7ff fc7d 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 800369e:	f003 fca9 	bl	8006ff4 <HAL_GetTick>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <RobotMoveDistObstacle+0x328>)
 80036a6:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 80036a8:	e6a8      	b.n	80033fc <RobotMoveDistObstacle+0x4c>
 80036aa:	bf00      	nop
 80036ac:	f3af 8000 	nop.w
 80036b0:	9999999a 	.word	0x9999999a
 80036b4:	3fd99999 	.word	0x3fd99999
 80036b8:	200004e8 	.word	0x200004e8
 80036bc:	200004ee 	.word	0x200004ee
 80036c0:	20000518 	.word	0x20000518
 80036c4:	20000504 	.word	0x20000504
 80036c8:	2000052c 	.word	0x2000052c
 80036cc:	20000554 	.word	0x20000554
 80036d0:	447a0000 	.word	0x447a0000
 80036d4:	20000334 	.word	0x20000334
 80036d8:	200004f4 	.word	0x200004f4
 80036dc:	40020000 	.word	0x40020000
 80036e0:	88888889 	.word	0x88888889
 80036e4:	20000138 	.word	0x20000138
 80036e8:	3ecccccd 	.word	0x3ecccccd
      break;
 80036ec:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <RobotMoveDistObstacle+0x360>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <RobotMoveDistObstacle+0x360>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80036fe:	2104      	movs	r1, #4
 8003700:	4804      	ldr	r0, [pc, #16]	; (8003714 <RobotMoveDistObstacle+0x364>)
 8003702:	f006 fc0f 	bl	8009f24 <HAL_TIM_IC_Stop_IT>
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200003c4 	.word	0x200003c4
 8003714:	20000334 	.word	0x20000334

08003718 <RobotMoveDistObstacleMem>:
 *
 * @param targetDist Pointer to the target distance to be traveled.
 * @param speedMode The speed mode to be used for the movement.
 */
void RobotMoveDistObstacleMem(uint16_t *savedDistTick, float *targetDist, const uint8_t speedMode)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	71fb      	strb	r3, [r7, #7]
  angleNow = 0;
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <RobotMoveDistObstacleMem+0x290>)
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 800372e:	4b9f      	ldr	r3, [pc, #636]	; (80039ac <RobotMoveDistObstacleMem+0x294>)
 8003730:	2200      	movs	r2, #0
 8003732:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8003734:	489e      	ldr	r0, [pc, #632]	; (80039b0 <RobotMoveDistObstacleMem+0x298>)
 8003736:	f7fe ff48 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 800373a:	489e      	ldr	r0, [pc, #632]	; (80039b4 <RobotMoveDistObstacleMem+0x29c>)
 800373c:	f7fe ff45 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003740:	489d      	ldr	r0, [pc, #628]	; (80039b8 <RobotMoveDistObstacleMem+0x2a0>)
 8003742:	f7fe ff42 	bl	80025ca <PIDConfigReset>
  obsDist_US = 1000;
 8003746:	4b9d      	ldr	r3, [pc, #628]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 8003748:	4a9d      	ldr	r2, [pc, #628]	; (80039c0 <RobotMoveDistObstacleMem+0x2a8>)
 800374a:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Ultrasonic sensor start
 800374c:	2104      	movs	r1, #4
 800374e:	489d      	ldr	r0, [pc, #628]	; (80039c4 <RobotMoveDistObstacleMem+0x2ac>)
 8003750:	f006 fac0 	bl	8009cd4 <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 8003754:	f003 fc4e 	bl	8006ff4 <HAL_GetTick>
 8003758:	4603      	mov	r3, r0
 800375a:	4a9b      	ldr	r2, [pc, #620]	; (80039c8 <RobotMoveDistObstacleMem+0x2b0>)
 800375c:	6013      	str	r3, [r2, #0]
  distMem_DL = 0;
 800375e:	4b9b      	ldr	r3, [pc, #620]	; (80039cc <RobotMoveDistObstacleMem+0x2b4>)
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
  savedDistTick = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

  do
  {
    HCSR04_Read();
 8003768:	f7fe ff42 	bl	80025f0 <HCSR04_Read>
    osDelay(10); // give timer interrupt chance to update obsDist_US value
 800376c:	200a      	movs	r0, #10
 800376e:	f008 ffff 	bl	800c770 <osDelay>

    if (abs(*targetDist - obsDist_US) < 0.1)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	ed93 7a00 	vldr	s14, [r3]
 8003778:	4b90      	ldr	r3, [pc, #576]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003786:	ee17 3a90 	vmov	r3, s15
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0e      	blt.n	80037ac <RobotMoveDistObstacleMem+0x94>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	ed93 7a00 	vldr	s14, [r3]
 8003794:	4b89      	ldr	r3, [pc, #548]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800379e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037a2:	ee17 3a90 	vmov	r3, s15
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f340 80e6 	ble.w	8003978 <RobotMoveDistObstacleMem+0x260>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	ed93 7a00 	vldr	s14, [r3]
 80037b2:	4b82      	ldr	r3, [pc, #520]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	bf94      	ite	ls
 80037c2:	2301      	movls	r3, #1
 80037c4:	2300      	movhi	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f083 0301 	eor.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	2104      	movs	r1, #4
 80037d4:	487e      	ldr	r0, [pc, #504]	; (80039d0 <RobotMoveDistObstacleMem+0x2b8>)
 80037d6:	f004 fb4d 	bl	8007e74 <HAL_GPIO_WritePin>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	4b76      	ldr	r3, [pc, #472]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	2108      	movs	r1, #8
 80037fa:	4875      	ldr	r0, [pc, #468]	; (80039d0 <RobotMoveDistObstacleMem+0x2b8>)
 80037fc:	f004 fb3a 	bl	8007e74 <HAL_GPIO_WritePin>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	ed93 7a00 	vldr	s14, [r3]
 8003806:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003814:	bf94      	ite	ls
 8003816:	2301      	movls	r3, #1
 8003818:	2300      	movhi	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f083 0301 	eor.w	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	2120      	movs	r1, #32
 8003828:	4869      	ldr	r0, [pc, #420]	; (80039d0 <RobotMoveDistObstacleMem+0x2b8>)
 800382a:	f004 fb23 	bl	8007e74 <HAL_GPIO_WritePin>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	ed93 7a00 	vldr	s14, [r3]
 8003834:	4b61      	ldr	r3, [pc, #388]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	bf94      	ite	ls
 8003844:	2301      	movls	r3, #1
 8003846:	2300      	movhi	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	2110      	movs	r1, #16
 800384e:	4860      	ldr	r0, [pc, #384]	; (80039d0 <RobotMoveDistObstacleMem+0x2b8>)
 8003850:	f004 fb10 	bl	8007e74 <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 8003854:	f003 fbce 	bl	8006ff4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <RobotMoveDistObstacleMem+0x2b0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b13      	cmp	r3, #19
 8003862:	d981      	bls.n	8003768 <RobotMoveDistObstacleMem+0x50>
    {
      if (speedMode == SPEED_MODE_1)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d13f      	bne.n	80038ea <RobotMoveDistObstacleMem+0x1d2>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 800386c:	ed93 7a00 	vldr	s14, [r3]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	edd3 7a00 	vldr	s15, [r3]
 8003876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800387a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800387e:	ee17 3a90 	vmov	r3, s15
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfb8      	it	lt
 8003886:	425b      	neglt	r3, r3
 8003888:	4a52      	ldr	r2, [pc, #328]	; (80039d4 <RobotMoveDistObstacleMem+0x2bc>)
 800388a:	fb82 1203 	smull	r1, r2, r2, r3
 800388e:	441a      	add	r2, r3
 8003890:	10d2      	asrs	r2, r2, #3
 8003892:	17db      	asrs	r3, r3, #31
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389e:	4b4e      	ldr	r3, [pc, #312]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 80038a0:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 80038a4:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 80038a6:	edd3 7a00 	vldr	s15, [r3]
 80038aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b6:	dd02      	ble.n	80038be <RobotMoveDistObstacleMem+0x1a6>
 80038b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038bc:	e00e      	b.n	80038dc <RobotMoveDistObstacleMem+0x1c4>
 80038be:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d502      	bpl.n	80038d8 <RobotMoveDistObstacleMem+0x1c0>
 80038d2:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80038d6:	e001      	b.n	80038dc <RobotMoveDistObstacleMem+0x1c4>
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3e      	ldr	r2, [pc, #248]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 80038de:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 80038e0:	493d      	ldr	r1, [pc, #244]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7ff fb58 	bl	8002f98 <StraightLineMoveSpeedScale>
 80038e8:	e040      	b.n	800396c <RobotMoveDistObstacleMem+0x254>
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80038ea:	4b34      	ldr	r3, [pc, #208]	; (80039bc <RobotMoveDistObstacleMem+0x2a4>)
 80038ec:	ed93 7a00 	vldr	s14, [r3]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038fe:	ee17 3a90 	vmov	r3, s15
 8003902:	2b00      	cmp	r3, #0
 8003904:	bfb8      	it	lt
 8003906:	425b      	neglt	r3, r3
 8003908:	4a32      	ldr	r2, [pc, #200]	; (80039d4 <RobotMoveDistObstacleMem+0x2bc>)
 800390a:	fb82 1203 	smull	r1, r2, r2, r3
 800390e:	441a      	add	r2, r3
 8003910:	10d2      	asrs	r2, r2, #3
 8003912:	17db      	asrs	r3, r3, #31
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 8003920:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	dd02      	ble.n	800393e <RobotMoveDistObstacleMem+0x226>
 8003938:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800393c:	e010      	b.n	8003960 <RobotMoveDistObstacleMem+0x248>
 800393e:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fdf8 	bl	8000538 <__aeabi_f2d>
 8003948:	a315      	add	r3, pc, #84	; (adr r3, 80039a0 <RobotMoveDistObstacleMem+0x288>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f7fd f8bd 	bl	8000acc <__aeabi_dcmplt>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <RobotMoveDistObstacleMem+0x244>
 8003958:	4b20      	ldr	r3, [pc, #128]	; (80039dc <RobotMoveDistObstacleMem+0x2c4>)
 800395a:	e001      	b.n	8003960 <RobotMoveDistObstacleMem+0x248>
 800395c:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 8003962:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 8003964:	491c      	ldr	r1, [pc, #112]	; (80039d8 <RobotMoveDistObstacleMem+0x2c0>)
 8003966:	2002      	movs	r0, #2
 8003968:	f7ff fb16 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 800396c:	f003 fb42 	bl	8006ff4 <HAL_GetTick>
 8003970:	4603      	mov	r3, r0
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <RobotMoveDistObstacleMem+0x2b0>)
 8003974:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 8003976:	e6f7      	b.n	8003768 <RobotMoveDistObstacleMem+0x50>
      break;
 8003978:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 800397a:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <RobotMoveDistObstacleMem+0x2c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	635a      	str	r2, [r3, #52]	; 0x34
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <RobotMoveDistObstacleMem+0x2c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 800398a:	2104      	movs	r1, #4
 800398c:	480d      	ldr	r0, [pc, #52]	; (80039c4 <RobotMoveDistObstacleMem+0x2ac>)
 800398e:	f006 fac9 	bl	8009f24 <HAL_TIM_IC_Stop_IT>
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w
 80039a0:	9999999a 	.word	0x9999999a
 80039a4:	3fd99999 	.word	0x3fd99999
 80039a8:	200004e8 	.word	0x200004e8
 80039ac:	200004ee 	.word	0x200004ee
 80039b0:	20000518 	.word	0x20000518
 80039b4:	20000504 	.word	0x20000504
 80039b8:	2000052c 	.word	0x2000052c
 80039bc:	20000554 	.word	0x20000554
 80039c0:	447a0000 	.word	0x447a0000
 80039c4:	20000334 	.word	0x20000334
 80039c8:	200004f4 	.word	0x200004f4
 80039cc:	20000540 	.word	0x20000540
 80039d0:	40020000 	.word	0x40020000
 80039d4:	88888889 	.word	0x88888889
 80039d8:	20000138 	.word	0x20000138
 80039dc:	3ecccccd 	.word	0x3ecccccd
 80039e0:	200003c4 	.word	0x200003c4
 80039e4:	00000000 	.word	0x00000000

080039e8 <RobotMoveUntilIROvershoot>:
 *
 * @param isIR_R Determines whether to use the right or left IR sensor.
 *                1 for right, 0 for left.
 */
void RobotMoveUntilIROvershoot(int isIR_R)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 80039f0:	48ad      	ldr	r0, [pc, #692]	; (8003ca8 <RobotMoveUntilIROvershoot+0x2c0>)
 80039f2:	f7fe fdea 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80039f6:	48ad      	ldr	r0, [pc, #692]	; (8003cac <RobotMoveUntilIROvershoot+0x2c4>)
 80039f8:	f7fe fde7 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80039fc:	48ac      	ldr	r0, [pc, #688]	; (8003cb0 <RobotMoveUntilIROvershoot+0x2c8>)
 80039fe:	f7fe fde4 	bl	80025ca <PIDConfigReset>
  obsDist_IR_R = 0;
 8003a02:	4bac      	ldr	r3, [pc, #688]	; (8003cb4 <RobotMoveUntilIROvershoot+0x2cc>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0;
 8003a08:	4bab      	ldr	r3, [pc, #684]	; (8003cb8 <RobotMoveUntilIROvershoot+0x2d0>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003a0e:	4bab      	ldr	r3, [pc, #684]	; (8003cbc <RobotMoveUntilIROvershoot+0x2d4>)
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003a16:	4baa      	ldr	r3, [pc, #680]	; (8003cc0 <RobotMoveUntilIROvershoot+0x2d8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003a1c:	f003 faea 	bl	8006ff4 <HAL_GetTick>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4aa8      	ldr	r2, [pc, #672]	; (8003cc4 <RobotMoveUntilIROvershoot+0x2dc>)
 8003a24:	6013      	str	r3, [r2, #0]
  if (isIR_R)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8094 	beq.w	8003b56 <RobotMoveUntilIROvershoot+0x16e>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003a2e:	48a6      	ldr	r0, [pc, #664]	; (8003cc8 <RobotMoveUntilIROvershoot+0x2e0>)
 8003a30:	f003 fb54 	bl	80070dc <HAL_ADC_Start>
 8003a34:	2114      	movs	r1, #20
 8003a36:	48a4      	ldr	r0, [pc, #656]	; (8003cc8 <RobotMoveUntilIROvershoot+0x2e0>)
 8003a38:	f003 fc55 	bl	80072e6 <HAL_ADC_PollForConversion>
 8003a3c:	48a2      	ldr	r0, [pc, #648]	; (8003cc8 <RobotMoveUntilIROvershoot+0x2e0>)
 8003a3e:	f003 fcdd 	bl	80073fc <HAL_ADC_GetValue>
 8003a42:	4602      	mov	r2, r0
 8003a44:	4ba1      	ldr	r3, [pc, #644]	; (8003ccc <RobotMoveUntilIROvershoot+0x2e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4aa0      	ldr	r2, [pc, #640]	; (8003ccc <RobotMoveUntilIROvershoot+0x2e4>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4ba0      	ldr	r3, [pc, #640]	; (8003cd0 <RobotMoveUntilIROvershoot+0x2e8>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	4b9f      	ldr	r3, [pc, #636]	; (8003cd4 <RobotMoveUntilIROvershoot+0x2ec>)
 8003a56:	fb83 1302 	smull	r1, r3, r3, r2
 8003a5a:	1059      	asrs	r1, r3, #1
 8003a5c:	17d3      	asrs	r3, r2, #31
 8003a5e:	1ac9      	subs	r1, r1, r3
 8003a60:	460b      	mov	r3, r1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	1ad1      	subs	r1, r2, r3
 8003a68:	b28a      	uxth	r2, r1
 8003a6a:	4b99      	ldr	r3, [pc, #612]	; (8003cd0 <RobotMoveUntilIROvershoot+0x2e8>)
 8003a6c:	801a      	strh	r2, [r3, #0]
 8003a6e:	4b98      	ldr	r3, [pc, #608]	; (8003cd0 <RobotMoveUntilIROvershoot+0x2e8>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d12c      	bne.n	8003ad0 <RobotMoveUntilIROvershoot+0xe8>
 8003a76:	4b95      	ldr	r3, [pc, #596]	; (8003ccc <RobotMoveUntilIROvershoot+0x2e4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a95      	ldr	r2, [pc, #596]	; (8003cd0 <RobotMoveUntilIROvershoot+0x2e8>)
 8003a7c:	8812      	ldrh	r2, [r2, #0]
 8003a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fd36 	bl	80004f4 <__aeabi_ui2d>
 8003a88:	a37f      	add	r3, pc, #508	; (adr r3, 8003c88 <RobotMoveUntilIROvershoot+0x2a0>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fc fbf3 	bl	8000278 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	a37d      	add	r3, pc, #500	; (adr r3, 8003c90 <RobotMoveUntilIROvershoot+0x2a8>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f7fc fecc 	bl	800083c <__aeabi_ddiv>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f7fd f836 	bl	8000b1c <__aeabi_d2uiz>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	4b7f      	ldr	r3, [pc, #508]	; (8003cb4 <RobotMoveUntilIROvershoot+0x2cc>)
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <RobotMoveUntilIROvershoot+0x2e4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a84      	ldr	r2, [pc, #528]	; (8003cd0 <RobotMoveUntilIROvershoot+0x2e8>)
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	4b84      	ldr	r3, [pc, #528]	; (8003cd8 <RobotMoveUntilIROvershoot+0x2f0>)
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	4b80      	ldr	r3, [pc, #512]	; (8003ccc <RobotMoveUntilIROvershoot+0x2e4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003ad0:	2014      	movs	r0, #20
 8003ad2:	f008 fe4d 	bl	800c770 <osDelay>
      if (obsDist_IR_R > 35)
 8003ad6:	4b77      	ldr	r3, [pc, #476]	; (8003cb4 <RobotMoveUntilIROvershoot+0x2cc>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b23      	cmp	r3, #35	; 0x23
 8003adc:	d82e      	bhi.n	8003b3c <RobotMoveUntilIROvershoot+0x154>
        break;
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003ade:	f003 fa89 	bl	8006ff4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b77      	ldr	r3, [pc, #476]	; (8003cc4 <RobotMoveUntilIROvershoot+0x2dc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	d99f      	bls.n	8003a2e <RobotMoveUntilIROvershoot+0x46>
      {
        OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
 8003aee:	4b71      	ldr	r3, [pc, #452]	; (8003cb4 <RobotMoveUntilIROvershoot+0x2cc>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	230c      	movs	r3, #12
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2305      	movs	r3, #5
 8003afa:	2100      	movs	r1, #0
 8003afc:	2000      	movs	r0, #0
 8003afe:	f00b fd3d 	bl	800f57c <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2104      	movs	r1, #4
 8003b06:	4875      	ldr	r0, [pc, #468]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003b08:	f004 f9b4 	bl	8007e74 <HAL_GPIO_WritePin>
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	2108      	movs	r1, #8
 8003b10:	4872      	ldr	r0, [pc, #456]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003b12:	f004 f9af 	bl	8007e74 <HAL_GPIO_WritePin>
 8003b16:	2200      	movs	r2, #0
 8003b18:	2120      	movs	r1, #32
 8003b1a:	4870      	ldr	r0, [pc, #448]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003b1c:	f004 f9aa 	bl	8007e74 <HAL_GPIO_WritePin>
 8003b20:	2201      	movs	r2, #1
 8003b22:	2110      	movs	r1, #16
 8003b24:	486d      	ldr	r0, [pc, #436]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003b26:	f004 f9a5 	bl	8007e74 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003b2a:	2001      	movs	r0, #1
 8003b2c:	f7fe fda0 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003b30:	f003 fa60 	bl	8006ff4 <HAL_GetTick>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4a63      	ldr	r2, [pc, #396]	; (8003cc4 <RobotMoveUntilIROvershoot+0x2dc>)
 8003b38:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003b3a:	e778      	b.n	8003a2e <RobotMoveUntilIROvershoot+0x46>
        break;
 8003b3c:	bf00      	nop
      }

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003b3e:	4b68      	ldr	r3, [pc, #416]	; (8003ce0 <RobotMoveUntilIROvershoot+0x2f8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34
 8003b46:	4b66      	ldr	r3, [pc, #408]	; (8003ce0 <RobotMoveUntilIROvershoot+0x2f8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003b4e:	485e      	ldr	r0, [pc, #376]	; (8003cc8 <RobotMoveUntilIROvershoot+0x2e0>)
 8003b50:	f003 fb96 	bl	8007280 <HAL_ADC_Stop>

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 8003b54:	e092      	b.n	8003c7c <RobotMoveUntilIROvershoot+0x294>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003b56:	4863      	ldr	r0, [pc, #396]	; (8003ce4 <RobotMoveUntilIROvershoot+0x2fc>)
 8003b58:	f003 fac0 	bl	80070dc <HAL_ADC_Start>
 8003b5c:	2114      	movs	r1, #20
 8003b5e:	4861      	ldr	r0, [pc, #388]	; (8003ce4 <RobotMoveUntilIROvershoot+0x2fc>)
 8003b60:	f003 fbc1 	bl	80072e6 <HAL_ADC_PollForConversion>
 8003b64:	485f      	ldr	r0, [pc, #380]	; (8003ce4 <RobotMoveUntilIROvershoot+0x2fc>)
 8003b66:	f003 fc49 	bl	80073fc <HAL_ADC_GetValue>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ce8 <RobotMoveUntilIROvershoot+0x300>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4413      	add	r3, r2
 8003b72:	4a5d      	ldr	r2, [pc, #372]	; (8003ce8 <RobotMoveUntilIROvershoot+0x300>)
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b5d      	ldr	r3, [pc, #372]	; (8003cec <RobotMoveUntilIROvershoot+0x304>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	4b55      	ldr	r3, [pc, #340]	; (8003cd4 <RobotMoveUntilIROvershoot+0x2ec>)
 8003b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8003b82:	1059      	asrs	r1, r3, #1
 8003b84:	17d3      	asrs	r3, r2, #31
 8003b86:	1ac9      	subs	r1, r1, r3
 8003b88:	460b      	mov	r3, r1
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	1ad1      	subs	r1, r2, r3
 8003b90:	b28a      	uxth	r2, r1
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <RobotMoveUntilIROvershoot+0x304>)
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	4b55      	ldr	r3, [pc, #340]	; (8003cec <RobotMoveUntilIROvershoot+0x304>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d12c      	bne.n	8003bf8 <RobotMoveUntilIROvershoot+0x210>
 8003b9e:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <RobotMoveUntilIROvershoot+0x300>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a52      	ldr	r2, [pc, #328]	; (8003cec <RobotMoveUntilIROvershoot+0x304>)
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fca2 	bl	80004f4 <__aeabi_ui2d>
 8003bb0:	a339      	add	r3, pc, #228	; (adr r3, 8003c98 <RobotMoveUntilIROvershoot+0x2b0>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	f7fc fb5f 	bl	8000278 <__aeabi_dsub>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	a337      	add	r3, pc, #220	; (adr r3, 8003ca0 <RobotMoveUntilIROvershoot+0x2b8>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f7fc fe38 	bl	800083c <__aeabi_ddiv>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc ffa2 	bl	8000b1c <__aeabi_d2uiz>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	4b36      	ldr	r3, [pc, #216]	; (8003cb8 <RobotMoveUntilIROvershoot+0x2d0>)
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <RobotMoveUntilIROvershoot+0x300>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a41      	ldr	r2, [pc, #260]	; (8003cec <RobotMoveUntilIROvershoot+0x304>)
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <RobotMoveUntilIROvershoot+0x308>)
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <RobotMoveUntilIROvershoot+0x300>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003bf8:	2014      	movs	r0, #20
 8003bfa:	f008 fdb9 	bl	800c770 <osDelay>
      if (obsDist_IR_L > 35)
 8003bfe:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <RobotMoveUntilIROvershoot+0x2d0>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b23      	cmp	r3, #35	; 0x23
 8003c04:	d82e      	bhi.n	8003c64 <RobotMoveUntilIROvershoot+0x27c>
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003c06:	f003 f9f5 	bl	8006ff4 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <RobotMoveUntilIROvershoot+0x2dc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b09      	cmp	r3, #9
 8003c14:	d99f      	bls.n	8003b56 <RobotMoveUntilIROvershoot+0x16e>
        OLED_ShowNumber(0, 0, obsDist_IR_L, 5, 12);
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <RobotMoveUntilIROvershoot+0x2d0>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2305      	movs	r3, #5
 8003c22:	2100      	movs	r1, #0
 8003c24:	2000      	movs	r0, #0
 8003c26:	f00b fca9 	bl	800f57c <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	482b      	ldr	r0, [pc, #172]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003c30:	f004 f920 	bl	8007e74 <HAL_GPIO_WritePin>
 8003c34:	2201      	movs	r2, #1
 8003c36:	2108      	movs	r1, #8
 8003c38:	4828      	ldr	r0, [pc, #160]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003c3a:	f004 f91b 	bl	8007e74 <HAL_GPIO_WritePin>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2120      	movs	r1, #32
 8003c42:	4826      	ldr	r0, [pc, #152]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003c44:	f004 f916 	bl	8007e74 <HAL_GPIO_WritePin>
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2110      	movs	r1, #16
 8003c4c:	4823      	ldr	r0, [pc, #140]	; (8003cdc <RobotMoveUntilIROvershoot+0x2f4>)
 8003c4e:	f004 f911 	bl	8007e74 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003c52:	2001      	movs	r0, #1
 8003c54:	f7fe fd0c 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003c58:	f003 f9cc 	bl	8006ff4 <HAL_GetTick>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <RobotMoveUntilIROvershoot+0x2dc>)
 8003c60:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003c62:	e778      	b.n	8003b56 <RobotMoveUntilIROvershoot+0x16e>
        break;
 8003c64:	bf00      	nop
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <RobotMoveUntilIROvershoot+0x2f8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <RobotMoveUntilIROvershoot+0x2f8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003c76:	481b      	ldr	r0, [pc, #108]	; (8003ce4 <RobotMoveUntilIROvershoot+0x2fc>)
 8003c78:	f003 fb02 	bl	8007280 <HAL_ADC_Stop>
}
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	f3af 8000 	nop.w
 8003c88:	d78811b2 	.word	0xd78811b2
 8003c8c:	40aa5cf5 	.word	0x40aa5cf5
 8003c90:	e3e6c4c6 	.word	0xe3e6c4c6
 8003c94:	c04f98da 	.word	0xc04f98da
 8003c98:	31b9b670 	.word	0x31b9b670
 8003c9c:	40a9a8fd 	.word	0x40a9a8fd
 8003ca0:	725c3dee 	.word	0x725c3dee
 8003ca4:	c04e59dc 	.word	0xc04e59dc
 8003ca8:	20000518 	.word	0x20000518
 8003cac:	20000504 	.word	0x20000504
 8003cb0:	2000052c 	.word	0x2000052c
 8003cb4:	20000547 	.word	0x20000547
 8003cb8:	20000546 	.word	0x20000546
 8003cbc:	200004e8 	.word	0x200004e8
 8003cc0:	200004ee 	.word	0x200004ee
 8003cc4:	200004f4 	.word	0x200004f4
 8003cc8:	200001c0 	.word	0x200001c0
 8003ccc:	2000054c 	.word	0x2000054c
 8003cd0:	20000548 	.word	0x20000548
 8003cd4:	66666667 	.word	0x66666667
 8003cd8:	20000542 	.word	0x20000542
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	200003c4 	.word	0x200003c4
 8003ce4:	20000208 	.word	0x20000208
 8003ce8:	20000550 	.word	0x20000550
 8003cec:	2000054a 	.word	0x2000054a
 8003cf0:	20000544 	.word	0x20000544
 8003cf4:	00000000 	.word	0x00000000

08003cf8 <RobotMoveUntilIRCloseDist>:
 *
 * @param isIR_R Flag to indicate if the right IR sensor is being used.
 *                1 if right IR sensor is being used, 0 if left IR sensor is being used.
 */
void RobotMoveUntilIRCloseDist(int isIR_R)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 8003d00:	48a9      	ldr	r0, [pc, #676]	; (8003fa8 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003d02:	f7fe fc62 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003d06:	48a9      	ldr	r0, [pc, #676]	; (8003fac <RobotMoveUntilIRCloseDist+0x2b4>)
 8003d08:	f7fe fc5f 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003d0c:	48a8      	ldr	r0, [pc, #672]	; (8003fb0 <RobotMoveUntilIRCloseDist+0x2b8>)
 8003d0e:	f7fe fc5c 	bl	80025ca <PIDConfigReset>
  obsDist_IR_R = 0xFF;
 8003d12:	4ba8      	ldr	r3, [pc, #672]	; (8003fb4 <RobotMoveUntilIRCloseDist+0x2bc>)
 8003d14:	22ff      	movs	r2, #255	; 0xff
 8003d16:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0xFF;
 8003d18:	4ba7      	ldr	r3, [pc, #668]	; (8003fb8 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003d1e:	4ba7      	ldr	r3, [pc, #668]	; (8003fbc <RobotMoveUntilIRCloseDist+0x2c4>)
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003d26:	4ba6      	ldr	r3, [pc, #664]	; (8003fc0 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003d2c:	f003 f962 	bl	8006ff4 <HAL_GetTick>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4aa4      	ldr	r2, [pc, #656]	; (8003fc4 <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d34:	6013      	str	r3, [r2, #0]

  if (isIR_R)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8090 	beq.w	8003e5e <RobotMoveUntilIRCloseDist+0x166>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003d3e:	48a2      	ldr	r0, [pc, #648]	; (8003fc8 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003d40:	f003 f9cc 	bl	80070dc <HAL_ADC_Start>
 8003d44:	2114      	movs	r1, #20
 8003d46:	48a0      	ldr	r0, [pc, #640]	; (8003fc8 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003d48:	f003 facd 	bl	80072e6 <HAL_ADC_PollForConversion>
 8003d4c:	489e      	ldr	r0, [pc, #632]	; (8003fc8 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003d4e:	f003 fb55 	bl	80073fc <HAL_ADC_GetValue>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b9d      	ldr	r3, [pc, #628]	; (8003fcc <RobotMoveUntilIRCloseDist+0x2d4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4413      	add	r3, r2
 8003d5a:	4a9c      	ldr	r2, [pc, #624]	; (8003fcc <RobotMoveUntilIRCloseDist+0x2d4>)
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b9c      	ldr	r3, [pc, #624]	; (8003fd0 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	4b9b      	ldr	r3, [pc, #620]	; (8003fd4 <RobotMoveUntilIRCloseDist+0x2dc>)
 8003d66:	fb83 1302 	smull	r1, r3, r3, r2
 8003d6a:	1059      	asrs	r1, r3, #1
 8003d6c:	17d3      	asrs	r3, r2, #31
 8003d6e:	1ac9      	subs	r1, r1, r3
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	1ad1      	subs	r1, r2, r3
 8003d78:	b28a      	uxth	r2, r1
 8003d7a:	4b95      	ldr	r3, [pc, #596]	; (8003fd0 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003d7c:	801a      	strh	r2, [r3, #0]
 8003d7e:	4b94      	ldr	r3, [pc, #592]	; (8003fd0 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d12c      	bne.n	8003de0 <RobotMoveUntilIRCloseDist+0xe8>
 8003d86:	4b91      	ldr	r3, [pc, #580]	; (8003fcc <RobotMoveUntilIRCloseDist+0x2d4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a91      	ldr	r2, [pc, #580]	; (8003fd0 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003d8c:	8812      	ldrh	r2, [r2, #0]
 8003d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fbae 	bl	80004f4 <__aeabi_ui2d>
 8003d98:	a37b      	add	r3, pc, #492	; (adr r3, 8003f88 <RobotMoveUntilIRCloseDist+0x290>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fa6b 	bl	8000278 <__aeabi_dsub>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	a379      	add	r3, pc, #484	; (adr r3, 8003f90 <RobotMoveUntilIRCloseDist+0x298>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	f7fc fd44 	bl	800083c <__aeabi_ddiv>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f7fc feae 	bl	8000b1c <__aeabi_d2uiz>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b7b      	ldr	r3, [pc, #492]	; (8003fb4 <RobotMoveUntilIRCloseDist+0x2bc>)
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	4b80      	ldr	r3, [pc, #512]	; (8003fcc <RobotMoveUntilIRCloseDist+0x2d4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a80      	ldr	r2, [pc, #512]	; (8003fd0 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003dce:	8812      	ldrh	r2, [r2, #0]
 8003dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	4b80      	ldr	r3, [pc, #512]	; (8003fd8 <RobotMoveUntilIRCloseDist+0x2e0>)
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	4b7c      	ldr	r3, [pc, #496]	; (8003fcc <RobotMoveUntilIRCloseDist+0x2d4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
      OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
 8003de0:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <RobotMoveUntilIRCloseDist+0x2bc>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	230c      	movs	r3, #12
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2305      	movs	r3, #5
 8003dec:	2100      	movs	r1, #0
 8003dee:	2000      	movs	r0, #0
 8003df0:	f00b fbc4 	bl	800f57c <OLED_ShowNumber>
      // osDelay(20);
      // if (obsDist_IR_R < 25)
      //   break;
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003df4:	f003 f8fe 	bl	8006ff4 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <RobotMoveUntilIRCloseDist+0x2cc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d91b      	bls.n	8003e3c <RobotMoveUntilIRCloseDist+0x144>
      {
        // OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2104      	movs	r1, #4
 8003e08:	4874      	ldr	r0, [pc, #464]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e0a:	f004 f833 	bl	8007e74 <HAL_GPIO_WritePin>
 8003e0e:	2201      	movs	r2, #1
 8003e10:	2108      	movs	r1, #8
 8003e12:	4872      	ldr	r0, [pc, #456]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e14:	f004 f82e 	bl	8007e74 <HAL_GPIO_WritePin>
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	486f      	ldr	r0, [pc, #444]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e1e:	f004 f829 	bl	8007e74 <HAL_GPIO_WritePin>
 8003e22:	2201      	movs	r2, #1
 8003e24:	2110      	movs	r1, #16
 8003e26:	486d      	ldr	r0, [pc, #436]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e28:	f004 f824 	bl	8007e74 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f7fe fc1f 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003e32:	f003 f8df 	bl	8006ff4 <HAL_GetTick>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4a62      	ldr	r2, [pc, #392]	; (8003fc4 <RobotMoveUntilIRCloseDist+0x2cc>)
 8003e3a:	6013      	str	r3, [r2, #0]
      }

    } while (obsDist_IR_R >= 25);
 8003e3c:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <RobotMoveUntilIRCloseDist+0x2bc>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b18      	cmp	r3, #24
 8003e42:	f63f af7c 	bhi.w	8003d3e <RobotMoveUntilIRCloseDist+0x46>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003e46:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e4e:	4b64      	ldr	r3, [pc, #400]	; (8003fe0 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003e56:	485c      	ldr	r0, [pc, #368]	; (8003fc8 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003e58:	f003 fa12 	bl	8007280 <HAL_ADC_Stop>

    } while (obsDist_IR_L >= 25);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 8003e5c:	e08e      	b.n	8003f7c <RobotMoveUntilIRCloseDist+0x284>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003e5e:	4861      	ldr	r0, [pc, #388]	; (8003fe4 <RobotMoveUntilIRCloseDist+0x2ec>)
 8003e60:	f003 f93c 	bl	80070dc <HAL_ADC_Start>
 8003e64:	2114      	movs	r1, #20
 8003e66:	485f      	ldr	r0, [pc, #380]	; (8003fe4 <RobotMoveUntilIRCloseDist+0x2ec>)
 8003e68:	f003 fa3d 	bl	80072e6 <HAL_ADC_PollForConversion>
 8003e6c:	485d      	ldr	r0, [pc, #372]	; (8003fe4 <RobotMoveUntilIRCloseDist+0x2ec>)
 8003e6e:	f003 fac5 	bl	80073fc <HAL_ADC_GetValue>
 8003e72:	4602      	mov	r2, r0
 8003e74:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	4a5b      	ldr	r2, [pc, #364]	; (8003fe8 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	; (8003fec <RobotMoveUntilIRCloseDist+0x2f4>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <RobotMoveUntilIRCloseDist+0x2dc>)
 8003e86:	fb83 1302 	smull	r1, r3, r3, r2
 8003e8a:	1059      	asrs	r1, r3, #1
 8003e8c:	17d3      	asrs	r3, r2, #31
 8003e8e:	1ac9      	subs	r1, r1, r3
 8003e90:	460b      	mov	r3, r1
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	1ad1      	subs	r1, r2, r3
 8003e98:	b28a      	uxth	r2, r1
 8003e9a:	4b54      	ldr	r3, [pc, #336]	; (8003fec <RobotMoveUntilIRCloseDist+0x2f4>)
 8003e9c:	801a      	strh	r2, [r3, #0]
 8003e9e:	4b53      	ldr	r3, [pc, #332]	; (8003fec <RobotMoveUntilIRCloseDist+0x2f4>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d12c      	bne.n	8003f00 <RobotMoveUntilIRCloseDist+0x208>
 8003ea6:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a50      	ldr	r2, [pc, #320]	; (8003fec <RobotMoveUntilIRCloseDist+0x2f4>)
 8003eac:	8812      	ldrh	r2, [r2, #0]
 8003eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fc fb1e 	bl	80004f4 <__aeabi_ui2d>
 8003eb8:	a337      	add	r3, pc, #220	; (adr r3, 8003f98 <RobotMoveUntilIRCloseDist+0x2a0>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc f9db 	bl	8000278 <__aeabi_dsub>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	a335      	add	r3, pc, #212	; (adr r3, 8003fa0 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc fcb4 	bl	800083c <__aeabi_ddiv>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	f7fc fe1e 	bl	8000b1c <__aeabi_d2uiz>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <RobotMoveUntilIRCloseDist+0x2f4>)
 8003eee:	8812      	ldrh	r2, [r2, #0]
 8003ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <RobotMoveUntilIRCloseDist+0x2f8>)
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
      OLED_ShowNumber(0, 0, obsDist_IR_L, 5, 12);
 8003f00:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	230c      	movs	r3, #12
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f00b fb34 	bl	800f57c <OLED_ShowNumber>
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003f14:	f003 f86e 	bl	8006ff4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <RobotMoveUntilIRCloseDist+0x2cc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d91b      	bls.n	8003f5c <RobotMoveUntilIRCloseDist+0x264>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003f24:	2200      	movs	r2, #0
 8003f26:	2104      	movs	r1, #4
 8003f28:	482c      	ldr	r0, [pc, #176]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003f2a:	f003 ffa3 	bl	8007e74 <HAL_GPIO_WritePin>
 8003f2e:	2201      	movs	r2, #1
 8003f30:	2108      	movs	r1, #8
 8003f32:	482a      	ldr	r0, [pc, #168]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003f34:	f003 ff9e 	bl	8007e74 <HAL_GPIO_WritePin>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2120      	movs	r1, #32
 8003f3c:	4827      	ldr	r0, [pc, #156]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003f3e:	f003 ff99 	bl	8007e74 <HAL_GPIO_WritePin>
 8003f42:	2201      	movs	r2, #1
 8003f44:	2110      	movs	r1, #16
 8003f46:	4825      	ldr	r0, [pc, #148]	; (8003fdc <RobotMoveUntilIRCloseDist+0x2e4>)
 8003f48:	f003 ff94 	bl	8007e74 <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f7fe fb8f 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003f52:	f003 f84f 	bl	8006ff4 <HAL_GetTick>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <RobotMoveUntilIRCloseDist+0x2cc>)
 8003f5a:	6013      	str	r3, [r2, #0]
    } while (obsDist_IR_L >= 25);
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b18      	cmp	r3, #24
 8003f62:	f63f af7c 	bhi.w	8003e5e <RobotMoveUntilIRCloseDist+0x166>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003f66:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003f76:	481b      	ldr	r0, [pc, #108]	; (8003fe4 <RobotMoveUntilIRCloseDist+0x2ec>)
 8003f78:	f003 f982 	bl	8007280 <HAL_ADC_Stop>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	f3af 8000 	nop.w
 8003f88:	d78811b2 	.word	0xd78811b2
 8003f8c:	40aa5cf5 	.word	0x40aa5cf5
 8003f90:	e3e6c4c6 	.word	0xe3e6c4c6
 8003f94:	c04f98da 	.word	0xc04f98da
 8003f98:	31b9b670 	.word	0x31b9b670
 8003f9c:	40a9a8fd 	.word	0x40a9a8fd
 8003fa0:	725c3dee 	.word	0x725c3dee
 8003fa4:	c04e59dc 	.word	0xc04e59dc
 8003fa8:	20000518 	.word	0x20000518
 8003fac:	20000504 	.word	0x20000504
 8003fb0:	2000052c 	.word	0x2000052c
 8003fb4:	20000547 	.word	0x20000547
 8003fb8:	20000546 	.word	0x20000546
 8003fbc:	200004e8 	.word	0x200004e8
 8003fc0:	200004ee 	.word	0x200004ee
 8003fc4:	200004f4 	.word	0x200004f4
 8003fc8:	200001c0 	.word	0x200001c0
 8003fcc:	2000054c 	.word	0x2000054c
 8003fd0:	20000548 	.word	0x20000548
 8003fd4:	66666667 	.word	0x66666667
 8003fd8:	20000542 	.word	0x20000542
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	200003c4 	.word	0x200003c4
 8003fe4:	20000208 	.word	0x20000208
 8003fe8:	20000550 	.word	0x20000550
 8003fec:	2000054a 	.word	0x2000054a
 8003ff0:	20000544 	.word	0x20000544

08003ff4 <RobotTurnFC45>:

void RobotTurnFC45()
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  //  FC45
  targetAngle = -(45 - FCOFFSET);
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	; (800406c <RobotTurnFC45+0x78>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	3b2d      	subs	r3, #45	; 0x2d
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <RobotTurnFC45+0x7c>)
 8004008:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <RobotTurnFC45+0x80>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004014:	635a      	str	r2, [r3, #52]	; 0x34
 8004016:	4b17      	ldr	r3, [pc, #92]	; (8004074 <RobotTurnFC45+0x80>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f240 5235 	movw	r2, #1333	; 0x535
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN_MAX(&htim1, 1);
 8004020:	4b15      	ldr	r3, [pc, #84]	; (8004078 <RobotTurnFC45+0x84>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f240 1209 	movw	r2, #265	; 0x109
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
 800402a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800402e:	f002 ffed 	bl	800700c <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004032:	2200      	movs	r2, #0
 8004034:	2104      	movs	r1, #4
 8004036:	4811      	ldr	r0, [pc, #68]	; (800407c <RobotTurnFC45+0x88>)
 8004038:	f003 ff1c 	bl	8007e74 <HAL_GPIO_WritePin>
 800403c:	2201      	movs	r2, #1
 800403e:	2108      	movs	r1, #8
 8004040:	480e      	ldr	r0, [pc, #56]	; (800407c <RobotTurnFC45+0x88>)
 8004042:	f003 ff17 	bl	8007e74 <HAL_GPIO_WritePin>
 8004046:	2200      	movs	r2, #0
 8004048:	2120      	movs	r1, #32
 800404a:	480c      	ldr	r0, [pc, #48]	; (800407c <RobotTurnFC45+0x88>)
 800404c:	f003 ff12 	bl	8007e74 <HAL_GPIO_WritePin>
 8004050:	2201      	movs	r2, #1
 8004052:	2110      	movs	r1, #16
 8004054:	4809      	ldr	r0, [pc, #36]	; (800407c <RobotTurnFC45+0x88>)
 8004056:	f003 ff0d 	bl	8007e74 <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 800405a:	4805      	ldr	r0, [pc, #20]	; (8004070 <RobotTurnFC45+0x7c>)
 800405c:	f7ff f8fc 	bl	8003258 <RobotTurn>
  osDelay(300); // reset wheel
 8004060:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004064:	f008 fb84 	bl	800c770 <osDelay>
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000002 	.word	0x20000002
 8004070:	200004e4 	.word	0x200004e4
 8004074:	200003c4 	.word	0x200003c4
 8004078:	200002a4 	.word	0x200002a4
 800407c:	40020000 	.word	0x40020000

08004080 <RobotTurnFA45>:
  RobotTurn(&targetAngle);
  osDelay(300); // reset wheel
}

void RobotTurnFA45()
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  // FA45
  targetAngle = (45 - FAOFFSET);
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <RobotTurnFA45+0x78>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004094:	4b19      	ldr	r3, [pc, #100]	; (80040fc <RobotTurnFA45+0x7c>)
 8004096:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <RobotTurnFA45+0x80>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f240 5235 	movw	r2, #1333	; 0x535
 80040a2:	635a      	str	r2, [r3, #52]	; 0x34
 80040a4:	4b16      	ldr	r3, [pc, #88]	; (8004100 <RobotTurnFA45+0x80>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN(&htim1, 90);
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <RobotTurnFA45+0x84>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	225a      	movs	r2, #90	; 0x5a
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40
 80040b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040ba:	f002 ffa7 	bl	800700c <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80040be:	2200      	movs	r2, #0
 80040c0:	2104      	movs	r1, #4
 80040c2:	4811      	ldr	r0, [pc, #68]	; (8004108 <RobotTurnFA45+0x88>)
 80040c4:	f003 fed6 	bl	8007e74 <HAL_GPIO_WritePin>
 80040c8:	2201      	movs	r2, #1
 80040ca:	2108      	movs	r1, #8
 80040cc:	480e      	ldr	r0, [pc, #56]	; (8004108 <RobotTurnFA45+0x88>)
 80040ce:	f003 fed1 	bl	8007e74 <HAL_GPIO_WritePin>
 80040d2:	2200      	movs	r2, #0
 80040d4:	2120      	movs	r1, #32
 80040d6:	480c      	ldr	r0, [pc, #48]	; (8004108 <RobotTurnFA45+0x88>)
 80040d8:	f003 fecc 	bl	8007e74 <HAL_GPIO_WritePin>
 80040dc:	2201      	movs	r2, #1
 80040de:	2110      	movs	r1, #16
 80040e0:	4809      	ldr	r0, [pc, #36]	; (8004108 <RobotTurnFA45+0x88>)
 80040e2:	f003 fec7 	bl	8007e74 <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 80040e6:	4805      	ldr	r0, [pc, #20]	; (80040fc <RobotTurnFA45+0x7c>)
 80040e8:	f7ff f8b6 	bl	8003258 <RobotTurn>
  osDelay(300);
 80040ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040f0:	f008 fb3e 	bl	800c770 <osDelay>
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000003 	.word	0x20000003
 80040fc:	200004e4 	.word	0x200004e4
 8004100:	200003c4 	.word	0x200003c4
 8004104:	200002a4 	.word	0x200002a4
 8004108:	40020000 	.word	0x40020000

0800410c <RobotTurnFR30>:
  osDelay(300);
}

// For Task 2 Turn B
void RobotTurnFR30()
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  targetDist = 4;
 8004110:	4b41      	ldr	r3, [pc, #260]	; (8004218 <RobotTurnFR30+0x10c>)
 8004112:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004116:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004118:	2200      	movs	r2, #0
 800411a:	2101      	movs	r1, #1
 800411c:	483e      	ldr	r0, [pc, #248]	; (8004218 <RobotTurnFR30+0x10c>)
 800411e:	f7fe fc5f 	bl	80029e0 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8004122:	4b3e      	ldr	r3, [pc, #248]	; (800421c <RobotTurnFR30+0x110>)
 8004124:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004128:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004220 <RobotTurnFR30+0x114>
 800412c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004134:	dd02      	ble.n	800413c <RobotTurnFR30+0x30>
 8004136:	f240 1309 	movw	r3, #265	; 0x109
 800413a:	e012      	b.n	8004162 <RobotTurnFR30+0x56>
 800413c:	4b37      	ldr	r3, [pc, #220]	; (800421c <RobotTurnFR30+0x110>)
 800413e:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004142:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004224 <RobotTurnFR30+0x118>
 8004146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414e:	d501      	bpl.n	8004154 <RobotTurnFR30+0x48>
 8004150:	2346      	movs	r3, #70	; 0x46
 8004152:	e006      	b.n	8004162 <RobotTurnFR30+0x56>
 8004154:	4b31      	ldr	r3, [pc, #196]	; (800421c <RobotTurnFR30+0x110>)
 8004156:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 800415a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800415e:	ee17 3a90 	vmov	r3, s15
 8004162:	4a31      	ldr	r2, [pc, #196]	; (8004228 <RobotTurnFR30+0x11c>)
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	6413      	str	r3, [r2, #64]	; 0x40
 8004168:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800416c:	f002 ff4e 	bl	800700c <HAL_Delay>
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <RobotTurnFR30+0x110>)
 8004172:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004176:	4a2d      	ldr	r2, [pc, #180]	; (800422c <RobotTurnFR30+0x120>)
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <RobotTurnFR30+0x110>)
 800417c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	2104      	movs	r1, #4
 800418e:	4828      	ldr	r0, [pc, #160]	; (8004230 <RobotTurnFR30+0x124>)
 8004190:	f003 fe70 	bl	8007e74 <HAL_GPIO_WritePin>
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <RobotTurnFR30+0x110>)
 8004196:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	2108      	movs	r1, #8
 80041a8:	4821      	ldr	r0, [pc, #132]	; (8004230 <RobotTurnFR30+0x124>)
 80041aa:	f003 fe63 	bl	8007e74 <HAL_GPIO_WritePin>
 80041ae:	4b1b      	ldr	r3, [pc, #108]	; (800421c <RobotTurnFR30+0x110>)
 80041b0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	2120      	movs	r1, #32
 80041c2:	481b      	ldr	r0, [pc, #108]	; (8004230 <RobotTurnFR30+0x124>)
 80041c4:	f003 fe56 	bl	8007e74 <HAL_GPIO_WritePin>
 80041c8:	4b14      	ldr	r3, [pc, #80]	; (800421c <RobotTurnFR30+0x110>)
 80041ca:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	2110      	movs	r1, #16
 80041dc:	4814      	ldr	r0, [pc, #80]	; (8004230 <RobotTurnFR30+0x124>)
 80041de:	f003 fe49 	bl	8007e74 <HAL_GPIO_WritePin>
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <RobotTurnFR30+0x110>)
 80041e4:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <RobotTurnFR30+0x128>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	635a      	str	r2, [r3, #52]	; 0x34
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <RobotTurnFR30+0x110>)
 80041f0:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <RobotTurnFR30+0x128>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 80041fa:	480c      	ldr	r0, [pc, #48]	; (800422c <RobotTurnFR30+0x120>)
 80041fc:	f7ff f82c 	bl	8003258 <RobotTurn>
  targetDist = 2;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <RobotTurnFR30+0x10c>)
 8004202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004206:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <RobotTurnFR30+0x10c>)
 800420e:	f7fe fbe7 	bl	80029e0 <RobotMoveDist>
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200004f8 	.word	0x200004f8
 800421c:	20000004 	.word	0x20000004
 8004220:	43848000 	.word	0x43848000
 8004224:	428c0000 	.word	0x428c0000
 8004228:	200002a4 	.word	0x200002a4
 800422c:	200004e4 	.word	0x200004e4
 8004230:	40020000 	.word	0x40020000
 8004234:	200003c4 	.word	0x200003c4

08004238 <RobotTurnFL30>:
void RobotTurnFL30()
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  targetDist = 5;
 800423c:	4b40      	ldr	r3, [pc, #256]	; (8004340 <RobotTurnFL30+0x108>)
 800423e:	4a41      	ldr	r2, [pc, #260]	; (8004344 <RobotTurnFL30+0x10c>)
 8004240:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004242:	2200      	movs	r2, #0
 8004244:	2101      	movs	r1, #1
 8004246:	483e      	ldr	r0, [pc, #248]	; (8004340 <RobotTurnFL30+0x108>)
 8004248:	f7fe fbca 	bl	80029e0 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 800424c:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <RobotTurnFL30+0x110>)
 800424e:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004252:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800434c <RobotTurnFL30+0x114>
 8004256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	dd02      	ble.n	8004266 <RobotTurnFL30+0x2e>
 8004260:	f240 1309 	movw	r3, #265	; 0x109
 8004264:	e012      	b.n	800428c <RobotTurnFL30+0x54>
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <RobotTurnFL30+0x110>)
 8004268:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800426c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004350 <RobotTurnFL30+0x118>
 8004270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004278:	d501      	bpl.n	800427e <RobotTurnFL30+0x46>
 800427a:	2346      	movs	r3, #70	; 0x46
 800427c:	e006      	b.n	800428c <RobotTurnFL30+0x54>
 800427e:	4b32      	ldr	r3, [pc, #200]	; (8004348 <RobotTurnFL30+0x110>)
 8004280:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004288:	ee17 3a90 	vmov	r3, s15
 800428c:	4a31      	ldr	r2, [pc, #196]	; (8004354 <RobotTurnFL30+0x11c>)
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	6413      	str	r3, [r2, #64]	; 0x40
 8004292:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004296:	f002 feb9 	bl	800700c <HAL_Delay>
 800429a:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <RobotTurnFL30+0x110>)
 800429c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80042a0:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <RobotTurnFL30+0x120>)
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b28      	ldr	r3, [pc, #160]	; (8004348 <RobotTurnFL30+0x110>)
 80042a6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	2104      	movs	r1, #4
 80042b8:	4828      	ldr	r0, [pc, #160]	; (800435c <RobotTurnFL30+0x124>)
 80042ba:	f003 fddb 	bl	8007e74 <HAL_GPIO_WritePin>
 80042be:	4b22      	ldr	r3, [pc, #136]	; (8004348 <RobotTurnFL30+0x110>)
 80042c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	2108      	movs	r1, #8
 80042d2:	4822      	ldr	r0, [pc, #136]	; (800435c <RobotTurnFL30+0x124>)
 80042d4:	f003 fdce 	bl	8007e74 <HAL_GPIO_WritePin>
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <RobotTurnFL30+0x110>)
 80042da:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	2120      	movs	r1, #32
 80042ec:	481b      	ldr	r0, [pc, #108]	; (800435c <RobotTurnFL30+0x124>)
 80042ee:	f003 fdc1 	bl	8007e74 <HAL_GPIO_WritePin>
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <RobotTurnFL30+0x110>)
 80042f4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	2110      	movs	r1, #16
 8004306:	4815      	ldr	r0, [pc, #84]	; (800435c <RobotTurnFL30+0x124>)
 8004308:	f003 fdb4 	bl	8007e74 <HAL_GPIO_WritePin>
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <RobotTurnFL30+0x110>)
 800430e:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <RobotTurnFL30+0x128>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	635a      	str	r2, [r3, #52]	; 0x34
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <RobotTurnFL30+0x110>)
 800431a:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <RobotTurnFL30+0x128>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <RobotTurnFL30+0x120>)
 8004326:	f7fe ff97 	bl	8003258 <RobotTurn>
  targetDist = 3;
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <RobotTurnFL30+0x108>)
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <RobotTurnFL30+0x12c>)
 800432e:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004330:	2200      	movs	r2, #0
 8004332:	2100      	movs	r1, #0
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <RobotTurnFL30+0x108>)
 8004336:	f7fe fb53 	bl	80029e0 <RobotMoveDist>
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200004f8 	.word	0x200004f8
 8004344:	40a00000 	.word	0x40a00000
 8004348:	20000004 	.word	0x20000004
 800434c:	43848000 	.word	0x43848000
 8004350:	428c0000 	.word	0x428c0000
 8004354:	200002a4 	.word	0x200002a4
 8004358:	200004e4 	.word	0x200004e4
 800435c:	40020000 	.word	0x40020000
 8004360:	200003c4 	.word	0x200003c4
 8004364:	40400000 	.word	0x40400000

08004368 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8004370:	2064      	movs	r0, #100	; 0x64
 8004372:	f008 f9fd 	bl	800c770 <osDelay>
 8004376:	e7fb      	b.n	8004370 <runEncoder+0x8>

08004378 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    // IR_data_raw_acc_R = HAL_ADC_GetValue(&hadc1);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);

    // ir debugging
    HAL_ADC_Start(&hadc2);
 8004380:	481a      	ldr	r0, [pc, #104]	; (80043ec <runOledTask+0x74>)
 8004382:	f002 feab 	bl	80070dc <HAL_ADC_Start>
    HAL_ADC_Start(&hadc1);
 8004386:	481a      	ldr	r0, [pc, #104]	; (80043f0 <runOledTask+0x78>)
 8004388:	f002 fea8 	bl	80070dc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 20);
 800438c:	2114      	movs	r1, #20
 800438e:	4817      	ldr	r0, [pc, #92]	; (80043ec <runOledTask+0x74>)
 8004390:	f002 ffa9 	bl	80072e6 <HAL_ADC_PollForConversion>
    HAL_ADC_PollForConversion(&hadc1, 20);
 8004394:	2114      	movs	r1, #20
 8004396:	4816      	ldr	r0, [pc, #88]	; (80043f0 <runOledTask+0x78>)
 8004398:	f002 ffa5 	bl	80072e6 <HAL_ADC_PollForConversion>
    // HAL_UART_Transmit(&huart3, (uint8_t *)IR_data_raw_acc_R, 4, 0xFFFF);
    // HAL_ADC_Stop(&hadc1);
    // HAL_ADC_Start(&hadc2);
    // HAL_ADC_PollForConversion(&hadc2, 20);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);
    OLED_ShowNumber(0, 20, HAL_ADC_GetValue(&hadc2), 5, 12);
 800439c:	4813      	ldr	r0, [pc, #76]	; (80043ec <runOledTask+0x74>)
 800439e:	f003 f82d 	bl	80073fc <HAL_ADC_GetValue>
 80043a2:	4602      	mov	r2, r0
 80043a4:	230c      	movs	r3, #12
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2305      	movs	r3, #5
 80043aa:	2114      	movs	r1, #20
 80043ac:	2000      	movs	r0, #0
 80043ae:	f00b f8e5 	bl	800f57c <OLED_ShowNumber>
    OLED_ShowNumber(60, 20, HAL_ADC_GetValue(&hadc1), 5, 12);
 80043b2:	480f      	ldr	r0, [pc, #60]	; (80043f0 <runOledTask+0x78>)
 80043b4:	f003 f822 	bl	80073fc <HAL_ADC_GetValue>
 80043b8:	4602      	mov	r2, r0
 80043ba:	230c      	movs	r3, #12
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2305      	movs	r3, #5
 80043c0:	2114      	movs	r1, #20
 80043c2:	203c      	movs	r0, #60	; 0x3c
 80043c4:	f00b f8da 	bl	800f57c <OLED_ShowNumber>

    // char temp[10];
    // snprintf((char *)temp, sizeof(temp) - 1, "%d\n", HAL_ADC_GetValue(&hadc2));
    // HAL_UART_Transmit(&huart3, (uint8_t *)temp, strlen(temp), 0xFFFF);

    HAL_ADC_Stop(&hadc2);
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <runOledTask+0x74>)
 80043ca:	f002 ff59 	bl	8007280 <HAL_ADC_Stop>
    HAL_ADC_Stop(&hadc1);
 80043ce:	4808      	ldr	r0, [pc, #32]	; (80043f0 <runOledTask+0x78>)
 80043d0:	f002 ff56 	bl	8007280 <HAL_ADC_Stop>
    // us debugging
    // HCSR04_Read();
    // OLED_ShowNumber(0, 0, obsDist_US, 5, 12);

    // display current command
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 80043d4:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <runOledTask+0x7c>)
 80043d6:	2128      	movs	r1, #40	; 0x28
 80043d8:	2000      	movs	r0, #0
 80043da:	f00b f93d 	bl	800f658 <OLED_ShowString>

    OLED_Refresh_Gram();
 80043de:	f00a ff3d 	bl	800f25c <OLED_Refresh_Gram>
    osDelay(100);
 80043e2:	2064      	movs	r0, #100	; 0x64
 80043e4:	f008 f9c4 	bl	800c770 <osDelay>
    HAL_ADC_Start(&hadc2);
 80043e8:	e7ca      	b.n	8004380 <runOledTask+0x8>
 80043ea:	bf00      	nop
 80043ec:	20000208 	.word	0x20000208
 80043f0:	200001c0 	.word	0x200001c0
 80043f4:	2000048c 	.word	0x2000048c

080043f8 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FORWARD)
 8004400:	4b7b      	ldr	r3, [pc, #492]	; (80045f0 <runFWTask+0x1f8>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <runFWTask+0x1a>
      osDelay(1000);
 8004408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800440c:	f008 f9b0 	bl	800c770 <osDelay>
 8004410:	e7f6      	b.n	8004400 <runFWTask+0x8>
    else
    {
      targetDist = 0;
 8004412:	4b78      	ldr	r3, [pc, #480]	; (80045f4 <runFWTask+0x1fc>)
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 800441a:	4b77      	ldr	r3, [pc, #476]	; (80045f8 <runFWTask+0x200>)
 800441c:	2200      	movs	r2, #0
 800441e:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8004420:	4b76      	ldr	r3, [pc, #472]	; (80045fc <runFWTask+0x204>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d062      	beq.n	80044ee <runFWTask+0xf6>
      {

        angleNow = 0;
 8004428:	4b75      	ldr	r3, [pc, #468]	; (8004600 <runFWTask+0x208>)
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8004430:	4b74      	ldr	r3, [pc, #464]	; (8004604 <runFWTask+0x20c>)
 8004432:	2200      	movs	r2, #0
 8004434:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 8004436:	4874      	ldr	r0, [pc, #464]	; (8004608 <runFWTask+0x210>)
 8004438:	f7fe f8c7 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 800443c:	4873      	ldr	r0, [pc, #460]	; (800460c <runFWTask+0x214>)
 800443e:	f7fe f8c4 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8004442:	4873      	ldr	r0, [pc, #460]	; (8004610 <runFWTask+0x218>)
 8004444:	f7fe f8c1 	bl	80025ca <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004448:	2200      	movs	r2, #0
 800444a:	2104      	movs	r1, #4
 800444c:	4871      	ldr	r0, [pc, #452]	; (8004614 <runFWTask+0x21c>)
 800444e:	f003 fd11 	bl	8007e74 <HAL_GPIO_WritePin>
 8004452:	2201      	movs	r2, #1
 8004454:	2108      	movs	r1, #8
 8004456:	486f      	ldr	r0, [pc, #444]	; (8004614 <runFWTask+0x21c>)
 8004458:	f003 fd0c 	bl	8007e74 <HAL_GPIO_WritePin>
 800445c:	2200      	movs	r2, #0
 800445e:	2120      	movs	r1, #32
 8004460:	486c      	ldr	r0, [pc, #432]	; (8004614 <runFWTask+0x21c>)
 8004462:	f003 fd07 	bl	8007e74 <HAL_GPIO_WritePin>
 8004466:	2201      	movs	r2, #1
 8004468:	2110      	movs	r1, #16
 800446a:	486a      	ldr	r0, [pc, #424]	; (8004614 <runFWTask+0x21c>)
 800446c:	f003 fd02 	bl	8007e74 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 8004470:	4b69      	ldr	r3, [pc, #420]	; (8004618 <runFWTask+0x220>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2200      	movs	r2, #0
 8004476:	635a      	str	r2, [r3, #52]	; 0x34
 8004478:	4b67      	ldr	r3, [pc, #412]	; (8004618 <runFWTask+0x220>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2200      	movs	r2, #0
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
 8004480:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <runFWTask+0x1f8>)
 8004482:	781a      	ldrb	r2, [r3, #0]
 8004484:	4b65      	ldr	r3, [pc, #404]	; (800461c <runFWTask+0x224>)
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <runFWTask+0x1f8>)
 800448a:	2211      	movs	r2, #17
 800448c:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800448e:	4b64      	ldr	r3, [pc, #400]	; (8004620 <runFWTask+0x228>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8004494:	4b63      	ldr	r3, [pc, #396]	; (8004624 <runFWTask+0x22c>)
 8004496:	2264      	movs	r2, #100	; 0x64
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	4b62      	ldr	r3, [pc, #392]	; (8004624 <runFWTask+0x22c>)
 800449c:	2200      	movs	r2, #0
 800449e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80044a0:	4a61      	ldr	r2, [pc, #388]	; (8004628 <runFWTask+0x230>)
 80044a2:	210f      	movs	r1, #15
 80044a4:	4861      	ldr	r0, [pc, #388]	; (800462c <runFWTask+0x234>)
 80044a6:	f00b f995 	bl	800f7d4 <sniprintf>
 80044aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ae:	2206      	movs	r2, #6
 80044b0:	495f      	ldr	r1, [pc, #380]	; (8004630 <runFWTask+0x238>)
 80044b2:	4860      	ldr	r0, [pc, #384]	; (8004634 <runFWTask+0x23c>)
 80044b4:	f007 f811 	bl	800b4da <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 80044b8:	f002 fd9c 	bl	8006ff4 <HAL_GetTick>
 80044bc:	4603      	mov	r3, r0
 80044be:	4a5e      	ldr	r2, [pc, #376]	; (8004638 <runFWTask+0x240>)
 80044c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 80044c2:	4b4e      	ldr	r3, [pc, #312]	; (80045fc <runFWTask+0x204>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8090 	beq.w	80045ec <runFWTask+0x1f4>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 80044cc:	f002 fd92 	bl	8006ff4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b59      	ldr	r3, [pc, #356]	; (8004638 <runFWTask+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b09      	cmp	r3, #9
 80044da:	d9f2      	bls.n	80044c2 <runFWTask+0xca>
          {

            StraightLineMove(SPEED_MODE_T);
 80044dc:	2000      	movs	r0, #0
 80044de:	f7fe f8c7 	bl	8002670 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 80044e2:	f002 fd87 	bl	8006ff4 <HAL_GetTick>
 80044e6:	4603      	mov	r3, r0
 80044e8:	4a53      	ldr	r2, [pc, #332]	; (8004638 <runFWTask+0x240>)
 80044ea:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 80044ec:	e7e9      	b.n	80044c2 <runFWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 80044ee:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <runFWTask+0x22c>)
 80044f0:	885b      	ldrh	r3, [r3, #2]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <runFWTask+0x1fc>)
 80044fc:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 10, move mode must be forced to SLOW
        if (targetDist <= 15)
 8004500:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <runFWTask+0x1fc>)
 8004502:	edd3 7a00 	vldr	s15, [r3]
 8004506:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800450a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d802      	bhi.n	800451a <runFWTask+0x122>
          moveMode = SLOW;
 8004514:	4b49      	ldr	r3, [pc, #292]	; (800463c <runFWTask+0x244>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]

        if (targetDist >= 100)
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <runFWTask+0x1fc>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004640 <runFWTask+0x248>
 8004524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	db09      	blt.n	8004542 <runFWTask+0x14a>
          targetDist -= 2;
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <runFWTask+0x1fc>)
 8004530:	edd3 7a00 	vldr	s15, [r3]
 8004534:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800453c:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <runFWTask+0x1fc>)
 800453e:	edc3 7a00 	vstr	s15, [r3]

        if (moveMode == SLOW)
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <runFWTask+0x244>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <runFWTask+0x15e>
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800454a:	2200      	movs	r2, #0
 800454c:	2101      	movs	r1, #1
 800454e:	4829      	ldr	r0, [pc, #164]	; (80045f4 <runFWTask+0x1fc>)
 8004550:	f7fe fa46 	bl	80029e0 <RobotMoveDist>
 8004554:	e004      	b.n	8004560 <runFWTask+0x168>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 8004556:	2202      	movs	r2, #2
 8004558:	2101      	movs	r1, #1
 800455a:	4826      	ldr	r0, [pc, #152]	; (80045f4 <runFWTask+0x1fc>)
 800455c:	f7fe fa40 	bl	80029e0 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <runFWTask+0x220>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	635a      	str	r2, [r3, #52]	; 0x34
 8004568:	4b2b      	ldr	r3, [pc, #172]	; (8004618 <runFWTask+0x220>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2200      	movs	r2, #0
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <runFWTask+0x1f8>)
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	4b29      	ldr	r3, [pc, #164]	; (800461c <runFWTask+0x224>)
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <runFWTask+0x1f8>)
 800457a:	2211      	movs	r2, #17
 800457c:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <runFWTask+0x228>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004584:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <runFWTask+0x24c>)
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	4b2e      	ldr	r3, [pc, #184]	; (8004644 <runFWTask+0x24c>)
 800458a:	785b      	ldrb	r3, [r3, #1]
 800458c:	429a      	cmp	r2, r3
 800458e:	d112      	bne.n	80045b6 <runFWTask+0x1be>
        {
          __CLEAR_CURCMD(curCmd);
 8004590:	4b24      	ldr	r3, [pc, #144]	; (8004624 <runFWTask+0x22c>)
 8004592:	2264      	movs	r2, #100	; 0x64
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	4b23      	ldr	r3, [pc, #140]	; (8004624 <runFWTask+0x22c>)
 8004598:	2200      	movs	r2, #0
 800459a:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 800459c:	4a22      	ldr	r2, [pc, #136]	; (8004628 <runFWTask+0x230>)
 800459e:	210f      	movs	r1, #15
 80045a0:	4822      	ldr	r0, [pc, #136]	; (800462c <runFWTask+0x234>)
 80045a2:	f00b f917 	bl	800f7d4 <sniprintf>
 80045a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045aa:	2206      	movs	r2, #6
 80045ac:	4920      	ldr	r1, [pc, #128]	; (8004630 <runFWTask+0x238>)
 80045ae:	4821      	ldr	r0, [pc, #132]	; (8004634 <runFWTask+0x23c>)
 80045b0:	f006 ff93 	bl	800b4da <HAL_UART_Transmit>
 80045b4:	e724      	b.n	8004400 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 80045b6:	4b23      	ldr	r3, [pc, #140]	; (8004644 <runFWTask+0x24c>)
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	4a1a      	ldr	r2, [pc, #104]	; (8004624 <runFWTask+0x22c>)
 80045bc:	4921      	ldr	r1, [pc, #132]	; (8004644 <runFWTask+0x24c>)
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <runFWTask+0x24c>)
 80045c8:	785b      	ldrb	r3, [r3, #1]
 80045ca:	3301      	adds	r3, #1
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <runFWTask+0x24c>)
 80045ce:	7892      	ldrb	r2, [r2, #2]
 80045d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80045d4:	fb01 f202 	mul.w	r2, r1, r2
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <runFWTask+0x24c>)
 80045de:	705a      	strb	r2, [r3, #1]
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <runFWTask+0x250>)
 80045e2:	210f      	movs	r1, #15
 80045e4:	4811      	ldr	r0, [pc, #68]	; (800462c <runFWTask+0x234>)
 80045e6:	f00b f8f5 	bl	800f7d4 <sniprintf>
 80045ea:	e709      	b.n	8004400 <runFWTask+0x8>
            break;
 80045ec:	bf00      	nop
    if (curTask != TASK_MOVE_FORWARD)
 80045ee:	e707      	b.n	8004400 <runFWTask+0x8>
 80045f0:	20000134 	.word	0x20000134
 80045f4:	200004f8 	.word	0x200004f8
 80045f8:	200004fe 	.word	0x200004fe
 80045fc:	200004e0 	.word	0x200004e0
 8004600:	200004e8 	.word	0x200004e8
 8004604:	200004ee 	.word	0x200004ee
 8004608:	20000518 	.word	0x20000518
 800460c:	20000504 	.word	0x20000504
 8004610:	2000052c 	.word	0x2000052c
 8004614:	40020000 	.word	0x40020000
 8004618:	200003c4 	.word	0x200003c4
 800461c:	20000135 	.word	0x20000135
 8004620:	20000564 	.word	0x20000564
 8004624:	200004cc 	.word	0x200004cc
 8004628:	080101ec 	.word	0x080101ec
 800462c:	200004d0 	.word	0x200004d0
 8004630:	080101f4 	.word	0x080101f4
 8004634:	2000040c 	.word	0x2000040c
 8004638:	200004f4 	.word	0x200004f4
 800463c:	20000136 	.word	0x20000136
 8004640:	42c80000 	.word	0x42c80000
 8004644:	20000498 	.word	0x20000498
 8004648:	080101fc 	.word	0x080101fc

0800464c <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 8004654:	4b71      	ldr	r3, [pc, #452]	; (800481c <runBWTask+0x1d0>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d004      	beq.n	8004666 <runBWTask+0x1a>
      osDelay(1000);
 800465c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004660:	f008 f886 	bl	800c770 <osDelay>
 8004664:	e7f6      	b.n	8004654 <runBWTask+0x8>
    else
    {
      targetDist = 0;
 8004666:	4b6e      	ldr	r3, [pc, #440]	; (8004820 <runBWTask+0x1d4>)
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <runBWTask+0x1d8>)
 8004670:	2200      	movs	r2, #0
 8004672:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8004674:	4b6c      	ldr	r3, [pc, #432]	; (8004828 <runBWTask+0x1dc>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d061      	beq.n	8004740 <runBWTask+0xf4>
      {

        angleNow = 0;
 800467c:	4b6b      	ldr	r3, [pc, #428]	; (800482c <runBWTask+0x1e0>)
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8004684:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <runBWTask+0x1e4>)
 8004686:	2200      	movs	r2, #0
 8004688:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 800468a:	486a      	ldr	r0, [pc, #424]	; (8004834 <runBWTask+0x1e8>)
 800468c:	f7fd ff9d 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8004690:	4869      	ldr	r0, [pc, #420]	; (8004838 <runBWTask+0x1ec>)
 8004692:	f7fd ff9a 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidFast);
 8004696:	4869      	ldr	r0, [pc, #420]	; (800483c <runBWTask+0x1f0>)
 8004698:	f7fd ff97 	bl	80025ca <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 800469c:	2201      	movs	r2, #1
 800469e:	2104      	movs	r1, #4
 80046a0:	4867      	ldr	r0, [pc, #412]	; (8004840 <runBWTask+0x1f4>)
 80046a2:	f003 fbe7 	bl	8007e74 <HAL_GPIO_WritePin>
 80046a6:	2200      	movs	r2, #0
 80046a8:	2108      	movs	r1, #8
 80046aa:	4865      	ldr	r0, [pc, #404]	; (8004840 <runBWTask+0x1f4>)
 80046ac:	f003 fbe2 	bl	8007e74 <HAL_GPIO_WritePin>
 80046b0:	2201      	movs	r2, #1
 80046b2:	2120      	movs	r1, #32
 80046b4:	4862      	ldr	r0, [pc, #392]	; (8004840 <runBWTask+0x1f4>)
 80046b6:	f003 fbdd 	bl	8007e74 <HAL_GPIO_WritePin>
 80046ba:	2200      	movs	r2, #0
 80046bc:	2110      	movs	r1, #16
 80046be:	4860      	ldr	r0, [pc, #384]	; (8004840 <runBWTask+0x1f4>)
 80046c0:	f003 fbd8 	bl	8007e74 <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 80046c4:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <runBWTask+0x1f8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2200      	movs	r2, #0
 80046ca:	635a      	str	r2, [r3, #52]	; 0x34
 80046cc:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <runBWTask+0x1f8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2200      	movs	r2, #0
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
 80046d4:	4b51      	ldr	r3, [pc, #324]	; (800481c <runBWTask+0x1d0>)
 80046d6:	781a      	ldrb	r2, [r3, #0]
 80046d8:	4b5b      	ldr	r3, [pc, #364]	; (8004848 <runBWTask+0x1fc>)
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	4b4f      	ldr	r3, [pc, #316]	; (800481c <runBWTask+0x1d0>)
 80046de:	2211      	movs	r2, #17
 80046e0:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80046e2:	4b5a      	ldr	r3, [pc, #360]	; (800484c <runBWTask+0x200>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <runBWTask+0x204>)
 80046ea:	2264      	movs	r2, #100	; 0x64
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	4b58      	ldr	r3, [pc, #352]	; (8004850 <runBWTask+0x204>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80046f4:	4a57      	ldr	r2, [pc, #348]	; (8004854 <runBWTask+0x208>)
 80046f6:	210f      	movs	r1, #15
 80046f8:	4857      	ldr	r0, [pc, #348]	; (8004858 <runBWTask+0x20c>)
 80046fa:	f00b f86b 	bl	800f7d4 <sniprintf>
 80046fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004702:	2206      	movs	r2, #6
 8004704:	4955      	ldr	r1, [pc, #340]	; (800485c <runBWTask+0x210>)
 8004706:	4856      	ldr	r0, [pc, #344]	; (8004860 <runBWTask+0x214>)
 8004708:	f006 fee7 	bl	800b4da <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 800470c:	f002 fc72 	bl	8006ff4 <HAL_GetTick>
 8004710:	4603      	mov	r3, r0
 8004712:	4a54      	ldr	r2, [pc, #336]	; (8004864 <runBWTask+0x218>)
 8004714:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 8004716:	4b44      	ldr	r3, [pc, #272]	; (8004828 <runBWTask+0x1dc>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d07b      	beq.n	8004816 <runBWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 800471e:	f002 fc69 	bl	8006ff4 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <runBWTask+0x218>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b09      	cmp	r3, #9
 800472c:	d9f3      	bls.n	8004716 <runBWTask+0xca>
          {
            StraightLineMove(SPEED_MODE_T);
 800472e:	2000      	movs	r0, #0
 8004730:	f7fd ff9e 	bl	8002670 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 8004734:	f002 fc5e 	bl	8006ff4 <HAL_GetTick>
 8004738:	4603      	mov	r3, r0
 800473a:	4a4a      	ldr	r2, [pc, #296]	; (8004864 <runBWTask+0x218>)
 800473c:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 800473e:	e7ea      	b.n	8004716 <runBWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <runBWTask+0x204>)
 8004742:	885b      	ldrh	r3, [r3, #2]
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474c:	4b34      	ldr	r3, [pc, #208]	; (8004820 <runBWTask+0x1d4>)
 800474e:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 8004752:	4b33      	ldr	r3, [pc, #204]	; (8004820 <runBWTask+0x1d4>)
 8004754:	edd3 7a00 	vldr	s15, [r3]
 8004758:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800475c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004764:	d802      	bhi.n	800476c <runBWTask+0x120>
          moveMode = SLOW;
 8004766:	4b40      	ldr	r3, [pc, #256]	; (8004868 <runBWTask+0x21c>)
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
        if (moveMode == SLOW)
 800476c:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <runBWTask+0x21c>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <runBWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	4829      	ldr	r0, [pc, #164]	; (8004820 <runBWTask+0x1d4>)
 800477a:	f7fe f931 	bl	80029e0 <RobotMoveDist>
 800477e:	e004      	b.n	800478a <runBWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 8004780:	2202      	movs	r2, #2
 8004782:	2100      	movs	r1, #0
 8004784:	4826      	ldr	r0, [pc, #152]	; (8004820 <runBWTask+0x1d4>)
 8004786:	f7fe f92b 	bl	80029e0 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 800478a:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <runBWTask+0x1f8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2200      	movs	r2, #0
 8004790:	635a      	str	r2, [r3, #52]	; 0x34
 8004792:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <runBWTask+0x1f8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
 800479a:	4b20      	ldr	r3, [pc, #128]	; (800481c <runBWTask+0x1d0>)
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <runBWTask+0x1fc>)
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <runBWTask+0x1d0>)
 80047a4:	2211      	movs	r2, #17
 80047a6:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <runBWTask+0x200>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <runBWTask+0x220>)
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <runBWTask+0x220>)
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d112      	bne.n	80047e0 <runBWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <runBWTask+0x204>)
 80047bc:	2264      	movs	r2, #100	; 0x64
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <runBWTask+0x204>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 80047c6:	4a23      	ldr	r2, [pc, #140]	; (8004854 <runBWTask+0x208>)
 80047c8:	210f      	movs	r1, #15
 80047ca:	4823      	ldr	r0, [pc, #140]	; (8004858 <runBWTask+0x20c>)
 80047cc:	f00b f802 	bl	800f7d4 <sniprintf>
 80047d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d4:	2206      	movs	r2, #6
 80047d6:	4921      	ldr	r1, [pc, #132]	; (800485c <runBWTask+0x210>)
 80047d8:	4821      	ldr	r0, [pc, #132]	; (8004860 <runBWTask+0x214>)
 80047da:	f006 fe7e 	bl	800b4da <HAL_UART_Transmit>
 80047de:	e739      	b.n	8004654 <runBWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 80047e0:	4b22      	ldr	r3, [pc, #136]	; (800486c <runBWTask+0x220>)
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	4a1a      	ldr	r2, [pc, #104]	; (8004850 <runBWTask+0x204>)
 80047e6:	4921      	ldr	r1, [pc, #132]	; (800486c <runBWTask+0x220>)
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <runBWTask+0x220>)
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <runBWTask+0x220>)
 80047f8:	7892      	ldrb	r2, [r2, #2]
 80047fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80047fe:	fb01 f202 	mul.w	r2, r1, r2
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b19      	ldr	r3, [pc, #100]	; (800486c <runBWTask+0x220>)
 8004808:	705a      	strb	r2, [r3, #1]
 800480a:	4a19      	ldr	r2, [pc, #100]	; (8004870 <runBWTask+0x224>)
 800480c:	210f      	movs	r1, #15
 800480e:	4812      	ldr	r0, [pc, #72]	; (8004858 <runBWTask+0x20c>)
 8004810:	f00a ffe0 	bl	800f7d4 <sniprintf>
 8004814:	e71e      	b.n	8004654 <runBWTask+0x8>
            break;
 8004816:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 8004818:	e71c      	b.n	8004654 <runBWTask+0x8>
 800481a:	bf00      	nop
 800481c:	20000134 	.word	0x20000134
 8004820:	200004f8 	.word	0x200004f8
 8004824:	200004fe 	.word	0x200004fe
 8004828:	200004e0 	.word	0x200004e0
 800482c:	200004e8 	.word	0x200004e8
 8004830:	200004ee 	.word	0x200004ee
 8004834:	20000518 	.word	0x20000518
 8004838:	20000504 	.word	0x20000504
 800483c:	2000052c 	.word	0x2000052c
 8004840:	40020000 	.word	0x40020000
 8004844:	200003c4 	.word	0x200003c4
 8004848:	20000135 	.word	0x20000135
 800484c:	20000564 	.word	0x20000564
 8004850:	200004cc 	.word	0x200004cc
 8004854:	080101ec 	.word	0x080101ec
 8004858:	200004d0 	.word	0x200004d0
 800485c:	080101f4 	.word	0x080101f4
 8004860:	2000040c 	.word	0x2000040c
 8004864:	200004f4 	.word	0x200004f4
 8004868:	20000136 	.word	0x20000136
 800486c:	20000498 	.word	0x20000498
 8004870:	080101fc 	.word	0x080101fc

08004874 <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 800487c:	4b94      	ldr	r3, [pc, #592]	; (8004ad0 <runFLTask+0x25c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d004      	beq.n	800488e <runFLTask+0x1a>
      osDelay(1000);
 8004884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004888:	f007 ff72 	bl	800c770 <osDelay>
 800488c:	e7f6      	b.n	800487c <runFLTask+0x8>
    else
    {

      switch (curCmd.val)
 800488e:	4b91      	ldr	r3, [pc, #580]	; (8004ad4 <runFLTask+0x260>)
 8004890:	885b      	ldrh	r3, [r3, #2]
 8004892:	2b14      	cmp	r3, #20
 8004894:	f000 8083 	beq.w	800499e <runFLTask+0x12a>
 8004898:	2b1e      	cmp	r3, #30
 800489a:	f040 80f8 	bne.w	8004a8e <runFLTask+0x21a>
      {
      case 30: // FL30 (3x2)
        targetDist = 5;
 800489e:	4b8e      	ldr	r3, [pc, #568]	; (8004ad8 <runFLTask+0x264>)
 80048a0:	4a8e      	ldr	r2, [pc, #568]	; (8004adc <runFLTask+0x268>)
 80048a2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80048a4:	2200      	movs	r2, #0
 80048a6:	2101      	movs	r1, #1
 80048a8:	488b      	ldr	r0, [pc, #556]	; (8004ad8 <runFLTask+0x264>)
 80048aa:	f7fe f899 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 80048ae:	4b8c      	ldr	r3, [pc, #560]	; (8004ae0 <runFLTask+0x26c>)
 80048b0:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80048b4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004ae4 <runFLTask+0x270>
 80048b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	dd02      	ble.n	80048c8 <runFLTask+0x54>
 80048c2:	f240 1309 	movw	r3, #265	; 0x109
 80048c6:	e012      	b.n	80048ee <runFLTask+0x7a>
 80048c8:	4b85      	ldr	r3, [pc, #532]	; (8004ae0 <runFLTask+0x26c>)
 80048ca:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80048ce:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004ae8 <runFLTask+0x274>
 80048d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	d501      	bpl.n	80048e0 <runFLTask+0x6c>
 80048dc:	2346      	movs	r3, #70	; 0x46
 80048de:	e006      	b.n	80048ee <runFLTask+0x7a>
 80048e0:	4b7f      	ldr	r3, [pc, #508]	; (8004ae0 <runFLTask+0x26c>)
 80048e2:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80048e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ea:	ee17 3a90 	vmov	r3, s15
 80048ee:	4a7f      	ldr	r2, [pc, #508]	; (8004aec <runFLTask+0x278>)
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	6413      	str	r3, [r2, #64]	; 0x40
 80048f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80048f8:	f002 fb88 	bl	800700c <HAL_Delay>
 80048fc:	4b78      	ldr	r3, [pc, #480]	; (8004ae0 <runFLTask+0x26c>)
 80048fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004902:	4a7b      	ldr	r2, [pc, #492]	; (8004af0 <runFLTask+0x27c>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b76      	ldr	r3, [pc, #472]	; (8004ae0 <runFLTask+0x26c>)
 8004908:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	2104      	movs	r1, #4
 800491a:	4876      	ldr	r0, [pc, #472]	; (8004af4 <runFLTask+0x280>)
 800491c:	f003 faaa 	bl	8007e74 <HAL_GPIO_WritePin>
 8004920:	4b6f      	ldr	r3, [pc, #444]	; (8004ae0 <runFLTask+0x26c>)
 8004922:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	2108      	movs	r1, #8
 8004934:	486f      	ldr	r0, [pc, #444]	; (8004af4 <runFLTask+0x280>)
 8004936:	f003 fa9d 	bl	8007e74 <HAL_GPIO_WritePin>
 800493a:	4b69      	ldr	r3, [pc, #420]	; (8004ae0 <runFLTask+0x26c>)
 800493c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	2120      	movs	r1, #32
 800494e:	4869      	ldr	r0, [pc, #420]	; (8004af4 <runFLTask+0x280>)
 8004950:	f003 fa90 	bl	8007e74 <HAL_GPIO_WritePin>
 8004954:	4b62      	ldr	r3, [pc, #392]	; (8004ae0 <runFLTask+0x26c>)
 8004956:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	2110      	movs	r1, #16
 8004968:	4862      	ldr	r0, [pc, #392]	; (8004af4 <runFLTask+0x280>)
 800496a:	f003 fa83 	bl	8007e74 <HAL_GPIO_WritePin>
 800496e:	4b5c      	ldr	r3, [pc, #368]	; (8004ae0 <runFLTask+0x26c>)
 8004970:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 8004974:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <runFLTask+0x284>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	635a      	str	r2, [r3, #52]	; 0x34
 800497a:	4b59      	ldr	r3, [pc, #356]	; (8004ae0 <runFLTask+0x26c>)
 800497c:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8004980:	4b5d      	ldr	r3, [pc, #372]	; (8004af8 <runFLTask+0x284>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004986:	485a      	ldr	r0, [pc, #360]	; (8004af0 <runFLTask+0x27c>)
 8004988:	f7fe fc66 	bl	8003258 <RobotTurn>
        targetDist = 3;
 800498c:	4b52      	ldr	r3, [pc, #328]	; (8004ad8 <runFLTask+0x264>)
 800498e:	4a5b      	ldr	r2, [pc, #364]	; (8004afc <runFLTask+0x288>)
 8004990:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	4850      	ldr	r0, [pc, #320]	; (8004ad8 <runFLTask+0x264>)
 8004998:	f7fe f822 	bl	80029e0 <RobotMoveDist>
        break;
 800499c:	e111      	b.n	8004bc2 <runFLTask+0x34e>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 5;
 800499e:	4b4e      	ldr	r3, [pc, #312]	; (8004ad8 <runFLTask+0x264>)
 80049a0:	4a4e      	ldr	r2, [pc, #312]	; (8004adc <runFLTask+0x268>)
 80049a2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2101      	movs	r1, #1
 80049a8:	484b      	ldr	r0, [pc, #300]	; (8004ad8 <runFLTask+0x264>)
 80049aa:	f7fe f819 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 80049ae:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <runFLTask+0x26c>)
 80049b0:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80049b4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004ae4 <runFLTask+0x270>
 80049b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c0:	dd02      	ble.n	80049c8 <runFLTask+0x154>
 80049c2:	f240 1309 	movw	r3, #265	; 0x109
 80049c6:	e012      	b.n	80049ee <runFLTask+0x17a>
 80049c8:	4b45      	ldr	r3, [pc, #276]	; (8004ae0 <runFLTask+0x26c>)
 80049ca:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80049ce:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004ae8 <runFLTask+0x274>
 80049d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	d501      	bpl.n	80049e0 <runFLTask+0x16c>
 80049dc:	2346      	movs	r3, #70	; 0x46
 80049de:	e006      	b.n	80049ee <runFLTask+0x17a>
 80049e0:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <runFLTask+0x26c>)
 80049e2:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80049e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ea:	ee17 3a90 	vmov	r3, s15
 80049ee:	4a3f      	ldr	r2, [pc, #252]	; (8004aec <runFLTask+0x278>)
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	6413      	str	r3, [r2, #64]	; 0x40
 80049f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80049f8:	f002 fb08 	bl	800700c <HAL_Delay>
 80049fc:	4b38      	ldr	r3, [pc, #224]	; (8004ae0 <runFLTask+0x26c>)
 80049fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a02:	4a3b      	ldr	r2, [pc, #236]	; (8004af0 <runFLTask+0x27c>)
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <runFLTask+0x26c>)
 8004a08:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	2104      	movs	r1, #4
 8004a1a:	4836      	ldr	r0, [pc, #216]	; (8004af4 <runFLTask+0x280>)
 8004a1c:	f003 fa2a 	bl	8007e74 <HAL_GPIO_WritePin>
 8004a20:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <runFLTask+0x26c>)
 8004a22:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	2108      	movs	r1, #8
 8004a34:	482f      	ldr	r0, [pc, #188]	; (8004af4 <runFLTask+0x280>)
 8004a36:	f003 fa1d 	bl	8007e74 <HAL_GPIO_WritePin>
 8004a3a:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <runFLTask+0x26c>)
 8004a3c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2120      	movs	r1, #32
 8004a4e:	4829      	ldr	r0, [pc, #164]	; (8004af4 <runFLTask+0x280>)
 8004a50:	f003 fa10 	bl	8007e74 <HAL_GPIO_WritePin>
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <runFLTask+0x26c>)
 8004a56:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	2110      	movs	r1, #16
 8004a68:	4822      	ldr	r0, [pc, #136]	; (8004af4 <runFLTask+0x280>)
 8004a6a:	f003 fa03 	bl	8007e74 <HAL_GPIO_WritePin>
 8004a6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <runFLTask+0x26c>)
 8004a70:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8004a74:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <runFLTask+0x284>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <runFLTask+0x26c>)
 8004a7c:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <runFLTask+0x284>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004a86:	481a      	ldr	r0, [pc, #104]	; (8004af0 <runFLTask+0x27c>)
 8004a88:	f7fe fbe6 	bl	8003258 <RobotTurn>
        break;
 8004a8c:	e099      	b.n	8004bc2 <runFLTask+0x34e>
      default: // FL00 (indoor 3x1)
        targetDist = 11;
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <runFLTask+0x264>)
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <runFLTask+0x28c>)
 8004a92:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2101      	movs	r1, #1
 8004a98:	480f      	ldr	r0, [pc, #60]	; (8004ad8 <runFLTask+0x264>)
 8004a9a:	f7fd ffa1 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <runFLTask+0x26c>)
 8004aa0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004aa4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004ae4 <runFLTask+0x270>
 8004aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	dd02      	ble.n	8004ab8 <runFLTask+0x244>
 8004ab2:	f240 1309 	movw	r3, #265	; 0x109
 8004ab6:	e02c      	b.n	8004b12 <runFLTask+0x29e>
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <runFLTask+0x26c>)
 8004aba:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004abe:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004ae8 <runFLTask+0x274>
 8004ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aca:	d51b      	bpl.n	8004b04 <runFLTask+0x290>
 8004acc:	2346      	movs	r3, #70	; 0x46
 8004ace:	e020      	b.n	8004b12 <runFLTask+0x29e>
 8004ad0:	20000134 	.word	0x20000134
 8004ad4:	200004cc 	.word	0x200004cc
 8004ad8:	200004f8 	.word	0x200004f8
 8004adc:	40a00000 	.word	0x40a00000
 8004ae0:	20000004 	.word	0x20000004
 8004ae4:	43848000 	.word	0x43848000
 8004ae8:	428c0000 	.word	0x428c0000
 8004aec:	200002a4 	.word	0x200002a4
 8004af0:	200004e4 	.word	0x200004e4
 8004af4:	40020000 	.word	0x40020000
 8004af8:	200003c4 	.word	0x200003c4
 8004afc:	40400000 	.word	0x40400000
 8004b00:	41300000 	.word	0x41300000
 8004b04:	4b4e      	ldr	r3, [pc, #312]	; (8004c40 <runFLTask+0x3cc>)
 8004b06:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 3a90 	vmov	r3, s15
 8004b12:	4a4c      	ldr	r2, [pc, #304]	; (8004c44 <runFLTask+0x3d0>)
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	6413      	str	r3, [r2, #64]	; 0x40
 8004b18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004b1c:	f002 fa76 	bl	800700c <HAL_Delay>
 8004b20:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <runFLTask+0x3cc>)
 8004b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b24:	4a48      	ldr	r2, [pc, #288]	; (8004c48 <runFLTask+0x3d4>)
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <runFLTask+0x3cc>)
 8004b2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf0c      	ite	eq
 8004b32:	2301      	moveq	r3, #1
 8004b34:	2300      	movne	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	4843      	ldr	r0, [pc, #268]	; (8004c4c <runFLTask+0x3d8>)
 8004b3e:	f003 f999 	bl	8007e74 <HAL_GPIO_WritePin>
 8004b42:	4b3f      	ldr	r3, [pc, #252]	; (8004c40 <runFLTask+0x3cc>)
 8004b44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	2108      	movs	r1, #8
 8004b56:	483d      	ldr	r0, [pc, #244]	; (8004c4c <runFLTask+0x3d8>)
 8004b58:	f003 f98c 	bl	8007e74 <HAL_GPIO_WritePin>
 8004b5c:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <runFLTask+0x3cc>)
 8004b5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2120      	movs	r1, #32
 8004b70:	4836      	ldr	r0, [pc, #216]	; (8004c4c <runFLTask+0x3d8>)
 8004b72:	f003 f97f 	bl	8007e74 <HAL_GPIO_WritePin>
 8004b76:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <runFLTask+0x3cc>)
 8004b78:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	2110      	movs	r1, #16
 8004b8a:	4830      	ldr	r0, [pc, #192]	; (8004c4c <runFLTask+0x3d8>)
 8004b8c:	f003 f972 	bl	8007e74 <HAL_GPIO_WritePin>
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <runFLTask+0x3cc>)
 8004b92:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8004b96:	4b2e      	ldr	r3, [pc, #184]	; (8004c50 <runFLTask+0x3dc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b9c:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <runFLTask+0x3cc>)
 8004b9e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <runFLTask+0x3dc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004ba8:	4827      	ldr	r0, [pc, #156]	; (8004c48 <runFLTask+0x3d4>)
 8004baa:	f7fe fb55 	bl	8003258 <RobotTurn>
        targetDist = 2;
 8004bae:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <runFLTask+0x3e0>)
 8004bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bb4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4826      	ldr	r0, [pc, #152]	; (8004c54 <runFLTask+0x3e0>)
 8004bbc:	f7fd ff10 	bl	80029e0 <RobotMoveDist>

        break;
 8004bc0:	bf00      	nop
      }
      clickOnce = 0;
 8004bc2:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <runFLTask+0x3e4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004bc8:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <runFLTask+0x3e8>)
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <runFLTask+0x3ec>)
 8004bce:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <runFLTask+0x3e8>)
 8004bd2:	2211      	movs	r2, #17
 8004bd4:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004bd6:	4b23      	ldr	r3, [pc, #140]	; (8004c64 <runFLTask+0x3f0>)
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <runFLTask+0x3f0>)
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d112      	bne.n	8004c08 <runFLTask+0x394>
      {
        __CLEAR_CURCMD(curCmd);
 8004be2:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <runFLTask+0x3f4>)
 8004be4:	2264      	movs	r2, #100	; 0x64
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	4b1f      	ldr	r3, [pc, #124]	; (8004c68 <runFLTask+0x3f4>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004bee:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <runFLTask+0x3f8>)
 8004bf0:	210f      	movs	r1, #15
 8004bf2:	481f      	ldr	r0, [pc, #124]	; (8004c70 <runFLTask+0x3fc>)
 8004bf4:	f00a fdee 	bl	800f7d4 <sniprintf>
 8004bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bfc:	2206      	movs	r2, #6
 8004bfe:	491d      	ldr	r1, [pc, #116]	; (8004c74 <runFLTask+0x400>)
 8004c00:	481d      	ldr	r0, [pc, #116]	; (8004c78 <runFLTask+0x404>)
 8004c02:	f006 fc6a 	bl	800b4da <HAL_UART_Transmit>
 8004c06:	e639      	b.n	800487c <runFLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004c08:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <runFLTask+0x3f0>)
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <runFLTask+0x3f4>)
 8004c0e:	4915      	ldr	r1, [pc, #84]	; (8004c64 <runFLTask+0x3f0>)
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <runFLTask+0x3f0>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <runFLTask+0x3f0>)
 8004c20:	7892      	ldrb	r2, [r2, #2]
 8004c22:	fb93 f1f2 	sdiv	r1, r3, r2
 8004c26:	fb01 f202 	mul.w	r2, r1, r2
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <runFLTask+0x3f0>)
 8004c30:	705a      	strb	r2, [r3, #1]
 8004c32:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <runFLTask+0x408>)
 8004c34:	210f      	movs	r1, #15
 8004c36:	480e      	ldr	r0, [pc, #56]	; (8004c70 <runFLTask+0x3fc>)
 8004c38:	f00a fdcc 	bl	800f7d4 <sniprintf>
    if (curTask != TASK_FL)
 8004c3c:	e61e      	b.n	800487c <runFLTask+0x8>
 8004c3e:	bf00      	nop
 8004c40:	20000004 	.word	0x20000004
 8004c44:	200002a4 	.word	0x200002a4
 8004c48:	200004e4 	.word	0x200004e4
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	200003c4 	.word	0x200003c4
 8004c54:	200004f8 	.word	0x200004f8
 8004c58:	20000564 	.word	0x20000564
 8004c5c:	20000134 	.word	0x20000134
 8004c60:	20000135 	.word	0x20000135
 8004c64:	20000498 	.word	0x20000498
 8004c68:	200004cc 	.word	0x200004cc
 8004c6c:	080101ec 	.word	0x080101ec
 8004c70:	200004d0 	.word	0x200004d0
 8004c74:	080101f4 	.word	0x080101f4
 8004c78:	2000040c 	.word	0x2000040c
 8004c7c:	080101fc 	.word	0x080101fc

08004c80 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8004c88:	4b99      	ldr	r3, [pc, #612]	; (8004ef0 <runFRTask+0x270>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d004      	beq.n	8004c9a <runFRTask+0x1a>
      osDelay(1000);
 8004c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c94:	f007 fd6c 	bl	800c770 <osDelay>
 8004c98:	e7f6      	b.n	8004c88 <runFRTask+0x8>
    else
    {

      switch (curCmd.val)
 8004c9a:	4b96      	ldr	r3, [pc, #600]	; (8004ef4 <runFRTask+0x274>)
 8004c9c:	885b      	ldrh	r3, [r3, #2]
 8004c9e:	2b14      	cmp	r3, #20
 8004ca0:	f000 8085 	beq.w	8004dae <runFRTask+0x12e>
 8004ca4:	2b1e      	cmp	r3, #30
 8004ca6:	f040 8101 	bne.w	8004eac <runFRTask+0x22c>
      {
      case 30: // FR30 (outdoor)
        targetDist = 4;
 8004caa:	4b93      	ldr	r3, [pc, #588]	; (8004ef8 <runFRTask+0x278>)
 8004cac:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004cb0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4890      	ldr	r0, [pc, #576]	; (8004ef8 <runFRTask+0x278>)
 8004cb8:	f7fd fe92 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8004cbc:	4b8f      	ldr	r3, [pc, #572]	; (8004efc <runFRTask+0x27c>)
 8004cbe:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004cc2:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8004f00 <runFRTask+0x280>
 8004cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	dd02      	ble.n	8004cd6 <runFRTask+0x56>
 8004cd0:	f240 1309 	movw	r3, #265	; 0x109
 8004cd4:	e012      	b.n	8004cfc <runFRTask+0x7c>
 8004cd6:	4b89      	ldr	r3, [pc, #548]	; (8004efc <runFRTask+0x27c>)
 8004cd8:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004cdc:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8004f04 <runFRTask+0x284>
 8004ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce8:	d501      	bpl.n	8004cee <runFRTask+0x6e>
 8004cea:	2346      	movs	r3, #70	; 0x46
 8004cec:	e006      	b.n	8004cfc <runFRTask+0x7c>
 8004cee:	4b83      	ldr	r3, [pc, #524]	; (8004efc <runFRTask+0x27c>)
 8004cf0:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf8:	ee17 3a90 	vmov	r3, s15
 8004cfc:	4a82      	ldr	r2, [pc, #520]	; (8004f08 <runFRTask+0x288>)
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d06:	f002 f981 	bl	800700c <HAL_Delay>
 8004d0a:	4b7c      	ldr	r3, [pc, #496]	; (8004efc <runFRTask+0x27c>)
 8004d0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d10:	4a7e      	ldr	r2, [pc, #504]	; (8004f0c <runFRTask+0x28c>)
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b79      	ldr	r3, [pc, #484]	; (8004efc <runFRTask+0x27c>)
 8004d16:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	2104      	movs	r1, #4
 8004d28:	4879      	ldr	r0, [pc, #484]	; (8004f10 <runFRTask+0x290>)
 8004d2a:	f003 f8a3 	bl	8007e74 <HAL_GPIO_WritePin>
 8004d2e:	4b73      	ldr	r3, [pc, #460]	; (8004efc <runFRTask+0x27c>)
 8004d30:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf14      	ite	ne
 8004d38:	2301      	movne	r3, #1
 8004d3a:	2300      	moveq	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2108      	movs	r1, #8
 8004d42:	4873      	ldr	r0, [pc, #460]	; (8004f10 <runFRTask+0x290>)
 8004d44:	f003 f896 	bl	8007e74 <HAL_GPIO_WritePin>
 8004d48:	4b6c      	ldr	r3, [pc, #432]	; (8004efc <runFRTask+0x27c>)
 8004d4a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	486c      	ldr	r0, [pc, #432]	; (8004f10 <runFRTask+0x290>)
 8004d5e:	f003 f889 	bl	8007e74 <HAL_GPIO_WritePin>
 8004d62:	4b66      	ldr	r3, [pc, #408]	; (8004efc <runFRTask+0x27c>)
 8004d64:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	2110      	movs	r1, #16
 8004d76:	4866      	ldr	r0, [pc, #408]	; (8004f10 <runFRTask+0x290>)
 8004d78:	f003 f87c 	bl	8007e74 <HAL_GPIO_WritePin>
 8004d7c:	4b5f      	ldr	r3, [pc, #380]	; (8004efc <runFRTask+0x27c>)
 8004d7e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8004d82:	4b64      	ldr	r3, [pc, #400]	; (8004f14 <runFRTask+0x294>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34
 8004d88:	4b5c      	ldr	r3, [pc, #368]	; (8004efc <runFRTask+0x27c>)
 8004d8a:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <runFRTask+0x294>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004d94:	485d      	ldr	r0, [pc, #372]	; (8004f0c <runFRTask+0x28c>)
 8004d96:	f7fe fa5f 	bl	8003258 <RobotTurn>
        targetDist = 2;
 8004d9a:	4b57      	ldr	r3, [pc, #348]	; (8004ef8 <runFRTask+0x278>)
 8004d9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004da0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004da2:	2200      	movs	r2, #0
 8004da4:	2100      	movs	r1, #0
 8004da6:	4854      	ldr	r0, [pc, #336]	; (8004ef8 <runFRTask+0x278>)
 8004da8:	f7fd fe1a 	bl	80029e0 <RobotMoveDist>
        break;
 8004dac:	e116      	b.n	8004fdc <runFRTask+0x35c>
      case 20: // FR20 (outdoor 3x1)
        targetDist = 4;
 8004dae:	4b52      	ldr	r3, [pc, #328]	; (8004ef8 <runFRTask+0x278>)
 8004db0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004db4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2101      	movs	r1, #1
 8004dba:	484f      	ldr	r0, [pc, #316]	; (8004ef8 <runFRTask+0x278>)
 8004dbc:	f7fd fe10 	bl	80029e0 <RobotMoveDist>
        osDelay(10);
 8004dc0:	200a      	movs	r0, #10
 8004dc2:	f007 fcd5 	bl	800c770 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 8004dc6:	4b4d      	ldr	r3, [pc, #308]	; (8004efc <runFRTask+0x27c>)
 8004dc8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004dcc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004f00 <runFRTask+0x280>
 8004dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	dd02      	ble.n	8004de0 <runFRTask+0x160>
 8004dda:	f240 1309 	movw	r3, #265	; 0x109
 8004dde:	e012      	b.n	8004e06 <runFRTask+0x186>
 8004de0:	4b46      	ldr	r3, [pc, #280]	; (8004efc <runFRTask+0x27c>)
 8004de2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004de6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004f04 <runFRTask+0x284>
 8004dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df2:	d501      	bpl.n	8004df8 <runFRTask+0x178>
 8004df4:	2346      	movs	r3, #70	; 0x46
 8004df6:	e006      	b.n	8004e06 <runFRTask+0x186>
 8004df8:	4b40      	ldr	r3, [pc, #256]	; (8004efc <runFRTask+0x27c>)
 8004dfa:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e02:	ee17 3a90 	vmov	r3, s15
 8004e06:	4a40      	ldr	r2, [pc, #256]	; (8004f08 <runFRTask+0x288>)
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004e10:	f002 f8fc 	bl	800700c <HAL_Delay>
 8004e14:	4b39      	ldr	r3, [pc, #228]	; (8004efc <runFRTask+0x27c>)
 8004e16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004e1a:	4a3c      	ldr	r2, [pc, #240]	; (8004f0c <runFRTask+0x28c>)
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b37      	ldr	r3, [pc, #220]	; (8004efc <runFRTask+0x27c>)
 8004e20:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2104      	movs	r1, #4
 8004e32:	4837      	ldr	r0, [pc, #220]	; (8004f10 <runFRTask+0x290>)
 8004e34:	f003 f81e 	bl	8007e74 <HAL_GPIO_WritePin>
 8004e38:	4b30      	ldr	r3, [pc, #192]	; (8004efc <runFRTask+0x27c>)
 8004e3a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2108      	movs	r1, #8
 8004e4c:	4830      	ldr	r0, [pc, #192]	; (8004f10 <runFRTask+0x290>)
 8004e4e:	f003 f811 	bl	8007e74 <HAL_GPIO_WritePin>
 8004e52:	4b2a      	ldr	r3, [pc, #168]	; (8004efc <runFRTask+0x27c>)
 8004e54:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	2120      	movs	r1, #32
 8004e66:	482a      	ldr	r0, [pc, #168]	; (8004f10 <runFRTask+0x290>)
 8004e68:	f003 f804 	bl	8007e74 <HAL_GPIO_WritePin>
 8004e6c:	4b23      	ldr	r3, [pc, #140]	; (8004efc <runFRTask+0x27c>)
 8004e6e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	2110      	movs	r1, #16
 8004e80:	4823      	ldr	r0, [pc, #140]	; (8004f10 <runFRTask+0x290>)
 8004e82:	f002 fff7 	bl	8007e74 <HAL_GPIO_WritePin>
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <runFRTask+0x27c>)
 8004e88:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <runFRTask+0x294>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	635a      	str	r2, [r3, #52]	; 0x34
 8004e92:	4b1a      	ldr	r3, [pc, #104]	; (8004efc <runFRTask+0x27c>)
 8004e94:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <runFRTask+0x294>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004e9e:	481b      	ldr	r0, [pc, #108]	; (8004f0c <runFRTask+0x28c>)
 8004ea0:	f7fe f9da 	bl	8003258 <RobotTurn>
        osDelay(10);
 8004ea4:	200a      	movs	r0, #10
 8004ea6:	f007 fc63 	bl	800c770 <osDelay>
        break;
 8004eaa:	e097      	b.n	8004fdc <runFRTask+0x35c>
      default: // FR00 (indoor 3x2)
        targetDist = 3.5;
 8004eac:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <runFRTask+0x278>)
 8004eae:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <runFRTask+0x298>)
 8004eb0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4810      	ldr	r0, [pc, #64]	; (8004ef8 <runFRTask+0x278>)
 8004eb8:	f7fd fd92 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <runFRTask+0x27c>)
 8004ebe:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004ec2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004f00 <runFRTask+0x280>
 8004ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ece:	dd02      	ble.n	8004ed6 <runFRTask+0x256>
 8004ed0:	f240 1309 	movw	r3, #265	; 0x109
 8004ed4:	e029      	b.n	8004f2a <runFRTask+0x2aa>
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <runFRTask+0x27c>)
 8004ed8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004edc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004f04 <runFRTask+0x284>
 8004ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee8:	d518      	bpl.n	8004f1c <runFRTask+0x29c>
 8004eea:	2346      	movs	r3, #70	; 0x46
 8004eec:	e01d      	b.n	8004f2a <runFRTask+0x2aa>
 8004eee:	bf00      	nop
 8004ef0:	20000134 	.word	0x20000134
 8004ef4:	200004cc 	.word	0x200004cc
 8004ef8:	200004f8 	.word	0x200004f8
 8004efc:	20000004 	.word	0x20000004
 8004f00:	43848000 	.word	0x43848000
 8004f04:	428c0000 	.word	0x428c0000
 8004f08:	200002a4 	.word	0x200002a4
 8004f0c:	200004e4 	.word	0x200004e4
 8004f10:	40020000 	.word	0x40020000
 8004f14:	200003c4 	.word	0x200003c4
 8004f18:	40600000 	.word	0x40600000
 8004f1c:	4b4e      	ldr	r3, [pc, #312]	; (8005058 <runFRTask+0x3d8>)
 8004f1e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f26:	ee17 3a90 	vmov	r3, s15
 8004f2a:	4a4c      	ldr	r2, [pc, #304]	; (800505c <runFRTask+0x3dc>)
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004f34:	f002 f86a 	bl	800700c <HAL_Delay>
 8004f38:	4b47      	ldr	r3, [pc, #284]	; (8005058 <runFRTask+0x3d8>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	4a48      	ldr	r2, [pc, #288]	; (8005060 <runFRTask+0x3e0>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b45      	ldr	r3, [pc, #276]	; (8005058 <runFRTask+0x3d8>)
 8004f44:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	2104      	movs	r1, #4
 8004f56:	4843      	ldr	r0, [pc, #268]	; (8005064 <runFRTask+0x3e4>)
 8004f58:	f002 ff8c 	bl	8007e74 <HAL_GPIO_WritePin>
 8004f5c:	4b3e      	ldr	r3, [pc, #248]	; (8005058 <runFRTask+0x3d8>)
 8004f5e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bf14      	ite	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	2300      	moveq	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2108      	movs	r1, #8
 8004f70:	483c      	ldr	r0, [pc, #240]	; (8005064 <runFRTask+0x3e4>)
 8004f72:	f002 ff7f 	bl	8007e74 <HAL_GPIO_WritePin>
 8004f76:	4b38      	ldr	r3, [pc, #224]	; (8005058 <runFRTask+0x3d8>)
 8004f78:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	2120      	movs	r1, #32
 8004f8a:	4836      	ldr	r0, [pc, #216]	; (8005064 <runFRTask+0x3e4>)
 8004f8c:	f002 ff72 	bl	8007e74 <HAL_GPIO_WritePin>
 8004f90:	4b31      	ldr	r3, [pc, #196]	; (8005058 <runFRTask+0x3d8>)
 8004f92:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2110      	movs	r1, #16
 8004fa4:	482f      	ldr	r0, [pc, #188]	; (8005064 <runFRTask+0x3e4>)
 8004fa6:	f002 ff65 	bl	8007e74 <HAL_GPIO_WritePin>
 8004faa:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <runFRTask+0x3d8>)
 8004fac:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <runFRTask+0x3e8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8004fb6:	4b28      	ldr	r3, [pc, #160]	; (8005058 <runFRTask+0x3d8>)
 8004fb8:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8004fbc:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <runFRTask+0x3e8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004fc2:	4827      	ldr	r0, [pc, #156]	; (8005060 <runFRTask+0x3e0>)
 8004fc4:	f7fe f948 	bl	8003258 <RobotTurn>
        targetDist = 2;
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <runFRTask+0x3ec>)
 8004fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fce:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4825      	ldr	r0, [pc, #148]	; (800506c <runFRTask+0x3ec>)
 8004fd6:	f7fd fd03 	bl	80029e0 <RobotMoveDist>

        break;
 8004fda:	bf00      	nop
      }
      clickOnce = 0;
 8004fdc:	4b24      	ldr	r3, [pc, #144]	; (8005070 <runFRTask+0x3f0>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <runFRTask+0x3f4>)
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <runFRTask+0x3f8>)
 8004fe8:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004fea:	4b22      	ldr	r3, [pc, #136]	; (8005074 <runFRTask+0x3f4>)
 8004fec:	2211      	movs	r2, #17
 8004fee:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004ff0:	4b22      	ldr	r3, [pc, #136]	; (800507c <runFRTask+0x3fc>)
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <runFRTask+0x3fc>)
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d112      	bne.n	8005022 <runFRTask+0x3a2>
      {
        __CLEAR_CURCMD(curCmd);
 8004ffc:	4b20      	ldr	r3, [pc, #128]	; (8005080 <runFRTask+0x400>)
 8004ffe:	2264      	movs	r2, #100	; 0x64
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <runFRTask+0x400>)
 8005004:	2200      	movs	r2, #0
 8005006:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005008:	4a1e      	ldr	r2, [pc, #120]	; (8005084 <runFRTask+0x404>)
 800500a:	210f      	movs	r1, #15
 800500c:	481e      	ldr	r0, [pc, #120]	; (8005088 <runFRTask+0x408>)
 800500e:	f00a fbe1 	bl	800f7d4 <sniprintf>
 8005012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005016:	2206      	movs	r2, #6
 8005018:	491c      	ldr	r1, [pc, #112]	; (800508c <runFRTask+0x40c>)
 800501a:	481d      	ldr	r0, [pc, #116]	; (8005090 <runFRTask+0x410>)
 800501c:	f006 fa5d 	bl	800b4da <HAL_UART_Transmit>
 8005020:	e632      	b.n	8004c88 <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <runFRTask+0x3fc>)
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	4a16      	ldr	r2, [pc, #88]	; (8005080 <runFRTask+0x400>)
 8005028:	4914      	ldr	r1, [pc, #80]	; (800507c <runFRTask+0x3fc>)
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <runFRTask+0x3fc>)
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	3301      	adds	r3, #1
 8005038:	4a10      	ldr	r2, [pc, #64]	; (800507c <runFRTask+0x3fc>)
 800503a:	7892      	ldrb	r2, [r2, #2]
 800503c:	fb93 f1f2 	sdiv	r1, r3, r2
 8005040:	fb01 f202 	mul.w	r2, r1, r2
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	b2da      	uxtb	r2, r3
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <runFRTask+0x3fc>)
 800504a:	705a      	strb	r2, [r3, #1]
 800504c:	4a11      	ldr	r2, [pc, #68]	; (8005094 <runFRTask+0x414>)
 800504e:	210f      	movs	r1, #15
 8005050:	480d      	ldr	r0, [pc, #52]	; (8005088 <runFRTask+0x408>)
 8005052:	f00a fbbf 	bl	800f7d4 <sniprintf>
    if (curTask != TASK_FR)
 8005056:	e617      	b.n	8004c88 <runFRTask+0x8>
 8005058:	20000004 	.word	0x20000004
 800505c:	200002a4 	.word	0x200002a4
 8005060:	200004e4 	.word	0x200004e4
 8005064:	40020000 	.word	0x40020000
 8005068:	200003c4 	.word	0x200003c4
 800506c:	200004f8 	.word	0x200004f8
 8005070:	20000564 	.word	0x20000564
 8005074:	20000134 	.word	0x20000134
 8005078:	20000135 	.word	0x20000135
 800507c:	20000498 	.word	0x20000498
 8005080:	200004cc 	.word	0x200004cc
 8005084:	080101ec 	.word	0x080101ec
 8005088:	200004d0 	.word	0x200004d0
 800508c:	080101f4 	.word	0x080101f4
 8005090:	2000040c 	.word	0x2000040c
 8005094:	080101fc 	.word	0x080101fc

08005098 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 80050a0:	4b96      	ldr	r3, [pc, #600]	; (80052fc <runBLTask+0x264>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d004      	beq.n	80050b2 <runBLTask+0x1a>
      osDelay(1000);
 80050a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050ac:	f007 fb60 	bl	800c770 <osDelay>
 80050b0:	e7f6      	b.n	80050a0 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 80050b2:	4b93      	ldr	r3, [pc, #588]	; (8005300 <runBLTask+0x268>)
 80050b4:	885b      	ldrh	r3, [r3, #2]
 80050b6:	2b14      	cmp	r3, #20
 80050b8:	f000 8084 	beq.w	80051c4 <runBLTask+0x12c>
 80050bc:	2b1e      	cmp	r3, #30
 80050be:	f040 80fa 	bne.w	80052b6 <runBLTask+0x21e>
      {
      case 30: // BL30 (outdoor 3x2)
        targetDist = 1;
 80050c2:	4b90      	ldr	r3, [pc, #576]	; (8005304 <runBLTask+0x26c>)
 80050c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80050c8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2101      	movs	r1, #1
 80050ce:	488d      	ldr	r0, [pc, #564]	; (8005304 <runBLTask+0x26c>)
 80050d0:	f7fd fc86 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 80050d4:	4b8c      	ldr	r3, [pc, #560]	; (8005308 <runBLTask+0x270>)
 80050d6:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80050da:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800530c <runBLTask+0x274>
 80050de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	dd02      	ble.n	80050ee <runBLTask+0x56>
 80050e8:	f240 1309 	movw	r3, #265	; 0x109
 80050ec:	e012      	b.n	8005114 <runBLTask+0x7c>
 80050ee:	4b86      	ldr	r3, [pc, #536]	; (8005308 <runBLTask+0x270>)
 80050f0:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 80050f4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8005310 <runBLTask+0x278>
 80050f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005100:	d501      	bpl.n	8005106 <runBLTask+0x6e>
 8005102:	2346      	movs	r3, #70	; 0x46
 8005104:	e006      	b.n	8005114 <runBLTask+0x7c>
 8005106:	4b80      	ldr	r3, [pc, #512]	; (8005308 <runBLTask+0x270>)
 8005108:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800510c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005110:	ee17 3a90 	vmov	r3, s15
 8005114:	4a7f      	ldr	r2, [pc, #508]	; (8005314 <runBLTask+0x27c>)
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	6413      	str	r3, [r2, #64]	; 0x40
 800511a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800511e:	f001 ff75 	bl	800700c <HAL_Delay>
 8005122:	4b79      	ldr	r3, [pc, #484]	; (8005308 <runBLTask+0x270>)
 8005124:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005128:	4a7b      	ldr	r2, [pc, #492]	; (8005318 <runBLTask+0x280>)
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b76      	ldr	r3, [pc, #472]	; (8005308 <runBLTask+0x270>)
 800512e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf0c      	ite	eq
 8005136:	2301      	moveq	r3, #1
 8005138:	2300      	movne	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	2104      	movs	r1, #4
 8005140:	4876      	ldr	r0, [pc, #472]	; (800531c <runBLTask+0x284>)
 8005142:	f002 fe97 	bl	8007e74 <HAL_GPIO_WritePin>
 8005146:	4b70      	ldr	r3, [pc, #448]	; (8005308 <runBLTask+0x270>)
 8005148:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	2108      	movs	r1, #8
 800515a:	4870      	ldr	r0, [pc, #448]	; (800531c <runBLTask+0x284>)
 800515c:	f002 fe8a 	bl	8007e74 <HAL_GPIO_WritePin>
 8005160:	4b69      	ldr	r3, [pc, #420]	; (8005308 <runBLTask+0x270>)
 8005162:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	2120      	movs	r1, #32
 8005174:	4869      	ldr	r0, [pc, #420]	; (800531c <runBLTask+0x284>)
 8005176:	f002 fe7d 	bl	8007e74 <HAL_GPIO_WritePin>
 800517a:	4b63      	ldr	r3, [pc, #396]	; (8005308 <runBLTask+0x270>)
 800517c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf14      	ite	ne
 8005184:	2301      	movne	r3, #1
 8005186:	2300      	moveq	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	2110      	movs	r1, #16
 800518e:	4863      	ldr	r0, [pc, #396]	; (800531c <runBLTask+0x284>)
 8005190:	f002 fe70 	bl	8007e74 <HAL_GPIO_WritePin>
 8005194:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <runBLTask+0x270>)
 8005196:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 800519a:	4b61      	ldr	r3, [pc, #388]	; (8005320 <runBLTask+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	635a      	str	r2, [r3, #52]	; 0x34
 80051a0:	4b59      	ldr	r3, [pc, #356]	; (8005308 <runBLTask+0x270>)
 80051a2:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80051a6:	4b5e      	ldr	r3, [pc, #376]	; (8005320 <runBLTask+0x288>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80051ac:	485a      	ldr	r0, [pc, #360]	; (8005318 <runBLTask+0x280>)
 80051ae:	f7fe f853 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 6;
 80051b2:	4b54      	ldr	r3, [pc, #336]	; (8005304 <runBLTask+0x26c>)
 80051b4:	4a5b      	ldr	r2, [pc, #364]	; (8005324 <runBLTask+0x28c>)
 80051b6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80051b8:	2200      	movs	r2, #0
 80051ba:	2100      	movs	r1, #0
 80051bc:	4851      	ldr	r0, [pc, #324]	; (8005304 <runBLTask+0x26c>)
 80051be:	f7fd fc0f 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 80051c2:	e111      	b.n	80053e8 <runBLTask+0x350>
      case 20: // BL20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 80051c4:	4b50      	ldr	r3, [pc, #320]	; (8005308 <runBLTask+0x270>)
 80051c6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80051ca:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800530c <runBLTask+0x274>
 80051ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d6:	dd02      	ble.n	80051de <runBLTask+0x146>
 80051d8:	f240 1309 	movw	r3, #265	; 0x109
 80051dc:	e012      	b.n	8005204 <runBLTask+0x16c>
 80051de:	4b4a      	ldr	r3, [pc, #296]	; (8005308 <runBLTask+0x270>)
 80051e0:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80051e4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005310 <runBLTask+0x278>
 80051e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	d501      	bpl.n	80051f6 <runBLTask+0x15e>
 80051f2:	2346      	movs	r3, #70	; 0x46
 80051f4:	e006      	b.n	8005204 <runBLTask+0x16c>
 80051f6:	4b44      	ldr	r3, [pc, #272]	; (8005308 <runBLTask+0x270>)
 80051f8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80051fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005200:	ee17 3a90 	vmov	r3, s15
 8005204:	4a43      	ldr	r2, [pc, #268]	; (8005314 <runBLTask+0x27c>)
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800520e:	f001 fefd 	bl	800700c <HAL_Delay>
 8005212:	4b3d      	ldr	r3, [pc, #244]	; (8005308 <runBLTask+0x270>)
 8005214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005218:	4a3f      	ldr	r2, [pc, #252]	; (8005318 <runBLTask+0x280>)
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b3a      	ldr	r3, [pc, #232]	; (8005308 <runBLTask+0x270>)
 800521e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005222:	2b00      	cmp	r3, #0
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	461a      	mov	r2, r3
 800522e:	2104      	movs	r1, #4
 8005230:	483a      	ldr	r0, [pc, #232]	; (800531c <runBLTask+0x284>)
 8005232:	f002 fe1f 	bl	8007e74 <HAL_GPIO_WritePin>
 8005236:	4b34      	ldr	r3, [pc, #208]	; (8005308 <runBLTask+0x270>)
 8005238:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800523c:	2b00      	cmp	r3, #0
 800523e:	bf14      	ite	ne
 8005240:	2301      	movne	r3, #1
 8005242:	2300      	moveq	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	2108      	movs	r1, #8
 800524a:	4834      	ldr	r0, [pc, #208]	; (800531c <runBLTask+0x284>)
 800524c:	f002 fe12 	bl	8007e74 <HAL_GPIO_WritePin>
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <runBLTask+0x270>)
 8005252:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	2120      	movs	r1, #32
 8005264:	482d      	ldr	r0, [pc, #180]	; (800531c <runBLTask+0x284>)
 8005266:	f002 fe05 	bl	8007e74 <HAL_GPIO_WritePin>
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <runBLTask+0x270>)
 800526c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	2110      	movs	r1, #16
 800527e:	4827      	ldr	r0, [pc, #156]	; (800531c <runBLTask+0x284>)
 8005280:	f002 fdf8 	bl	8007e74 <HAL_GPIO_WritePin>
 8005284:	4b20      	ldr	r3, [pc, #128]	; (8005308 <runBLTask+0x270>)
 8005286:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800528a:	4b25      	ldr	r3, [pc, #148]	; (8005320 <runBLTask+0x288>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	635a      	str	r2, [r3, #52]	; 0x34
 8005290:	4b1d      	ldr	r3, [pc, #116]	; (8005308 <runBLTask+0x270>)
 8005292:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8005296:	4b22      	ldr	r3, [pc, #136]	; (8005320 <runBLTask+0x288>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 800529c:	481e      	ldr	r0, [pc, #120]	; (8005318 <runBLTask+0x280>)
 800529e:	f7fd ffdb 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <runBLTask+0x26c>)
 80052a4:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80052a8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2100      	movs	r1, #0
 80052ae:	4815      	ldr	r0, [pc, #84]	; (8005304 <runBLTask+0x26c>)
 80052b0:	f7fd fb96 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 80052b4:	e098      	b.n	80053e8 <runBLTask+0x350>
      default: // BL00 (indoor 3x2)
        targetDist = 1;
 80052b6:	4b13      	ldr	r3, [pc, #76]	; (8005304 <runBLTask+0x26c>)
 80052b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80052bc:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	4810      	ldr	r0, [pc, #64]	; (8005304 <runBLTask+0x26c>)
 80052c4:	f7fd fb8c 	bl	80029e0 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 80052c8:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <runBLTask+0x270>)
 80052ca:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80052ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800530c <runBLTask+0x274>
 80052d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052da:	dd02      	ble.n	80052e2 <runBLTask+0x24a>
 80052dc:	f240 1309 	movw	r3, #265	; 0x109
 80052e0:	e029      	b.n	8005336 <runBLTask+0x29e>
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <runBLTask+0x270>)
 80052e4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80052e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005310 <runBLTask+0x278>
 80052ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f4:	d518      	bpl.n	8005328 <runBLTask+0x290>
 80052f6:	2346      	movs	r3, #70	; 0x46
 80052f8:	e01d      	b.n	8005336 <runBLTask+0x29e>
 80052fa:	bf00      	nop
 80052fc:	20000134 	.word	0x20000134
 8005300:	200004cc 	.word	0x200004cc
 8005304:	200004f8 	.word	0x200004f8
 8005308:	20000004 	.word	0x20000004
 800530c:	43848000 	.word	0x43848000
 8005310:	428c0000 	.word	0x428c0000
 8005314:	200002a4 	.word	0x200002a4
 8005318:	200004e4 	.word	0x200004e4
 800531c:	40020000 	.word	0x40020000
 8005320:	200003c4 	.word	0x200003c4
 8005324:	40c00000 	.word	0x40c00000
 8005328:	4b4e      	ldr	r3, [pc, #312]	; (8005464 <runBLTask+0x3cc>)
 800532a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800532e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005332:	ee17 3a90 	vmov	r3, s15
 8005336:	4a4c      	ldr	r2, [pc, #304]	; (8005468 <runBLTask+0x3d0>)
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	6413      	str	r3, [r2, #64]	; 0x40
 800533c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005340:	f001 fe64 	bl	800700c <HAL_Delay>
 8005344:	4b47      	ldr	r3, [pc, #284]	; (8005464 <runBLTask+0x3cc>)
 8005346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800534a:	4a48      	ldr	r2, [pc, #288]	; (800546c <runBLTask+0x3d4>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b45      	ldr	r3, [pc, #276]	; (8005464 <runBLTask+0x3cc>)
 8005350:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf0c      	ite	eq
 8005358:	2301      	moveq	r3, #1
 800535a:	2300      	movne	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	2104      	movs	r1, #4
 8005362:	4843      	ldr	r0, [pc, #268]	; (8005470 <runBLTask+0x3d8>)
 8005364:	f002 fd86 	bl	8007e74 <HAL_GPIO_WritePin>
 8005368:	4b3e      	ldr	r3, [pc, #248]	; (8005464 <runBLTask+0x3cc>)
 800536a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	2108      	movs	r1, #8
 800537c:	483c      	ldr	r0, [pc, #240]	; (8005470 <runBLTask+0x3d8>)
 800537e:	f002 fd79 	bl	8007e74 <HAL_GPIO_WritePin>
 8005382:	4b38      	ldr	r3, [pc, #224]	; (8005464 <runBLTask+0x3cc>)
 8005384:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	2120      	movs	r1, #32
 8005396:	4836      	ldr	r0, [pc, #216]	; (8005470 <runBLTask+0x3d8>)
 8005398:	f002 fd6c 	bl	8007e74 <HAL_GPIO_WritePin>
 800539c:	4b31      	ldr	r3, [pc, #196]	; (8005464 <runBLTask+0x3cc>)
 800539e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	2110      	movs	r1, #16
 80053b0:	482f      	ldr	r0, [pc, #188]	; (8005470 <runBLTask+0x3d8>)
 80053b2:	f002 fd5f 	bl	8007e74 <HAL_GPIO_WritePin>
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <runBLTask+0x3cc>)
 80053b8:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80053bc:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <runBLTask+0x3dc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	635a      	str	r2, [r3, #52]	; 0x34
 80053c2:	4b28      	ldr	r3, [pc, #160]	; (8005464 <runBLTask+0x3cc>)
 80053c4:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 80053c8:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <runBLTask+0x3dc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80053ce:	4827      	ldr	r0, [pc, #156]	; (800546c <runBLTask+0x3d4>)
 80053d0:	f7fd ff42 	bl	8003258 <RobotTurn>

        targetDist = 8;
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <runBLTask+0x3e0>)
 80053d6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80053da:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	4825      	ldr	r0, [pc, #148]	; (8005478 <runBLTask+0x3e0>)
 80053e2:	f7fd fafd 	bl	80029e0 <RobotMoveDist>

        break;
 80053e6:	bf00      	nop
      }
      clickOnce = 0;
 80053e8:	4b24      	ldr	r3, [pc, #144]	; (800547c <runBLTask+0x3e4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80053ee:	4b24      	ldr	r3, [pc, #144]	; (8005480 <runBLTask+0x3e8>)
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <runBLTask+0x3ec>)
 80053f4:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80053f6:	4b22      	ldr	r3, [pc, #136]	; (8005480 <runBLTask+0x3e8>)
 80053f8:	2211      	movs	r2, #17
 80053fa:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80053fc:	4b22      	ldr	r3, [pc, #136]	; (8005488 <runBLTask+0x3f0>)
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	4b21      	ldr	r3, [pc, #132]	; (8005488 <runBLTask+0x3f0>)
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	429a      	cmp	r2, r3
 8005406:	d112      	bne.n	800542e <runBLTask+0x396>
      {
        __CLEAR_CURCMD(curCmd);
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <runBLTask+0x3f4>)
 800540a:	2264      	movs	r2, #100	; 0x64
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	4b1f      	ldr	r3, [pc, #124]	; (800548c <runBLTask+0x3f4>)
 8005410:	2200      	movs	r2, #0
 8005412:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005414:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <runBLTask+0x3f8>)
 8005416:	210f      	movs	r1, #15
 8005418:	481e      	ldr	r0, [pc, #120]	; (8005494 <runBLTask+0x3fc>)
 800541a:	f00a f9db 	bl	800f7d4 <sniprintf>
 800541e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005422:	2206      	movs	r2, #6
 8005424:	491c      	ldr	r1, [pc, #112]	; (8005498 <runBLTask+0x400>)
 8005426:	481d      	ldr	r0, [pc, #116]	; (800549c <runBLTask+0x404>)
 8005428:	f006 f857 	bl	800b4da <HAL_UART_Transmit>
 800542c:	e638      	b.n	80050a0 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800542e:	4b16      	ldr	r3, [pc, #88]	; (8005488 <runBLTask+0x3f0>)
 8005430:	785b      	ldrb	r3, [r3, #1]
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <runBLTask+0x3f4>)
 8005434:	4914      	ldr	r1, [pc, #80]	; (8005488 <runBLTask+0x3f0>)
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <runBLTask+0x3f0>)
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	3301      	adds	r3, #1
 8005444:	4a10      	ldr	r2, [pc, #64]	; (8005488 <runBLTask+0x3f0>)
 8005446:	7892      	ldrb	r2, [r2, #2]
 8005448:	fb93 f1f2 	sdiv	r1, r3, r2
 800544c:	fb01 f202 	mul.w	r2, r1, r2
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <runBLTask+0x3f0>)
 8005456:	705a      	strb	r2, [r3, #1]
 8005458:	4a11      	ldr	r2, [pc, #68]	; (80054a0 <runBLTask+0x408>)
 800545a:	210f      	movs	r1, #15
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <runBLTask+0x3fc>)
 800545e:	f00a f9b9 	bl	800f7d4 <sniprintf>
    if (curTask != TASK_BL)
 8005462:	e61d      	b.n	80050a0 <runBLTask+0x8>
 8005464:	20000004 	.word	0x20000004
 8005468:	200002a4 	.word	0x200002a4
 800546c:	200004e4 	.word	0x200004e4
 8005470:	40020000 	.word	0x40020000
 8005474:	200003c4 	.word	0x200003c4
 8005478:	200004f8 	.word	0x200004f8
 800547c:	20000564 	.word	0x20000564
 8005480:	20000134 	.word	0x20000134
 8005484:	20000135 	.word	0x20000135
 8005488:	20000498 	.word	0x20000498
 800548c:	200004cc 	.word	0x200004cc
 8005490:	080101ec 	.word	0x080101ec
 8005494:	200004d0 	.word	0x200004d0
 8005498:	080101f4 	.word	0x080101f4
 800549c:	2000040c 	.word	0x2000040c
 80054a0:	080101fc 	.word	0x080101fc

080054a4 <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 80054ac:	4b95      	ldr	r3, [pc, #596]	; (8005704 <runBRTask+0x260>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d004      	beq.n	80054be <runBRTask+0x1a>
      osDelay(1000);
 80054b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054b8:	f007 f95a 	bl	800c770 <osDelay>
 80054bc:	e7f6      	b.n	80054ac <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 80054be:	4b92      	ldr	r3, [pc, #584]	; (8005708 <runBRTask+0x264>)
 80054c0:	885b      	ldrh	r3, [r3, #2]
 80054c2:	2b14      	cmp	r3, #20
 80054c4:	f000 8084 	beq.w	80055d0 <runBRTask+0x12c>
 80054c8:	2b1e      	cmp	r3, #30
 80054ca:	f040 80fa 	bne.w	80056c2 <runBRTask+0x21e>
      {
      case 30: // BR30 (4x2)
        targetDist = 2;
 80054ce:	4b8f      	ldr	r3, [pc, #572]	; (800570c <runBRTask+0x268>)
 80054d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054d4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	488c      	ldr	r0, [pc, #560]	; (800570c <runBRTask+0x268>)
 80054dc:	f7fd fa80 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 80054e0:	4b8b      	ldr	r3, [pc, #556]	; (8005710 <runBRTask+0x26c>)
 80054e2:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80054e6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005714 <runBRTask+0x270>
 80054ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	dd02      	ble.n	80054fa <runBRTask+0x56>
 80054f4:	f240 1309 	movw	r3, #265	; 0x109
 80054f8:	e012      	b.n	8005520 <runBRTask+0x7c>
 80054fa:	4b85      	ldr	r3, [pc, #532]	; (8005710 <runBRTask+0x26c>)
 80054fc:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005500:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8005718 <runBRTask+0x274>
 8005504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550c:	d501      	bpl.n	8005512 <runBRTask+0x6e>
 800550e:	2346      	movs	r3, #70	; 0x46
 8005510:	e006      	b.n	8005520 <runBRTask+0x7c>
 8005512:	4b7f      	ldr	r3, [pc, #508]	; (8005710 <runBRTask+0x26c>)
 8005514:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551c:	ee17 3a90 	vmov	r3, s15
 8005520:	4a7e      	ldr	r2, [pc, #504]	; (800571c <runBRTask+0x278>)
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	6413      	str	r3, [r2, #64]	; 0x40
 8005526:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800552a:	f001 fd6f 	bl	800700c <HAL_Delay>
 800552e:	4b78      	ldr	r3, [pc, #480]	; (8005710 <runBRTask+0x26c>)
 8005530:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8005534:	4a7a      	ldr	r2, [pc, #488]	; (8005720 <runBRTask+0x27c>)
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b75      	ldr	r3, [pc, #468]	; (8005710 <runBRTask+0x26c>)
 800553a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	2104      	movs	r1, #4
 800554c:	4875      	ldr	r0, [pc, #468]	; (8005724 <runBRTask+0x280>)
 800554e:	f002 fc91 	bl	8007e74 <HAL_GPIO_WritePin>
 8005552:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <runBRTask+0x26c>)
 8005554:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	2108      	movs	r1, #8
 8005566:	486f      	ldr	r0, [pc, #444]	; (8005724 <runBRTask+0x280>)
 8005568:	f002 fc84 	bl	8007e74 <HAL_GPIO_WritePin>
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <runBRTask+0x26c>)
 800556e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	2120      	movs	r1, #32
 8005580:	4868      	ldr	r0, [pc, #416]	; (8005724 <runBRTask+0x280>)
 8005582:	f002 fc77 	bl	8007e74 <HAL_GPIO_WritePin>
 8005586:	4b62      	ldr	r3, [pc, #392]	; (8005710 <runBRTask+0x26c>)
 8005588:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	2110      	movs	r1, #16
 800559a:	4862      	ldr	r0, [pc, #392]	; (8005724 <runBRTask+0x280>)
 800559c:	f002 fc6a 	bl	8007e74 <HAL_GPIO_WritePin>
 80055a0:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <runBRTask+0x26c>)
 80055a2:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 80055a6:	4b60      	ldr	r3, [pc, #384]	; (8005728 <runBRTask+0x284>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	635a      	str	r2, [r3, #52]	; 0x34
 80055ac:	4b58      	ldr	r3, [pc, #352]	; (8005710 <runBRTask+0x26c>)
 80055ae:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 80055b2:	4b5d      	ldr	r3, [pc, #372]	; (8005728 <runBRTask+0x284>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80055b8:	4859      	ldr	r0, [pc, #356]	; (8005720 <runBRTask+0x27c>)
 80055ba:	f7fd fe4d 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 7;
 80055be:	4b53      	ldr	r3, [pc, #332]	; (800570c <runBRTask+0x268>)
 80055c0:	4a5a      	ldr	r2, [pc, #360]	; (800572c <runBRTask+0x288>)
 80055c2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80055c4:	2200      	movs	r2, #0
 80055c6:	2100      	movs	r1, #0
 80055c8:	4850      	ldr	r0, [pc, #320]	; (800570c <runBRTask+0x268>)
 80055ca:	f7fd fa09 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 80055ce:	e110      	b.n	80057f2 <runBRTask+0x34e>
      case 20: // BR20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 80055d0:	4b4f      	ldr	r3, [pc, #316]	; (8005710 <runBRTask+0x26c>)
 80055d2:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80055d6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005714 <runBRTask+0x270>
 80055da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	dd02      	ble.n	80055ea <runBRTask+0x146>
 80055e4:	f240 1309 	movw	r3, #265	; 0x109
 80055e8:	e012      	b.n	8005610 <runBRTask+0x16c>
 80055ea:	4b49      	ldr	r3, [pc, #292]	; (8005710 <runBRTask+0x26c>)
 80055ec:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 80055f0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005718 <runBRTask+0x274>
 80055f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	d501      	bpl.n	8005602 <runBRTask+0x15e>
 80055fe:	2346      	movs	r3, #70	; 0x46
 8005600:	e006      	b.n	8005610 <runBRTask+0x16c>
 8005602:	4b43      	ldr	r3, [pc, #268]	; (8005710 <runBRTask+0x26c>)
 8005604:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560c:	ee17 3a90 	vmov	r3, s15
 8005610:	4a42      	ldr	r2, [pc, #264]	; (800571c <runBRTask+0x278>)
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
 8005616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800561a:	f001 fcf7 	bl	800700c <HAL_Delay>
 800561e:	4b3c      	ldr	r3, [pc, #240]	; (8005710 <runBRTask+0x26c>)
 8005620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005624:	4a3e      	ldr	r2, [pc, #248]	; (8005720 <runBRTask+0x27c>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b39      	ldr	r3, [pc, #228]	; (8005710 <runBRTask+0x26c>)
 800562a:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	2104      	movs	r1, #4
 800563c:	4839      	ldr	r0, [pc, #228]	; (8005724 <runBRTask+0x280>)
 800563e:	f002 fc19 	bl	8007e74 <HAL_GPIO_WritePin>
 8005642:	4b33      	ldr	r3, [pc, #204]	; (8005710 <runBRTask+0x26c>)
 8005644:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	2108      	movs	r1, #8
 8005656:	4833      	ldr	r0, [pc, #204]	; (8005724 <runBRTask+0x280>)
 8005658:	f002 fc0c 	bl	8007e74 <HAL_GPIO_WritePin>
 800565c:	4b2c      	ldr	r3, [pc, #176]	; (8005710 <runBRTask+0x26c>)
 800565e:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	2120      	movs	r1, #32
 8005670:	482c      	ldr	r0, [pc, #176]	; (8005724 <runBRTask+0x280>)
 8005672:	f002 fbff 	bl	8007e74 <HAL_GPIO_WritePin>
 8005676:	4b26      	ldr	r3, [pc, #152]	; (8005710 <runBRTask+0x26c>)
 8005678:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	2110      	movs	r1, #16
 800568a:	4826      	ldr	r0, [pc, #152]	; (8005724 <runBRTask+0x280>)
 800568c:	f002 fbf2 	bl	8007e74 <HAL_GPIO_WritePin>
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <runBRTask+0x26c>)
 8005692:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <runBRTask+0x284>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	635a      	str	r2, [r3, #52]	; 0x34
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <runBRTask+0x26c>)
 800569e:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80056a2:	4b21      	ldr	r3, [pc, #132]	; (8005728 <runBRTask+0x284>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80056a8:	481d      	ldr	r0, [pc, #116]	; (8005720 <runBRTask+0x27c>)
 80056aa:	f7fd fdd5 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 80056ae:	4b17      	ldr	r3, [pc, #92]	; (800570c <runBRTask+0x268>)
 80056b0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80056b4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80056b6:	2200      	movs	r2, #0
 80056b8:	2100      	movs	r1, #0
 80056ba:	4814      	ldr	r0, [pc, #80]	; (800570c <runBRTask+0x268>)
 80056bc:	f7fd f990 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 80056c0:	e097      	b.n	80057f2 <runBRTask+0x34e>
      default: // BR00 (indoor 3x1)
        targetDist = 5;
 80056c2:	4b12      	ldr	r3, [pc, #72]	; (800570c <runBRTask+0x268>)
 80056c4:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <runBRTask+0x28c>)
 80056c6:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80056c8:	2200      	movs	r2, #0
 80056ca:	2101      	movs	r1, #1
 80056cc:	480f      	ldr	r0, [pc, #60]	; (800570c <runBRTask+0x268>)
 80056ce:	f7fd f987 	bl	80029e0 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <runBRTask+0x26c>)
 80056d4:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80056d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005714 <runBRTask+0x270>
 80056dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e4:	dd02      	ble.n	80056ec <runBRTask+0x248>
 80056e6:	f240 1309 	movw	r3, #265	; 0x109
 80056ea:	e02a      	b.n	8005742 <runBRTask+0x29e>
 80056ec:	4b08      	ldr	r3, [pc, #32]	; (8005710 <runBRTask+0x26c>)
 80056ee:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80056f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005718 <runBRTask+0x274>
 80056f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	d519      	bpl.n	8005734 <runBRTask+0x290>
 8005700:	2346      	movs	r3, #70	; 0x46
 8005702:	e01e      	b.n	8005742 <runBRTask+0x29e>
 8005704:	20000134 	.word	0x20000134
 8005708:	200004cc 	.word	0x200004cc
 800570c:	200004f8 	.word	0x200004f8
 8005710:	20000004 	.word	0x20000004
 8005714:	43848000 	.word	0x43848000
 8005718:	428c0000 	.word	0x428c0000
 800571c:	200002a4 	.word	0x200002a4
 8005720:	200004e4 	.word	0x200004e4
 8005724:	40020000 	.word	0x40020000
 8005728:	200003c4 	.word	0x200003c4
 800572c:	40e00000 	.word	0x40e00000
 8005730:	40a00000 	.word	0x40a00000
 8005734:	4b4e      	ldr	r3, [pc, #312]	; (8005870 <runBRTask+0x3cc>)
 8005736:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800573a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800573e:	ee17 3a90 	vmov	r3, s15
 8005742:	4a4c      	ldr	r2, [pc, #304]	; (8005874 <runBRTask+0x3d0>)
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	6413      	str	r3, [r2, #64]	; 0x40
 8005748:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800574c:	f001 fc5e 	bl	800700c <HAL_Delay>
 8005750:	4b47      	ldr	r3, [pc, #284]	; (8005870 <runBRTask+0x3cc>)
 8005752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005756:	4a48      	ldr	r2, [pc, #288]	; (8005878 <runBRTask+0x3d4>)
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	4b45      	ldr	r3, [pc, #276]	; (8005870 <runBRTask+0x3cc>)
 800575c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	2104      	movs	r1, #4
 800576e:	4843      	ldr	r0, [pc, #268]	; (800587c <runBRTask+0x3d8>)
 8005770:	f002 fb80 	bl	8007e74 <HAL_GPIO_WritePin>
 8005774:	4b3e      	ldr	r3, [pc, #248]	; (8005870 <runBRTask+0x3cc>)
 8005776:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf14      	ite	ne
 800577e:	2301      	movne	r3, #1
 8005780:	2300      	moveq	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	2108      	movs	r1, #8
 8005788:	483c      	ldr	r0, [pc, #240]	; (800587c <runBRTask+0x3d8>)
 800578a:	f002 fb73 	bl	8007e74 <HAL_GPIO_WritePin>
 800578e:	4b38      	ldr	r3, [pc, #224]	; (8005870 <runBRTask+0x3cc>)
 8005790:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf0c      	ite	eq
 8005798:	2301      	moveq	r3, #1
 800579a:	2300      	movne	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	2120      	movs	r1, #32
 80057a2:	4836      	ldr	r0, [pc, #216]	; (800587c <runBRTask+0x3d8>)
 80057a4:	f002 fb66 	bl	8007e74 <HAL_GPIO_WritePin>
 80057a8:	4b31      	ldr	r3, [pc, #196]	; (8005870 <runBRTask+0x3cc>)
 80057aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	2110      	movs	r1, #16
 80057bc:	482f      	ldr	r0, [pc, #188]	; (800587c <runBRTask+0x3d8>)
 80057be:	f002 fb59 	bl	8007e74 <HAL_GPIO_WritePin>
 80057c2:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <runBRTask+0x3cc>)
 80057c4:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <runBRTask+0x3dc>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	635a      	str	r2, [r3, #52]	; 0x34
 80057ce:	4b28      	ldr	r3, [pc, #160]	; (8005870 <runBRTask+0x3cc>)
 80057d0:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 80057d4:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <runBRTask+0x3dc>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80057da:	4827      	ldr	r0, [pc, #156]	; (8005878 <runBRTask+0x3d4>)
 80057dc:	f7fd fd3c 	bl	8003258 <RobotTurn>

        targetDist = 3;
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <runBRTask+0x3e0>)
 80057e2:	4a29      	ldr	r2, [pc, #164]	; (8005888 <runBRTask+0x3e4>)
 80057e4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2100      	movs	r1, #0
 80057ea:	4826      	ldr	r0, [pc, #152]	; (8005884 <runBRTask+0x3e0>)
 80057ec:	f7fd f8f8 	bl	80029e0 <RobotMoveDist>

        break;
 80057f0:	bf00      	nop
      }
      clickOnce = 0;
 80057f2:	4b26      	ldr	r3, [pc, #152]	; (800588c <runBRTask+0x3e8>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <runBRTask+0x3ec>)
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <runBRTask+0x3f0>)
 80057fe:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8005800:	4b23      	ldr	r3, [pc, #140]	; (8005890 <runBRTask+0x3ec>)
 8005802:	2211      	movs	r2, #17
 8005804:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <runBRTask+0x3f4>)
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <runBRTask+0x3f4>)
 800580c:	785b      	ldrb	r3, [r3, #1]
 800580e:	429a      	cmp	r2, r3
 8005810:	d112      	bne.n	8005838 <runBRTask+0x394>
      {
        __CLEAR_CURCMD(curCmd);
 8005812:	4b22      	ldr	r3, [pc, #136]	; (800589c <runBRTask+0x3f8>)
 8005814:	2264      	movs	r2, #100	; 0x64
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	4b20      	ldr	r3, [pc, #128]	; (800589c <runBRTask+0x3f8>)
 800581a:	2200      	movs	r2, #0
 800581c:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800581e:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <runBRTask+0x3fc>)
 8005820:	210f      	movs	r1, #15
 8005822:	4820      	ldr	r0, [pc, #128]	; (80058a4 <runBRTask+0x400>)
 8005824:	f009 ffd6 	bl	800f7d4 <sniprintf>
 8005828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800582c:	2206      	movs	r2, #6
 800582e:	491e      	ldr	r1, [pc, #120]	; (80058a8 <runBRTask+0x404>)
 8005830:	481e      	ldr	r0, [pc, #120]	; (80058ac <runBRTask+0x408>)
 8005832:	f005 fe52 	bl	800b4da <HAL_UART_Transmit>
 8005836:	e639      	b.n	80054ac <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <runBRTask+0x3f4>)
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <runBRTask+0x3f8>)
 800583e:	4916      	ldr	r1, [pc, #88]	; (8005898 <runBRTask+0x3f4>)
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <runBRTask+0x3f4>)
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	3301      	adds	r3, #1
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <runBRTask+0x3f4>)
 8005850:	7892      	ldrb	r2, [r2, #2]
 8005852:	fb93 f1f2 	sdiv	r1, r3, r2
 8005856:	fb01 f202 	mul.w	r2, r1, r2
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	b2da      	uxtb	r2, r3
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <runBRTask+0x3f4>)
 8005860:	705a      	strb	r2, [r3, #1]
 8005862:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <runBRTask+0x40c>)
 8005864:	210f      	movs	r1, #15
 8005866:	480f      	ldr	r0, [pc, #60]	; (80058a4 <runBRTask+0x400>)
 8005868:	f009 ffb4 	bl	800f7d4 <sniprintf>
    if (curTask != TASK_BR)
 800586c:	e61e      	b.n	80054ac <runBRTask+0x8>
 800586e:	bf00      	nop
 8005870:	20000004 	.word	0x20000004
 8005874:	200002a4 	.word	0x200002a4
 8005878:	200004e4 	.word	0x200004e4
 800587c:	40020000 	.word	0x40020000
 8005880:	200003c4 	.word	0x200003c4
 8005884:	200004f8 	.word	0x200004f8
 8005888:	40400000 	.word	0x40400000
 800588c:	20000564 	.word	0x20000564
 8005890:	20000134 	.word	0x20000134
 8005894:	20000135 	.word	0x20000135
 8005898:	20000498 	.word	0x20000498
 800589c:	200004cc 	.word	0x200004cc
 80058a0:	080101ec 	.word	0x080101ec
 80058a4:	200004d0 	.word	0x200004d0
 80058a8:	080101f4 	.word	0x080101f4
 80058ac:	2000040c 	.word	0x2000040c
 80058b0:	080101fc 	.word	0x080101fc

080058b4 <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 80058bc:	4bc7      	ldr	r3, [pc, #796]	; (8005bdc <runCmdTask+0x328>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	2b63      	cmp	r3, #99	; 0x63
 80058c4:	f200 8353 	bhi.w	8005f6e <runCmdTask+0x6ba>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <runCmdTask+0x1c>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	08005a61 	.word	0x08005a61
 80058d4:	08005a6f 	.word	0x08005a6f
 80058d8:	08005a7d 	.word	0x08005a7d
 80058dc:	08005a7d 	.word	0x08005a7d
 80058e0:	08005a7d 	.word	0x08005a7d
 80058e4:	08005a7d 	.word	0x08005a7d
 80058e8:	08005c51 	.word	0x08005c51
 80058ec:	08005c5f 	.word	0x08005c5f
 80058f0:	08005c6d 	.word	0x08005c6d
 80058f4:	08005c7b 	.word	0x08005c7b
 80058f8:	08005c89 	.word	0x08005c89
 80058fc:	08005c89 	.word	0x08005c89
 8005900:	08005f6f 	.word	0x08005f6f
 8005904:	08005cd3 	.word	0x08005cd3
 8005908:	08005ce1 	.word	0x08005ce1
 800590c:	08005f6f 	.word	0x08005f6f
 8005910:	08005f6f 	.word	0x08005f6f
 8005914:	08005f6f 	.word	0x08005f6f
 8005918:	08005f6f 	.word	0x08005f6f
 800591c:	08005f6f 	.word	0x08005f6f
 8005920:	08005f6f 	.word	0x08005f6f
 8005924:	08005f6f 	.word	0x08005f6f
 8005928:	08005f6f 	.word	0x08005f6f
 800592c:	08005f6f 	.word	0x08005f6f
 8005930:	08005f6f 	.word	0x08005f6f
 8005934:	08005f6f 	.word	0x08005f6f
 8005938:	08005f6f 	.word	0x08005f6f
 800593c:	08005f6f 	.word	0x08005f6f
 8005940:	08005f6f 	.word	0x08005f6f
 8005944:	08005f6f 	.word	0x08005f6f
 8005948:	08005f6f 	.word	0x08005f6f
 800594c:	08005f6f 	.word	0x08005f6f
 8005950:	08005f6f 	.word	0x08005f6f
 8005954:	08005f6f 	.word	0x08005f6f
 8005958:	08005f6f 	.word	0x08005f6f
 800595c:	08005f6f 	.word	0x08005f6f
 8005960:	08005f6f 	.word	0x08005f6f
 8005964:	08005f6f 	.word	0x08005f6f
 8005968:	08005f6f 	.word	0x08005f6f
 800596c:	08005f6f 	.word	0x08005f6f
 8005970:	08005f6f 	.word	0x08005f6f
 8005974:	08005f6f 	.word	0x08005f6f
 8005978:	08005f6f 	.word	0x08005f6f
 800597c:	08005f6f 	.word	0x08005f6f
 8005980:	08005f6f 	.word	0x08005f6f
 8005984:	08005f6f 	.word	0x08005f6f
 8005988:	08005f6f 	.word	0x08005f6f
 800598c:	08005f6f 	.word	0x08005f6f
 8005990:	08005f6f 	.word	0x08005f6f
 8005994:	08005f6f 	.word	0x08005f6f
 8005998:	08005f6f 	.word	0x08005f6f
 800599c:	08005f6f 	.word	0x08005f6f
 80059a0:	08005f6f 	.word	0x08005f6f
 80059a4:	08005f6f 	.word	0x08005f6f
 80059a8:	08005f6f 	.word	0x08005f6f
 80059ac:	08005f6f 	.word	0x08005f6f
 80059b0:	08005f6f 	.word	0x08005f6f
 80059b4:	08005f6f 	.word	0x08005f6f
 80059b8:	08005f6f 	.word	0x08005f6f
 80059bc:	08005f6f 	.word	0x08005f6f
 80059c0:	08005f6f 	.word	0x08005f6f
 80059c4:	08005f6f 	.word	0x08005f6f
 80059c8:	08005f6f 	.word	0x08005f6f
 80059cc:	08005f6f 	.word	0x08005f6f
 80059d0:	08005f6f 	.word	0x08005f6f
 80059d4:	08005f6f 	.word	0x08005f6f
 80059d8:	08005f6f 	.word	0x08005f6f
 80059dc:	08005f6f 	.word	0x08005f6f
 80059e0:	08005f6f 	.word	0x08005f6f
 80059e4:	08005f6f 	.word	0x08005f6f
 80059e8:	08005f6f 	.word	0x08005f6f
 80059ec:	08005f6f 	.word	0x08005f6f
 80059f0:	08005f6f 	.word	0x08005f6f
 80059f4:	08005f6f 	.word	0x08005f6f
 80059f8:	08005f6f 	.word	0x08005f6f
 80059fc:	08005f6f 	.word	0x08005f6f
 8005a00:	08005f6f 	.word	0x08005f6f
 8005a04:	08005f6f 	.word	0x08005f6f
 8005a08:	08005f6f 	.word	0x08005f6f
 8005a0c:	08005f6f 	.word	0x08005f6f
 8005a10:	08005f6f 	.word	0x08005f6f
 8005a14:	08005f6f 	.word	0x08005f6f
 8005a18:	08005f6f 	.word	0x08005f6f
 8005a1c:	08005f6f 	.word	0x08005f6f
 8005a20:	08005f6f 	.word	0x08005f6f
 8005a24:	08005f6f 	.word	0x08005f6f
 8005a28:	08005f6f 	.word	0x08005f6f
 8005a2c:	08005cef 	.word	0x08005cef
 8005a30:	08005cef 	.word	0x08005cef
 8005a34:	08005e0b 	.word	0x08005e0b
 8005a38:	08005e0b 	.word	0x08005e0b
 8005a3c:	08005f1b 	.word	0x08005f1b
 8005a40:	08005f29 	.word	0x08005f29
 8005a44:	08005f37 	.word	0x08005f37
 8005a48:	08005f45 	.word	0x08005f45
 8005a4c:	08005f53 	.word	0x08005f53
 8005a50:	08005f61 	.word	0x08005f61
 8005a54:	08005f6f 	.word	0x08005f6f
 8005a58:	08005f6f 	.word	0x08005f6f
 8005a5c:	08005f6f 	.word	0x08005f6f
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FORWARD;
 8005a60:	4b5f      	ldr	r3, [pc, #380]	; (8005be0 <runCmdTask+0x32c>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005a66:	4b5d      	ldr	r3, [pc, #372]	; (8005bdc <runCmdTask+0x328>)
 8005a68:	2263      	movs	r2, #99	; 0x63
 8005a6a:	701a      	strb	r2, [r3, #0]
      break;
 8005a6c:	e280      	b.n	8005f70 <runCmdTask+0x6bc>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 8005a6e:	4b5c      	ldr	r3, [pc, #368]	; (8005be0 <runCmdTask+0x32c>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005a74:	4b59      	ldr	r3, [pc, #356]	; (8005bdc <runCmdTask+0x328>)
 8005a76:	2263      	movs	r2, #99	; 0x63
 8005a78:	701a      	strb	r2, [r3, #0]
      break;
 8005a7a:	e279      	b.n	8005f70 <runCmdTask+0x6bc>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 8005a7c:	4b57      	ldr	r3, [pc, #348]	; (8005bdc <runCmdTask+0x328>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	4a58      	ldr	r2, [pc, #352]	; (8005be4 <runCmdTask+0x330>)
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	4413      	add	r3, r2
 8005a86:	3304      	adds	r3, #4
 8005a88:	edd3 7a00 	vldr	s15, [r3]
 8005a8c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005be8 <runCmdTask+0x334>
 8005a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a98:	dd02      	ble.n	8005aa0 <runCmdTask+0x1ec>
 8005a9a:	f240 1309 	movw	r3, #265	; 0x109
 8005a9e:	e01c      	b.n	8005ada <runCmdTask+0x226>
 8005aa0:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <runCmdTask+0x328>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	4a4f      	ldr	r2, [pc, #316]	; (8005be4 <runCmdTask+0x330>)
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3304      	adds	r3, #4
 8005aac:	edd3 7a00 	vldr	s15, [r3]
 8005ab0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005bec <runCmdTask+0x338>
 8005ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abc:	d501      	bpl.n	8005ac2 <runCmdTask+0x20e>
 8005abe:	2346      	movs	r3, #70	; 0x46
 8005ac0:	e00b      	b.n	8005ada <runCmdTask+0x226>
 8005ac2:	4b46      	ldr	r3, [pc, #280]	; (8005bdc <runCmdTask+0x328>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4a47      	ldr	r2, [pc, #284]	; (8005be4 <runCmdTask+0x330>)
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	4413      	add	r3, r2
 8005acc:	3304      	adds	r3, #4
 8005ace:	edd3 7a00 	vldr	s15, [r3]
 8005ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ad6:	ee17 3a90 	vmov	r3, s15
 8005ada:	4a45      	ldr	r2, [pc, #276]	; (8005bf0 <runCmdTask+0x33c>)
 8005adc:	6812      	ldr	r2, [r2, #0]
 8005ade:	6413      	str	r3, [r2, #64]	; 0x40
 8005ae0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ae4:	f001 fa92 	bl	800700c <HAL_Delay>
 8005ae8:	4b3c      	ldr	r3, [pc, #240]	; (8005bdc <runCmdTask+0x328>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <runCmdTask+0x330>)
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	4413      	add	r3, r2
 8005af2:	3308      	adds	r3, #8
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3f      	ldr	r2, [pc, #252]	; (8005bf4 <runCmdTask+0x340>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <runCmdTask+0x328>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	4a39      	ldr	r2, [pc, #228]	; (8005be4 <runCmdTask+0x330>)
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4413      	add	r3, r2
 8005b04:	330c      	adds	r3, #12
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	2104      	movs	r1, #4
 8005b16:	4838      	ldr	r0, [pc, #224]	; (8005bf8 <runCmdTask+0x344>)
 8005b18:	f002 f9ac 	bl	8007e74 <HAL_GPIO_WritePin>
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <runCmdTask+0x328>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	4a30      	ldr	r2, [pc, #192]	; (8005be4 <runCmdTask+0x330>)
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	4413      	add	r3, r2
 8005b26:	330c      	adds	r3, #12
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	2108      	movs	r1, #8
 8005b38:	482f      	ldr	r0, [pc, #188]	; (8005bf8 <runCmdTask+0x344>)
 8005b3a:	f002 f99b 	bl	8007e74 <HAL_GPIO_WritePin>
 8005b3e:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <runCmdTask+0x328>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	4a28      	ldr	r2, [pc, #160]	; (8005be4 <runCmdTask+0x330>)
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	4413      	add	r3, r2
 8005b48:	330c      	adds	r3, #12
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	2120      	movs	r1, #32
 8005b5a:	4827      	ldr	r0, [pc, #156]	; (8005bf8 <runCmdTask+0x344>)
 8005b5c:	f002 f98a 	bl	8007e74 <HAL_GPIO_WritePin>
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <runCmdTask+0x328>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <runCmdTask+0x330>)
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	4413      	add	r3, r2
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	2300      	moveq	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	481e      	ldr	r0, [pc, #120]	; (8005bf8 <runCmdTask+0x344>)
 8005b7e:	f002 f979 	bl	8007e74 <HAL_GPIO_WritePin>
 8005b82:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <runCmdTask+0x328>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <runCmdTask+0x330>)
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881a      	ldrh	r2, [r3, #0]
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <runCmdTask+0x348>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	635a      	str	r2, [r3, #52]	; 0x34
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <runCmdTask+0x328>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <runCmdTask+0x330>)
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	881a      	ldrh	r2, [r3, #0]
 8005ba2:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <runCmdTask+0x348>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <runCmdTask+0x34c>)
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <runCmdTask+0x34c>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d12f      	bne.n	8005c14 <runCmdTask+0x360>
      {
        __CLEAR_CURCMD(curCmd);
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <runCmdTask+0x328>)
 8005bb6:	2264      	movs	r2, #100	; 0x64
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <runCmdTask+0x328>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005bc0:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <runCmdTask+0x350>)
 8005bc2:	210f      	movs	r1, #15
 8005bc4:	4810      	ldr	r0, [pc, #64]	; (8005c08 <runCmdTask+0x354>)
 8005bc6:	f009 fe05 	bl	800f7d4 <sniprintf>
 8005bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bce:	2206      	movs	r2, #6
 8005bd0:	490e      	ldr	r1, [pc, #56]	; (8005c0c <runCmdTask+0x358>)
 8005bd2:	480f      	ldr	r0, [pc, #60]	; (8005c10 <runCmdTask+0x35c>)
 8005bd4:	f005 fc81 	bl	800b4da <HAL_UART_Transmit>
 8005bd8:	e036      	b.n	8005c48 <runCmdTask+0x394>
 8005bda:	bf00      	nop
 8005bdc:	200004cc 	.word	0x200004cc
 8005be0:	20000134 	.word	0x20000134
 8005be4:	20000004 	.word	0x20000004
 8005be8:	43848000 	.word	0x43848000
 8005bec:	428c0000 	.word	0x428c0000
 8005bf0:	200002a4 	.word	0x200002a4
 8005bf4:	200004e4 	.word	0x200004e4
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	200003c4 	.word	0x200003c4
 8005c00:	20000498 	.word	0x20000498
 8005c04:	080101ec 	.word	0x080101ec
 8005c08:	200004d0 	.word	0x200004d0
 8005c0c:	080101f4 	.word	0x080101f4
 8005c10:	2000040c 	.word	0x2000040c
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005c14:	4b9c      	ldr	r3, [pc, #624]	; (8005e88 <runCmdTask+0x5d4>)
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	4a9c      	ldr	r2, [pc, #624]	; (8005e8c <runCmdTask+0x5d8>)
 8005c1a:	499b      	ldr	r1, [pc, #620]	; (8005e88 <runCmdTask+0x5d4>)
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	4b98      	ldr	r3, [pc, #608]	; (8005e88 <runCmdTask+0x5d4>)
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a97      	ldr	r2, [pc, #604]	; (8005e88 <runCmdTask+0x5d4>)
 8005c2c:	7892      	ldrb	r2, [r2, #2]
 8005c2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c32:	fb01 f202 	mul.w	r2, r1, r2
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	4b93      	ldr	r3, [pc, #588]	; (8005e88 <runCmdTask+0x5d4>)
 8005c3c:	705a      	strb	r2, [r3, #1]
 8005c3e:	4a94      	ldr	r2, [pc, #592]	; (8005e90 <runCmdTask+0x5dc>)
 8005c40:	210f      	movs	r1, #15
 8005c42:	4894      	ldr	r0, [pc, #592]	; (8005e94 <runCmdTask+0x5e0>)
 8005c44:	f009 fdc6 	bl	800f7d4 <sniprintf>
      __PEND_CURCMD(curCmd);
 8005c48:	4b90      	ldr	r3, [pc, #576]	; (8005e8c <runCmdTask+0x5d8>)
 8005c4a:	2263      	movs	r2, #99	; 0x63
 8005c4c:	701a      	strb	r2, [r3, #0]
      break;
 8005c4e:	e18f      	b.n	8005f70 <runCmdTask+0x6bc>
    case 7: // FL
      curTask = TASK_FL;
 8005c50:	4b91      	ldr	r3, [pc, #580]	; (8005e98 <runCmdTask+0x5e4>)
 8005c52:	2202      	movs	r2, #2
 8005c54:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005c56:	4b8d      	ldr	r3, [pc, #564]	; (8005e8c <runCmdTask+0x5d8>)
 8005c58:	2263      	movs	r2, #99	; 0x63
 8005c5a:	701a      	strb	r2, [r3, #0]
      break;
 8005c5c:	e188      	b.n	8005f70 <runCmdTask+0x6bc>
    case 8: // FR
      curTask = TASK_FR;
 8005c5e:	4b8e      	ldr	r3, [pc, #568]	; (8005e98 <runCmdTask+0x5e4>)
 8005c60:	2203      	movs	r2, #3
 8005c62:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005c64:	4b89      	ldr	r3, [pc, #548]	; (8005e8c <runCmdTask+0x5d8>)
 8005c66:	2263      	movs	r2, #99	; 0x63
 8005c68:	701a      	strb	r2, [r3, #0]
      break;
 8005c6a:	e181      	b.n	8005f70 <runCmdTask+0x6bc>
    case 9: // BL
      curTask = TASK_BL;
 8005c6c:	4b8a      	ldr	r3, [pc, #552]	; (8005e98 <runCmdTask+0x5e4>)
 8005c6e:	2204      	movs	r2, #4
 8005c70:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005c72:	4b86      	ldr	r3, [pc, #536]	; (8005e8c <runCmdTask+0x5d8>)
 8005c74:	2263      	movs	r2, #99	; 0x63
 8005c76:	701a      	strb	r2, [r3, #0]
      break;
 8005c78:	e17a      	b.n	8005f70 <runCmdTask+0x6bc>
    case 10: // BR
      curTask = TASK_BR;
 8005c7a:	4b87      	ldr	r3, [pc, #540]	; (8005e98 <runCmdTask+0x5e4>)
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005c80:	4b82      	ldr	r3, [pc, #520]	; (8005e8c <runCmdTask+0x5d8>)
 8005c82:	2263      	movs	r2, #99	; 0x63
 8005c84:	701a      	strb	r2, [r3, #0]
      break;
 8005c86:	e173      	b.n	8005f70 <runCmdTask+0x6bc>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8005c88:	4b80      	ldr	r3, [pc, #512]	; (8005e8c <runCmdTask+0x5d8>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b0b      	cmp	r3, #11
 8005c8e:	d005      	beq.n	8005c9c <runCmdTask+0x3e8>
 8005c90:	4b82      	ldr	r3, [pc, #520]	; (8005e9c <runCmdTask+0x5e8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f240 1209 	movw	r2, #265	; 0x109
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
 8005c9a:	e003      	b.n	8005ca4 <runCmdTask+0x3f0>
 8005c9c:	4b7f      	ldr	r3, [pc, #508]	; (8005e9c <runCmdTask+0x5e8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2246      	movs	r2, #70	; 0x46
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ca4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ca8:	f001 f9b0 	bl	800700c <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8005cac:	4b77      	ldr	r3, [pc, #476]	; (8005e8c <runCmdTask+0x5d8>)
 8005cae:	2264      	movs	r2, #100	; 0x64
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	4b76      	ldr	r3, [pc, #472]	; (8005e8c <runCmdTask+0x5d8>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005cb8:	4a79      	ldr	r2, [pc, #484]	; (8005ea0 <runCmdTask+0x5ec>)
 8005cba:	210f      	movs	r1, #15
 8005cbc:	4875      	ldr	r0, [pc, #468]	; (8005e94 <runCmdTask+0x5e0>)
 8005cbe:	f009 fd89 	bl	800f7d4 <sniprintf>
 8005cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc6:	2206      	movs	r2, #6
 8005cc8:	4976      	ldr	r1, [pc, #472]	; (8005ea4 <runCmdTask+0x5f0>)
 8005cca:	4877      	ldr	r0, [pc, #476]	; (8005ea8 <runCmdTask+0x5f4>)
 8005ccc:	f005 fc05 	bl	800b4da <HAL_UART_Transmit>
      break;
 8005cd0:	e14e      	b.n	8005f70 <runCmdTask+0x6bc>
    case 13: // debug IR sensor
      // curTask = TASK_ADC;
      break;
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 8005cd2:	4b71      	ldr	r3, [pc, #452]	; (8005e98 <runCmdTask+0x5e4>)
 8005cd4:	2209      	movs	r2, #9
 8005cd6:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005cd8:	4b6c      	ldr	r3, [pc, #432]	; (8005e8c <runCmdTask+0x5d8>)
 8005cda:	2263      	movs	r2, #99	; 0x63
 8005cdc:	701a      	strb	r2, [r3, #0]
      break;
 8005cde:	e147      	b.n	8005f70 <runCmdTask+0x6bc>
    case 15: // TD move until specified distance from obstacle, record the distance
      curTask = TASK_MOVE_OBS_MEM;
 8005ce0:	4b6d      	ldr	r3, [pc, #436]	; (8005e98 <runCmdTask+0x5e4>)
 8005ce2:	220a      	movs	r2, #10
 8005ce4:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005ce6:	4b69      	ldr	r3, [pc, #420]	; (8005e8c <runCmdTask+0x5d8>)
 8005ce8:	2263      	movs	r2, #99	; 0x63
 8005cea:	701a      	strb	r2, [r3, #0]
      break;
 8005cec:	e140      	b.n	8005f70 <runCmdTask+0x6bc>
    case 88: // FAxxx, forward rotate left by xxx degree
    case 89: // FCxxx, forward rotate right by xxx degree
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	486e      	ldr	r0, [pc, #440]	; (8005eac <runCmdTask+0x5f8>)
 8005cf4:	f002 f8be 	bl	8007e74 <HAL_GPIO_WritePin>
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2108      	movs	r1, #8
 8005cfc:	486b      	ldr	r0, [pc, #428]	; (8005eac <runCmdTask+0x5f8>)
 8005cfe:	f002 f8b9 	bl	8007e74 <HAL_GPIO_WritePin>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2120      	movs	r1, #32
 8005d06:	4869      	ldr	r0, [pc, #420]	; (8005eac <runCmdTask+0x5f8>)
 8005d08:	f002 f8b4 	bl	8007e74 <HAL_GPIO_WritePin>
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	2110      	movs	r1, #16
 8005d10:	4866      	ldr	r0, [pc, #408]	; (8005eac <runCmdTask+0x5f8>)
 8005d12:	f002 f8af 	bl	8007e74 <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8005d16:	4b5d      	ldr	r3, [pc, #372]	; (8005e8c <runCmdTask+0x5d8>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b58      	cmp	r3, #88	; 0x58
 8005d1c:	d12d      	bne.n	8005d7a <runCmdTask+0x4c6>
      {
        __SET_SERVO_TURN(&htim1, 90);
 8005d1e:	4b5f      	ldr	r3, [pc, #380]	; (8005e9c <runCmdTask+0x5e8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	225a      	movs	r2, #90	; 0x5a
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
 8005d26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d2a:	f001 f96f 	bl	800700c <HAL_Delay>
        if (curCmd.val >= 10)
 8005d2e:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <runCmdTask+0x5d8>)
 8005d30:	885b      	ldrh	r3, [r3, #2]
 8005d32:	2b09      	cmp	r3, #9
 8005d34:	d90d      	bls.n	8005d52 <runCmdTask+0x49e>
          targetAngle = (curCmd.val - FAOFFSET);
 8005d36:	4b55      	ldr	r3, [pc, #340]	; (8005e8c <runCmdTask+0x5d8>)
 8005d38:	885b      	ldrh	r3, [r3, #2]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b5c      	ldr	r3, [pc, #368]	; (8005eb0 <runCmdTask+0x5fc>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d4a:	4b5a      	ldr	r3, [pc, #360]	; (8005eb4 <runCmdTask+0x600>)
 8005d4c:	edc3 7a00 	vstr	s15, [r3]
 8005d50:	e008      	b.n	8005d64 <runCmdTask+0x4b0>
        else
          targetAngle = curCmd.val;
 8005d52:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <runCmdTask+0x5d8>)
 8005d54:	885b      	ldrh	r3, [r3, #2]
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	4b55      	ldr	r3, [pc, #340]	; (8005eb4 <runCmdTask+0x600>)
 8005d60:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8005d64:	4b54      	ldr	r3, [pc, #336]	; (8005eb8 <runCmdTask+0x604>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f240 5235 	movw	r2, #1333	; 0x535
 8005d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8005d6e:	4b52      	ldr	r3, [pc, #328]	; (8005eb8 <runCmdTask+0x604>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
 8005d78:	e02e      	b.n	8005dd8 <runCmdTask+0x524>
      }
      else
      {
        __SET_SERVO_TURN(&htim1, 265);
 8005d7a:	4b48      	ldr	r3, [pc, #288]	; (8005e9c <runCmdTask+0x5e8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f240 1209 	movw	r2, #265	; 0x109
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
 8005d84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d88:	f001 f940 	bl	800700c <HAL_Delay>
        if (curCmd.val >= 10)
 8005d8c:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <runCmdTask+0x5d8>)
 8005d8e:	885b      	ldrh	r3, [r3, #2]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	d90d      	bls.n	8005db0 <runCmdTask+0x4fc>
          targetAngle = -(curCmd.val - FCOFFSET);
 8005d94:	4b49      	ldr	r3, [pc, #292]	; (8005ebc <runCmdTask+0x608>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4b3c      	ldr	r3, [pc, #240]	; (8005e8c <runCmdTask+0x5d8>)
 8005d9c:	885b      	ldrh	r3, [r3, #2]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005da8:	4b42      	ldr	r3, [pc, #264]	; (8005eb4 <runCmdTask+0x600>)
 8005daa:	edc3 7a00 	vstr	s15, [r3]
 8005dae:	e009      	b.n	8005dc4 <runCmdTask+0x510>
        else
          targetAngle = -curCmd.val;
 8005db0:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <runCmdTask+0x5d8>)
 8005db2:	885b      	ldrh	r3, [r3, #2]
 8005db4:	425b      	negs	r3, r3
 8005db6:	ee07 3a90 	vmov	s15, r3
 8005dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dbe:	4b3d      	ldr	r3, [pc, #244]	; (8005eb4 <runCmdTask+0x600>)
 8005dc0:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8005dc4:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <runCmdTask+0x604>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8005dce:	4b3a      	ldr	r3, [pc, #232]	; (8005eb8 <runCmdTask+0x604>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f240 5235 	movw	r2, #1333	; 0x535
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <runCmdTask+0x5d8>)
 8005dda:	2263      	movs	r2, #99	; 0x63
 8005ddc:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8005dde:	4835      	ldr	r0, [pc, #212]	; (8005eb4 <runCmdTask+0x600>)
 8005de0:	f7fd fa3a 	bl	8003258 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8005de4:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <runCmdTask+0x5d8>)
 8005de6:	2264      	movs	r2, #100	; 0x64
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <runCmdTask+0x5d8>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <runCmdTask+0x5ec>)
 8005df2:	210f      	movs	r1, #15
 8005df4:	4827      	ldr	r0, [pc, #156]	; (8005e94 <runCmdTask+0x5e0>)
 8005df6:	f009 fced 	bl	800f7d4 <sniprintf>
 8005dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dfe:	2206      	movs	r2, #6
 8005e00:	4928      	ldr	r1, [pc, #160]	; (8005ea4 <runCmdTask+0x5f0>)
 8005e02:	4829      	ldr	r0, [pc, #164]	; (8005ea8 <runCmdTask+0x5f4>)
 8005e04:	f005 fb69 	bl	800b4da <HAL_UART_Transmit>
      break;
 8005e08:	e0b2      	b.n	8005f70 <runCmdTask+0x6bc>
    case 90: // BAxxx, backward rotate right by xxx degree
    case 91: // BCxxx, backward rotate left by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, (int)(!(curCmd.index - 90)));
 8005e0a:	4b20      	ldr	r3, [pc, #128]	; (8005e8c <runCmdTask+0x5d8>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b5a      	cmp	r3, #90	; 0x5a
 8005e10:	d105      	bne.n	8005e1e <runCmdTask+0x56a>
 8005e12:	4b22      	ldr	r3, [pc, #136]	; (8005e9c <runCmdTask+0x5e8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f240 1209 	movw	r2, #265	; 0x109
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8005e1c:	e003      	b.n	8005e26 <runCmdTask+0x572>
 8005e1e:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <runCmdTask+0x5e8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2246      	movs	r2, #70	; 0x46
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
 8005e26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005e2a:	f001 f8ef 	bl	800700c <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8005e2e:	2201      	movs	r2, #1
 8005e30:	2104      	movs	r1, #4
 8005e32:	481e      	ldr	r0, [pc, #120]	; (8005eac <runCmdTask+0x5f8>)
 8005e34:	f002 f81e 	bl	8007e74 <HAL_GPIO_WritePin>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2108      	movs	r1, #8
 8005e3c:	481b      	ldr	r0, [pc, #108]	; (8005eac <runCmdTask+0x5f8>)
 8005e3e:	f002 f819 	bl	8007e74 <HAL_GPIO_WritePin>
 8005e42:	2201      	movs	r2, #1
 8005e44:	2120      	movs	r1, #32
 8005e46:	4819      	ldr	r0, [pc, #100]	; (8005eac <runCmdTask+0x5f8>)
 8005e48:	f002 f814 	bl	8007e74 <HAL_GPIO_WritePin>
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2110      	movs	r1, #16
 8005e50:	4816      	ldr	r0, [pc, #88]	; (8005eac <runCmdTask+0x5f8>)
 8005e52:	f002 f80f 	bl	8007e74 <HAL_GPIO_WritePin>
      if (curCmd.index == 90)
 8005e56:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <runCmdTask+0x5d8>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b5a      	cmp	r3, #90	; 0x5a
 8005e5c:	d130      	bne.n	8005ec0 <runCmdTask+0x60c>
      {

        targetAngle = curCmd.val;
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <runCmdTask+0x5d8>)
 8005e60:	885b      	ldrh	r3, [r3, #2]
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	4b12      	ldr	r3, [pc, #72]	; (8005eb4 <runCmdTask+0x600>)
 8005e6c:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <runCmdTask+0x604>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34
 8005e7a:	4b0f      	ldr	r3, [pc, #60]	; (8005eb8 <runCmdTask+0x604>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f240 5235 	movw	r2, #1333	; 0x535
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
 8005e84:	e030      	b.n	8005ee8 <runCmdTask+0x634>
 8005e86:	bf00      	nop
 8005e88:	20000498 	.word	0x20000498
 8005e8c:	200004cc 	.word	0x200004cc
 8005e90:	080101fc 	.word	0x080101fc
 8005e94:	200004d0 	.word	0x200004d0
 8005e98:	20000134 	.word	0x20000134
 8005e9c:	200002a4 	.word	0x200002a4
 8005ea0:	080101ec 	.word	0x080101ec
 8005ea4:	080101f4 	.word	0x080101f4
 8005ea8:	2000040c 	.word	0x2000040c
 8005eac:	40020000 	.word	0x40020000
 8005eb0:	20000003 	.word	0x20000003
 8005eb4:	200004e4 	.word	0x200004e4
 8005eb8:	200003c4 	.word	0x200003c4
 8005ebc:	20000002 	.word	0x20000002
      }
      else
      {
        targetAngle = -curCmd.val;
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <runCmdTask+0x6c4>)
 8005ec2:	885b      	ldrh	r3, [r3, #2]
 8005ec4:	425b      	negs	r3, r3
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ece:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <runCmdTask+0x6c8>)
 8005ed0:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8005ed4:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <runCmdTask+0x6cc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f240 5235 	movw	r2, #1333	; 0x535
 8005edc:	635a      	str	r2, [r3, #52]	; 0x34
 8005ede:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <runCmdTask+0x6cc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8005ee8:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <runCmdTask+0x6c4>)
 8005eea:	2263      	movs	r2, #99	; 0x63
 8005eec:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8005eee:	4823      	ldr	r0, [pc, #140]	; (8005f7c <runCmdTask+0x6c8>)
 8005ef0:	f7fd f9b2 	bl	8003258 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8005ef4:	4b20      	ldr	r3, [pc, #128]	; (8005f78 <runCmdTask+0x6c4>)
 8005ef6:	2264      	movs	r2, #100	; 0x64
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <runCmdTask+0x6c4>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005f00:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <runCmdTask+0x6d0>)
 8005f02:	210f      	movs	r1, #15
 8005f04:	4820      	ldr	r0, [pc, #128]	; (8005f88 <runCmdTask+0x6d4>)
 8005f06:	f009 fc65 	bl	800f7d4 <sniprintf>
 8005f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f0e:	2206      	movs	r2, #6
 8005f10:	491e      	ldr	r1, [pc, #120]	; (8005f8c <runCmdTask+0x6d8>)
 8005f12:	481f      	ldr	r0, [pc, #124]	; (8005f90 <runCmdTask+0x6dc>)
 8005f14:	f005 fae1 	bl	800b4da <HAL_UART_Transmit>
      break;
 8005f18:	e02a      	b.n	8005f70 <runCmdTask+0x6bc>
    case 92: // TAxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_A;
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <runCmdTask+0x6e0>)
 8005f1c:	220b      	movs	r2, #11
 8005f1e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005f20:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <runCmdTask+0x6c4>)
 8005f22:	2263      	movs	r2, #99	; 0x63
 8005f24:	701a      	strb	r2, [r3, #0]
      break;
 8005f26:	e023      	b.n	8005f70 <runCmdTask+0x6bc>
    case 93: // IR move until overshoot
      curTask = TASK_TURN_IR;
 8005f28:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <runCmdTask+0x6e0>)
 8005f2a:	220d      	movs	r2, #13
 8005f2c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <runCmdTask+0x6c4>)
 8005f30:	2263      	movs	r2, #99	; 0x63
 8005f32:	701a      	strb	r2, [r3, #0]
      break;
 8005f34:	e01c      	b.n	8005f70 <runCmdTask+0x6bc>
    case 94: // IR move until close to obstacle
      curTask = TASK_TURN_IR_CLOSE;
 8005f36:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <runCmdTask+0x6e0>)
 8005f38:	220e      	movs	r2, #14
 8005f3a:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <runCmdTask+0x6c4>)
 8005f3e:	2263      	movs	r2, #99	; 0x63
 8005f40:	701a      	strb	r2, [r3, #0]
      break;
 8005f42:	e015      	b.n	8005f70 <runCmdTask+0x6bc>
    case 95: // TBxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_B;
 8005f44:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <runCmdTask+0x6e0>)
 8005f46:	220c      	movs	r2, #12
 8005f48:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <runCmdTask+0x6c4>)
 8005f4c:	2263      	movs	r2, #99	; 0x63
 8005f4e:	701a      	strb	r2, [r3, #0]
      break;
 8005f50:	e00e      	b.n	8005f70 <runCmdTask+0x6bc>
    case 96: // GHxx, 01 from left (after TB01), 02 from right (after TB02),  --TASK 2
      curTask = TASK_GO_HOME;
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <runCmdTask+0x6e0>)
 8005f54:	220f      	movs	r2, #15
 8005f56:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <runCmdTask+0x6c4>)
 8005f5a:	2263      	movs	r2, #99	; 0x63
 8005f5c:	701a      	strb	r2, [r3, #0]
      break;
 8005f5e:	e007      	b.n	8005f70 <runCmdTask+0x6bc>
    case 97: // AMxx, 01 from left (after TA01), 02 from right (after TA02),  --TASK 2
      curTask = TASK_AM;
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <runCmdTask+0x6e0>)
 8005f62:	2210      	movs	r2, #16
 8005f64:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <runCmdTask+0x6c4>)
 8005f68:	2263      	movs	r2, #99	; 0x63
 8005f6a:	701a      	strb	r2, [r3, #0]
      break;
 8005f6c:	e000      	b.n	8005f70 <runCmdTask+0x6bc>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8005f6e:	bf00      	nop
    }
    osDelay(1);
 8005f70:	2001      	movs	r0, #1
 8005f72:	f006 fbfd 	bl	800c770 <osDelay>
    switch (curCmd.index)
 8005f76:	e4a1      	b.n	80058bc <runCmdTask+0x8>
 8005f78:	200004cc 	.word	0x200004cc
 8005f7c:	200004e4 	.word	0x200004e4
 8005f80:	200003c4 	.word	0x200003c4
 8005f84:	080101ec 	.word	0x080101ec
 8005f88:	200004d0 	.word	0x200004d0
 8005f8c:	080101f4 	.word	0x080101f4
 8005f90:	2000040c 	.word	0x2000040c
 8005f94:	20000134 	.word	0x20000134

08005f98 <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8005fa0:	4b2f      	ldr	r3, [pc, #188]	; (8006060 <runMoveDistObsTask+0xc8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b09      	cmp	r3, #9
 8005fa6:	d004      	beq.n	8005fb2 <runMoveDistObsTask+0x1a>
      osDelay(1000);
 8005fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fac:	f006 fbe0 	bl	800c770 <osDelay>
 8005fb0:	e051      	b.n	8006056 <runMoveDistObsTask+0xbe>
    else
    {
      targetDist = (float)curCmd.val;
 8005fb2:	4b2c      	ldr	r3, [pc, #176]	; (8006064 <runMoveDistObsTask+0xcc>)
 8005fb4:	885b      	ldrh	r3, [r3, #2]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	4b2a      	ldr	r3, [pc, #168]	; (8006068 <runMoveDistObsTask+0xd0>)
 8005fc0:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	4828      	ldr	r0, [pc, #160]	; (8006068 <runMoveDistObsTask+0xd0>)
 8005fc8:	f7fd f9f2 	bl	80033b0 <RobotMoveDistObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8005fcc:	4b27      	ldr	r3, [pc, #156]	; (800606c <runMoveDistObsTask+0xd4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <runMoveDistObsTask+0xd4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	639a      	str	r2, [r3, #56]	; 0x38
 8005fdc:	4b20      	ldr	r3, [pc, #128]	; (8006060 <runMoveDistObsTask+0xc8>)
 8005fde:	781a      	ldrb	r2, [r3, #0]
 8005fe0:	4b23      	ldr	r3, [pc, #140]	; (8006070 <runMoveDistObsTask+0xd8>)
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <runMoveDistObsTask+0xc8>)
 8005fe6:	2211      	movs	r2, #17
 8005fe8:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <runMoveDistObsTask+0xdc>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005ff0:	4b21      	ldr	r3, [pc, #132]	; (8006078 <runMoveDistObsTask+0xe0>)
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	4b20      	ldr	r3, [pc, #128]	; (8006078 <runMoveDistObsTask+0xe0>)
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d112      	bne.n	8006022 <runMoveDistObsTask+0x8a>
      {
        __CLEAR_CURCMD(curCmd);
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <runMoveDistObsTask+0xcc>)
 8005ffe:	2264      	movs	r2, #100	; 0x64
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	4b18      	ldr	r3, [pc, #96]	; (8006064 <runMoveDistObsTask+0xcc>)
 8006004:	2200      	movs	r2, #0
 8006006:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <runMoveDistObsTask+0xe4>)
 800600a:	210f      	movs	r1, #15
 800600c:	481c      	ldr	r0, [pc, #112]	; (8006080 <runMoveDistObsTask+0xe8>)
 800600e:	f009 fbe1 	bl	800f7d4 <sniprintf>
 8006012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006016:	2206      	movs	r2, #6
 8006018:	491a      	ldr	r1, [pc, #104]	; (8006084 <runMoveDistObsTask+0xec>)
 800601a:	481b      	ldr	r0, [pc, #108]	; (8006088 <runMoveDistObsTask+0xf0>)
 800601c:	f005 fa5d 	bl	800b4da <HAL_UART_Transmit>
 8006020:	e019      	b.n	8006056 <runMoveDistObsTask+0xbe>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <runMoveDistObsTask+0xe0>)
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	4a0f      	ldr	r2, [pc, #60]	; (8006064 <runMoveDistObsTask+0xcc>)
 8006028:	4913      	ldr	r1, [pc, #76]	; (8006078 <runMoveDistObsTask+0xe0>)
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4b11      	ldr	r3, [pc, #68]	; (8006078 <runMoveDistObsTask+0xe0>)
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	3301      	adds	r3, #1
 8006038:	4a0f      	ldr	r2, [pc, #60]	; (8006078 <runMoveDistObsTask+0xe0>)
 800603a:	7892      	ldrb	r2, [r2, #2]
 800603c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006040:	fb01 f202 	mul.w	r2, r1, r2
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	b2da      	uxtb	r2, r3
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <runMoveDistObsTask+0xe0>)
 800604a:	705a      	strb	r2, [r3, #1]
 800604c:	4a0f      	ldr	r2, [pc, #60]	; (800608c <runMoveDistObsTask+0xf4>)
 800604e:	210f      	movs	r1, #15
 8006050:	480b      	ldr	r0, [pc, #44]	; (8006080 <runMoveDistObsTask+0xe8>)
 8006052:	f009 fbbf 	bl	800f7d4 <sniprintf>
    }
    osDelay(1);
 8006056:	2001      	movs	r0, #1
 8006058:	f006 fb8a 	bl	800c770 <osDelay>
    if (curTask != TASK_MOVE_OBS)
 800605c:	e7a0      	b.n	8005fa0 <runMoveDistObsTask+0x8>
 800605e:	bf00      	nop
 8006060:	20000134 	.word	0x20000134
 8006064:	200004cc 	.word	0x200004cc
 8006068:	200004f8 	.word	0x200004f8
 800606c:	200003c4 	.word	0x200003c4
 8006070:	20000135 	.word	0x20000135
 8006074:	20000564 	.word	0x20000564
 8006078:	20000498 	.word	0x20000498
 800607c:	080101ec 	.word	0x080101ec
 8006080:	200004d0 	.word	0x200004d0
 8006084:	080101f4 	.word	0x080101f4
 8006088:	2000040c 	.word	0x2000040c
 800608c:	080101fc 	.word	0x080101fc

08006090 <runTurnATask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnATask */
void runTurnATask(void *argument)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnATask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_A)
 8006098:	4b42      	ldr	r3, [pc, #264]	; (80061a4 <runTurnATask+0x114>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b0b      	cmp	r3, #11
 800609e:	d004      	beq.n	80060aa <runTurnATask+0x1a>
      osDelay(1000);
 80060a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060a4:	f006 fb64 	bl	800c770 <osDelay>
 80060a8:	e077      	b.n	800619a <runTurnATask+0x10a>
    else
    {

      switch (curCmd.val)
 80060aa:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <runTurnATask+0x118>)
 80060ac:	885b      	ldrh	r3, [r3, #2]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d002      	beq.n	80060b8 <runTurnATask+0x28>
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d01a      	beq.n	80060ec <runTurnATask+0x5c>
 80060b6:	e033      	b.n	8006120 <runTurnATask+0x90>
      {
      case 01: // Turn A right:
        // DT25
        targetDist = 25;
 80060b8:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <runTurnATask+0x11c>)
 80060ba:	4a3d      	ldr	r2, [pc, #244]	; (80061b0 <runTurnATask+0x120>)
 80060bc:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80060be:	2102      	movs	r1, #2
 80060c0:	483a      	ldr	r0, [pc, #232]	; (80061ac <runTurnATask+0x11c>)
 80060c2:	f7fd f975 	bl	80033b0 <RobotMoveDistObstacle>
        // FC45
        RobotTurnFC45();
 80060c6:	f7fd ff95 	bl	8003ff4 <RobotTurnFC45>
        osDelay(100);
 80060ca:	2064      	movs	r0, #100	; 0x64
 80060cc:	f006 fb50 	bl	800c770 <osDelay>
        // FA45
        RobotTurnFA45();
 80060d0:	f7fd ffd6 	bl	8004080 <RobotTurnFA45>
        osDelay(100);
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	f006 fb4b 	bl	800c770 <osDelay>
        // BW05
        targetDist = 05;
 80060da:	4b34      	ldr	r3, [pc, #208]	; (80061ac <runTurnATask+0x11c>)
 80060dc:	4a35      	ldr	r2, [pc, #212]	; (80061b4 <runTurnATask+0x124>)
 80060de:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80060e0:	2200      	movs	r2, #0
 80060e2:	2100      	movs	r1, #0
 80060e4:	4831      	ldr	r0, [pc, #196]	; (80061ac <runTurnATask+0x11c>)
 80060e6:	f7fc fc7b 	bl	80029e0 <RobotMoveDist>
        // osDelay(100);
        break;
 80060ea:	e019      	b.n	8006120 <runTurnATask+0x90>

      case 02: // Turn A left:
        // DT25
        targetDist = 25;
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <runTurnATask+0x11c>)
 80060ee:	4a30      	ldr	r2, [pc, #192]	; (80061b0 <runTurnATask+0x120>)
 80060f0:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80060f2:	2102      	movs	r1, #2
 80060f4:	482d      	ldr	r0, [pc, #180]	; (80061ac <runTurnATask+0x11c>)
 80060f6:	f7fd f95b 	bl	80033b0 <RobotMoveDistObstacle>
        // FA45
        RobotTurnFA45();
 80060fa:	f7fd ffc1 	bl	8004080 <RobotTurnFA45>
        osDelay(100);
 80060fe:	2064      	movs	r0, #100	; 0x64
 8006100:	f006 fb36 	bl	800c770 <osDelay>
        // FC45
        RobotTurnFC45();
 8006104:	f7fd ff76 	bl	8003ff4 <RobotTurnFC45>
        osDelay(100);
 8006108:	2064      	movs	r0, #100	; 0x64
 800610a:	f006 fb31 	bl	800c770 <osDelay>
        // BW05
        targetDist = 5;
 800610e:	4b27      	ldr	r3, [pc, #156]	; (80061ac <runTurnATask+0x11c>)
 8006110:	4a28      	ldr	r2, [pc, #160]	; (80061b4 <runTurnATask+0x124>)
 8006112:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8006114:	2200      	movs	r2, #0
 8006116:	2100      	movs	r1, #0
 8006118:	4824      	ldr	r0, [pc, #144]	; (80061ac <runTurnATask+0x11c>)
 800611a:	f7fc fc61 	bl	80029e0 <RobotMoveDist>
        // osDelay(100);
        break;
 800611e:	bf00      	nop
      }
      clickOnce = 0;
 8006120:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <runTurnATask+0x128>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8006126:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <runTurnATask+0x114>)
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <runTurnATask+0x12c>)
 800612c:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <runTurnATask+0x114>)
 8006130:	2211      	movs	r2, #17
 8006132:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8006134:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <runTurnATask+0x130>)
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <runTurnATask+0x130>)
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	429a      	cmp	r2, r3
 800613e:	d112      	bne.n	8006166 <runTurnATask+0xd6>
      {
        __CLEAR_CURCMD(curCmd);
 8006140:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <runTurnATask+0x118>)
 8006142:	2264      	movs	r2, #100	; 0x64
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <runTurnATask+0x118>)
 8006148:	2200      	movs	r2, #0
 800614a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <runTurnATask+0x134>)
 800614e:	210f      	movs	r1, #15
 8006150:	481d      	ldr	r0, [pc, #116]	; (80061c8 <runTurnATask+0x138>)
 8006152:	f009 fb3f 	bl	800f7d4 <sniprintf>
 8006156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800615a:	2206      	movs	r2, #6
 800615c:	491b      	ldr	r1, [pc, #108]	; (80061cc <runTurnATask+0x13c>)
 800615e:	481c      	ldr	r0, [pc, #112]	; (80061d0 <runTurnATask+0x140>)
 8006160:	f005 f9bb 	bl	800b4da <HAL_UART_Transmit>
 8006164:	e019      	b.n	800619a <runTurnATask+0x10a>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8006166:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <runTurnATask+0x130>)
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	4a0f      	ldr	r2, [pc, #60]	; (80061a8 <runTurnATask+0x118>)
 800616c:	4914      	ldr	r1, [pc, #80]	; (80061c0 <runTurnATask+0x130>)
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <runTurnATask+0x130>)
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	3301      	adds	r3, #1
 800617c:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <runTurnATask+0x130>)
 800617e:	7892      	ldrb	r2, [r2, #2]
 8006180:	fb93 f1f2 	sdiv	r1, r3, r2
 8006184:	fb01 f202 	mul.w	r2, r1, r2
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	b2da      	uxtb	r2, r3
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <runTurnATask+0x130>)
 800618e:	705a      	strb	r2, [r3, #1]
 8006190:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <runTurnATask+0x144>)
 8006192:	210f      	movs	r1, #15
 8006194:	480c      	ldr	r0, [pc, #48]	; (80061c8 <runTurnATask+0x138>)
 8006196:	f009 fb1d 	bl	800f7d4 <sniprintf>
    }
    osDelay(1);
 800619a:	2001      	movs	r0, #1
 800619c:	f006 fae8 	bl	800c770 <osDelay>
    if (curTask != TASK_TURN_A)
 80061a0:	e77a      	b.n	8006098 <runTurnATask+0x8>
 80061a2:	bf00      	nop
 80061a4:	20000134 	.word	0x20000134
 80061a8:	200004cc 	.word	0x200004cc
 80061ac:	200004f8 	.word	0x200004f8
 80061b0:	41c80000 	.word	0x41c80000
 80061b4:	40a00000 	.word	0x40a00000
 80061b8:	20000564 	.word	0x20000564
 80061bc:	20000135 	.word	0x20000135
 80061c0:	20000498 	.word	0x20000498
 80061c4:	080101ec 	.word	0x080101ec
 80061c8:	200004d0 	.word	0x200004d0
 80061cc:	080101f4 	.word	0x080101f4
 80061d0:	2000040c 	.word	0x2000040c
 80061d4:	080101fc 	.word	0x080101fc

080061d8 <runTDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTDTask */
void runTDTask(void *argument)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTDTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS_MEM)
 80061e0:	4b35      	ldr	r3, [pc, #212]	; (80062b8 <runTDTask+0xe0>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b0a      	cmp	r3, #10
 80061e6:	d004      	beq.n	80061f2 <runTDTask+0x1a>
      osDelay(1000);
 80061e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061ec:	f006 fac0 	bl	800c770 <osDelay>
 80061f0:	e05d      	b.n	80062ae <runTDTask+0xd6>
    else
    {
      // for debugging TD task only: save dist tick when travelling until stop given distance from obstacle
      uint16_t savedDistTick_TD = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	81fb      	strh	r3, [r7, #14]
      targetDist = (float)curCmd.val;
 80061f6:	4b31      	ldr	r3, [pc, #196]	; (80062bc <runTDTask+0xe4>)
 80061f8:	885b      	ldrh	r3, [r3, #2]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	4b2f      	ldr	r3, [pc, #188]	; (80062c0 <runTDTask+0xe8>)
 8006204:	edc3 7a00 	vstr	s15, [r3]

      RobotMoveDistObstacleMem(&savedDistTick_TD, &targetDist, SPEED_MODE_2);
 8006208:	f107 030e 	add.w	r3, r7, #14
 800620c:	2202      	movs	r2, #2
 800620e:	492c      	ldr	r1, [pc, #176]	; (80062c0 <runTDTask+0xe8>)
 8006210:	4618      	mov	r0, r3
 8006212:	f7fd fa81 	bl	8003718 <RobotMoveDistObstacleMem>
      RobotMoveTick(&savedDistTick_TD, DIR_BACKWARD, SPEED_MODE_2);
 8006216:	f107 030e 	add.w	r3, r7, #14
 800621a:	2202      	movs	r2, #2
 800621c:	2100      	movs	r1, #0
 800621e:	4618      	mov	r0, r3
 8006220:	f7fc fd72 	bl	8002d08 <RobotMoveTick>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <runTDTask+0xec>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2200      	movs	r2, #0
 800622a:	635a      	str	r2, [r3, #52]	; 0x34
 800622c:	4b25      	ldr	r3, [pc, #148]	; (80062c4 <runTDTask+0xec>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2200      	movs	r2, #0
 8006232:	639a      	str	r2, [r3, #56]	; 0x38
 8006234:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <runTDTask+0xe0>)
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	4b23      	ldr	r3, [pc, #140]	; (80062c8 <runTDTask+0xf0>)
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <runTDTask+0xe0>)
 800623e:	2211      	movs	r2, #17
 8006240:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 8006242:	4b22      	ldr	r3, [pc, #136]	; (80062cc <runTDTask+0xf4>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <runTDTask+0xf8>)
 800624a:	781a      	ldrb	r2, [r3, #0]
 800624c:	4b20      	ldr	r3, [pc, #128]	; (80062d0 <runTDTask+0xf8>)
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	429a      	cmp	r2, r3
 8006252:	d112      	bne.n	800627a <runTDTask+0xa2>
      {
        __CLEAR_CURCMD(curCmd);
 8006254:	4b19      	ldr	r3, [pc, #100]	; (80062bc <runTDTask+0xe4>)
 8006256:	2264      	movs	r2, #100	; 0x64
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	4b18      	ldr	r3, [pc, #96]	; (80062bc <runTDTask+0xe4>)
 800625c:	2200      	movs	r2, #0
 800625e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8006260:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <runTDTask+0xfc>)
 8006262:	210f      	movs	r1, #15
 8006264:	481c      	ldr	r0, [pc, #112]	; (80062d8 <runTDTask+0x100>)
 8006266:	f009 fab5 	bl	800f7d4 <sniprintf>
 800626a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800626e:	2206      	movs	r2, #6
 8006270:	491a      	ldr	r1, [pc, #104]	; (80062dc <runTDTask+0x104>)
 8006272:	481b      	ldr	r0, [pc, #108]	; (80062e0 <runTDTask+0x108>)
 8006274:	f005 f931 	bl	800b4da <HAL_UART_Transmit>
 8006278:	e019      	b.n	80062ae <runTDTask+0xd6>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <runTDTask+0xf8>)
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	4a0f      	ldr	r2, [pc, #60]	; (80062bc <runTDTask+0xe4>)
 8006280:	4913      	ldr	r1, [pc, #76]	; (80062d0 <runTDTask+0xf8>)
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <runTDTask+0xf8>)
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	3301      	adds	r3, #1
 8006290:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <runTDTask+0xf8>)
 8006292:	7892      	ldrb	r2, [r2, #2]
 8006294:	fb93 f1f2 	sdiv	r1, r3, r2
 8006298:	fb01 f202 	mul.w	r2, r1, r2
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <runTDTask+0xf8>)
 80062a2:	705a      	strb	r2, [r3, #1]
 80062a4:	4a0f      	ldr	r2, [pc, #60]	; (80062e4 <runTDTask+0x10c>)
 80062a6:	210f      	movs	r1, #15
 80062a8:	480b      	ldr	r0, [pc, #44]	; (80062d8 <runTDTask+0x100>)
 80062aa:	f009 fa93 	bl	800f7d4 <sniprintf>
    }
    osDelay(1);
 80062ae:	2001      	movs	r0, #1
 80062b0:	f006 fa5e 	bl	800c770 <osDelay>
    if (curTask != TASK_MOVE_OBS_MEM)
 80062b4:	e794      	b.n	80061e0 <runTDTask+0x8>
 80062b6:	bf00      	nop
 80062b8:	20000134 	.word	0x20000134
 80062bc:	200004cc 	.word	0x200004cc
 80062c0:	200004f8 	.word	0x200004f8
 80062c4:	200003c4 	.word	0x200003c4
 80062c8:	20000135 	.word	0x20000135
 80062cc:	20000564 	.word	0x20000564
 80062d0:	20000498 	.word	0x20000498
 80062d4:	080101ec 	.word	0x080101ec
 80062d8:	200004d0 	.word	0x200004d0
 80062dc:	080101f4 	.word	0x080101f4
 80062e0:	2000040c 	.word	0x2000040c
 80062e4:	080101fc 	.word	0x080101fc

080062e8 <runTurnBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnBTask */
void runTurnBTask(void *argument)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnBTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_B)
 80062f0:	4b75      	ldr	r3, [pc, #468]	; (80064c8 <runTurnBTask+0x1e0>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d004      	beq.n	8006302 <runTurnBTask+0x1a>
      osDelay(1000);
 80062f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062fc:	f006 fa38 	bl	800c770 <osDelay>
 8006300:	e0dd      	b.n	80064be <runTurnBTask+0x1d6>
    else
    {
      switch (curCmd.val)
 8006302:	4b72      	ldr	r3, [pc, #456]	; (80064cc <runTurnBTask+0x1e4>)
 8006304:	885b      	ldrh	r3, [r3, #2]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d002      	beq.n	8006310 <runTurnBTask+0x28>
 800630a:	2b02      	cmp	r3, #2
 800630c:	d04d      	beq.n	80063aa <runTurnBTask+0xc2>
 800630e:	e099      	b.n	8006444 <runTurnBTask+0x15c>
      {
      case 01: // Turn B right:
        // DT30
        targetDist = 27;
 8006310:	4b6f      	ldr	r3, [pc, #444]	; (80064d0 <runTurnBTask+0x1e8>)
 8006312:	4a70      	ldr	r2, [pc, #448]	; (80064d4 <runTurnBTask+0x1ec>)
 8006314:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8006316:	2102      	movs	r1, #2
 8006318:	486d      	ldr	r0, [pc, #436]	; (80064d0 <runTurnBTask+0x1e8>)
 800631a:	f7fd f849 	bl	80033b0 <RobotMoveDistObstacle>
        osDelay(100);
 800631e:	2064      	movs	r0, #100	; 0x64
 8006320:	f006 fa26 	bl	800c770 <osDelay>
        // FR30
        RobotTurnFR30();
 8006324:	f7fd fef2 	bl	800410c <RobotTurnFR30>
        osDelay(50);
 8006328:	2032      	movs	r0, #50	; 0x32
 800632a:	f006 fa21 	bl	800c770 <osDelay>
        // IR01 (left IR, follow wall 1st)
        RobotMoveUntilIROvershoot(0);
 800632e:	2000      	movs	r0, #0
 8006330:	f7fd fb5a 	bl	80039e8 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006334:	2032      	movs	r0, #50	; 0x32
 8006336:	f006 fa1b 	bl	800c770 <osDelay>
        // FL30
        RobotTurnFL30();
 800633a:	f7fd ff7d 	bl	8004238 <RobotTurnFL30>
        osDelay(50);
 800633e:	2032      	movs	r0, #50	; 0x32
 8006340:	f006 fa16 	bl	800c770 <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8006344:	4b62      	ldr	r3, [pc, #392]	; (80064d0 <runTurnBTask+0x1e8>)
 8006346:	4a64      	ldr	r2, [pc, #400]	; (80064d8 <runTurnBTask+0x1f0>)
 8006348:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800634a:	2200      	movs	r2, #0
 800634c:	2101      	movs	r1, #1
 800634e:	4860      	ldr	r0, [pc, #384]	; (80064d0 <runTurnBTask+0x1e8>)
 8006350:	f7fc fb46 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 8006354:	2032      	movs	r0, #50	; 0x32
 8006356:	f006 fa0b 	bl	800c770 <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(0);
 800635a:	2000      	movs	r0, #0
 800635c:	f7fd fb44 	bl	80039e8 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006360:	2032      	movs	r0, #50	; 0x32
 8006362:	f006 fa05 	bl	800c770 <osDelay>
        // FL30
        RobotTurnFL30();
 8006366:	f7fd ff67 	bl	8004238 <RobotTurnFL30>
        osDelay(50);
 800636a:	2032      	movs	r0, #50	; 0x32
 800636c:	f006 fa00 	bl	800c770 <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(0);
 8006370:	2000      	movs	r0, #0
 8006372:	f7fd fcc1 	bl	8003cf8 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8006376:	2032      	movs	r0, #50	; 0x32
 8006378:	f006 f9fa 	bl	800c770 <osDelay>
        // IR01 (left IR)
        RobotMoveUntilIROvershoot(0);
 800637c:	2000      	movs	r0, #0
 800637e:	f7fd fb33 	bl	80039e8 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006382:	2032      	movs	r0, #50	; 0x32
 8006384:	f006 f9f4 	bl	800c770 <osDelay>
        // FW15
        targetDist = 15;
 8006388:	4b51      	ldr	r3, [pc, #324]	; (80064d0 <runTurnBTask+0x1e8>)
 800638a:	4a54      	ldr	r2, [pc, #336]	; (80064dc <runTurnBTask+0x1f4>)
 800638c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 800638e:	2201      	movs	r2, #1
 8006390:	2101      	movs	r1, #1
 8006392:	484f      	ldr	r0, [pc, #316]	; (80064d0 <runTurnBTask+0x1e8>)
 8006394:	f7fc fb24 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 8006398:	2032      	movs	r0, #50	; 0x32
 800639a:	f006 f9e9 	bl	800c770 <osDelay>
        // FL30
        RobotTurnFL30();
 800639e:	f7fd ff4b 	bl	8004238 <RobotTurnFL30>
        osDelay(50);
 80063a2:	2032      	movs	r0, #50	; 0x32
 80063a4:	f006 f9e4 	bl	800c770 <osDelay>
        break;
 80063a8:	e04c      	b.n	8006444 <runTurnBTask+0x15c>
      case 02: // Turn B left:
        // DT30
        targetDist = 27;
 80063aa:	4b49      	ldr	r3, [pc, #292]	; (80064d0 <runTurnBTask+0x1e8>)
 80063ac:	4a49      	ldr	r2, [pc, #292]	; (80064d4 <runTurnBTask+0x1ec>)
 80063ae:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 80063b0:	2102      	movs	r1, #2
 80063b2:	4847      	ldr	r0, [pc, #284]	; (80064d0 <runTurnBTask+0x1e8>)
 80063b4:	f7fc fffc 	bl	80033b0 <RobotMoveDistObstacle>
        osDelay(100);
 80063b8:	2064      	movs	r0, #100	; 0x64
 80063ba:	f006 f9d9 	bl	800c770 <osDelay>
        // FL30
        RobotTurnFL30();
 80063be:	f7fd ff3b 	bl	8004238 <RobotTurnFL30>
        osDelay(50);
 80063c2:	2032      	movs	r0, #50	; 0x32
 80063c4:	f006 f9d4 	bl	800c770 <osDelay>
        // IR02 (right IR, follow wall 1st)
        RobotMoveUntilIROvershoot(1);
 80063c8:	2001      	movs	r0, #1
 80063ca:	f7fd fb0d 	bl	80039e8 <RobotMoveUntilIROvershoot>
        osDelay(50);
 80063ce:	2032      	movs	r0, #50	; 0x32
 80063d0:	f006 f9ce 	bl	800c770 <osDelay>
        // FR30
        RobotTurnFR30();
 80063d4:	f7fd fe9a 	bl	800410c <RobotTurnFR30>
        osDelay(50);
 80063d8:	2032      	movs	r0, #50	; 0x32
 80063da:	f006 f9c9 	bl	800c770 <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 80063de:	4b3c      	ldr	r3, [pc, #240]	; (80064d0 <runTurnBTask+0x1e8>)
 80063e0:	4a3d      	ldr	r2, [pc, #244]	; (80064d8 <runTurnBTask+0x1f0>)
 80063e2:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80063e4:	2200      	movs	r2, #0
 80063e6:	2101      	movs	r1, #1
 80063e8:	4839      	ldr	r0, [pc, #228]	; (80064d0 <runTurnBTask+0x1e8>)
 80063ea:	f7fc faf9 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 80063ee:	2032      	movs	r0, #50	; 0x32
 80063f0:	f006 f9be 	bl	800c770 <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(1);
 80063f4:	2001      	movs	r0, #1
 80063f6:	f7fd faf7 	bl	80039e8 <RobotMoveUntilIROvershoot>
        osDelay(50);
 80063fa:	2032      	movs	r0, #50	; 0x32
 80063fc:	f006 f9b8 	bl	800c770 <osDelay>
        // FR30
        RobotTurnFR30();
 8006400:	f7fd fe84 	bl	800410c <RobotTurnFR30>
        osDelay(50);
 8006404:	2032      	movs	r0, #50	; 0x32
 8006406:	f006 f9b3 	bl	800c770 <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(1);
 800640a:	2001      	movs	r0, #1
 800640c:	f7fd fc74 	bl	8003cf8 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8006410:	2032      	movs	r0, #50	; 0x32
 8006412:	f006 f9ad 	bl	800c770 <osDelay>
        // IR02 (right IR)
        RobotMoveUntilIROvershoot(1);
 8006416:	2001      	movs	r0, #1
 8006418:	f7fd fae6 	bl	80039e8 <RobotMoveUntilIROvershoot>
        osDelay(50);
 800641c:	2032      	movs	r0, #50	; 0x32
 800641e:	f006 f9a7 	bl	800c770 <osDelay>
        // FW15
        targetDist = 15;
 8006422:	4b2b      	ldr	r3, [pc, #172]	; (80064d0 <runTurnBTask+0x1e8>)
 8006424:	4a2d      	ldr	r2, [pc, #180]	; (80064dc <runTurnBTask+0x1f4>)
 8006426:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8006428:	2201      	movs	r2, #1
 800642a:	2101      	movs	r1, #1
 800642c:	4828      	ldr	r0, [pc, #160]	; (80064d0 <runTurnBTask+0x1e8>)
 800642e:	f7fc fad7 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 8006432:	2032      	movs	r0, #50	; 0x32
 8006434:	f006 f99c 	bl	800c770 <osDelay>
        // FR30
        RobotTurnFR30();
 8006438:	f7fd fe68 	bl	800410c <RobotTurnFR30>
        osDelay(50);
 800643c:	2032      	movs	r0, #50	; 0x32
 800643e:	f006 f997 	bl	800c770 <osDelay>
        break;
 8006442:	bf00      	nop
      }
      clickOnce = 0;
 8006444:	4b26      	ldr	r3, [pc, #152]	; (80064e0 <runTurnBTask+0x1f8>)
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 800644a:	4b1f      	ldr	r3, [pc, #124]	; (80064c8 <runTurnBTask+0x1e0>)
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	4b25      	ldr	r3, [pc, #148]	; (80064e4 <runTurnBTask+0x1fc>)
 8006450:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <runTurnBTask+0x1e0>)
 8006454:	2211      	movs	r2, #17
 8006456:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8006458:	4b23      	ldr	r3, [pc, #140]	; (80064e8 <runTurnBTask+0x200>)
 800645a:	781a      	ldrb	r2, [r3, #0]
 800645c:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <runTurnBTask+0x200>)
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	429a      	cmp	r2, r3
 8006462:	d112      	bne.n	800648a <runTurnBTask+0x1a2>
      {
        __CLEAR_CURCMD(curCmd);
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <runTurnBTask+0x1e4>)
 8006466:	2264      	movs	r2, #100	; 0x64
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	4b18      	ldr	r3, [pc, #96]	; (80064cc <runTurnBTask+0x1e4>)
 800646c:	2200      	movs	r2, #0
 800646e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8006470:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <runTurnBTask+0x204>)
 8006472:	210f      	movs	r1, #15
 8006474:	481e      	ldr	r0, [pc, #120]	; (80064f0 <runTurnBTask+0x208>)
 8006476:	f009 f9ad 	bl	800f7d4 <sniprintf>
 800647a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800647e:	2206      	movs	r2, #6
 8006480:	491c      	ldr	r1, [pc, #112]	; (80064f4 <runTurnBTask+0x20c>)
 8006482:	481d      	ldr	r0, [pc, #116]	; (80064f8 <runTurnBTask+0x210>)
 8006484:	f005 f829 	bl	800b4da <HAL_UART_Transmit>
 8006488:	e019      	b.n	80064be <runTurnBTask+0x1d6>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 800648a:	4b17      	ldr	r3, [pc, #92]	; (80064e8 <runTurnBTask+0x200>)
 800648c:	785b      	ldrb	r3, [r3, #1]
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <runTurnBTask+0x1e4>)
 8006490:	4915      	ldr	r1, [pc, #84]	; (80064e8 <runTurnBTask+0x200>)
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <runTurnBTask+0x200>)
 800649c:	785b      	ldrb	r3, [r3, #1]
 800649e:	3301      	adds	r3, #1
 80064a0:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <runTurnBTask+0x200>)
 80064a2:	7892      	ldrb	r2, [r2, #2]
 80064a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80064a8:	fb01 f202 	mul.w	r2, r1, r2
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	4b0d      	ldr	r3, [pc, #52]	; (80064e8 <runTurnBTask+0x200>)
 80064b2:	705a      	strb	r2, [r3, #1]
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <runTurnBTask+0x214>)
 80064b6:	210f      	movs	r1, #15
 80064b8:	480d      	ldr	r0, [pc, #52]	; (80064f0 <runTurnBTask+0x208>)
 80064ba:	f009 f98b 	bl	800f7d4 <sniprintf>
    }
    osDelay(1);
 80064be:	2001      	movs	r0, #1
 80064c0:	f006 f956 	bl	800c770 <osDelay>
    if (curTask != TASK_TURN_B)
 80064c4:	e714      	b.n	80062f0 <runTurnBTask+0x8>
 80064c6:	bf00      	nop
 80064c8:	20000134 	.word	0x20000134
 80064cc:	200004cc 	.word	0x200004cc
 80064d0:	200004f8 	.word	0x200004f8
 80064d4:	41d80000 	.word	0x41d80000
 80064d8:	40e00000 	.word	0x40e00000
 80064dc:	41700000 	.word	0x41700000
 80064e0:	20000564 	.word	0x20000564
 80064e4:	20000135 	.word	0x20000135
 80064e8:	20000498 	.word	0x20000498
 80064ec:	080101ec 	.word	0x080101ec
 80064f0:	200004d0 	.word	0x200004d0
 80064f4:	080101f4 	.word	0x080101f4
 80064f8:	2000040c 	.word	0x2000040c
 80064fc:	080101fc 	.word	0x080101fc

08006500 <runGHTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runGHTask */
void runGHTask(void *argument)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runGHTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_GO_HOME)
 8006508:	4b47      	ldr	r3, [pc, #284]	; (8006628 <runGHTask+0x128>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b0f      	cmp	r3, #15
 800650e:	d004      	beq.n	800651a <runGHTask+0x1a>
      osDelay(1000);
 8006510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006514:	f006 f92c 	bl	800c770 <osDelay>
 8006518:	e081      	b.n	800661e <runGHTask+0x11e>
    else
    {
      obsDist_B += 75;
 800651a:	4b44      	ldr	r3, [pc, #272]	; (800662c <runGHTask+0x12c>)
 800651c:	edd3 7a00 	vldr	s15, [r3]
 8006520:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006630 <runGHTask+0x130>
 8006524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006528:	4b40      	ldr	r3, [pc, #256]	; (800662c <runGHTask+0x12c>)
 800652a:	edc3 7a00 	vstr	s15, [r3]
      if (obsDist_B < 1000)
 800652e:	4b3f      	ldr	r3, [pc, #252]	; (800662c <runGHTask+0x12c>)
 8006530:	edd3 7a00 	vldr	s15, [r3]
 8006534:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006634 <runGHTask+0x134>
 8006538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006540:	d530      	bpl.n	80065a4 <runGHTask+0xa4>
      {
        switch (curCmd.val)
 8006542:	4b3d      	ldr	r3, [pc, #244]	; (8006638 <runGHTask+0x138>)
 8006544:	885b      	ldrh	r3, [r3, #2]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d002      	beq.n	8006550 <runGHTask+0x50>
 800654a:	2b02      	cmp	r3, #2
 800654c:	d015      	beq.n	800657a <runGHTask+0x7a>
 800654e:	e029      	b.n	80065a4 <runGHTask+0xa4>
        {
        case 01:
          // move to obs A location +40 cm (tentative)
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 8006550:	2202      	movs	r2, #2
 8006552:	2101      	movs	r1, #1
 8006554:	4835      	ldr	r0, [pc, #212]	; (800662c <runGHTask+0x12c>)
 8006556:	f7fc fa43 	bl	80029e0 <RobotMoveDist>
          // FL30
          RobotTurnFL30();
 800655a:	f7fd fe6d 	bl	8004238 <RobotTurnFL30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(0);
 800655e:	2000      	movs	r0, #0
 8006560:	f7fd fbca 	bl	8003cf8 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 8006564:	4b35      	ldr	r3, [pc, #212]	; (800663c <runGHTask+0x13c>)
 8006566:	4a36      	ldr	r2, [pc, #216]	; (8006640 <runGHTask+0x140>)
 8006568:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800656a:	2200      	movs	r2, #0
 800656c:	2100      	movs	r1, #0
 800656e:	4833      	ldr	r0, [pc, #204]	; (800663c <runGHTask+0x13c>)
 8006570:	f7fc fa36 	bl	80029e0 <RobotMoveDist>
          // FR30
          RobotTurnFR30();
 8006574:	f7fd fdca 	bl	800410c <RobotTurnFR30>
          break;
 8006578:	e014      	b.n	80065a4 <runGHTask+0xa4>
        case 02:
          // move to obs A location +40 cm (tentative)
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 800657a:	2202      	movs	r2, #2
 800657c:	2101      	movs	r1, #1
 800657e:	482b      	ldr	r0, [pc, #172]	; (800662c <runGHTask+0x12c>)
 8006580:	f7fc fa2e 	bl	80029e0 <RobotMoveDist>
          // FR30
          RobotTurnFR30();
 8006584:	f7fd fdc2 	bl	800410c <RobotTurnFR30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(1);
 8006588:	2001      	movs	r0, #1
 800658a:	f7fd fbb5 	bl	8003cf8 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 800658e:	4b2b      	ldr	r3, [pc, #172]	; (800663c <runGHTask+0x13c>)
 8006590:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <runGHTask+0x140>)
 8006592:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8006594:	2200      	movs	r2, #0
 8006596:	2100      	movs	r1, #0
 8006598:	4828      	ldr	r0, [pc, #160]	; (800663c <runGHTask+0x13c>)
 800659a:	f7fc fa21 	bl	80029e0 <RobotMoveDist>
          // FL30
          RobotTurnFL30();
 800659e:	f7fd fe4b 	bl	8004238 <RobotTurnFL30>
          break;
 80065a2:	bf00      	nop
        }
      }
      clickOnce = 0;
 80065a4:	4b27      	ldr	r3, [pc, #156]	; (8006644 <runGHTask+0x144>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80065aa:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <runGHTask+0x128>)
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	4b26      	ldr	r3, [pc, #152]	; (8006648 <runGHTask+0x148>)
 80065b0:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80065b2:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <runGHTask+0x128>)
 80065b4:	2211      	movs	r2, #17
 80065b6:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80065b8:	4b24      	ldr	r3, [pc, #144]	; (800664c <runGHTask+0x14c>)
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	4b23      	ldr	r3, [pc, #140]	; (800664c <runGHTask+0x14c>)
 80065be:	785b      	ldrb	r3, [r3, #1]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d112      	bne.n	80065ea <runGHTask+0xea>
      {
        __CLEAR_CURCMD(curCmd);
 80065c4:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <runGHTask+0x138>)
 80065c6:	2264      	movs	r2, #100	; 0x64
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <runGHTask+0x138>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80065d0:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <runGHTask+0x150>)
 80065d2:	210f      	movs	r1, #15
 80065d4:	481f      	ldr	r0, [pc, #124]	; (8006654 <runGHTask+0x154>)
 80065d6:	f009 f8fd 	bl	800f7d4 <sniprintf>
 80065da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065de:	2206      	movs	r2, #6
 80065e0:	491d      	ldr	r1, [pc, #116]	; (8006658 <runGHTask+0x158>)
 80065e2:	481e      	ldr	r0, [pc, #120]	; (800665c <runGHTask+0x15c>)
 80065e4:	f004 ff79 	bl	800b4da <HAL_UART_Transmit>
 80065e8:	e019      	b.n	800661e <runGHTask+0x11e>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <runGHTask+0x14c>)
 80065ec:	785b      	ldrb	r3, [r3, #1]
 80065ee:	4a12      	ldr	r2, [pc, #72]	; (8006638 <runGHTask+0x138>)
 80065f0:	4916      	ldr	r1, [pc, #88]	; (800664c <runGHTask+0x14c>)
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <runGHTask+0x14c>)
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	3301      	adds	r3, #1
 8006600:	4a12      	ldr	r2, [pc, #72]	; (800664c <runGHTask+0x14c>)
 8006602:	7892      	ldrb	r2, [r2, #2]
 8006604:	fb93 f1f2 	sdiv	r1, r3, r2
 8006608:	fb01 f202 	mul.w	r2, r1, r2
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	b2da      	uxtb	r2, r3
 8006610:	4b0e      	ldr	r3, [pc, #56]	; (800664c <runGHTask+0x14c>)
 8006612:	705a      	strb	r2, [r3, #1]
 8006614:	4a12      	ldr	r2, [pc, #72]	; (8006660 <runGHTask+0x160>)
 8006616:	210f      	movs	r1, #15
 8006618:	480e      	ldr	r0, [pc, #56]	; (8006654 <runGHTask+0x154>)
 800661a:	f009 f8db 	bl	800f7d4 <sniprintf>
    }
    osDelay(1);
 800661e:	2001      	movs	r0, #1
 8006620:	f006 f8a6 	bl	800c770 <osDelay>
    if (curTask != TASK_GO_HOME)
 8006624:	e770      	b.n	8006508 <runGHTask+0x8>
 8006626:	bf00      	nop
 8006628:	20000134 	.word	0x20000134
 800662c:	2000013c 	.word	0x2000013c
 8006630:	42960000 	.word	0x42960000
 8006634:	447a0000 	.word	0x447a0000
 8006638:	200004cc 	.word	0x200004cc
 800663c:	200004f8 	.word	0x200004f8
 8006640:	41700000 	.word	0x41700000
 8006644:	20000564 	.word	0x20000564
 8006648:	20000135 	.word	0x20000135
 800664c:	20000498 	.word	0x20000498
 8006650:	080101ec 	.word	0x080101ec
 8006654:	200004d0 	.word	0x200004d0
 8006658:	080101f4 	.word	0x080101f4
 800665c:	2000040c 	.word	0x2000040c
 8006660:	080101fc 	.word	0x080101fc

08006664 <runAMTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runAMTask */
void runAMTask(void *argument)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af02      	add	r7, sp, #8
 800666a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runAMTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_AM)
 800666c:	4b5d      	ldr	r3, [pc, #372]	; (80067e4 <runAMTask+0x180>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b10      	cmp	r3, #16
 8006672:	d004      	beq.n	800667e <runAMTask+0x1a>
      osDelay(1000);
 8006674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006678:	f006 f87a 	bl	800c770 <osDelay>
 800667c:	e0ad      	b.n	80067da <runAMTask+0x176>
    else
    {

      switch (curCmd.val)
 800667e:	4b5a      	ldr	r3, [pc, #360]	; (80067e8 <runAMTask+0x184>)
 8006680:	885b      	ldrh	r3, [r3, #2]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d002      	beq.n	800668c <runAMTask+0x28>
 8006686:	2b02      	cmp	r3, #2
 8006688:	d035      	beq.n	80066f6 <runAMTask+0x92>
 800668a:	e069      	b.n	8006760 <runAMTask+0xfc>
      {
      case 01: // AM right:
        // FW5
        targetDist = 5;
 800668c:	4b57      	ldr	r3, [pc, #348]	; (80067ec <runAMTask+0x188>)
 800668e:	4a58      	ldr	r2, [pc, #352]	; (80067f0 <runAMTask+0x18c>)
 8006690:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8006692:	2200      	movs	r2, #0
 8006694:	2101      	movs	r1, #1
 8006696:	4855      	ldr	r0, [pc, #340]	; (80067ec <runAMTask+0x188>)
 8006698:	f7fc f9a2 	bl	80029e0 <RobotMoveDist>
        //  FA45
        RobotTurnFA45();
 800669c:	f7fd fcf0 	bl	8004080 <RobotTurnFA45>
        osDelay(100);
 80066a0:	2064      	movs	r0, #100	; 0x64
 80066a2:	f006 f865 	bl	800c770 <osDelay>
        // FC45
        RobotTurnFC45();
 80066a6:	f7fd fca5 	bl	8003ff4 <RobotTurnFC45>
        osDelay(100);
 80066aa:	2064      	movs	r0, #100	; 0x64
 80066ac:	f006 f860 	bl	800c770 <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 80066b0:	4b50      	ldr	r3, [pc, #320]	; (80067f4 <runAMTask+0x190>)
 80066b2:	4a51      	ldr	r2, [pc, #324]	; (80067f8 <runAMTask+0x194>)
 80066b4:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80066b6:	2104      	movs	r1, #4
 80066b8:	4850      	ldr	r0, [pc, #320]	; (80067fc <runAMTask+0x198>)
 80066ba:	f003 fb0b 	bl	8009cd4 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 80066be:	f7fb ff97 	bl	80025f0 <HCSR04_Read>
        osDelay(100);
 80066c2:	2064      	movs	r0, #100	; 0x64
 80066c4:	f006 f854 	bl	800c770 <osDelay>
        obsDist_B = obsDist_US;
 80066c8:	4b4a      	ldr	r3, [pc, #296]	; (80067f4 <runAMTask+0x190>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a4c      	ldr	r2, [pc, #304]	; (8006800 <runAMTask+0x19c>)
 80066ce:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 80066d0:	4b48      	ldr	r3, [pc, #288]	; (80067f4 <runAMTask+0x190>)
 80066d2:	edd3 7a00 	vldr	s15, [r3]
 80066d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066da:	230c      	movs	r3, #12
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	2305      	movs	r3, #5
 80066e0:	ee17 2a90 	vmov	r2, s15
 80066e4:	2132      	movs	r1, #50	; 0x32
 80066e6:	2000      	movs	r0, #0
 80066e8:	f008 ff48 	bl	800f57c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80066ec:	2104      	movs	r1, #4
 80066ee:	4843      	ldr	r0, [pc, #268]	; (80067fc <runAMTask+0x198>)
 80066f0:	f003 fc18 	bl	8009f24 <HAL_TIM_IC_Stop_IT>
        break;
 80066f4:	e034      	b.n	8006760 <runAMTask+0xfc>

      case 02: // AM left:
        // FW5
        targetDist = 5;
 80066f6:	4b3d      	ldr	r3, [pc, #244]	; (80067ec <runAMTask+0x188>)
 80066f8:	4a3d      	ldr	r2, [pc, #244]	; (80067f0 <runAMTask+0x18c>)
 80066fa:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80066fc:	2200      	movs	r2, #0
 80066fe:	2101      	movs	r1, #1
 8006700:	483a      	ldr	r0, [pc, #232]	; (80067ec <runAMTask+0x188>)
 8006702:	f7fc f96d 	bl	80029e0 <RobotMoveDist>
        // FC45
        RobotTurnFC45();
 8006706:	f7fd fc75 	bl	8003ff4 <RobotTurnFC45>
        osDelay(100);
 800670a:	2064      	movs	r0, #100	; 0x64
 800670c:	f006 f830 	bl	800c770 <osDelay>
        // FA45
        RobotTurnFA45();
 8006710:	f7fd fcb6 	bl	8004080 <RobotTurnFA45>
        osDelay(100);
 8006714:	2064      	movs	r0, #100	; 0x64
 8006716:	f006 f82b 	bl	800c770 <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <runAMTask+0x190>)
 800671c:	4a36      	ldr	r2, [pc, #216]	; (80067f8 <runAMTask+0x194>)
 800671e:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8006720:	2104      	movs	r1, #4
 8006722:	4836      	ldr	r0, [pc, #216]	; (80067fc <runAMTask+0x198>)
 8006724:	f003 fad6 	bl	8009cd4 <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006728:	f7fb ff62 	bl	80025f0 <HCSR04_Read>
        osDelay(100);
 800672c:	2064      	movs	r0, #100	; 0x64
 800672e:	f006 f81f 	bl	800c770 <osDelay>
        obsDist_B = obsDist_US;
 8006732:	4b30      	ldr	r3, [pc, #192]	; (80067f4 <runAMTask+0x190>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a32      	ldr	r2, [pc, #200]	; (8006800 <runAMTask+0x19c>)
 8006738:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 800673a:	4b2e      	ldr	r3, [pc, #184]	; (80067f4 <runAMTask+0x190>)
 800673c:	edd3 7a00 	vldr	s15, [r3]
 8006740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006744:	230c      	movs	r3, #12
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	2305      	movs	r3, #5
 800674a:	ee17 2a90 	vmov	r2, s15
 800674e:	2132      	movs	r1, #50	; 0x32
 8006750:	2000      	movs	r0, #0
 8006752:	f008 ff13 	bl	800f57c <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8006756:	2104      	movs	r1, #4
 8006758:	4828      	ldr	r0, [pc, #160]	; (80067fc <runAMTask+0x198>)
 800675a:	f003 fbe3 	bl	8009f24 <HAL_TIM_IC_Stop_IT>
        break;
 800675e:	bf00      	nop
      }
      clickOnce = 0;
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <runAMTask+0x1a0>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8006766:	4b1f      	ldr	r3, [pc, #124]	; (80067e4 <runAMTask+0x180>)
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	4b27      	ldr	r3, [pc, #156]	; (8006808 <runAMTask+0x1a4>)
 800676c:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800676e:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <runAMTask+0x180>)
 8006770:	2211      	movs	r2, #17
 8006772:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8006774:	4b25      	ldr	r3, [pc, #148]	; (800680c <runAMTask+0x1a8>)
 8006776:	781a      	ldrb	r2, [r3, #0]
 8006778:	4b24      	ldr	r3, [pc, #144]	; (800680c <runAMTask+0x1a8>)
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	429a      	cmp	r2, r3
 800677e:	d112      	bne.n	80067a6 <runAMTask+0x142>
      {
        __CLEAR_CURCMD(curCmd);
 8006780:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <runAMTask+0x184>)
 8006782:	2264      	movs	r2, #100	; 0x64
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <runAMTask+0x184>)
 8006788:	2200      	movs	r2, #0
 800678a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <runAMTask+0x1ac>)
 800678e:	210f      	movs	r1, #15
 8006790:	4820      	ldr	r0, [pc, #128]	; (8006814 <runAMTask+0x1b0>)
 8006792:	f009 f81f 	bl	800f7d4 <sniprintf>
 8006796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800679a:	2206      	movs	r2, #6
 800679c:	491e      	ldr	r1, [pc, #120]	; (8006818 <runAMTask+0x1b4>)
 800679e:	481f      	ldr	r0, [pc, #124]	; (800681c <runAMTask+0x1b8>)
 80067a0:	f004 fe9b 	bl	800b4da <HAL_UART_Transmit>
 80067a4:	e019      	b.n	80067da <runAMTask+0x176>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80067a6:	4b19      	ldr	r3, [pc, #100]	; (800680c <runAMTask+0x1a8>)
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <runAMTask+0x184>)
 80067ac:	4917      	ldr	r1, [pc, #92]	; (800680c <runAMTask+0x1a8>)
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b15      	ldr	r3, [pc, #84]	; (800680c <runAMTask+0x1a8>)
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <runAMTask+0x1a8>)
 80067be:	7892      	ldrb	r2, [r2, #2]
 80067c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80067c4:	fb01 f202 	mul.w	r2, r1, r2
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <runAMTask+0x1a8>)
 80067ce:	705a      	strb	r2, [r3, #1]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <runAMTask+0x1bc>)
 80067d2:	210f      	movs	r1, #15
 80067d4:	480f      	ldr	r0, [pc, #60]	; (8006814 <runAMTask+0x1b0>)
 80067d6:	f008 fffd 	bl	800f7d4 <sniprintf>
    }
    osDelay(1);
 80067da:	2001      	movs	r0, #1
 80067dc:	f005 ffc8 	bl	800c770 <osDelay>
    if (curTask != TASK_AM)
 80067e0:	e744      	b.n	800666c <runAMTask+0x8>
 80067e2:	bf00      	nop
 80067e4:	20000134 	.word	0x20000134
 80067e8:	200004cc 	.word	0x200004cc
 80067ec:	200004f8 	.word	0x200004f8
 80067f0:	40a00000 	.word	0x40a00000
 80067f4:	20000554 	.word	0x20000554
 80067f8:	447a0000 	.word	0x447a0000
 80067fc:	20000334 	.word	0x20000334
 8006800:	2000013c 	.word	0x2000013c
 8006804:	20000564 	.word	0x20000564
 8006808:	20000135 	.word	0x20000135
 800680c:	20000498 	.word	0x20000498
 8006810:	080101ec 	.word	0x080101ec
 8006814:	200004d0 	.word	0x200004d0
 8006818:	080101f4 	.word	0x080101f4
 800681c:	2000040c 	.word	0x2000040c
 8006820:	080101fc 	.word	0x080101fc

08006824 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a04      	ldr	r2, [pc, #16]	; (8006844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d101      	bne.n	800683a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8006836:	f000 fbc9 	bl	8006fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40000800 	.word	0x40000800

08006848 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800684c:	b672      	cpsid	i
}
 800684e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006850:	e7fe      	b.n	8006850 <Error_Handler+0x8>
	...

08006854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <HAL_MspInit+0x54>)
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <HAL_MspInit+0x54>)
 8006864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006868:	6453      	str	r3, [r2, #68]	; 0x44
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <HAL_MspInit+0x54>)
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_MspInit+0x54>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <HAL_MspInit+0x54>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006884:	6413      	str	r3, [r2, #64]	; 0x40
 8006886:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <HAL_MspInit+0x54>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006892:	2200      	movs	r2, #0
 8006894:	210f      	movs	r1, #15
 8006896:	f06f 0001 	mvn.w	r0, #1
 800689a:	f001 f893 	bl	80079c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023800 	.word	0x40023800

080068ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08c      	sub	sp, #48	; 0x30
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b4:	f107 031c 	add.w	r3, r7, #28
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	605a      	str	r2, [r3, #4]
 80068be:	609a      	str	r2, [r3, #8]
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2e      	ldr	r2, [pc, #184]	; (8006984 <HAL_ADC_MspInit+0xd8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d128      	bne.n	8006920 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 80068d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d6:	4a2c      	ldr	r2, [pc, #176]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068dc:	6453      	str	r3, [r2, #68]	; 0x44
 80068de:	4b2a      	ldr	r3, [pc, #168]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	4a25      	ldr	r2, [pc, #148]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	6313      	str	r3, [r2, #48]	; 0x30
 80068fa:	4b23      	ldr	r3, [pc, #140]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006906:	2302      	movs	r3, #2
 8006908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800690a:	2303      	movs	r3, #3
 800690c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006912:	f107 031c 	add.w	r3, r7, #28
 8006916:	4619      	mov	r1, r3
 8006918:	481c      	ldr	r0, [pc, #112]	; (800698c <HAL_ADC_MspInit+0xe0>)
 800691a:	f001 f90f 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800691e:	e02c      	b.n	800697a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a1a      	ldr	r2, [pc, #104]	; (8006990 <HAL_ADC_MspInit+0xe4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d127      	bne.n	800697a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	4b16      	ldr	r3, [pc, #88]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	4a15      	ldr	r2, [pc, #84]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 8006934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006938:	6453      	str	r3, [r2, #68]	; 0x44
 800693a:	4b13      	ldr	r3, [pc, #76]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	4a0e      	ldr	r2, [pc, #56]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 8006950:	f043 0304 	orr.w	r3, r3, #4
 8006954:	6313      	str	r3, [r2, #48]	; 0x30
 8006956:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <HAL_ADC_MspInit+0xdc>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006962:	2304      	movs	r3, #4
 8006964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006966:	2303      	movs	r3, #3
 8006968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800696e:	f107 031c 	add.w	r3, r7, #28
 8006972:	4619      	mov	r1, r3
 8006974:	4805      	ldr	r0, [pc, #20]	; (800698c <HAL_ADC_MspInit+0xe0>)
 8006976:	f001 f8e1 	bl	8007b3c <HAL_GPIO_Init>
}
 800697a:	bf00      	nop
 800697c:	3730      	adds	r7, #48	; 0x30
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40012000 	.word	0x40012000
 8006988:	40023800 	.word	0x40023800
 800698c:	40020800 	.word	0x40020800
 8006990:	40012100 	.word	0x40012100

08006994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800699c:	f107 0314 	add.w	r3, r7, #20
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <HAL_I2C_MspInit+0x84>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d12c      	bne.n	8006a10 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <HAL_I2C_MspInit+0x88>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <HAL_I2C_MspInit+0x88>)
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	6313      	str	r3, [r2, #48]	; 0x30
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <HAL_I2C_MspInit+0x88>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069d8:	2312      	movs	r3, #18
 80069da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e0:	2303      	movs	r3, #3
 80069e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069e4:	2304      	movs	r3, #4
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4619      	mov	r1, r3
 80069ee:	480c      	ldr	r0, [pc, #48]	; (8006a20 <HAL_I2C_MspInit+0x8c>)
 80069f0:	f001 f8a4 	bl	8007b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <HAL_I2C_MspInit+0x88>)
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <HAL_I2C_MspInit+0x88>)
 80069fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a02:	6413      	str	r3, [r2, #64]	; 0x40
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_I2C_MspInit+0x88>)
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006a10:	bf00      	nop
 8006a12:	3728      	adds	r7, #40	; 0x28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40005400 	.word	0x40005400
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40020400 	.word	0x40020400

08006a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	; 0x38
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	609a      	str	r2, [r3, #8]
 8006a38:	60da      	str	r2, [r3, #12]
 8006a3a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a4e      	ldr	r2, [pc, #312]	; (8006b7c <HAL_TIM_Base_MspInit+0x158>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d116      	bne.n	8006a74 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a46:	2300      	movs	r3, #0
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	4b4d      	ldr	r3, [pc, #308]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	4a4c      	ldr	r2, [pc, #304]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6453      	str	r3, [r2, #68]	; 0x44
 8006a56:	4b4a      	ldr	r3, [pc, #296]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2105      	movs	r1, #5
 8006a66:	201b      	movs	r0, #27
 8006a68:	f000 ffac 	bl	80079c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006a6c:	201b      	movs	r0, #27
 8006a6e:	f000 ffc5 	bl	80079fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006a72:	e07e      	b.n	8006b72 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a42      	ldr	r2, [pc, #264]	; (8006b84 <HAL_TIM_Base_MspInit+0x160>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d134      	bne.n	8006ae8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	4a3e      	ldr	r2, [pc, #248]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006a88:	f043 0302 	orr.w	r3, r3, #2
 8006a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a8e:	4b3c      	ldr	r3, [pc, #240]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4a37      	ldr	r2, [pc, #220]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aaa:	4b35      	ldr	r3, [pc, #212]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 8006ab6:	2320      	movs	r3, #32
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aba:	2302      	movs	r3, #2
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 8006aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ace:	4619      	mov	r1, r3
 8006ad0:	482d      	ldr	r0, [pc, #180]	; (8006b88 <HAL_TIM_Base_MspInit+0x164>)
 8006ad2:	f001 f833 	bl	8007b3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2105      	movs	r1, #5
 8006ada:	201d      	movs	r0, #29
 8006adc:	f000 ff72 	bl	80079c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006ae0:	201d      	movs	r0, #29
 8006ae2:	f000 ff8b 	bl	80079fc <HAL_NVIC_EnableIRQ>
}
 8006ae6:	e044      	b.n	8006b72 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a27      	ldr	r2, [pc, #156]	; (8006b8c <HAL_TIM_Base_MspInit+0x168>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d10e      	bne.n	8006b10 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	4a21      	ldr	r2, [pc, #132]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006afc:	f043 0310 	orr.w	r3, r3, #16
 8006b00:	6413      	str	r3, [r2, #64]	; 0x40
 8006b02:	4b1f      	ldr	r3, [pc, #124]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	697b      	ldr	r3, [r7, #20]
}
 8006b0e:	e030      	b.n	8006b72 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1e      	ldr	r2, [pc, #120]	; (8006b90 <HAL_TIM_Base_MspInit+0x16c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d12b      	bne.n	8006b72 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	6453      	str	r3, [r2, #68]	; 0x44
 8006b2a:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	6313      	str	r3, [r2, #48]	; 0x30
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <HAL_TIM_Base_MspInit+0x15c>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8006b52:	23c0      	movs	r3, #192	; 0xc0
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b56:	2302      	movs	r3, #2
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006b62:	2303      	movs	r3, #3
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4809      	ldr	r0, [pc, #36]	; (8006b94 <HAL_TIM_Base_MspInit+0x170>)
 8006b6e:	f000 ffe5 	bl	8007b3c <HAL_GPIO_Init>
}
 8006b72:	bf00      	nop
 8006b74:	3738      	adds	r7, #56	; 0x38
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40020400 	.word	0x40020400
 8006b8c:	40001000 	.word	0x40001000
 8006b90:	40010400 	.word	0x40010400
 8006b94:	40020800 	.word	0x40020800

08006b98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	605a      	str	r2, [r3, #4]
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d14a      	bne.n	8006c50 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	4b26      	ldr	r3, [pc, #152]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	4a25      	ldr	r2, [pc, #148]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bca:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	6313      	str	r3, [r2, #48]	; 0x30
 8006be6:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006bfc:	f043 0302 	orr.w	r3, r3, #2
 8006c00:	6313      	str	r3, [r2, #48]	; 0x30
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c14:	2302      	movs	r3, #2
 8006c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c20:	2301      	movs	r3, #1
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c24:	f107 0314 	add.w	r3, r7, #20
 8006c28:	4619      	mov	r1, r3
 8006c2a:	480c      	ldr	r0, [pc, #48]	; (8006c5c <HAL_TIM_Encoder_MspInit+0xc4>)
 8006c2c:	f000 ff86 	bl	8007b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006c30:	2308      	movs	r3, #8
 8006c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c34:	2302      	movs	r3, #2
 8006c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c40:	2301      	movs	r3, #1
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4805      	ldr	r0, [pc, #20]	; (8006c60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8006c4c:	f000 ff76 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006c50:	bf00      	nop
 8006c52:	3728      	adds	r7, #40	; 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	40020000 	.word	0x40020000
 8006c60:	40020400 	.word	0x40020400

08006c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	609a      	str	r2, [r3, #8]
 8006c78:	60da      	str	r2, [r3, #12]
 8006c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_TIM_MspPostInit+0x68>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d11e      	bne.n	8006cc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <HAL_TIM_MspPostInit+0x6c>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	4a10      	ldr	r2, [pc, #64]	; (8006cd0 <HAL_TIM_MspPostInit+0x6c>)
 8006c90:	f043 0310 	orr.w	r3, r3, #16
 8006c94:	6313      	str	r3, [r2, #48]	; 0x30
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <HAL_TIM_MspPostInit+0x6c>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ca6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <HAL_TIM_MspPostInit+0x70>)
 8006cc0:	f000 ff3c 	bl	8007b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006cc4:	bf00      	nop
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40021000 	.word	0x40021000

08006cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce0:	f107 0314 	add.w	r3, r7, #20
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	609a      	str	r2, [r3, #8]
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1d      	ldr	r2, [pc, #116]	; (8006d6c <HAL_UART_MspInit+0x94>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d134      	bne.n	8006d64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <HAL_UART_MspInit+0x98>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	4a1b      	ldr	r2, [pc, #108]	; (8006d70 <HAL_UART_MspInit+0x98>)
 8006d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d08:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0a:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <HAL_UART_MspInit+0x98>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <HAL_UART_MspInit+0x98>)
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	4a14      	ldr	r2, [pc, #80]	; (8006d70 <HAL_UART_MspInit+0x98>)
 8006d20:	f043 0304 	orr.w	r3, r3, #4
 8006d24:	6313      	str	r3, [r2, #48]	; 0x30
 8006d26:	4b12      	ldr	r3, [pc, #72]	; (8006d70 <HAL_UART_MspInit+0x98>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006d32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d40:	2303      	movs	r3, #3
 8006d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d44:	2307      	movs	r3, #7
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	4809      	ldr	r0, [pc, #36]	; (8006d74 <HAL_UART_MspInit+0x9c>)
 8006d50:	f000 fef4 	bl	8007b3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006d54:	2200      	movs	r2, #0
 8006d56:	2105      	movs	r1, #5
 8006d58:	2027      	movs	r0, #39	; 0x27
 8006d5a:	f000 fe33 	bl	80079c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006d5e:	2027      	movs	r0, #39	; 0x27
 8006d60:	f000 fe4c 	bl	80079fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006d64:	bf00      	nop
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40004800 	.word	0x40004800
 8006d70:	40023800 	.word	0x40023800
 8006d74:	40020800 	.word	0x40020800

08006d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8006d88:	2200      	movs	r2, #0
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	201e      	movs	r0, #30
 8006d8e:	f000 fe19 	bl	80079c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006d92:	201e      	movs	r0, #30
 8006d94:	f000 fe32 	bl	80079fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	; (8006e18 <HAL_InitTick+0xa0>)
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <HAL_InitTick+0xa0>)
 8006da2:	f043 0304 	orr.w	r3, r3, #4
 8006da6:	6413      	str	r3, [r2, #64]	; 0x40
 8006da8:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <HAL_InitTick+0xa0>)
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006db4:	f107 0210 	add.w	r2, r7, #16
 8006db8:	f107 0314 	add.w	r3, r7, #20
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f002 fcb2 	bl	8009728 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f002 fc88 	bl	80096d8 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <HAL_InitTick+0xa4>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0c9b      	lsrs	r3, r3, #18
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8006dd8:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <HAL_InitTick+0xa8>)
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <HAL_InitTick+0xac>)
 8006ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <HAL_InitTick+0xa8>)
 8006de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006de4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8006de6:	4a0e      	ldr	r2, [pc, #56]	; (8006e20 <HAL_InitTick+0xa8>)
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <HAL_InitTick+0xa8>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_InitTick+0xa8>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8006df8:	4809      	ldr	r0, [pc, #36]	; (8006e20 <HAL_InitTick+0xa8>)
 8006dfa:	f002 fcc7 	bl	800978c <HAL_TIM_Base_Init>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8006e04:	4806      	ldr	r0, [pc, #24]	; (8006e20 <HAL_InitTick+0xa8>)
 8006e06:	f002 fd79 	bl	80098fc <HAL_TIM_Base_Start_IT>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	e000      	b.n	8006e10 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3730      	adds	r7, #48	; 0x30
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	431bde83 	.word	0x431bde83
 8006e20:	2000056c 	.word	0x2000056c
 8006e24:	40000800 	.word	0x40000800

08006e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006e2c:	e7fe      	b.n	8006e2c <NMI_Handler+0x4>

08006e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e32:	e7fe      	b.n	8006e32 <HardFault_Handler+0x4>

08006e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e38:	e7fe      	b.n	8006e38 <MemManage_Handler+0x4>

08006e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e3e:	e7fe      	b.n	8006e3e <BusFault_Handler+0x4>

08006e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e44:	e7fe      	b.n	8006e44 <UsageFault_Handler+0x4>

08006e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e46:	b480      	push	{r7}
 8006e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e4a:	bf00      	nop
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006e58:	4802      	ldr	r0, [pc, #8]	; (8006e64 <TIM1_CC_IRQHandler+0x10>)
 8006e5a:	f003 fa45 	bl	800a2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006e5e:	bf00      	nop
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200002a4 	.word	0x200002a4

08006e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006e6c:	4802      	ldr	r0, [pc, #8]	; (8006e78 <TIM3_IRQHandler+0x10>)
 8006e6e:	f003 fa3b 	bl	800a2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000334 	.word	0x20000334

08006e7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006e80:	4802      	ldr	r0, [pc, #8]	; (8006e8c <TIM4_IRQHandler+0x10>)
 8006e82:	f003 fa31 	bl	800a2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006e86:	bf00      	nop
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000056c 	.word	0x2000056c

08006e90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006e94:	4802      	ldr	r0, [pc, #8]	; (8006ea0 <USART3_IRQHandler+0x10>)
 8006e96:	f004 fbe3 	bl	800b660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006e9a:	bf00      	nop
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2000040c 	.word	0x2000040c

08006ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006eac:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <_sbrk+0x5c>)
 8006eae:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <_sbrk+0x60>)
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006eb8:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <_sbrk+0x64>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <_sbrk+0x64>)
 8006ec2:	4a12      	ldr	r2, [pc, #72]	; (8006f0c <_sbrk+0x68>)
 8006ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <_sbrk+0x64>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d207      	bcs.n	8006ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ed4:	f008 fcba 	bl	800f84c <__errno>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	220c      	movs	r2, #12
 8006edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ee2:	e009      	b.n	8006ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <_sbrk+0x64>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <_sbrk+0x64>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4a05      	ldr	r2, [pc, #20]	; (8006f08 <_sbrk+0x64>)
 8006ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20020000 	.word	0x20020000
 8006f04:	00000400 	.word	0x00000400
 8006f08:	200005b4 	.word	0x200005b4
 8006f0c:	20005458 	.word	0x20005458

08006f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f14:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <SystemInit+0x20>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1a:	4a05      	ldr	r2, [pc, #20]	; (8006f30 <SystemInit+0x20>)
 8006f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	e000ed00 	.word	0xe000ed00

08006f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f38:	480d      	ldr	r0, [pc, #52]	; (8006f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006f3a:	490e      	ldr	r1, [pc, #56]	; (8006f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006f3c:	4a0e      	ldr	r2, [pc, #56]	; (8006f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f40:	e002      	b.n	8006f48 <LoopCopyDataInit>

08006f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f46:	3304      	adds	r3, #4

08006f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f4c:	d3f9      	bcc.n	8006f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f4e:	4a0b      	ldr	r2, [pc, #44]	; (8006f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006f50:	4c0b      	ldr	r4, [pc, #44]	; (8006f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f54:	e001      	b.n	8006f5a <LoopFillZerobss>

08006f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f58:	3204      	adds	r2, #4

08006f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f5c:	d3fb      	bcc.n	8006f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006f5e:	f7ff ffd7 	bl	8006f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f62:	f008 fc79 	bl	800f858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f66:	f7f9 ffc7 	bl	8000ef8 <main>
  bx  lr    
 8006f6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f74:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8006f78:	08010ef8 	.word	0x08010ef8
  ldr r2, =_sbss
 8006f7c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8006f80:	20005454 	.word	0x20005454

08006f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f84:	e7fe      	b.n	8006f84 <ADC_IRQHandler>
	...

08006f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <HAL_Init+0x40>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a0d      	ldr	r2, [pc, #52]	; (8006fc8 <HAL_Init+0x40>)
 8006f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <HAL_Init+0x40>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a0a      	ldr	r2, [pc, #40]	; (8006fc8 <HAL_Init+0x40>)
 8006f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <HAL_Init+0x40>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a07      	ldr	r2, [pc, #28]	; (8006fc8 <HAL_Init+0x40>)
 8006faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fb0:	2003      	movs	r0, #3
 8006fb2:	f000 fcfc 	bl	80079ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fb6:	200f      	movs	r0, #15
 8006fb8:	f7ff fede 	bl	8006d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fbc:	f7ff fc4a 	bl	8006854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023c00 	.word	0x40023c00

08006fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <HAL_IncTick+0x20>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_IncTick+0x24>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4413      	add	r3, r2
 8006fdc:	4a04      	ldr	r2, [pc, #16]	; (8006ff0 <HAL_IncTick+0x24>)
 8006fde:	6013      	str	r3, [r2, #0]
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	2000014c 	.word	0x2000014c
 8006ff0:	200005b8 	.word	0x200005b8

08006ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <HAL_GetTick+0x14>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	200005b8 	.word	0x200005b8

0800700c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007014:	f7ff ffee 	bl	8006ff4 <HAL_GetTick>
 8007018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d005      	beq.n	8007032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_Delay+0x44>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007032:	bf00      	nop
 8007034:	f7ff ffde 	bl	8006ff4 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	429a      	cmp	r2, r3
 8007042:	d8f7      	bhi.n	8007034 <HAL_Delay+0x28>
  {
  }
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	2000014c 	.word	0x2000014c

08007054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e033      	b.n	80070d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fc1a 	bl	80068ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	2b00      	cmp	r3, #0
 8007090:	d118      	bne.n	80070c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800709a:	f023 0302 	bic.w	r3, r3, #2
 800709e:	f043 0202 	orr.w	r2, r3, #2
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fad8 	bl	800765c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	f023 0303 	bic.w	r3, r3, #3
 80070ba:	f043 0201 	orr.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
 80070c2:	e001      	b.n	80070c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_ADC_Start+0x1a>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e0b2      	b.n	800725c <HAL_ADC_Start+0x180>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	d018      	beq.n	800713e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800711c:	4b52      	ldr	r3, [pc, #328]	; (8007268 <HAL_ADC_Start+0x18c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a52      	ldr	r2, [pc, #328]	; (800726c <HAL_ADC_Start+0x190>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	0c9a      	lsrs	r2, r3, #18
 8007128:	4613      	mov	r3, r2
 800712a:	005b      	lsls	r3, r3, #1
 800712c:	4413      	add	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007130:	e002      	b.n	8007138 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	3b01      	subs	r3, #1
 8007136:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f9      	bne.n	8007132 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b01      	cmp	r3, #1
 800714a:	d17a      	bne.n	8007242 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007150:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718a:	d106      	bne.n	800719a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	f023 0206 	bic.w	r2, r3, #6
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	645a      	str	r2, [r3, #68]	; 0x44
 8007198:	e002      	b.n	80071a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071a8:	4b31      	ldr	r3, [pc, #196]	; (8007270 <HAL_ADC_Start+0x194>)
 80071aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80071b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d12a      	bne.n	8007218 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2b      	ldr	r2, [pc, #172]	; (8007274 <HAL_ADC_Start+0x198>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d015      	beq.n	80071f8 <HAL_ADC_Start+0x11c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a29      	ldr	r2, [pc, #164]	; (8007278 <HAL_ADC_Start+0x19c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d105      	bne.n	80071e2 <HAL_ADC_Start+0x106>
 80071d6:	4b26      	ldr	r3, [pc, #152]	; (8007270 <HAL_ADC_Start+0x194>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a25      	ldr	r2, [pc, #148]	; (800727c <HAL_ADC_Start+0x1a0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d136      	bne.n	800725a <HAL_ADC_Start+0x17e>
 80071ec:	4b20      	ldr	r3, [pc, #128]	; (8007270 <HAL_ADC_Start+0x194>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d130      	bne.n	800725a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d129      	bne.n	800725a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007214:	609a      	str	r2, [r3, #8]
 8007216:	e020      	b.n	800725a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_ADC_Start+0x198>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d11b      	bne.n	800725a <HAL_ADC_Start+0x17e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d114      	bne.n	800725a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800723e:	609a      	str	r2, [r3, #8]
 8007240:	e00b      	b.n	800725a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f043 0210 	orr.w	r2, r3, #16
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	20000144 	.word	0x20000144
 800726c:	431bde83 	.word	0x431bde83
 8007270:	40012300 	.word	0x40012300
 8007274:	40012000 	.word	0x40012000
 8007278:	40012100 	.word	0x40012100
 800727c:	40012200 	.word	0x40012200

08007280 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_ADC_Stop+0x16>
 8007292:	2302      	movs	r3, #2
 8007294:	e021      	b.n	80072da <HAL_ADC_Stop+0x5a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	f043 0201 	orr.w	r2, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007302:	d113      	bne.n	800732c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800730e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007312:	d10b      	bne.n	800732c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	f043 0220 	orr.w	r2, r3, #32
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e063      	b.n	80073f4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800732c:	f7ff fe62 	bl	8006ff4 <HAL_GetTick>
 8007330:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007332:	e021      	b.n	8007378 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800733a:	d01d      	beq.n	8007378 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <HAL_ADC_PollForConversion+0x6c>
 8007342:	f7ff fe57 	bl	8006ff4 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d212      	bcs.n	8007378 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b02      	cmp	r3, #2
 800735e:	d00b      	beq.n	8007378 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	f043 0204 	orr.w	r2, r3, #4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e03d      	b.n	80073f4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b02      	cmp	r3, #2
 8007384:	d1d6      	bne.n	8007334 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f06f 0212 	mvn.w	r2, #18
 800738e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d123      	bne.n	80073f2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d11f      	bne.n	80073f2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d111      	bne.n	80073f2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_ADC_ConfigChannel+0x1c>
 8007430:	2302      	movs	r3, #2
 8007432:	e105      	b.n	8007640 <HAL_ADC_ConfigChannel+0x228>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b09      	cmp	r3, #9
 8007442:	d925      	bls.n	8007490 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68d9      	ldr	r1, [r3, #12]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	4613      	mov	r3, r2
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	4413      	add	r3, r2
 8007458:	3b1e      	subs	r3, #30
 800745a:	2207      	movs	r2, #7
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	43da      	mvns	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	400a      	ands	r2, r1
 8007468:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68d9      	ldr	r1, [r3, #12]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	4618      	mov	r0, r3
 800747c:	4603      	mov	r3, r0
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4403      	add	r3, r0
 8007482:	3b1e      	subs	r3, #30
 8007484:	409a      	lsls	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	e022      	b.n	80074d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6919      	ldr	r1, [r3, #16]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	2207      	movs	r2, #7
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	43da      	mvns	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	400a      	ands	r2, r1
 80074b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6919      	ldr	r1, [r3, #16]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	4618      	mov	r0, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4403      	add	r3, r0
 80074cc:	409a      	lsls	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b06      	cmp	r3, #6
 80074dc:	d824      	bhi.n	8007528 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	3b05      	subs	r3, #5
 80074f0:	221f      	movs	r2, #31
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43da      	mvns	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	400a      	ands	r2, r1
 80074fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	4618      	mov	r0, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	3b05      	subs	r3, #5
 800751a:	fa00 f203 	lsl.w	r2, r0, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	635a      	str	r2, [r3, #52]	; 0x34
 8007526:	e04c      	b.n	80075c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b0c      	cmp	r3, #12
 800752e:	d824      	bhi.n	800757a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	3b23      	subs	r3, #35	; 0x23
 8007542:	221f      	movs	r2, #31
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43da      	mvns	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	400a      	ands	r2, r1
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4618      	mov	r0, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	3b23      	subs	r3, #35	; 0x23
 800756c:	fa00 f203 	lsl.w	r2, r0, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
 8007578:	e023      	b.n	80075c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	3b41      	subs	r3, #65	; 0x41
 800758c:	221f      	movs	r2, #31
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	43da      	mvns	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	400a      	ands	r2, r1
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4618      	mov	r0, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	3b41      	subs	r3, #65	; 0x41
 80075b6:	fa00 f203 	lsl.w	r2, r0, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075c2:	4b22      	ldr	r3, [pc, #136]	; (800764c <HAL_ADC_ConfigChannel+0x234>)
 80075c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a21      	ldr	r2, [pc, #132]	; (8007650 <HAL_ADC_ConfigChannel+0x238>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d109      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x1cc>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b12      	cmp	r3, #18
 80075d6:	d105      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a19      	ldr	r2, [pc, #100]	; (8007650 <HAL_ADC_ConfigChannel+0x238>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d123      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x21e>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d003      	beq.n	80075fe <HAL_ADC_ConfigChannel+0x1e6>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b11      	cmp	r3, #17
 80075fc:	d11b      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b10      	cmp	r3, #16
 8007610:	d111      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <HAL_ADC_ConfigChannel+0x23c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a10      	ldr	r2, [pc, #64]	; (8007658 <HAL_ADC_ConfigChannel+0x240>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	0c9a      	lsrs	r2, r3, #18
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007628:	e002      	b.n	8007630 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f9      	bne.n	800762a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40012300 	.word	0x40012300
 8007650:	40012000 	.word	0x40012000
 8007654:	20000144 	.word	0x20000144
 8007658:	431bde83 	.word	0x431bde83

0800765c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007664:	4b79      	ldr	r3, [pc, #484]	; (800784c <ADC_Init+0x1f0>)
 8007666:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	431a      	orrs	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6859      	ldr	r1, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	021a      	lsls	r2, r3, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80076b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689a      	ldr	r2, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689a      	ldr	r2, [r3, #8]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6899      	ldr	r1, [r3, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	4a58      	ldr	r2, [pc, #352]	; (8007850 <ADC_Init+0x1f4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6899      	ldr	r1, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	e00f      	b.n	800775a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007758:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0202 	bic.w	r2, r2, #2
 8007768:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6899      	ldr	r1, [r3, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7e1b      	ldrb	r3, [r3, #24]
 8007774:	005a      	lsls	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01b      	beq.n	80077c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007796:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80077a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	3b01      	subs	r3, #1
 80077b4:	035a      	lsls	r2, r3, #13
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	e007      	b.n	80077d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80077de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	051a      	lsls	r2, r3, #20
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6899      	ldr	r1, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007812:	025a      	lsls	r2, r3, #9
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	029a      	lsls	r2, r3, #10
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	430a      	orrs	r2, r1
 800783e:	609a      	str	r2, [r3, #8]
}
 8007840:	bf00      	nop
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	40012300 	.word	0x40012300
 8007850:	0f000001 	.word	0x0f000001

08007854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007864:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <__NVIC_SetPriorityGrouping+0x44>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007870:	4013      	ands	r3, r2
 8007872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800787c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007886:	4a04      	ldr	r2, [pc, #16]	; (8007898 <__NVIC_SetPriorityGrouping+0x44>)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	60d3      	str	r3, [r2, #12]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	e000ed00 	.word	0xe000ed00

0800789c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <__NVIC_GetPriorityGrouping+0x18>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	0a1b      	lsrs	r3, r3, #8
 80078a6:	f003 0307 	and.w	r3, r3, #7
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	e000ed00 	.word	0xe000ed00

080078b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db0b      	blt.n	80078e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	f003 021f 	and.w	r2, r3, #31
 80078d0:	4907      	ldr	r1, [pc, #28]	; (80078f0 <__NVIC_EnableIRQ+0x38>)
 80078d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078d6:	095b      	lsrs	r3, r3, #5
 80078d8:	2001      	movs	r0, #1
 80078da:	fa00 f202 	lsl.w	r2, r0, r2
 80078de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	e000e100 	.word	0xe000e100

080078f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007904:	2b00      	cmp	r3, #0
 8007906:	db0a      	blt.n	800791e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	490c      	ldr	r1, [pc, #48]	; (8007940 <__NVIC_SetPriority+0x4c>)
 800790e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007912:	0112      	lsls	r2, r2, #4
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	440b      	add	r3, r1
 8007918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800791c:	e00a      	b.n	8007934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	4908      	ldr	r1, [pc, #32]	; (8007944 <__NVIC_SetPriority+0x50>)
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	3b04      	subs	r3, #4
 800792c:	0112      	lsls	r2, r2, #4
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	440b      	add	r3, r1
 8007932:	761a      	strb	r2, [r3, #24]
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	e000e100 	.word	0xe000e100
 8007944:	e000ed00 	.word	0xe000ed00

08007948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	; 0x24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f1c3 0307 	rsb	r3, r3, #7
 8007962:	2b04      	cmp	r3, #4
 8007964:	bf28      	it	cs
 8007966:	2304      	movcs	r3, #4
 8007968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3304      	adds	r3, #4
 800796e:	2b06      	cmp	r3, #6
 8007970:	d902      	bls.n	8007978 <NVIC_EncodePriority+0x30>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	3b03      	subs	r3, #3
 8007976:	e000      	b.n	800797a <NVIC_EncodePriority+0x32>
 8007978:	2300      	movs	r3, #0
 800797a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800797c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	43da      	mvns	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	401a      	ands	r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007990:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	fa01 f303 	lsl.w	r3, r1, r3
 800799a:	43d9      	mvns	r1, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a0:	4313      	orrs	r3, r2
         );
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3724      	adds	r7, #36	; 0x24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff ff4c 	bl	8007854 <__NVIC_SetPriorityGrouping>
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079d6:	f7ff ff61 	bl	800789c <__NVIC_GetPriorityGrouping>
 80079da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	6978      	ldr	r0, [r7, #20]
 80079e2:	f7ff ffb1 	bl	8007948 <NVIC_EncodePriority>
 80079e6:	4602      	mov	r2, r0
 80079e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff ff80 	bl	80078f4 <__NVIC_SetPriority>
}
 80079f4:	bf00      	nop
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ff54 	bl	80078b8 <__NVIC_EnableIRQ>
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a26:	f7ff fae5 	bl	8006ff4 <HAL_GetTick>
 8007a2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d008      	beq.n	8007a4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2280      	movs	r2, #128	; 0x80
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e052      	b.n	8007af0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0216 	bic.w	r2, r2, #22
 8007a58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <HAL_DMA_Abort+0x62>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0208 	bic.w	r2, r2, #8
 8007a88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a9a:	e013      	b.n	8007ac4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a9c:	f7ff faaa 	bl	8006ff4 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d90c      	bls.n	8007ac4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e015      	b.n	8007af0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e4      	bne.n	8007a9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad6:	223f      	movs	r2, #63	; 0x3f
 8007ad8:	409a      	lsls	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d004      	beq.n	8007b16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2280      	movs	r2, #128	; 0x80
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e00c      	b.n	8007b30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	; 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b52:	2300      	movs	r3, #0
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	e16b      	b.n	8007e30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b58:	2201      	movs	r2, #1
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	f040 815a 	bne.w	8007e2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d005      	beq.n	8007b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d130      	bne.n	8007bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	2203      	movs	r2, #3
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	091b      	lsrs	r3, r3, #4
 8007bda:	f003 0201 	and.w	r2, r3, #1
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d017      	beq.n	8007c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	2203      	movs	r2, #3
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	4013      	ands	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d123      	bne.n	8007c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	08da      	lsrs	r2, r3, #3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3208      	adds	r2, #8
 8007c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	220f      	movs	r2, #15
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	08da      	lsrs	r2, r3, #3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3208      	adds	r2, #8
 8007c7a:	69b9      	ldr	r1, [r7, #24]
 8007c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	43db      	mvns	r3, r3
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4013      	ands	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f003 0203 	and.w	r2, r3, #3
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80b4 	beq.w	8007e2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	4b60      	ldr	r3, [pc, #384]	; (8007e48 <HAL_GPIO_Init+0x30c>)
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	4a5f      	ldr	r2, [pc, #380]	; (8007e48 <HAL_GPIO_Init+0x30c>)
 8007ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8007cd2:	4b5d      	ldr	r3, [pc, #372]	; (8007e48 <HAL_GPIO_Init+0x30c>)
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007cde:	4a5b      	ldr	r2, [pc, #364]	; (8007e4c <HAL_GPIO_Init+0x310>)
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	3302      	adds	r3, #2
 8007ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	220f      	movs	r2, #15
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	43db      	mvns	r3, r3
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a52      	ldr	r2, [pc, #328]	; (8007e50 <HAL_GPIO_Init+0x314>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d02b      	beq.n	8007d62 <HAL_GPIO_Init+0x226>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a51      	ldr	r2, [pc, #324]	; (8007e54 <HAL_GPIO_Init+0x318>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d025      	beq.n	8007d5e <HAL_GPIO_Init+0x222>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a50      	ldr	r2, [pc, #320]	; (8007e58 <HAL_GPIO_Init+0x31c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d01f      	beq.n	8007d5a <HAL_GPIO_Init+0x21e>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a4f      	ldr	r2, [pc, #316]	; (8007e5c <HAL_GPIO_Init+0x320>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d019      	beq.n	8007d56 <HAL_GPIO_Init+0x21a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a4e      	ldr	r2, [pc, #312]	; (8007e60 <HAL_GPIO_Init+0x324>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <HAL_GPIO_Init+0x216>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a4d      	ldr	r2, [pc, #308]	; (8007e64 <HAL_GPIO_Init+0x328>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00d      	beq.n	8007d4e <HAL_GPIO_Init+0x212>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a4c      	ldr	r2, [pc, #304]	; (8007e68 <HAL_GPIO_Init+0x32c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d007      	beq.n	8007d4a <HAL_GPIO_Init+0x20e>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a4b      	ldr	r2, [pc, #300]	; (8007e6c <HAL_GPIO_Init+0x330>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d101      	bne.n	8007d46 <HAL_GPIO_Init+0x20a>
 8007d42:	2307      	movs	r3, #7
 8007d44:	e00e      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d46:	2308      	movs	r3, #8
 8007d48:	e00c      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d4a:	2306      	movs	r3, #6
 8007d4c:	e00a      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d4e:	2305      	movs	r3, #5
 8007d50:	e008      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d52:	2304      	movs	r3, #4
 8007d54:	e006      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d56:	2303      	movs	r3, #3
 8007d58:	e004      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e002      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <HAL_GPIO_Init+0x228>
 8007d62:	2300      	movs	r3, #0
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	f002 0203 	and.w	r2, r2, #3
 8007d6a:	0092      	lsls	r2, r2, #2
 8007d6c:	4093      	lsls	r3, r2
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d74:	4935      	ldr	r1, [pc, #212]	; (8007e4c <HAL_GPIO_Init+0x310>)
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	089b      	lsrs	r3, r3, #2
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d82:	4b3b      	ldr	r3, [pc, #236]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007da6:	4a32      	ldr	r2, [pc, #200]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007dac:	4b30      	ldr	r3, [pc, #192]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	43db      	mvns	r3, r3
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4013      	ands	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007dd0:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dd6:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	43db      	mvns	r3, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007dfa:	4a1d      	ldr	r2, [pc, #116]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e00:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e24:	4a12      	ldr	r2, [pc, #72]	; (8007e70 <HAL_GPIO_Init+0x334>)
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	f67f ae90 	bls.w	8007b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	3724      	adds	r7, #36	; 0x24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40013800 	.word	0x40013800
 8007e50:	40020000 	.word	0x40020000
 8007e54:	40020400 	.word	0x40020400
 8007e58:	40020800 	.word	0x40020800
 8007e5c:	40020c00 	.word	0x40020c00
 8007e60:	40021000 	.word	0x40021000
 8007e64:	40021400 	.word	0x40021400
 8007e68:	40021800 	.word	0x40021800
 8007e6c:	40021c00 	.word	0x40021c00
 8007e70:	40013c00 	.word	0x40013c00

08007e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	807b      	strh	r3, [r7, #2]
 8007e80:	4613      	mov	r3, r2
 8007e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e84:	787b      	ldrb	r3, [r7, #1]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e8a:	887a      	ldrh	r2, [r7, #2]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e90:	e003      	b.n	8007e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e92:	887b      	ldrh	r3, [r7, #2]
 8007e94:	041a      	lsls	r2, r3, #16
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	619a      	str	r2, [r3, #24]
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e12b      	b.n	8008112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fe fd60 	bl	8006994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2224      	movs	r2, #36	; 0x24
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f0c:	f001 fbe4 	bl	80096d8 <HAL_RCC_GetPCLK1Freq>
 8007f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4a81      	ldr	r2, [pc, #516]	; (800811c <HAL_I2C_Init+0x274>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d807      	bhi.n	8007f2c <HAL_I2C_Init+0x84>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a80      	ldr	r2, [pc, #512]	; (8008120 <HAL_I2C_Init+0x278>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	bf94      	ite	ls
 8007f24:	2301      	movls	r3, #1
 8007f26:	2300      	movhi	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	e006      	b.n	8007f3a <HAL_I2C_Init+0x92>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a7d      	ldr	r2, [pc, #500]	; (8008124 <HAL_I2C_Init+0x27c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	bf94      	ite	ls
 8007f34:	2301      	movls	r3, #1
 8007f36:	2300      	movhi	r3, #0
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e0e7      	b.n	8008112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4a78      	ldr	r2, [pc, #480]	; (8008128 <HAL_I2C_Init+0x280>)
 8007f46:	fba2 2303 	umull	r2, r3, r2, r3
 8007f4a:	0c9b      	lsrs	r3, r3, #18
 8007f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4a6a      	ldr	r2, [pc, #424]	; (800811c <HAL_I2C_Init+0x274>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d802      	bhi.n	8007f7c <HAL_I2C_Init+0xd4>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	e009      	b.n	8007f90 <HAL_I2C_Init+0xe8>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	4a69      	ldr	r2, [pc, #420]	; (800812c <HAL_I2C_Init+0x284>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	099b      	lsrs	r3, r3, #6
 8007f8e:	3301      	adds	r3, #1
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	495c      	ldr	r1, [pc, #368]	; (800811c <HAL_I2C_Init+0x274>)
 8007fac:	428b      	cmp	r3, r1
 8007fae:	d819      	bhi.n	8007fe4 <HAL_I2C_Init+0x13c>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1e59      	subs	r1, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fbe:	1c59      	adds	r1, r3, #1
 8007fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007fc4:	400b      	ands	r3, r1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_I2C_Init+0x138>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1e59      	subs	r1, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fd8:	3301      	adds	r3, #1
 8007fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fde:	e051      	b.n	8008084 <HAL_I2C_Init+0x1dc>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	e04f      	b.n	8008084 <HAL_I2C_Init+0x1dc>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d111      	bne.n	8008010 <HAL_I2C_Init+0x168>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	1e58      	subs	r0, r3, #1
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6859      	ldr	r1, [r3, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	440b      	add	r3, r1
 8007ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ffe:	3301      	adds	r3, #1
 8008000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008004:	2b00      	cmp	r3, #0
 8008006:	bf0c      	ite	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	2300      	movne	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	e012      	b.n	8008036 <HAL_I2C_Init+0x18e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	1e58      	subs	r0, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6859      	ldr	r1, [r3, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	0099      	lsls	r1, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	fbb0 f3f3 	udiv	r3, r0, r3
 8008026:	3301      	adds	r3, #1
 8008028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800802c:	2b00      	cmp	r3, #0
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_I2C_Init+0x196>
 800803a:	2301      	movs	r3, #1
 800803c:	e022      	b.n	8008084 <HAL_I2C_Init+0x1dc>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10e      	bne.n	8008064 <HAL_I2C_Init+0x1bc>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1e58      	subs	r0, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6859      	ldr	r1, [r3, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	440b      	add	r3, r1
 8008054:	fbb0 f3f3 	udiv	r3, r0, r3
 8008058:	3301      	adds	r3, #1
 800805a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800805e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008062:	e00f      	b.n	8008084 <HAL_I2C_Init+0x1dc>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	1e58      	subs	r0, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	0099      	lsls	r1, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	fbb0 f3f3 	udiv	r3, r0, r3
 800807a:	3301      	adds	r3, #1
 800807c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008084:	6879      	ldr	r1, [r7, #4]
 8008086:	6809      	ldr	r1, [r1, #0]
 8008088:	4313      	orrs	r3, r2
 800808a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69da      	ldr	r2, [r3, #28]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	431a      	orrs	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80080b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	6911      	ldr	r1, [r2, #16]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	68d2      	ldr	r2, [r2, #12]
 80080be:	4311      	orrs	r1, r2
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695a      	ldr	r2, [r3, #20]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	000186a0 	.word	0x000186a0
 8008120:	001e847f 	.word	0x001e847f
 8008124:	003d08ff 	.word	0x003d08ff
 8008128:	431bde83 	.word	0x431bde83
 800812c:	10624dd3 	.word	0x10624dd3

08008130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	4608      	mov	r0, r1
 800813a:	4611      	mov	r1, r2
 800813c:	461a      	mov	r2, r3
 800813e:	4603      	mov	r3, r0
 8008140:	817b      	strh	r3, [r7, #10]
 8008142:	460b      	mov	r3, r1
 8008144:	813b      	strh	r3, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800814a:	f7fe ff53 	bl	8006ff4 <HAL_GetTick>
 800814e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b20      	cmp	r3, #32
 800815a:	f040 80d9 	bne.w	8008310 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2319      	movs	r3, #25
 8008164:	2201      	movs	r2, #1
 8008166:	496d      	ldr	r1, [pc, #436]	; (800831c <HAL_I2C_Mem_Write+0x1ec>)
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fc7f 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
 8008176:	e0cc      	b.n	8008312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_I2C_Mem_Write+0x56>
 8008182:	2302      	movs	r3, #2
 8008184:	e0c5      	b.n	8008312 <HAL_I2C_Mem_Write+0x1e2>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d007      	beq.n	80081ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0201 	orr.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2221      	movs	r2, #33	; 0x21
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2240      	movs	r2, #64	; 0x40
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a3a      	ldr	r2, [r7, #32]
 80081d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80081dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4a4d      	ldr	r2, [pc, #308]	; (8008320 <HAL_I2C_Mem_Write+0x1f0>)
 80081ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80081ee:	88f8      	ldrh	r0, [r7, #6]
 80081f0:	893a      	ldrh	r2, [r7, #8]
 80081f2:	8979      	ldrh	r1, [r7, #10]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4603      	mov	r3, r0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fab6 	bl	8008770 <I2C_RequestMemoryWrite>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d052      	beq.n	80082b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e081      	b.n	8008312 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fd00 	bl	8008c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00d      	beq.n	800823a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	2b04      	cmp	r3, #4
 8008224:	d107      	bne.n	8008236 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e06b      	b.n	8008312 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	781a      	ldrb	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	f003 0304 	and.w	r3, r3, #4
 8008274:	2b04      	cmp	r3, #4
 8008276:	d11b      	bne.n	80082b0 <HAL_I2C_Mem_Write+0x180>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800827c:	2b00      	cmp	r3, #0
 800827e:	d017      	beq.n	80082b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829a:	3b01      	subs	r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	3b01      	subs	r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1aa      	bne.n	800820e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 fcec 	bl	8008c9a <I2C_WaitOnBTFFlagUntilTimeout>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00d      	beq.n	80082e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d107      	bne.n	80082e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e016      	b.n	8008312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	e000      	b.n	8008312 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008310:	2302      	movs	r3, #2
  }
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	00100002 	.word	0x00100002
 8008320:	ffff0000 	.word	0xffff0000

08008324 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08c      	sub	sp, #48	; 0x30
 8008328:	af02      	add	r7, sp, #8
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	461a      	mov	r2, r3
 8008332:	4603      	mov	r3, r0
 8008334:	817b      	strh	r3, [r7, #10]
 8008336:	460b      	mov	r3, r1
 8008338:	813b      	strh	r3, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800833e:	f7fe fe59 	bl	8006ff4 <HAL_GetTick>
 8008342:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b20      	cmp	r3, #32
 800834e:	f040 8208 	bne.w	8008762 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	2319      	movs	r3, #25
 8008358:	2201      	movs	r2, #1
 800835a:	497b      	ldr	r1, [pc, #492]	; (8008548 <HAL_I2C_Mem_Read+0x224>)
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fb85 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
 800836a:	e1fb      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_I2C_Mem_Read+0x56>
 8008376:	2302      	movs	r3, #2
 8008378:	e1f4      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b01      	cmp	r3, #1
 800838e:	d007      	beq.n	80083a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0201 	orr.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2222      	movs	r2, #34	; 0x22
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2240      	movs	r2, #64	; 0x40
 80083bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80083d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4a5b      	ldr	r2, [pc, #364]	; (800854c <HAL_I2C_Mem_Read+0x228>)
 80083e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80083e2:	88f8      	ldrh	r0, [r7, #6]
 80083e4:	893a      	ldrh	r2, [r7, #8]
 80083e6:	8979      	ldrh	r1, [r7, #10]
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4603      	mov	r3, r0
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fa52 	bl	800889c <I2C_RequestMemoryRead>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e1b0      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d113      	bne.n	8008432 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800840a:	2300      	movs	r3, #0
 800840c:	623b      	str	r3, [r7, #32]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	623b      	str	r3, [r7, #32]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	623b      	str	r3, [r7, #32]
 800841e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	e184      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008436:	2b01      	cmp	r3, #1
 8008438:	d11b      	bne.n	8008472 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800844a:	2300      	movs	r3, #0
 800844c:	61fb      	str	r3, [r7, #28]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	e164      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008476:	2b02      	cmp	r3, #2
 8008478:	d11b      	bne.n	80084b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008488:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	61bb      	str	r3, [r7, #24]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	e144      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	617b      	str	r3, [r7, #20]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80084c8:	e138      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f200 80f1 	bhi.w	80086b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d123      	bne.n	8008524 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fc1b 	bl	8008d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e139      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691a      	ldr	r2, [r3, #16]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	b2d2      	uxtb	r2, r2
 80084fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008518:	b29b      	uxth	r3, r3
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008522:	e10b      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008528:	2b02      	cmp	r3, #2
 800852a:	d14e      	bne.n	80085ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	2200      	movs	r2, #0
 8008534:	4906      	ldr	r1, [pc, #24]	; (8008550 <HAL_I2C_Mem_Read+0x22c>)
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 fa98 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d008      	beq.n	8008554 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e10e      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
 8008546:	bf00      	nop
 8008548:	00100002 	.word	0x00100002
 800854c:	ffff0000 	.word	0xffff0000
 8008550:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008580:	3b01      	subs	r3, #1
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691a      	ldr	r2, [r3, #16]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085be:	b29b      	uxth	r3, r3
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085c8:	e0b8      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	2200      	movs	r2, #0
 80085d2:	4966      	ldr	r1, [pc, #408]	; (800876c <HAL_I2C_Mem_Read+0x448>)
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fa49 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d001      	beq.n	80085e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e0bf      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691a      	ldr	r2, [r3, #16]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	2200      	movs	r2, #0
 800862e:	494f      	ldr	r1, [pc, #316]	; (800876c <HAL_I2C_Mem_Read+0x448>)
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fa1b 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e091      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866c:	3b01      	subs	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80086b4:	e042      	b.n	800873c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fb2e 	bl	8008d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e04c      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b04      	cmp	r3, #4
 8008708:	d118      	bne.n	800873c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	f47f aec2 	bne.w	80084ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3728      	adds	r7, #40	; 0x28
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	00010004 	.word	0x00010004

08008770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af02      	add	r7, sp, #8
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	4608      	mov	r0, r1
 800877a:	4611      	mov	r1, r2
 800877c:	461a      	mov	r2, r3
 800877e:	4603      	mov	r3, r0
 8008780:	817b      	strh	r3, [r7, #10]
 8008782:	460b      	mov	r3, r1
 8008784:	813b      	strh	r3, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 f960 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00d      	beq.n	80087ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c0:	d103      	bne.n	80087ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e05f      	b.n	800888e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087ce:	897b      	ldrh	r3, [r7, #10]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	461a      	mov	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	6a3a      	ldr	r2, [r7, #32]
 80087e2:	492d      	ldr	r1, [pc, #180]	; (8008898 <I2C_RequestMemoryWrite+0x128>)
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f998 	bl	8008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e04c      	b.n	800888e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800880a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880c:	6a39      	ldr	r1, [r7, #32]
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fa02 	bl	8008c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00d      	beq.n	8008836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	2b04      	cmp	r3, #4
 8008820:	d107      	bne.n	8008832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e02b      	b.n	800888e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d105      	bne.n	8008848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800883c:	893b      	ldrh	r3, [r7, #8]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	611a      	str	r2, [r3, #16]
 8008846:	e021      	b.n	800888c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008848:	893b      	ldrh	r3, [r7, #8]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	b2da      	uxtb	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008858:	6a39      	ldr	r1, [r7, #32]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 f9dc 	bl	8008c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00d      	beq.n	8008882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	2b04      	cmp	r3, #4
 800886c:	d107      	bne.n	800887e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e005      	b.n	800888e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008882:	893b      	ldrh	r3, [r7, #8]
 8008884:	b2da      	uxtb	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	00010002 	.word	0x00010002

0800889c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	4603      	mov	r3, r0
 80088ac:	817b      	strh	r3, [r7, #10]
 80088ae:	460b      	mov	r3, r1
 80088b0:	813b      	strh	r3, [r7, #8]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	2200      	movs	r2, #0
 80088de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 f8c2 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00d      	beq.n	800890a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088fc:	d103      	bne.n	8008906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e0aa      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800890a:	897b      	ldrh	r3, [r7, #10]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	461a      	mov	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	6a3a      	ldr	r2, [r7, #32]
 800891e:	4952      	ldr	r1, [pc, #328]	; (8008a68 <I2C_RequestMemoryRead+0x1cc>)
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f8fa 	bl	8008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e097      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008948:	6a39      	ldr	r1, [r7, #32]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 f964 	bl	8008c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00d      	beq.n	8008972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	2b04      	cmp	r3, #4
 800895c:	d107      	bne.n	800896e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800896c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e076      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d105      	bne.n	8008984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008978:	893b      	ldrh	r3, [r7, #8]
 800897a:	b2da      	uxtb	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	611a      	str	r2, [r3, #16]
 8008982:	e021      	b.n	80089c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008984:	893b      	ldrh	r3, [r7, #8]
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	b29b      	uxth	r3, r3
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008994:	6a39      	ldr	r1, [r7, #32]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f93e 	bl	8008c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d107      	bne.n	80089ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e050      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089be:	893b      	ldrh	r3, [r7, #8]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	6a39      	ldr	r1, [r7, #32]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f923 	bl	8008c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00d      	beq.n	80089f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d107      	bne.n	80089f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e035      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 f82b 	bl	8008a6c <I2C_WaitOnFlagUntilTimeout>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00d      	beq.n	8008a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2a:	d103      	bne.n	8008a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e013      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008a38:	897b      	ldrh	r3, [r7, #10]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	4906      	ldr	r1, [pc, #24]	; (8008a68 <I2C_RequestMemoryRead+0x1cc>)
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 f863 	bl	8008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e000      	b.n	8008a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	00010002 	.word	0x00010002

08008a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a7c:	e025      	b.n	8008aca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a84:	d021      	beq.n	8008aca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a86:	f7fe fab5 	bl	8006ff4 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d302      	bcc.n	8008a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d116      	bne.n	8008aca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	f043 0220 	orr.w	r2, r3, #32
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e023      	b.n	8008b12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d10d      	bne.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	43da      	mvns	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bf0c      	ite	eq
 8008ae6:	2301      	moveq	r3, #1
 8008ae8:	2300      	movne	r3, #0
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	e00c      	b.n	8008b0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	43da      	mvns	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4013      	ands	r3, r2
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf0c      	ite	eq
 8008b02:	2301      	moveq	r3, #1
 8008b04:	2300      	movne	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	461a      	mov	r2, r3
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d0b6      	beq.n	8008a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
 8008b26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b28:	e051      	b.n	8008bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b38:	d123      	bne.n	8008b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	f043 0204 	orr.w	r2, r3, #4
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e046      	b.n	8008c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b88:	d021      	beq.n	8008bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8a:	f7fe fa33 	bl	8006ff4 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d302      	bcc.n	8008ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d116      	bne.n	8008bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	f043 0220 	orr.w	r2, r3, #32
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e020      	b.n	8008c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	0c1b      	lsrs	r3, r3, #16
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d10c      	bne.n	8008bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	43da      	mvns	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4013      	ands	r3, r2
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf14      	ite	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	2300      	moveq	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	e00b      	b.n	8008c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	43da      	mvns	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	bf14      	ite	ne
 8008c04:	2301      	movne	r3, #1
 8008c06:	2300      	moveq	r3, #0
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d18d      	bne.n	8008b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c24:	e02d      	b.n	8008c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f8ce 	bl	8008dc8 <I2C_IsAcknowledgeFailed>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e02d      	b.n	8008c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c3c:	d021      	beq.n	8008c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3e:	f7fe f9d9 	bl	8006ff4 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d116      	bne.n	8008c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	f043 0220 	orr.w	r2, r3, #32
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e007      	b.n	8008c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8c:	2b80      	cmp	r3, #128	; 0x80
 8008c8e:	d1ca      	bne.n	8008c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ca6:	e02d      	b.n	8008d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f88d 	bl	8008dc8 <I2C_IsAcknowledgeFailed>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e02d      	b.n	8008d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cbe:	d021      	beq.n	8008d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc0:	f7fe f998 	bl	8006ff4 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d302      	bcc.n	8008cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d116      	bne.n	8008d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	f043 0220 	orr.w	r2, r3, #32
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e007      	b.n	8008d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d1ca      	bne.n	8008ca8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d28:	e042      	b.n	8008db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d119      	bne.n	8008d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0210 	mvn.w	r2, #16
 8008d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e029      	b.n	8008dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6c:	f7fe f942 	bl	8006ff4 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d302      	bcc.n	8008d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d116      	bne.n	8008db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9c:	f043 0220 	orr.w	r2, r3, #32
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e007      	b.n	8008dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dba:	2b40      	cmp	r3, #64	; 0x40
 8008dbc:	d1b5      	bne.n	8008d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dde:	d11b      	bne.n	8008e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	f043 0204 	orr.w	r2, r3, #4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008e2e:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <HAL_PWR_EnableBkUpAccess+0x24>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008e3a:	687b      	ldr	r3, [r7, #4]
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	420e0020 	.word	0x420e0020
 8008e4c:	40007000 	.word	0x40007000

08008e50 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_PWR_DisableBkUpAccess+0x24>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008e62:	687b      	ldr	r3, [r7, #4]
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	420e0020 	.word	0x420e0020
 8008e74:	40007000 	.word	0x40007000

08008e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e267      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d075      	beq.n	8008f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e96:	4b88      	ldr	r3, [pc, #544]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f003 030c 	and.w	r3, r3, #12
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d00c      	beq.n	8008ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ea2:	4b85      	ldr	r3, [pc, #532]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008eaa:	2b08      	cmp	r3, #8
 8008eac:	d112      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008eae:	4b82      	ldr	r3, [pc, #520]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eba:	d10b      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ebc:	4b7e      	ldr	r3, [pc, #504]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d05b      	beq.n	8008f80 <HAL_RCC_OscConfig+0x108>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d157      	bne.n	8008f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e242      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008edc:	d106      	bne.n	8008eec <HAL_RCC_OscConfig+0x74>
 8008ede:	4b76      	ldr	r3, [pc, #472]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a75      	ldr	r2, [pc, #468]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e01d      	b.n	8008f28 <HAL_RCC_OscConfig+0xb0>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ef4:	d10c      	bne.n	8008f10 <HAL_RCC_OscConfig+0x98>
 8008ef6:	4b70      	ldr	r3, [pc, #448]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a6f      	ldr	r2, [pc, #444]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	4b6d      	ldr	r3, [pc, #436]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a6c      	ldr	r2, [pc, #432]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e00b      	b.n	8008f28 <HAL_RCC_OscConfig+0xb0>
 8008f10:	4b69      	ldr	r3, [pc, #420]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a68      	ldr	r2, [pc, #416]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	4b66      	ldr	r3, [pc, #408]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a65      	ldr	r2, [pc, #404]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d013      	beq.n	8008f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f30:	f7fe f860 	bl	8006ff4 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f38:	f7fe f85c 	bl	8006ff4 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b64      	cmp	r3, #100	; 0x64
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e207      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f4a:	4b5b      	ldr	r3, [pc, #364]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0xc0>
 8008f56:	e014      	b.n	8008f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f58:	f7fe f84c 	bl	8006ff4 <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f60:	f7fe f848 	bl	8006ff4 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b64      	cmp	r3, #100	; 0x64
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e1f3      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f72:	4b51      	ldr	r3, [pc, #324]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1f0      	bne.n	8008f60 <HAL_RCC_OscConfig+0xe8>
 8008f7e:	e000      	b.n	8008f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d063      	beq.n	8009056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f8e:	4b4a      	ldr	r3, [pc, #296]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 030c 	and.w	r3, r3, #12
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f9a:	4b47      	ldr	r3, [pc, #284]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008fa2:	2b08      	cmp	r3, #8
 8008fa4:	d11c      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fa6:	4b44      	ldr	r3, [pc, #272]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d116      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fb2:	4b41      	ldr	r3, [pc, #260]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <HAL_RCC_OscConfig+0x152>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d001      	beq.n	8008fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e1c7      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fca:	4b3b      	ldr	r3, [pc, #236]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	4937      	ldr	r1, [pc, #220]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fde:	e03a      	b.n	8009056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d020      	beq.n	800902a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fe8:	4b34      	ldr	r3, [pc, #208]	; (80090bc <HAL_RCC_OscConfig+0x244>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fee:	f7fe f801 	bl	8006ff4 <HAL_GetTick>
 8008ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ff4:	e008      	b.n	8009008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ff6:	f7fd fffd 	bl	8006ff4 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d901      	bls.n	8009008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e1a8      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d0f0      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009014:	4b28      	ldr	r3, [pc, #160]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	00db      	lsls	r3, r3, #3
 8009022:	4925      	ldr	r1, [pc, #148]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 8009024:	4313      	orrs	r3, r2
 8009026:	600b      	str	r3, [r1, #0]
 8009028:	e015      	b.n	8009056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <HAL_RCC_OscConfig+0x244>)
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009030:	f7fd ffe0 	bl	8006ff4 <HAL_GetTick>
 8009034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009036:	e008      	b.n	800904a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009038:	f7fd ffdc 	bl	8006ff4 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e187      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800904a:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0302 	and.w	r3, r3, #2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1f0      	bne.n	8009038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d036      	beq.n	80090d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d016      	beq.n	8009098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800906a:	4b15      	ldr	r3, [pc, #84]	; (80090c0 <HAL_RCC_OscConfig+0x248>)
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009070:	f7fd ffc0 	bl	8006ff4 <HAL_GetTick>
 8009074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009076:	e008      	b.n	800908a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009078:	f7fd ffbc 	bl	8006ff4 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b02      	cmp	r3, #2
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e167      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800908a:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <HAL_RCC_OscConfig+0x240>)
 800908c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f0      	beq.n	8009078 <HAL_RCC_OscConfig+0x200>
 8009096:	e01b      	b.n	80090d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <HAL_RCC_OscConfig+0x248>)
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800909e:	f7fd ffa9 	bl	8006ff4 <HAL_GetTick>
 80090a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090a4:	e00e      	b.n	80090c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090a6:	f7fd ffa5 	bl	8006ff4 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d907      	bls.n	80090c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e150      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
 80090b8:	40023800 	.word	0x40023800
 80090bc:	42470000 	.word	0x42470000
 80090c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090c4:	4b88      	ldr	r3, [pc, #544]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80090c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1ea      	bne.n	80090a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 8097 	beq.w	800920c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090de:	2300      	movs	r3, #0
 80090e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090e2:	4b81      	ldr	r3, [pc, #516]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10f      	bne.n	800910e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ee:	2300      	movs	r3, #0
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	4b7d      	ldr	r3, [pc, #500]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	4a7c      	ldr	r2, [pc, #496]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80090f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090fc:	6413      	str	r3, [r2, #64]	; 0x40
 80090fe:	4b7a      	ldr	r3, [pc, #488]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009106:	60bb      	str	r3, [r7, #8]
 8009108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800910e:	4b77      	ldr	r3, [pc, #476]	; (80092ec <HAL_RCC_OscConfig+0x474>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009116:	2b00      	cmp	r3, #0
 8009118:	d118      	bne.n	800914c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800911a:	4b74      	ldr	r3, [pc, #464]	; (80092ec <HAL_RCC_OscConfig+0x474>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a73      	ldr	r2, [pc, #460]	; (80092ec <HAL_RCC_OscConfig+0x474>)
 8009120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009126:	f7fd ff65 	bl	8006ff4 <HAL_GetTick>
 800912a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800912c:	e008      	b.n	8009140 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800912e:	f7fd ff61 	bl	8006ff4 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b02      	cmp	r3, #2
 800913a:	d901      	bls.n	8009140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e10c      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009140:	4b6a      	ldr	r3, [pc, #424]	; (80092ec <HAL_RCC_OscConfig+0x474>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0f0      	beq.n	800912e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d106      	bne.n	8009162 <HAL_RCC_OscConfig+0x2ea>
 8009154:	4b64      	ldr	r3, [pc, #400]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	4a63      	ldr	r2, [pc, #396]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 800915a:	f043 0301 	orr.w	r3, r3, #1
 800915e:	6713      	str	r3, [r2, #112]	; 0x70
 8009160:	e01c      	b.n	800919c <HAL_RCC_OscConfig+0x324>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	2b05      	cmp	r3, #5
 8009168:	d10c      	bne.n	8009184 <HAL_RCC_OscConfig+0x30c>
 800916a:	4b5f      	ldr	r3, [pc, #380]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	4a5e      	ldr	r2, [pc, #376]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009170:	f043 0304 	orr.w	r3, r3, #4
 8009174:	6713      	str	r3, [r2, #112]	; 0x70
 8009176:	4b5c      	ldr	r3, [pc, #368]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	4a5b      	ldr	r2, [pc, #364]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 800917c:	f043 0301 	orr.w	r3, r3, #1
 8009180:	6713      	str	r3, [r2, #112]	; 0x70
 8009182:	e00b      	b.n	800919c <HAL_RCC_OscConfig+0x324>
 8009184:	4b58      	ldr	r3, [pc, #352]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009188:	4a57      	ldr	r2, [pc, #348]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 800918a:	f023 0301 	bic.w	r3, r3, #1
 800918e:	6713      	str	r3, [r2, #112]	; 0x70
 8009190:	4b55      	ldr	r3, [pc, #340]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	4a54      	ldr	r2, [pc, #336]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009196:	f023 0304 	bic.w	r3, r3, #4
 800919a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d015      	beq.n	80091d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a4:	f7fd ff26 	bl	8006ff4 <HAL_GetTick>
 80091a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091aa:	e00a      	b.n	80091c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091ac:	f7fd ff22 	bl	8006ff4 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e0cb      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091c2:	4b49      	ldr	r3, [pc, #292]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0ee      	beq.n	80091ac <HAL_RCC_OscConfig+0x334>
 80091ce:	e014      	b.n	80091fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091d0:	f7fd ff10 	bl	8006ff4 <HAL_GetTick>
 80091d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091d6:	e00a      	b.n	80091ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091d8:	f7fd ff0c 	bl	8006ff4 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e0b5      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091ee:	4b3e      	ldr	r3, [pc, #248]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80091f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1ee      	bne.n	80091d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d105      	bne.n	800920c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009200:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	4a38      	ldr	r2, [pc, #224]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800920a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 80a1 	beq.w	8009358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009216:	4b34      	ldr	r3, [pc, #208]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f003 030c 	and.w	r3, r3, #12
 800921e:	2b08      	cmp	r3, #8
 8009220:	d05c      	beq.n	80092dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d141      	bne.n	80092ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800922a:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <HAL_RCC_OscConfig+0x478>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009230:	f7fd fee0 	bl	8006ff4 <HAL_GetTick>
 8009234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009236:	e008      	b.n	800924a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009238:	f7fd fedc 	bl	8006ff4 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b02      	cmp	r3, #2
 8009244:	d901      	bls.n	800924a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e087      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800924a:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f0      	bne.n	8009238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	69da      	ldr	r2, [r3, #28]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	431a      	orrs	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	019b      	lsls	r3, r3, #6
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	085b      	lsrs	r3, r3, #1
 800926e:	3b01      	subs	r3, #1
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	061b      	lsls	r3, r3, #24
 800927a:	491b      	ldr	r1, [pc, #108]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 800927c:	4313      	orrs	r3, r2
 800927e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009280:	4b1b      	ldr	r3, [pc, #108]	; (80092f0 <HAL_RCC_OscConfig+0x478>)
 8009282:	2201      	movs	r2, #1
 8009284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009286:	f7fd feb5 	bl	8006ff4 <HAL_GetTick>
 800928a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800928c:	e008      	b.n	80092a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800928e:	f7fd feb1 	bl	8006ff4 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	2b02      	cmp	r3, #2
 800929a:	d901      	bls.n	80092a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e05c      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0f0      	beq.n	800928e <HAL_RCC_OscConfig+0x416>
 80092ac:	e054      	b.n	8009358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092ae:	4b10      	ldr	r3, [pc, #64]	; (80092f0 <HAL_RCC_OscConfig+0x478>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b4:	f7fd fe9e 	bl	8006ff4 <HAL_GetTick>
 80092b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ba:	e008      	b.n	80092ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092bc:	f7fd fe9a 	bl	8006ff4 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d901      	bls.n	80092ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e045      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ce:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <HAL_RCC_OscConfig+0x470>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1f0      	bne.n	80092bc <HAL_RCC_OscConfig+0x444>
 80092da:	e03d      	b.n	8009358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d107      	bne.n	80092f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e038      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
 80092e8:	40023800 	.word	0x40023800
 80092ec:	40007000 	.word	0x40007000
 80092f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092f4:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <HAL_RCC_OscConfig+0x4ec>)
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d028      	beq.n	8009354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800930c:	429a      	cmp	r2, r3
 800930e:	d121      	bne.n	8009354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800931a:	429a      	cmp	r2, r3
 800931c:	d11a      	bne.n	8009354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009324:	4013      	ands	r3, r2
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800932a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800932c:	4293      	cmp	r3, r2
 800932e:	d111      	bne.n	8009354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	3b01      	subs	r3, #1
 800933e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009340:	429a      	cmp	r2, r3
 8009342:	d107      	bne.n	8009354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009350:	429a      	cmp	r2, r3
 8009352:	d001      	beq.n	8009358 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e000      	b.n	800935a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40023800 	.word	0x40023800

08009368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e0cc      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800937c:	4b68      	ldr	r3, [pc, #416]	; (8009520 <HAL_RCC_ClockConfig+0x1b8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	429a      	cmp	r2, r3
 8009388:	d90c      	bls.n	80093a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800938a:	4b65      	ldr	r3, [pc, #404]	; (8009520 <HAL_RCC_ClockConfig+0x1b8>)
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	b2d2      	uxtb	r2, r2
 8009390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009392:	4b63      	ldr	r3, [pc, #396]	; (8009520 <HAL_RCC_ClockConfig+0x1b8>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d001      	beq.n	80093a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e0b8      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d020      	beq.n	80093f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d005      	beq.n	80093c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093bc:	4b59      	ldr	r3, [pc, #356]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	4a58      	ldr	r2, [pc, #352]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80093c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80093c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093d4:	4b53      	ldr	r3, [pc, #332]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	4a52      	ldr	r2, [pc, #328]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80093da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80093de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093e0:	4b50      	ldr	r3, [pc, #320]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	494d      	ldr	r1, [pc, #308]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d044      	beq.n	8009488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d107      	bne.n	8009416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009406:	4b47      	ldr	r3, [pc, #284]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d119      	bne.n	8009446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e07f      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d003      	beq.n	8009426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009422:	2b03      	cmp	r3, #3
 8009424:	d107      	bne.n	8009436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009426:	4b3f      	ldr	r3, [pc, #252]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e06f      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009436:	4b3b      	ldr	r3, [pc, #236]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e067      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009446:	4b37      	ldr	r3, [pc, #220]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f023 0203 	bic.w	r2, r3, #3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	4934      	ldr	r1, [pc, #208]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 8009454:	4313      	orrs	r3, r2
 8009456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009458:	f7fd fdcc 	bl	8006ff4 <HAL_GetTick>
 800945c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800945e:	e00a      	b.n	8009476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009460:	f7fd fdc8 	bl	8006ff4 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	f241 3288 	movw	r2, #5000	; 0x1388
 800946e:	4293      	cmp	r3, r2
 8009470:	d901      	bls.n	8009476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e04f      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009476:	4b2b      	ldr	r3, [pc, #172]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 020c 	and.w	r2, r3, #12
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	429a      	cmp	r2, r3
 8009486:	d1eb      	bne.n	8009460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009488:	4b25      	ldr	r3, [pc, #148]	; (8009520 <HAL_RCC_ClockConfig+0x1b8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	683a      	ldr	r2, [r7, #0]
 8009492:	429a      	cmp	r2, r3
 8009494:	d20c      	bcs.n	80094b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009496:	4b22      	ldr	r3, [pc, #136]	; (8009520 <HAL_RCC_ClockConfig+0x1b8>)
 8009498:	683a      	ldr	r2, [r7, #0]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800949e:	4b20      	ldr	r3, [pc, #128]	; (8009520 <HAL_RCC_ClockConfig+0x1b8>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d001      	beq.n	80094b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e032      	b.n	8009516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d008      	beq.n	80094ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094bc:	4b19      	ldr	r3, [pc, #100]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	4916      	ldr	r1, [pc, #88]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d009      	beq.n	80094ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	490e      	ldr	r1, [pc, #56]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80094ee:	f000 f821 	bl	8009534 <HAL_RCC_GetSysClockFreq>
 80094f2:	4602      	mov	r2, r0
 80094f4:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <HAL_RCC_ClockConfig+0x1bc>)
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	091b      	lsrs	r3, r3, #4
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	490a      	ldr	r1, [pc, #40]	; (8009528 <HAL_RCC_ClockConfig+0x1c0>)
 8009500:	5ccb      	ldrb	r3, [r1, r3]
 8009502:	fa22 f303 	lsr.w	r3, r2, r3
 8009506:	4a09      	ldr	r2, [pc, #36]	; (800952c <HAL_RCC_ClockConfig+0x1c4>)
 8009508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800950a:	4b09      	ldr	r3, [pc, #36]	; (8009530 <HAL_RCC_ClockConfig+0x1c8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4618      	mov	r0, r3
 8009510:	f7fd fc32 	bl	8006d78 <HAL_InitTick>

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	40023c00 	.word	0x40023c00
 8009524:	40023800 	.word	0x40023800
 8009528:	08010438 	.word	0x08010438
 800952c:	20000144 	.word	0x20000144
 8009530:	20000148 	.word	0x20000148

08009534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009538:	b090      	sub	sp, #64	; 0x40
 800953a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	637b      	str	r3, [r7, #52]	; 0x34
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009544:	2300      	movs	r3, #0
 8009546:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800954c:	4b59      	ldr	r3, [pc, #356]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f003 030c 	and.w	r3, r3, #12
 8009554:	2b08      	cmp	r3, #8
 8009556:	d00d      	beq.n	8009574 <HAL_RCC_GetSysClockFreq+0x40>
 8009558:	2b08      	cmp	r3, #8
 800955a:	f200 80a1 	bhi.w	80096a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_RCC_GetSysClockFreq+0x34>
 8009562:	2b04      	cmp	r3, #4
 8009564:	d003      	beq.n	800956e <HAL_RCC_GetSysClockFreq+0x3a>
 8009566:	e09b      	b.n	80096a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009568:	4b53      	ldr	r3, [pc, #332]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800956a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800956c:	e09b      	b.n	80096a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800956e:	4b53      	ldr	r3, [pc, #332]	; (80096bc <HAL_RCC_GetSysClockFreq+0x188>)
 8009570:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009572:	e098      	b.n	80096a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009574:	4b4f      	ldr	r3, [pc, #316]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800957c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800957e:	4b4d      	ldr	r3, [pc, #308]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d028      	beq.n	80095dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800958a:	4b4a      	ldr	r3, [pc, #296]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	099b      	lsrs	r3, r3, #6
 8009590:	2200      	movs	r2, #0
 8009592:	623b      	str	r3, [r7, #32]
 8009594:	627a      	str	r2, [r7, #36]	; 0x24
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800959c:	2100      	movs	r1, #0
 800959e:	4b47      	ldr	r3, [pc, #284]	; (80096bc <HAL_RCC_GetSysClockFreq+0x188>)
 80095a0:	fb03 f201 	mul.w	r2, r3, r1
 80095a4:	2300      	movs	r3, #0
 80095a6:	fb00 f303 	mul.w	r3, r0, r3
 80095aa:	4413      	add	r3, r2
 80095ac:	4a43      	ldr	r2, [pc, #268]	; (80096bc <HAL_RCC_GetSysClockFreq+0x188>)
 80095ae:	fba0 1202 	umull	r1, r2, r0, r2
 80095b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095b4:	460a      	mov	r2, r1
 80095b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80095b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ba:	4413      	add	r3, r2
 80095bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	2200      	movs	r2, #0
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	61fa      	str	r2, [r7, #28]
 80095c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80095ce:	f7f7 fb15 	bl	8000bfc <__aeabi_uldivmod>
 80095d2:	4602      	mov	r2, r0
 80095d4:	460b      	mov	r3, r1
 80095d6:	4613      	mov	r3, r2
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095da:	e053      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095dc:	4b35      	ldr	r3, [pc, #212]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	099b      	lsrs	r3, r3, #6
 80095e2:	2200      	movs	r2, #0
 80095e4:	613b      	str	r3, [r7, #16]
 80095e6:	617a      	str	r2, [r7, #20]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80095ee:	f04f 0b00 	mov.w	fp, #0
 80095f2:	4652      	mov	r2, sl
 80095f4:	465b      	mov	r3, fp
 80095f6:	f04f 0000 	mov.w	r0, #0
 80095fa:	f04f 0100 	mov.w	r1, #0
 80095fe:	0159      	lsls	r1, r3, #5
 8009600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009604:	0150      	lsls	r0, r2, #5
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	ebb2 080a 	subs.w	r8, r2, sl
 800960e:	eb63 090b 	sbc.w	r9, r3, fp
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800961e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009622:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009626:	ebb2 0408 	subs.w	r4, r2, r8
 800962a:	eb63 0509 	sbc.w	r5, r3, r9
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	f04f 0300 	mov.w	r3, #0
 8009636:	00eb      	lsls	r3, r5, #3
 8009638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800963c:	00e2      	lsls	r2, r4, #3
 800963e:	4614      	mov	r4, r2
 8009640:	461d      	mov	r5, r3
 8009642:	eb14 030a 	adds.w	r3, r4, sl
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	eb45 030b 	adc.w	r3, r5, fp
 800964c:	607b      	str	r3, [r7, #4]
 800964e:	f04f 0200 	mov.w	r2, #0
 8009652:	f04f 0300 	mov.w	r3, #0
 8009656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800965a:	4629      	mov	r1, r5
 800965c:	028b      	lsls	r3, r1, #10
 800965e:	4621      	mov	r1, r4
 8009660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009664:	4621      	mov	r1, r4
 8009666:	028a      	lsls	r2, r1, #10
 8009668:	4610      	mov	r0, r2
 800966a:	4619      	mov	r1, r3
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	2200      	movs	r2, #0
 8009670:	60bb      	str	r3, [r7, #8]
 8009672:	60fa      	str	r2, [r7, #12]
 8009674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009678:	f7f7 fac0 	bl	8000bfc <__aeabi_uldivmod>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4613      	mov	r3, r2
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009684:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	0c1b      	lsrs	r3, r3, #16
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	3301      	adds	r3, #1
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	fbb2 f3f3 	udiv	r3, r2, r3
 800969c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800969e:	e002      	b.n	80096a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096a0:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80096a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80096a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3740      	adds	r7, #64	; 0x40
 80096ac:	46bd      	mov	sp, r7
 80096ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096b2:	bf00      	nop
 80096b4:	40023800 	.word	0x40023800
 80096b8:	00f42400 	.word	0x00f42400
 80096bc:	017d7840 	.word	0x017d7840

080096c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096c4:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80096c6:	681b      	ldr	r3, [r3, #0]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20000144 	.word	0x20000144

080096d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80096dc:	f7ff fff0 	bl	80096c0 <HAL_RCC_GetHCLKFreq>
 80096e0:	4602      	mov	r2, r0
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	0a9b      	lsrs	r3, r3, #10
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	4903      	ldr	r1, [pc, #12]	; (80096fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80096ee:	5ccb      	ldrb	r3, [r1, r3]
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	40023800 	.word	0x40023800
 80096fc:	08010448 	.word	0x08010448

08009700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009704:	f7ff ffdc 	bl	80096c0 <HAL_RCC_GetHCLKFreq>
 8009708:	4602      	mov	r2, r0
 800970a:	4b05      	ldr	r3, [pc, #20]	; (8009720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	0b5b      	lsrs	r3, r3, #13
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	4903      	ldr	r1, [pc, #12]	; (8009724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009716:	5ccb      	ldrb	r3, [r1, r3]
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800971c:	4618      	mov	r0, r3
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40023800 	.word	0x40023800
 8009724:	08010448 	.word	0x08010448

08009728 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	220f      	movs	r2, #15
 8009736:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009738:	4b12      	ldr	r3, [pc, #72]	; (8009784 <HAL_RCC_GetClockConfig+0x5c>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f003 0203 	and.w	r2, r3, #3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009744:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <HAL_RCC_GetClockConfig+0x5c>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009750:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <HAL_RCC_GetClockConfig+0x5c>)
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800975c:	4b09      	ldr	r3, [pc, #36]	; (8009784 <HAL_RCC_GetClockConfig+0x5c>)
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	08db      	lsrs	r3, r3, #3
 8009762:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800976a:	4b07      	ldr	r3, [pc, #28]	; (8009788 <HAL_RCC_GetClockConfig+0x60>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0207 	and.w	r2, r3, #7
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	601a      	str	r2, [r3, #0]
}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	40023800 	.word	0x40023800
 8009788:	40023c00 	.word	0x40023c00

0800978c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e041      	b.n	8009822 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fd f936 	bl	8006a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f001 f91c 	bl	800aa08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b01      	cmp	r3, #1
 800983e:	d001      	beq.n	8009844 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e046      	b.n	80098d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a23      	ldr	r2, [pc, #140]	; (80098e0 <HAL_TIM_Base_Start+0xb4>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d022      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985e:	d01d      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a1f      	ldr	r2, [pc, #124]	; (80098e4 <HAL_TIM_Base_Start+0xb8>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d018      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <HAL_TIM_Base_Start+0xbc>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d013      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a1c      	ldr	r2, [pc, #112]	; (80098ec <HAL_TIM_Base_Start+0xc0>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d00e      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <HAL_TIM_Base_Start+0xc4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d009      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a19      	ldr	r2, [pc, #100]	; (80098f4 <HAL_TIM_Base_Start+0xc8>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d004      	beq.n	800989c <HAL_TIM_Base_Start+0x70>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <HAL_TIM_Base_Start+0xcc>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d111      	bne.n	80098c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 0307 	and.w	r3, r3, #7
 80098a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b06      	cmp	r3, #6
 80098ac:	d010      	beq.n	80098d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0201 	orr.w	r2, r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098be:	e007      	b.n	80098d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40010000 	.word	0x40010000
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40010400 	.word	0x40010400
 80098f4:	40014000 	.word	0x40014000
 80098f8:	40001800 	.word	0x40001800

080098fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d001      	beq.n	8009914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e04e      	b.n	80099b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a23      	ldr	r2, [pc, #140]	; (80099c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d022      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993e:	d01d      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a1f      	ldr	r2, [pc, #124]	; (80099c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d018      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a1e      	ldr	r2, [pc, #120]	; (80099c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d013      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a1c      	ldr	r2, [pc, #112]	; (80099cc <HAL_TIM_Base_Start_IT+0xd0>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00e      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1b      	ldr	r2, [pc, #108]	; (80099d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d009      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a19      	ldr	r2, [pc, #100]	; (80099d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d004      	beq.n	800997c <HAL_TIM_Base_Start_IT+0x80>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d111      	bne.n	80099a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b06      	cmp	r3, #6
 800998c:	d010      	beq.n	80099b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f042 0201 	orr.w	r2, r2, #1
 800999c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800999e:	e007      	b.n	80099b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f042 0201 	orr.w	r2, r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40010000 	.word	0x40010000
 80099c4:	40000400 	.word	0x40000400
 80099c8:	40000800 	.word	0x40000800
 80099cc:	40000c00 	.word	0x40000c00
 80099d0:	40010400 	.word	0x40010400
 80099d4:	40014000 	.word	0x40014000
 80099d8:	40001800 	.word	0x40001800

080099dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e041      	b.n	8009a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f839 	bl	8009a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3304      	adds	r3, #4
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f000 fff4 	bl	800aa08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a82:	bf00      	nop
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
	...

08009a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d109      	bne.n	8009ab4 <HAL_TIM_PWM_Start+0x24>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	bf14      	ite	ne
 8009aac:	2301      	movne	r3, #1
 8009aae:	2300      	moveq	r3, #0
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	e022      	b.n	8009afa <HAL_TIM_PWM_Start+0x6a>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	d109      	bne.n	8009ace <HAL_TIM_PWM_Start+0x3e>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	bf14      	ite	ne
 8009ac6:	2301      	movne	r3, #1
 8009ac8:	2300      	moveq	r3, #0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	e015      	b.n	8009afa <HAL_TIM_PWM_Start+0x6a>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d109      	bne.n	8009ae8 <HAL_TIM_PWM_Start+0x58>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	bf14      	ite	ne
 8009ae0:	2301      	movne	r3, #1
 8009ae2:	2300      	moveq	r3, #0
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	e008      	b.n	8009afa <HAL_TIM_PWM_Start+0x6a>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	bf14      	ite	ne
 8009af4:	2301      	movne	r3, #1
 8009af6:	2300      	moveq	r3, #0
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e07c      	b.n	8009bfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d104      	bne.n	8009b12 <HAL_TIM_PWM_Start+0x82>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b10:	e013      	b.n	8009b3a <HAL_TIM_PWM_Start+0xaa>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d104      	bne.n	8009b22 <HAL_TIM_PWM_Start+0x92>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b20:	e00b      	b.n	8009b3a <HAL_TIM_PWM_Start+0xaa>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d104      	bne.n	8009b32 <HAL_TIM_PWM_Start+0xa2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b30:	e003      	b.n	8009b3a <HAL_TIM_PWM_Start+0xaa>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2202      	movs	r2, #2
 8009b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 fb74 	bl	800b230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a2d      	ldr	r2, [pc, #180]	; (8009c04 <HAL_TIM_PWM_Start+0x174>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d004      	beq.n	8009b5c <HAL_TIM_PWM_Start+0xcc>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a2c      	ldr	r2, [pc, #176]	; (8009c08 <HAL_TIM_PWM_Start+0x178>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d101      	bne.n	8009b60 <HAL_TIM_PWM_Start+0xd0>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e000      	b.n	8009b62 <HAL_TIM_PWM_Start+0xd2>
 8009b60:	2300      	movs	r3, #0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d007      	beq.n	8009b76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a22      	ldr	r2, [pc, #136]	; (8009c04 <HAL_TIM_PWM_Start+0x174>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d022      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b88:	d01d      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a1f      	ldr	r2, [pc, #124]	; (8009c0c <HAL_TIM_PWM_Start+0x17c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d018      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1d      	ldr	r2, [pc, #116]	; (8009c10 <HAL_TIM_PWM_Start+0x180>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d013      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <HAL_TIM_PWM_Start+0x184>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d00e      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <HAL_TIM_PWM_Start+0x178>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d009      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <HAL_TIM_PWM_Start+0x188>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d004      	beq.n	8009bc6 <HAL_TIM_PWM_Start+0x136>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a16      	ldr	r2, [pc, #88]	; (8009c1c <HAL_TIM_PWM_Start+0x18c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d111      	bne.n	8009bea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 0307 	and.w	r3, r3, #7
 8009bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b06      	cmp	r3, #6
 8009bd6:	d010      	beq.n	8009bfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0201 	orr.w	r2, r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be8:	e007      	b.n	8009bfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0201 	orr.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	40010000 	.word	0x40010000
 8009c08:	40010400 	.word	0x40010400
 8009c0c:	40000400 	.word	0x40000400
 8009c10:	40000800 	.word	0x40000800
 8009c14:	40000c00 	.word	0x40000c00
 8009c18:	40014000 	.word	0x40014000
 8009c1c:	40001800 	.word	0x40001800

08009c20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e041      	b.n	8009cb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d106      	bne.n	8009c4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f839 	bl	8009cbe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f000 fed2 	bl	800aa08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <HAL_TIM_IC_Start_IT+0x1e>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	e013      	b.n	8009d1a <HAL_TIM_IC_Start_IT+0x46>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d104      	bne.n	8009d02 <HAL_TIM_IC_Start_IT+0x2e>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	e00b      	b.n	8009d1a <HAL_TIM_IC_Start_IT+0x46>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d104      	bne.n	8009d12 <HAL_TIM_IC_Start_IT+0x3e>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	e003      	b.n	8009d1a <HAL_TIM_IC_Start_IT+0x46>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <HAL_TIM_IC_Start_IT+0x58>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	e013      	b.n	8009d54 <HAL_TIM_IC_Start_IT+0x80>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d104      	bne.n	8009d3c <HAL_TIM_IC_Start_IT+0x68>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	e00b      	b.n	8009d54 <HAL_TIM_IC_Start_IT+0x80>
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b08      	cmp	r3, #8
 8009d40:	d104      	bne.n	8009d4c <HAL_TIM_IC_Start_IT+0x78>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	e003      	b.n	8009d54 <HAL_TIM_IC_Start_IT+0x80>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d102      	bne.n	8009d62 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d5c:	7b7b      	ldrb	r3, [r7, #13]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d001      	beq.n	8009d66 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e0cc      	b.n	8009f00 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <HAL_TIM_IC_Start_IT+0xa2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d74:	e013      	b.n	8009d9e <HAL_TIM_IC_Start_IT+0xca>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d104      	bne.n	8009d86 <HAL_TIM_IC_Start_IT+0xb2>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d84:	e00b      	b.n	8009d9e <HAL_TIM_IC_Start_IT+0xca>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d104      	bne.n	8009d96 <HAL_TIM_IC_Start_IT+0xc2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d94:	e003      	b.n	8009d9e <HAL_TIM_IC_Start_IT+0xca>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <HAL_TIM_IC_Start_IT+0xda>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dac:	e013      	b.n	8009dd6 <HAL_TIM_IC_Start_IT+0x102>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d104      	bne.n	8009dbe <HAL_TIM_IC_Start_IT+0xea>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dbc:	e00b      	b.n	8009dd6 <HAL_TIM_IC_Start_IT+0x102>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b08      	cmp	r3, #8
 8009dc2:	d104      	bne.n	8009dce <HAL_TIM_IC_Start_IT+0xfa>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dcc:	e003      	b.n	8009dd6 <HAL_TIM_IC_Start_IT+0x102>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b0c      	cmp	r3, #12
 8009dda:	d841      	bhi.n	8009e60 <HAL_TIM_IC_Start_IT+0x18c>
 8009ddc:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <HAL_TIM_IC_Start_IT+0x110>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009e19 	.word	0x08009e19
 8009de8:	08009e61 	.word	0x08009e61
 8009dec:	08009e61 	.word	0x08009e61
 8009df0:	08009e61 	.word	0x08009e61
 8009df4:	08009e2b 	.word	0x08009e2b
 8009df8:	08009e61 	.word	0x08009e61
 8009dfc:	08009e61 	.word	0x08009e61
 8009e00:	08009e61 	.word	0x08009e61
 8009e04:	08009e3d 	.word	0x08009e3d
 8009e08:	08009e61 	.word	0x08009e61
 8009e0c:	08009e61 	.word	0x08009e61
 8009e10:	08009e61 	.word	0x08009e61
 8009e14:	08009e4f 	.word	0x08009e4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68da      	ldr	r2, [r3, #12]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0202 	orr.w	r2, r2, #2
 8009e26:	60da      	str	r2, [r3, #12]
      break;
 8009e28:	e01d      	b.n	8009e66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68da      	ldr	r2, [r3, #12]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f042 0204 	orr.w	r2, r2, #4
 8009e38:	60da      	str	r2, [r3, #12]
      break;
 8009e3a:	e014      	b.n	8009e66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68da      	ldr	r2, [r3, #12]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f042 0208 	orr.w	r2, r2, #8
 8009e4a:	60da      	str	r2, [r3, #12]
      break;
 8009e4c:	e00b      	b.n	8009e66 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0210 	orr.w	r2, r2, #16
 8009e5c:	60da      	str	r2, [r3, #12]
      break;
 8009e5e:	e002      	b.n	8009e66 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
      break;
 8009e64:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d148      	bne.n	8009efe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2201      	movs	r2, #1
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 f9db 	bl	800b230 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a22      	ldr	r2, [pc, #136]	; (8009f08 <HAL_TIM_IC_Start_IT+0x234>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d022      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e8c:	d01d      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a1e      	ldr	r2, [pc, #120]	; (8009f0c <HAL_TIM_IC_Start_IT+0x238>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d018      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a1c      	ldr	r2, [pc, #112]	; (8009f10 <HAL_TIM_IC_Start_IT+0x23c>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d013      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a1b      	ldr	r2, [pc, #108]	; (8009f14 <HAL_TIM_IC_Start_IT+0x240>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d00e      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a19      	ldr	r2, [pc, #100]	; (8009f18 <HAL_TIM_IC_Start_IT+0x244>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d009      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a18      	ldr	r2, [pc, #96]	; (8009f1c <HAL_TIM_IC_Start_IT+0x248>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d004      	beq.n	8009eca <HAL_TIM_IC_Start_IT+0x1f6>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a16      	ldr	r2, [pc, #88]	; (8009f20 <HAL_TIM_IC_Start_IT+0x24c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d111      	bne.n	8009eee <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	2b06      	cmp	r3, #6
 8009eda:	d010      	beq.n	8009efe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0201 	orr.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eec:	e007      	b.n	8009efe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f042 0201 	orr.w	r2, r2, #1
 8009efc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40000400 	.word	0x40000400
 8009f10:	40000800 	.word	0x40000800
 8009f14:	40000c00 	.word	0x40000c00
 8009f18:	40010400 	.word	0x40010400
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	40001800 	.word	0x40001800

08009f24 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b0c      	cmp	r3, #12
 8009f36:	d841      	bhi.n	8009fbc <HAL_TIM_IC_Stop_IT+0x98>
 8009f38:	a201      	add	r2, pc, #4	; (adr r2, 8009f40 <HAL_TIM_IC_Stop_IT+0x1c>)
 8009f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3e:	bf00      	nop
 8009f40:	08009f75 	.word	0x08009f75
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009fbd 	.word	0x08009fbd
 8009f4c:	08009fbd 	.word	0x08009fbd
 8009f50:	08009f87 	.word	0x08009f87
 8009f54:	08009fbd 	.word	0x08009fbd
 8009f58:	08009fbd 	.word	0x08009fbd
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009fbd 	.word	0x08009fbd
 8009f68:	08009fbd 	.word	0x08009fbd
 8009f6c:	08009fbd 	.word	0x08009fbd
 8009f70:	08009fab 	.word	0x08009fab
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68da      	ldr	r2, [r3, #12]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0202 	bic.w	r2, r2, #2
 8009f82:	60da      	str	r2, [r3, #12]
      break;
 8009f84:	e01d      	b.n	8009fc2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0204 	bic.w	r2, r2, #4
 8009f94:	60da      	str	r2, [r3, #12]
      break;
 8009f96:	e014      	b.n	8009fc2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0208 	bic.w	r2, r2, #8
 8009fa6:	60da      	str	r2, [r3, #12]
      break;
 8009fa8:	e00b      	b.n	8009fc2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68da      	ldr	r2, [r3, #12]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0210 	bic.w	r2, r2, #16
 8009fb8:	60da      	str	r2, [r3, #12]
      break;
 8009fba:	e002      	b.n	8009fc2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc0:	bf00      	nop
  }

  if (status == HAL_OK)
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d156      	bne.n	800a076 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 f92d 	bl	800b230 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6a1a      	ldr	r2, [r3, #32]
 8009fdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10f      	bne.n	800a006 <HAL_TIM_IC_Stop_IT+0xe2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6a1a      	ldr	r2, [r3, #32]
 8009fec:	f240 4344 	movw	r3, #1092	; 0x444
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d107      	bne.n	800a006 <HAL_TIM_IC_Stop_IT+0xe2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <HAL_TIM_IC_Stop_IT+0xf2>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a014:	e013      	b.n	800a03e <HAL_TIM_IC_Stop_IT+0x11a>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d104      	bne.n	800a026 <HAL_TIM_IC_Stop_IT+0x102>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a024:	e00b      	b.n	800a03e <HAL_TIM_IC_Stop_IT+0x11a>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b08      	cmp	r3, #8
 800a02a:	d104      	bne.n	800a036 <HAL_TIM_IC_Stop_IT+0x112>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a034:	e003      	b.n	800a03e <HAL_TIM_IC_Stop_IT+0x11a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d104      	bne.n	800a04e <HAL_TIM_IC_Stop_IT+0x12a>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a04c:	e013      	b.n	800a076 <HAL_TIM_IC_Stop_IT+0x152>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b04      	cmp	r3, #4
 800a052:	d104      	bne.n	800a05e <HAL_TIM_IC_Stop_IT+0x13a>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a05c:	e00b      	b.n	800a076 <HAL_TIM_IC_Stop_IT+0x152>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b08      	cmp	r3, #8
 800a062:	d104      	bne.n	800a06e <HAL_TIM_IC_Stop_IT+0x14a>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a06c:	e003      	b.n	800a076 <HAL_TIM_IC_Stop_IT+0x152>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800a076:	7bfb      	ldrb	r3, [r7, #15]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e097      	b.n	800a1c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7fc fd75 	bl	8006b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	6812      	ldr	r2, [r2, #0]
 800a0c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0c4:	f023 0307 	bic.w	r3, r3, #7
 800a0c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f000 fc97 	bl	800aa08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a102:	f023 0303 	bic.w	r3, r3, #3
 800a106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	4313      	orrs	r3, r2
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a120:	f023 030c 	bic.w	r3, r3, #12
 800a124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a12c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	4313      	orrs	r3, r2
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4313      	orrs	r3, r2
 800a142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	011a      	lsls	r2, r3, #4
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	031b      	lsls	r3, r3, #12
 800a150:	4313      	orrs	r3, r2
 800a152:	693a      	ldr	r2, [r7, #16]
 800a154:	4313      	orrs	r3, r2
 800a156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a15e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	4313      	orrs	r3, r2
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a1e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d110      	bne.n	800a21e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d102      	bne.n	800a208 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a202:	7b7b      	ldrb	r3, [r7, #13]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d001      	beq.n	800a20c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e069      	b.n	800a2e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a21c:	e031      	b.n	800a282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b04      	cmp	r3, #4
 800a222:	d110      	bne.n	800a246 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d102      	bne.n	800a230 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a22a:	7b3b      	ldrb	r3, [r7, #12]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d001      	beq.n	800a234 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e055      	b.n	800a2e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2202      	movs	r2, #2
 800a240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a244:	e01d      	b.n	800a282 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d108      	bne.n	800a25e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d105      	bne.n	800a25e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a252:	7b7b      	ldrb	r3, [r7, #13]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d102      	bne.n	800a25e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a258:	7b3b      	ldrb	r3, [r7, #12]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d001      	beq.n	800a262 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e03e      	b.n	800a2e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2202      	movs	r2, #2
 800a266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2202      	movs	r2, #2
 800a276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2202      	movs	r2, #2
 800a27e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <HAL_TIM_Encoder_Start+0xc4>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d008      	beq.n	800a2a0 <HAL_TIM_Encoder_Start+0xd4>
 800a28e:	e00f      	b.n	800a2b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2201      	movs	r2, #1
 800a296:	2100      	movs	r1, #0
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 ffc9 	bl	800b230 <TIM_CCxChannelCmd>
      break;
 800a29e:	e016      	b.n	800a2ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 ffc1 	bl	800b230 <TIM_CCxChannelCmd>
      break;
 800a2ae:	e00e      	b.n	800a2ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 ffb9 	bl	800b230 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2104      	movs	r1, #4
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 ffb2 	bl	800b230 <TIM_CCxChannelCmd>
      break;
 800a2cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0201 	orr.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d122      	bne.n	800a344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d11b      	bne.n	800a344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0202 	mvn.w	r2, #2
 800a314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7f7 fba0 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fb4a 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fb51 	bl	800a9e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d122      	bne.n	800a398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d11b      	bne.n	800a398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0204 	mvn.w	r2, #4
 800a368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2202      	movs	r2, #2
 800a36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f7 fb76 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a384:	e005      	b.n	800a392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fb20 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fb27 	bl	800a9e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0308 	and.w	r3, r3, #8
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	d122      	bne.n	800a3ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0308 	and.w	r3, r3, #8
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	d11b      	bne.n	800a3ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0208 	mvn.w	r2, #8
 800a3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7f7 fb4c 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a3d8:	e005      	b.n	800a3e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 faf6 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fafd 	bl	800a9e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	f003 0310 	and.w	r3, r3, #16
 800a3f6:	2b10      	cmp	r3, #16
 800a3f8:	d122      	bne.n	800a440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	f003 0310 	and.w	r3, r3, #16
 800a404:	2b10      	cmp	r3, #16
 800a406:	d11b      	bne.n	800a440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f06f 0210 	mvn.w	r2, #16
 800a410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2208      	movs	r2, #8
 800a416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7f7 fb22 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a42c:	e005      	b.n	800a43a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 facc 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fad3 	bl	800a9e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d10e      	bne.n	800a46c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d107      	bne.n	800a46c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0201 	mvn.w	r2, #1
 800a464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7fc f9dc 	bl	8006824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a476:	2b80      	cmp	r3, #128	; 0x80
 800a478:	d10e      	bne.n	800a498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a484:	2b80      	cmp	r3, #128	; 0x80
 800a486:	d107      	bne.n	800a498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 ffca 	bl	800b42c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a2:	2b40      	cmp	r3, #64	; 0x40
 800a4a4:	d10e      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b0:	2b40      	cmp	r3, #64	; 0x40
 800a4b2:	d107      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa98 	bl	800a9f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f003 0320 	and.w	r3, r3, #32
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d10e      	bne.n	800a4f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b20      	cmp	r3, #32
 800a4de:	d107      	bne.n	800a4f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f06f 0220 	mvn.w	r2, #32
 800a4e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 ff94 	bl	800b418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d101      	bne.n	800a516 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a512:	2302      	movs	r3, #2
 800a514:	e088      	b.n	800a628 <HAL_TIM_IC_ConfigChannel+0x130>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d11b      	bne.n	800a55c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	6819      	ldr	r1, [r3, #0]
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f000 fcb8 	bl	800aea8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	699a      	ldr	r2, [r3, #24]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 020c 	bic.w	r2, r2, #12
 800a546:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6999      	ldr	r1, [r3, #24]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	619a      	str	r2, [r3, #24]
 800a55a:	e060      	b.n	800a61e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d11c      	bne.n	800a59c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6818      	ldr	r0, [r3, #0]
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	6819      	ldr	r1, [r3, #0]
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	f000 fd3c 	bl	800afee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	699a      	ldr	r2, [r3, #24]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a584:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6999      	ldr	r1, [r3, #24]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	021a      	lsls	r2, r3, #8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	430a      	orrs	r2, r1
 800a598:	619a      	str	r2, [r3, #24]
 800a59a:	e040      	b.n	800a61e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b08      	cmp	r3, #8
 800a5a0:	d11b      	bne.n	800a5da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6819      	ldr	r1, [r3, #0]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	f000 fd89 	bl	800b0c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69da      	ldr	r2, [r3, #28]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 020c 	bic.w	r2, r2, #12
 800a5c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	69d9      	ldr	r1, [r3, #28]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	61da      	str	r2, [r3, #28]
 800a5d8:	e021      	b.n	800a61e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b0c      	cmp	r3, #12
 800a5de:	d11c      	bne.n	800a61a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6819      	ldr	r1, [r3, #0]
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	f000 fda6 	bl	800b140 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	69da      	ldr	r2, [r3, #28]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a602:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	69d9      	ldr	r1, [r3, #28]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	021a      	lsls	r2, r3, #8
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	61da      	str	r2, [r3, #28]
 800a618:	e001      	b.n	800a61e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a626:	7dfb      	ldrb	r3, [r7, #23]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a64a:	2302      	movs	r3, #2
 800a64c:	e0ae      	b.n	800a7ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b0c      	cmp	r3, #12
 800a65a:	f200 809f 	bhi.w	800a79c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a65e:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a699 	.word	0x0800a699
 800a668:	0800a79d 	.word	0x0800a79d
 800a66c:	0800a79d 	.word	0x0800a79d
 800a670:	0800a79d 	.word	0x0800a79d
 800a674:	0800a6d9 	.word	0x0800a6d9
 800a678:	0800a79d 	.word	0x0800a79d
 800a67c:	0800a79d 	.word	0x0800a79d
 800a680:	0800a79d 	.word	0x0800a79d
 800a684:	0800a71b 	.word	0x0800a71b
 800a688:	0800a79d 	.word	0x0800a79d
 800a68c:	0800a79d 	.word	0x0800a79d
 800a690:	0800a79d 	.word	0x0800a79d
 800a694:	0800a75b 	.word	0x0800a75b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fa52 	bl	800ab48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f042 0208 	orr.w	r2, r2, #8
 800a6b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f022 0204 	bic.w	r2, r2, #4
 800a6c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6999      	ldr	r1, [r3, #24]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	691a      	ldr	r2, [r3, #16]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	619a      	str	r2, [r3, #24]
      break;
 800a6d6:	e064      	b.n	800a7a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 faa2 	bl	800ac28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	699a      	ldr	r2, [r3, #24]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6999      	ldr	r1, [r3, #24]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	021a      	lsls	r2, r3, #8
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	430a      	orrs	r2, r1
 800a716:	619a      	str	r2, [r3, #24]
      break;
 800a718:	e043      	b.n	800a7a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 faf7 	bl	800ad14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0208 	orr.w	r2, r2, #8
 800a734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0204 	bic.w	r2, r2, #4
 800a744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69d9      	ldr	r1, [r3, #28]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	691a      	ldr	r2, [r3, #16]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	61da      	str	r2, [r3, #28]
      break;
 800a758:	e023      	b.n	800a7a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68b9      	ldr	r1, [r7, #8]
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fb4b 	bl	800adfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69da      	ldr	r2, [r3, #28]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	69da      	ldr	r2, [r3, #28]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69d9      	ldr	r1, [r3, #28]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	021a      	lsls	r2, r3, #8
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	61da      	str	r2, [r3, #28]
      break;
 800a79a:	e002      	b.n	800a7a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e0b4      	b.n	800a93a <HAL_TIM_ConfigClockSource+0x186>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a808:	d03e      	beq.n	800a888 <HAL_TIM_ConfigClockSource+0xd4>
 800a80a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a80e:	f200 8087 	bhi.w	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a816:	f000 8086 	beq.w	800a926 <HAL_TIM_ConfigClockSource+0x172>
 800a81a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a81e:	d87f      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a820:	2b70      	cmp	r3, #112	; 0x70
 800a822:	d01a      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0xa6>
 800a824:	2b70      	cmp	r3, #112	; 0x70
 800a826:	d87b      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a828:	2b60      	cmp	r3, #96	; 0x60
 800a82a:	d050      	beq.n	800a8ce <HAL_TIM_ConfigClockSource+0x11a>
 800a82c:	2b60      	cmp	r3, #96	; 0x60
 800a82e:	d877      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a830:	2b50      	cmp	r3, #80	; 0x50
 800a832:	d03c      	beq.n	800a8ae <HAL_TIM_ConfigClockSource+0xfa>
 800a834:	2b50      	cmp	r3, #80	; 0x50
 800a836:	d873      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a838:	2b40      	cmp	r3, #64	; 0x40
 800a83a:	d058      	beq.n	800a8ee <HAL_TIM_ConfigClockSource+0x13a>
 800a83c:	2b40      	cmp	r3, #64	; 0x40
 800a83e:	d86f      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a840:	2b30      	cmp	r3, #48	; 0x30
 800a842:	d064      	beq.n	800a90e <HAL_TIM_ConfigClockSource+0x15a>
 800a844:	2b30      	cmp	r3, #48	; 0x30
 800a846:	d86b      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a848:	2b20      	cmp	r3, #32
 800a84a:	d060      	beq.n	800a90e <HAL_TIM_ConfigClockSource+0x15a>
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	d867      	bhi.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
 800a850:	2b00      	cmp	r3, #0
 800a852:	d05c      	beq.n	800a90e <HAL_TIM_ConfigClockSource+0x15a>
 800a854:	2b10      	cmp	r3, #16
 800a856:	d05a      	beq.n	800a90e <HAL_TIM_ConfigClockSource+0x15a>
 800a858:	e062      	b.n	800a920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6899      	ldr	r1, [r3, #8]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f000 fcc1 	bl	800b1f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a87c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	609a      	str	r2, [r3, #8]
      break;
 800a886:	e04f      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	6899      	ldr	r1, [r3, #8]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f000 fcaa 	bl	800b1f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8aa:	609a      	str	r2, [r3, #8]
      break;
 800a8ac:	e03c      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	6859      	ldr	r1, [r3, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f000 fb68 	bl	800af90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2150      	movs	r1, #80	; 0x50
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 fc77 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800a8cc:	e02c      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6818      	ldr	r0, [r3, #0]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	6859      	ldr	r1, [r3, #4]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f000 fbc4 	bl	800b068 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2160      	movs	r1, #96	; 0x60
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fc67 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800a8ec:	e01c      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6818      	ldr	r0, [r3, #0]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	6859      	ldr	r1, [r3, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f000 fb48 	bl	800af90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2140      	movs	r1, #64	; 0x40
 800a906:	4618      	mov	r0, r3
 800a908:	f000 fc57 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800a90c:	e00c      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f000 fc4e 	bl	800b1ba <TIM_ITRx_SetConfig>
      break;
 800a91e:	e003      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
      break;
 800a924:	e000      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a938:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
	...

0800a944 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b0c      	cmp	r3, #12
 800a956:	d831      	bhi.n	800a9bc <HAL_TIM_ReadCapturedValue+0x78>
 800a958:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95e:	bf00      	nop
 800a960:	0800a995 	.word	0x0800a995
 800a964:	0800a9bd 	.word	0x0800a9bd
 800a968:	0800a9bd 	.word	0x0800a9bd
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a99f 	.word	0x0800a99f
 800a974:	0800a9bd 	.word	0x0800a9bd
 800a978:	0800a9bd 	.word	0x0800a9bd
 800a97c:	0800a9bd 	.word	0x0800a9bd
 800a980:	0800a9a9 	.word	0x0800a9a9
 800a984:	0800a9bd 	.word	0x0800a9bd
 800a988:	0800a9bd 	.word	0x0800a9bd
 800a98c:	0800a9bd 	.word	0x0800a9bd
 800a990:	0800a9b3 	.word	0x0800a9b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99a:	60fb      	str	r3, [r7, #12]

      break;
 800a99c:	e00f      	b.n	800a9be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a4:	60fb      	str	r3, [r7, #12]

      break;
 800a9a6:	e00a      	b.n	800a9be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ae:	60fb      	str	r3, [r7, #12]

      break;
 800a9b0:	e005      	b.n	800a9be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	60fb      	str	r3, [r7, #12]

      break;
 800a9ba:	e000      	b.n	800a9be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a9bc:	bf00      	nop
  }

  return tmpreg;
 800a9be:	68fb      	ldr	r3, [r7, #12]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a40      	ldr	r2, [pc, #256]	; (800ab1c <TIM_Base_SetConfig+0x114>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d013      	beq.n	800aa48 <TIM_Base_SetConfig+0x40>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa26:	d00f      	beq.n	800aa48 <TIM_Base_SetConfig+0x40>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a3d      	ldr	r2, [pc, #244]	; (800ab20 <TIM_Base_SetConfig+0x118>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d00b      	beq.n	800aa48 <TIM_Base_SetConfig+0x40>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a3c      	ldr	r2, [pc, #240]	; (800ab24 <TIM_Base_SetConfig+0x11c>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d007      	beq.n	800aa48 <TIM_Base_SetConfig+0x40>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a3b      	ldr	r2, [pc, #236]	; (800ab28 <TIM_Base_SetConfig+0x120>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d003      	beq.n	800aa48 <TIM_Base_SetConfig+0x40>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a3a      	ldr	r2, [pc, #232]	; (800ab2c <TIM_Base_SetConfig+0x124>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d108      	bne.n	800aa5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a2f      	ldr	r2, [pc, #188]	; (800ab1c <TIM_Base_SetConfig+0x114>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d02b      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa68:	d027      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a2c      	ldr	r2, [pc, #176]	; (800ab20 <TIM_Base_SetConfig+0x118>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d023      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a2b      	ldr	r2, [pc, #172]	; (800ab24 <TIM_Base_SetConfig+0x11c>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d01f      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <TIM_Base_SetConfig+0x120>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d01b      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a29      	ldr	r2, [pc, #164]	; (800ab2c <TIM_Base_SetConfig+0x124>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d017      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a28      	ldr	r2, [pc, #160]	; (800ab30 <TIM_Base_SetConfig+0x128>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d013      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a27      	ldr	r2, [pc, #156]	; (800ab34 <TIM_Base_SetConfig+0x12c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d00f      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a26      	ldr	r2, [pc, #152]	; (800ab38 <TIM_Base_SetConfig+0x130>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d00b      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a25      	ldr	r2, [pc, #148]	; (800ab3c <TIM_Base_SetConfig+0x134>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d007      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a24      	ldr	r2, [pc, #144]	; (800ab40 <TIM_Base_SetConfig+0x138>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d003      	beq.n	800aaba <TIM_Base_SetConfig+0xb2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a23      	ldr	r2, [pc, #140]	; (800ab44 <TIM_Base_SetConfig+0x13c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d108      	bne.n	800aacc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	689a      	ldr	r2, [r3, #8]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a0a      	ldr	r2, [pc, #40]	; (800ab1c <TIM_Base_SetConfig+0x114>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d003      	beq.n	800ab00 <TIM_Base_SetConfig+0xf8>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a0c      	ldr	r2, [pc, #48]	; (800ab2c <TIM_Base_SetConfig+0x124>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d103      	bne.n	800ab08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	615a      	str	r2, [r3, #20]
}
 800ab0e:	bf00      	nop
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40000400 	.word	0x40000400
 800ab24:	40000800 	.word	0x40000800
 800ab28:	40000c00 	.word	0x40000c00
 800ab2c:	40010400 	.word	0x40010400
 800ab30:	40014000 	.word	0x40014000
 800ab34:	40014400 	.word	0x40014400
 800ab38:	40014800 	.word	0x40014800
 800ab3c:	40001800 	.word	0x40001800
 800ab40:	40001c00 	.word	0x40001c00
 800ab44:	40002000 	.word	0x40002000

0800ab48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	f023 0201 	bic.w	r2, r3, #1
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0303 	bic.w	r3, r3, #3
 800ab7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f023 0302 	bic.w	r3, r3, #2
 800ab90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <TIM_OC1_SetConfig+0xd8>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d003      	beq.n	800abac <TIM_OC1_SetConfig+0x64>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a1f      	ldr	r2, [pc, #124]	; (800ac24 <TIM_OC1_SetConfig+0xdc>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d10c      	bne.n	800abc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f023 0308 	bic.w	r3, r3, #8
 800abb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	4313      	orrs	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f023 0304 	bic.w	r3, r3, #4
 800abc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a15      	ldr	r2, [pc, #84]	; (800ac20 <TIM_OC1_SetConfig+0xd8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <TIM_OC1_SetConfig+0x8e>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a14      	ldr	r2, [pc, #80]	; (800ac24 <TIM_OC1_SetConfig+0xdc>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d111      	bne.n	800abfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	4313      	orrs	r3, r2
 800abee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	621a      	str	r2, [r3, #32]
}
 800ac14:	bf00      	nop
 800ac16:	371c      	adds	r7, #28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	40010000 	.word	0x40010000
 800ac24:	40010400 	.word	0x40010400

0800ac28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	f023 0210 	bic.w	r2, r3, #16
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	021b      	lsls	r3, r3, #8
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f023 0320 	bic.w	r3, r3, #32
 800ac72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	011b      	lsls	r3, r3, #4
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a22      	ldr	r2, [pc, #136]	; (800ad0c <TIM_OC2_SetConfig+0xe4>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_OC2_SetConfig+0x68>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a21      	ldr	r2, [pc, #132]	; (800ad10 <TIM_OC2_SetConfig+0xe8>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10d      	bne.n	800acac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a17      	ldr	r2, [pc, #92]	; (800ad0c <TIM_OC2_SetConfig+0xe4>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC2_SetConfig+0x94>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a16      	ldr	r2, [pc, #88]	; (800ad10 <TIM_OC2_SetConfig+0xe8>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d113      	bne.n	800ace4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	40010000 	.word	0x40010000
 800ad10:	40010400 	.word	0x40010400

0800ad14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b087      	sub	sp, #28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0303 	bic.w	r3, r3, #3
 800ad4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a21      	ldr	r2, [pc, #132]	; (800adf4 <TIM_OC3_SetConfig+0xe0>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d003      	beq.n	800ad7a <TIM_OC3_SetConfig+0x66>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a20      	ldr	r2, [pc, #128]	; (800adf8 <TIM_OC3_SetConfig+0xe4>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d10d      	bne.n	800ad96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a16      	ldr	r2, [pc, #88]	; (800adf4 <TIM_OC3_SetConfig+0xe0>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d003      	beq.n	800ada6 <TIM_OC3_SetConfig+0x92>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a15      	ldr	r2, [pc, #84]	; (800adf8 <TIM_OC3_SetConfig+0xe4>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d113      	bne.n	800adce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800adb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	011b      	lsls	r3, r3, #4
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	4313      	orrs	r3, r2
 800adcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	621a      	str	r2, [r3, #32]
}
 800ade8:	bf00      	nop
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40010400 	.word	0x40010400

0800adfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b087      	sub	sp, #28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	021b      	lsls	r3, r3, #8
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	031b      	lsls	r3, r3, #12
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a12      	ldr	r2, [pc, #72]	; (800aea0 <TIM_OC4_SetConfig+0xa4>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d003      	beq.n	800ae64 <TIM_OC4_SetConfig+0x68>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <TIM_OC4_SetConfig+0xa8>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d109      	bne.n	800ae78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	019b      	lsls	r3, r3, #6
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	621a      	str	r2, [r3, #32]
}
 800ae92:	bf00      	nop
 800ae94:	371c      	adds	r7, #28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	40010000 	.word	0x40010000
 800aea4:	40010400 	.word	0x40010400

0800aea8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	f023 0201 	bic.w	r2, r3, #1
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	4a28      	ldr	r2, [pc, #160]	; (800af74 <TIM_TI1_SetConfig+0xcc>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d01b      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aedc:	d017      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4a25      	ldr	r2, [pc, #148]	; (800af78 <TIM_TI1_SetConfig+0xd0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d013      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4a24      	ldr	r2, [pc, #144]	; (800af7c <TIM_TI1_SetConfig+0xd4>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d00f      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4a23      	ldr	r2, [pc, #140]	; (800af80 <TIM_TI1_SetConfig+0xd8>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d00b      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4a22      	ldr	r2, [pc, #136]	; (800af84 <TIM_TI1_SetConfig+0xdc>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d007      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4a21      	ldr	r2, [pc, #132]	; (800af88 <TIM_TI1_SetConfig+0xe0>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d003      	beq.n	800af0e <TIM_TI1_SetConfig+0x66>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	4a20      	ldr	r2, [pc, #128]	; (800af8c <TIM_TI1_SetConfig+0xe4>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d101      	bne.n	800af12 <TIM_TI1_SetConfig+0x6a>
 800af0e:	2301      	movs	r3, #1
 800af10:	e000      	b.n	800af14 <TIM_TI1_SetConfig+0x6c>
 800af12:	2300      	movs	r3, #0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d008      	beq.n	800af2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f023 0303 	bic.w	r3, r3, #3
 800af1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4313      	orrs	r3, r2
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	e003      	b.n	800af32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f043 0301 	orr.w	r3, r3, #1
 800af30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	011b      	lsls	r3, r3, #4
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	f023 030a 	bic.w	r3, r3, #10
 800af4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f003 030a 	and.w	r3, r3, #10
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	693a      	ldr	r2, [r7, #16]
 800af64:	621a      	str	r2, [r3, #32]
}
 800af66:	bf00      	nop
 800af68:	371c      	adds	r7, #28
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	40010000 	.word	0x40010000
 800af78:	40000400 	.word	0x40000400
 800af7c:	40000800 	.word	0x40000800
 800af80:	40000c00 	.word	0x40000c00
 800af84:	40010400 	.word	0x40010400
 800af88:	40014000 	.word	0x40014000
 800af8c:	40001800 	.word	0x40001800

0800af90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	f023 0201 	bic.w	r2, r3, #1
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	011b      	lsls	r3, r3, #4
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f023 030a 	bic.w	r3, r3, #10
 800afcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	621a      	str	r2, [r3, #32]
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800afee:	b480      	push	{r7}
 800aff0:	b087      	sub	sp, #28
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	607a      	str	r2, [r7, #4]
 800affa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	f023 0210 	bic.w	r2, r3, #16
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b01a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	021b      	lsls	r3, r3, #8
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	4313      	orrs	r3, r2
 800b024:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b02c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	031b      	lsls	r3, r3, #12
 800b032:	b29b      	uxth	r3, r3
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	4313      	orrs	r3, r2
 800b038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b040:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	011b      	lsls	r3, r3, #4
 800b046:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	621a      	str	r2, [r3, #32]
}
 800b05c:	bf00      	nop
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	f023 0210 	bic.w	r2, r3, #16
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	031b      	lsls	r3, r3, #12
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	011b      	lsls	r3, r3, #4
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	621a      	str	r2, [r3, #32]
}
 800b0bc:	bf00      	nop
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f023 0303 	bic.w	r3, r3, #3
 800b0f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b104:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b118:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	4313      	orrs	r3, r2
 800b126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	621a      	str	r2, [r3, #32]
}
 800b134:	bf00      	nop
 800b136:	371c      	adds	r7, #28
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b140:	b480      	push	{r7}
 800b142:	b087      	sub	sp, #28
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a1b      	ldr	r3, [r3, #32]
 800b164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	021b      	lsls	r3, r3, #8
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	4313      	orrs	r3, r2
 800b176:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b17e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	031b      	lsls	r3, r3, #12
 800b184:	b29b      	uxth	r3, r3
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	4313      	orrs	r3, r2
 800b18a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b192:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	031b      	lsls	r3, r3, #12
 800b198:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	621a      	str	r2, [r3, #32]
}
 800b1ae:	bf00      	nop
 800b1b0:	371c      	adds	r7, #28
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b085      	sub	sp, #20
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	f043 0307 	orr.w	r3, r3, #7
 800b1dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	609a      	str	r2, [r3, #8]
}
 800b1e4:	bf00      	nop
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b20a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	021a      	lsls	r2, r3, #8
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	431a      	orrs	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	4313      	orrs	r3, r2
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	609a      	str	r2, [r3, #8]
}
 800b224:	bf00      	nop
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f003 031f 	and.w	r3, r3, #31
 800b242:	2201      	movs	r2, #1
 800b244:	fa02 f303 	lsl.w	r3, r2, r3
 800b248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6a1a      	ldr	r2, [r3, #32]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	43db      	mvns	r3, r3
 800b252:	401a      	ands	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6a1a      	ldr	r2, [r3, #32]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f003 031f 	and.w	r3, r3, #31
 800b262:	6879      	ldr	r1, [r7, #4]
 800b264:	fa01 f303 	lsl.w	r3, r1, r3
 800b268:	431a      	orrs	r2, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	621a      	str	r2, [r3, #32]
}
 800b26e:	bf00      	nop
 800b270:	371c      	adds	r7, #28
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
	...

0800b27c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d101      	bne.n	800b294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b290:	2302      	movs	r3, #2
 800b292:	e05a      	b.n	800b34a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a21      	ldr	r2, [pc, #132]	; (800b358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d022      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e0:	d01d      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a1d      	ldr	r2, [pc, #116]	; (800b35c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d018      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d013      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a1a      	ldr	r2, [pc, #104]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d00e      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a18      	ldr	r2, [pc, #96]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d009      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a17      	ldr	r2, [pc, #92]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d004      	beq.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a15      	ldr	r2, [pc, #84]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d10c      	bne.n	800b338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	40010000 	.word	0x40010000
 800b35c:	40000400 	.word	0x40000400
 800b360:	40000800 	.word	0x40000800
 800b364:	40000c00 	.word	0x40000c00
 800b368:	40010400 	.word	0x40010400
 800b36c:	40014000 	.word	0x40014000
 800b370:	40001800 	.word	0x40001800

0800b374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d101      	bne.n	800b390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e03d      	b.n	800b40c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e03f      	b.n	800b4d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fb fc36 	bl	8006cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2224      	movs	r2, #36	; 0x24
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fddf 	bl	800c048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691a      	ldr	r2, [r3, #16]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	695a      	ldr	r2, [r3, #20]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2220      	movs	r2, #32
 800b4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2220      	movs	r2, #32
 800b4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b08a      	sub	sp, #40	; 0x28
 800b4de:	af02      	add	r7, sp, #8
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	603b      	str	r3, [r7, #0]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d17c      	bne.n	800b5f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <HAL_UART_Transmit+0x2c>
 800b500:	88fb      	ldrh	r3, [r7, #6]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e075      	b.n	800b5f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_UART_Transmit+0x3e>
 800b514:	2302      	movs	r3, #2
 800b516:	e06e      	b.n	800b5f6 <HAL_UART_Transmit+0x11c>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2221      	movs	r2, #33	; 0x21
 800b52a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b52e:	f7fb fd61 	bl	8006ff4 <HAL_GetTick>
 800b532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	88fa      	ldrh	r2, [r7, #6]
 800b538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	88fa      	ldrh	r2, [r7, #6]
 800b53e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b548:	d108      	bne.n	800b55c <HAL_UART_Transmit+0x82>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d104      	bne.n	800b55c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	e003      	b.n	800b564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b560:	2300      	movs	r3, #0
 800b562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b56c:	e02a      	b.n	800b5c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	2200      	movs	r2, #0
 800b576:	2180      	movs	r1, #128	; 0x80
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f000 fb1f 	bl	800bbbc <UART_WaitOnFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e036      	b.n	800b5f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d10b      	bne.n	800b5a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b59c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	61bb      	str	r3, [r7, #24]
 800b5a4:	e007      	b.n	800b5b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	781a      	ldrb	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1cf      	bne.n	800b56e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2140      	movs	r1, #64	; 0x40
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 faef 	bl	800bbbc <UART_WaitOnFlagUntilTimeout>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e006      	b.n	800b5f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	e000      	b.n	800b5f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b5f4:	2302      	movs	r3, #2
  }
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3720      	adds	r7, #32
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	4613      	mov	r3, r2
 800b60a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b20      	cmp	r3, #32
 800b616:	d11d      	bne.n	800b654 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <HAL_UART_Receive_IT+0x26>
 800b61e:	88fb      	ldrh	r3, [r7, #6]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e016      	b.n	800b656 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d101      	bne.n	800b636 <HAL_UART_Receive_IT+0x38>
 800b632:	2302      	movs	r3, #2
 800b634:	e00f      	b.n	800b656 <HAL_UART_Receive_IT+0x58>
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b644:	88fb      	ldrh	r3, [r7, #6]
 800b646:	461a      	mov	r2, r3
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 fb24 	bl	800bc98 <UART_Start_Receive_IT>
 800b650:	4603      	mov	r3, r0
 800b652:	e000      	b.n	800b656 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b654:	2302      	movs	r3, #2
  }
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b0ba      	sub	sp, #232	; 0xe8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b686:	2300      	movs	r3, #0
 800b688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b696:	f003 030f 	and.w	r3, r3, #15
 800b69a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b69e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10f      	bne.n	800b6c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6aa:	f003 0320 	and.w	r3, r3, #32
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d009      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x66>
 800b6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b6:	f003 0320 	and.w	r3, r3, #32
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d003      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fc07 	bl	800bed2 <UART_Receive_IT>
      return;
 800b6c4:	e256      	b.n	800bb74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b6c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 80de 	beq.w	800b88c <HAL_UART_IRQHandler+0x22c>
 800b6d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6d4:	f003 0301 	and.w	r3, r3, #1
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 80d1 	beq.w	800b88c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00b      	beq.n	800b70e <HAL_UART_IRQHandler+0xae>
 800b6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	f043 0201 	orr.w	r2, r3, #1
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b712:	f003 0304 	and.w	r3, r3, #4
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00b      	beq.n	800b732 <HAL_UART_IRQHandler+0xd2>
 800b71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72a:	f043 0202 	orr.w	r2, r3, #2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <HAL_UART_IRQHandler+0xf6>
 800b73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d005      	beq.n	800b756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74e:	f043 0204 	orr.w	r2, r3, #4
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	f003 0308 	and.w	r3, r3, #8
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d011      	beq.n	800b786 <HAL_UART_IRQHandler+0x126>
 800b762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b766:	f003 0320 	and.w	r3, r3, #32
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d105      	bne.n	800b77a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b76e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	2b00      	cmp	r3, #0
 800b778:	d005      	beq.n	800b786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77e:	f043 0208 	orr.w	r2, r3, #8
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 81ed 	beq.w	800bb6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d008      	beq.n	800b7ae <HAL_UART_IRQHandler+0x14e>
 800b79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7a0:	f003 0320 	and.w	r3, r3, #32
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fb92 	bl	800bed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7b8:	2b40      	cmp	r3, #64	; 0x40
 800b7ba:	bf0c      	ite	eq
 800b7bc:	2301      	moveq	r3, #1
 800b7be:	2300      	movne	r3, #0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	f003 0308 	and.w	r3, r3, #8
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d103      	bne.n	800b7da <HAL_UART_IRQHandler+0x17a>
 800b7d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d04f      	beq.n	800b87a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa9a 	bl	800bd14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	695b      	ldr	r3, [r3, #20]
 800b7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ea:	2b40      	cmp	r3, #64	; 0x40
 800b7ec:	d141      	bne.n	800b872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3314      	adds	r3, #20
 800b7f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b80c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	3314      	adds	r3, #20
 800b816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b81a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b81e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b82a:	e841 2300 	strex	r3, r2, [r1]
 800b82e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1d9      	bne.n	800b7ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d013      	beq.n	800b86a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b846:	4a7d      	ldr	r2, [pc, #500]	; (800ba3c <HAL_UART_IRQHandler+0x3dc>)
 800b848:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fc f952 	bl	8007af8 <HAL_DMA_Abort_IT>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d016      	beq.n	800b888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b864:	4610      	mov	r0, r2
 800b866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b868:	e00e      	b.n	800b888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f990 	bl	800bb90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b870:	e00a      	b.n	800b888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f98c 	bl	800bb90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b878:	e006      	b.n	800b888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f988 	bl	800bb90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b886:	e170      	b.n	800bb6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b888:	bf00      	nop
    return;
 800b88a:	e16e      	b.n	800bb6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b890:	2b01      	cmp	r3, #1
 800b892:	f040 814a 	bne.w	800bb2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 8143 	beq.w	800bb2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8a8:	f003 0310 	and.w	r3, r3, #16
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 813c 	beq.w	800bb2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60bb      	str	r3, [r7, #8]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60bb      	str	r3, [r7, #8]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	60bb      	str	r3, [r7, #8]
 800b8c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d2:	2b40      	cmp	r3, #64	; 0x40
 800b8d4:	f040 80b4 	bne.w	800ba40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 8140 	beq.w	800bb6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	f080 8139 	bcs.w	800bb6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b902:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b90e:	f000 8088 	beq.w	800ba22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	330c      	adds	r3, #12
 800b918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b91c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b920:	e853 3f00 	ldrex	r3, [r3]
 800b924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b92c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	330c      	adds	r3, #12
 800b93a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b93e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b946:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b94a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1d9      	bne.n	800b912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3314      	adds	r3, #20
 800b964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b96e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b970:	f023 0301 	bic.w	r3, r3, #1
 800b974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3314      	adds	r3, #20
 800b97e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b982:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b986:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b98a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b98e:	e841 2300 	strex	r3, r2, [r1]
 800b992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1e1      	bne.n	800b95e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	3314      	adds	r3, #20
 800b9a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9a4:	e853 3f00 	ldrex	r3, [r3]
 800b9a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3314      	adds	r3, #20
 800b9ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e3      	bne.n	800b99a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	330c      	adds	r3, #12
 800b9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ea:	e853 3f00 	ldrex	r3, [r3]
 800b9ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9f2:	f023 0310 	bic.w	r3, r3, #16
 800b9f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	330c      	adds	r3, #12
 800ba00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba04:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba0c:	e841 2300 	strex	r3, r2, [r1]
 800ba10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e3      	bne.n	800b9e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fb fffb 	bl	8007a18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f8b6 	bl	800bba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba38:	e099      	b.n	800bb6e <HAL_UART_IRQHandler+0x50e>
 800ba3a:	bf00      	nop
 800ba3c:	0800bddb 	.word	0x0800bddb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 808b 	beq.w	800bb72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ba5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 8086 	beq.w	800bb72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	330c      	adds	r3, #12
 800ba6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	330c      	adds	r3, #12
 800ba86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba8a:	647a      	str	r2, [r7, #68]	; 0x44
 800ba8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba92:	e841 2300 	strex	r3, r2, [r1]
 800ba96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e3      	bne.n	800ba66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3314      	adds	r3, #20
 800baa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	623b      	str	r3, [r7, #32]
   return(result);
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	f023 0301 	bic.w	r3, r3, #1
 800bab4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3314      	adds	r3, #20
 800babe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bac2:	633a      	str	r2, [r7, #48]	; 0x30
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e3      	bne.n	800ba9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2220      	movs	r2, #32
 800bada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	330c      	adds	r3, #12
 800baea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	e853 3f00 	ldrex	r3, [r3]
 800baf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f023 0310 	bic.w	r3, r3, #16
 800bafa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	330c      	adds	r3, #12
 800bb04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb08:	61fa      	str	r2, [r7, #28]
 800bb0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0c:	69b9      	ldr	r1, [r7, #24]
 800bb0e:	69fa      	ldr	r2, [r7, #28]
 800bb10:	e841 2300 	strex	r3, r2, [r1]
 800bb14:	617b      	str	r3, [r7, #20]
   return(result);
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1e3      	bne.n	800bae4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f83e 	bl	800bba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb28:	e023      	b.n	800bb72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d009      	beq.n	800bb4a <HAL_UART_IRQHandler+0x4ea>
 800bb36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f95d 	bl	800be02 <UART_Transmit_IT>
    return;
 800bb48:	e014      	b.n	800bb74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00e      	beq.n	800bb74 <HAL_UART_IRQHandler+0x514>
 800bb56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d008      	beq.n	800bb74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f99d 	bl	800bea2 <UART_EndTransmit_IT>
    return;
 800bb68:	e004      	b.n	800bb74 <HAL_UART_IRQHandler+0x514>
    return;
 800bb6a:	bf00      	nop
 800bb6c:	e002      	b.n	800bb74 <HAL_UART_IRQHandler+0x514>
      return;
 800bb6e:	bf00      	nop
 800bb70:	e000      	b.n	800bb74 <HAL_UART_IRQHandler+0x514>
      return;
 800bb72:	bf00      	nop
  }
}
 800bb74:	37e8      	adds	r7, #232	; 0xe8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop

0800bb7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b090      	sub	sp, #64	; 0x40
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbcc:	e050      	b.n	800bc70 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbd4:	d04c      	beq.n	800bc70 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bbd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d007      	beq.n	800bbec <UART_WaitOnFlagUntilTimeout+0x30>
 800bbdc:	f7fb fa0a 	bl	8006ff4 <HAL_GetTick>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d241      	bcs.n	800bc70 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	330c      	adds	r3, #12
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	330c      	adds	r3, #12
 800bc0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc0c:	637a      	str	r2, [r7, #52]	; 0x34
 800bc0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc14:	e841 2300 	strex	r3, r2, [r1]
 800bc18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1e5      	bne.n	800bbec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3314      	adds	r3, #20
 800bc26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	e853 3f00 	ldrex	r3, [r3]
 800bc2e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	f023 0301 	bic.w	r3, r3, #1
 800bc36:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	3314      	adds	r3, #20
 800bc3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc40:	623a      	str	r2, [r7, #32]
 800bc42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc44:	69f9      	ldr	r1, [r7, #28]
 800bc46:	6a3a      	ldr	r2, [r7, #32]
 800bc48:	e841 2300 	strex	r3, r2, [r1]
 800bc4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1e5      	bne.n	800bc20 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2220      	movs	r2, #32
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e00f      	b.n	800bc90 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	bf0c      	ite	eq
 800bc80:	2301      	moveq	r3, #1
 800bc82:	2300      	movne	r3, #0
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	461a      	mov	r2, r3
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d09f      	beq.n	800bbce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3740      	adds	r7, #64	; 0x40
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	4613      	mov	r3, r2
 800bca4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	88fa      	ldrh	r2, [r7, #6]
 800bcb0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	88fa      	ldrh	r2, [r7, #6]
 800bcb6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2222      	movs	r2, #34	; 0x22
 800bcc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d007      	beq.n	800bce6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68da      	ldr	r2, [r3, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bce4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	695a      	ldr	r2, [r3, #20]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f042 0201 	orr.w	r2, r2, #1
 800bcf4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f042 0220 	orr.w	r2, r2, #32
 800bd04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3714      	adds	r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b095      	sub	sp, #84	; 0x54
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	330c      	adds	r3, #12
 800bd22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd26:	e853 3f00 	ldrex	r3, [r3]
 800bd2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	330c      	adds	r3, #12
 800bd3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd3c:	643a      	str	r2, [r7, #64]	; 0x40
 800bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd44:	e841 2300 	strex	r3, r2, [r1]
 800bd48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1e5      	bne.n	800bd1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3314      	adds	r3, #20
 800bd56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	e853 3f00 	ldrex	r3, [r3]
 800bd5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f023 0301 	bic.w	r3, r3, #1
 800bd66:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3314      	adds	r3, #20
 800bd6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd70:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd78:	e841 2300 	strex	r3, r2, [r1]
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e5      	bne.n	800bd50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d119      	bne.n	800bdc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	330c      	adds	r3, #12
 800bd92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f023 0310 	bic.w	r3, r3, #16
 800bda2:	647b      	str	r3, [r7, #68]	; 0x44
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	330c      	adds	r3, #12
 800bdaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdac:	61ba      	str	r2, [r7, #24]
 800bdae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6979      	ldr	r1, [r7, #20]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e5      	bne.n	800bd8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdce:	bf00      	nop
 800bdd0:	3754      	adds	r7, #84	; 0x54
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f7ff fecb 	bl	800bb90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdfa:	bf00      	nop
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b21      	cmp	r3, #33	; 0x21
 800be14:	d13e      	bne.n	800be94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be1e:	d114      	bne.n	800be4a <UART_Transmit_IT+0x48>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d110      	bne.n	800be4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	1c9a      	adds	r2, r3, #2
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	621a      	str	r2, [r3, #32]
 800be48:	e008      	b.n	800be5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a1b      	ldr	r3, [r3, #32]
 800be4e:	1c59      	adds	r1, r3, #1
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	6211      	str	r1, [r2, #32]
 800be54:	781a      	ldrb	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be60:	b29b      	uxth	r3, r3
 800be62:	3b01      	subs	r3, #1
 800be64:	b29b      	uxth	r3, r3
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	4619      	mov	r1, r3
 800be6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10f      	bne.n	800be90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68da      	ldr	r2, [r3, #12]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	e000      	b.n	800be96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be94:	2302      	movs	r3, #2
  }
}
 800be96:	4618      	mov	r0, r3
 800be98:	3714      	adds	r7, #20
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7ff fe5a 	bl	800bb7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b08c      	sub	sp, #48	; 0x30
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b22      	cmp	r3, #34	; 0x22
 800bee4:	f040 80ab 	bne.w	800c03e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef0:	d117      	bne.n	800bf22 <UART_Receive_IT+0x50>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d113      	bne.n	800bf22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800befa:	2300      	movs	r3, #0
 800befc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1a:	1c9a      	adds	r2, r3, #2
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf20:	e026      	b.n	800bf70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf34:	d007      	beq.n	800bf46 <UART_Receive_IT+0x74>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10a      	bne.n	800bf54 <UART_Receive_IT+0x82>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	e008      	b.n	800bf66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d15a      	bne.n	800c03a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0220 	bic.w	r2, r2, #32
 800bf92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	695a      	ldr	r2, [r3, #20]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 0201 	bic.w	r2, r2, #1
 800bfb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d135      	bne.n	800c030 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	330c      	adds	r3, #12
 800bfd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f023 0310 	bic.w	r3, r3, #16
 800bfe0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfea:	623a      	str	r2, [r7, #32]
 800bfec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfee:	69f9      	ldr	r1, [r7, #28]
 800bff0:	6a3a      	ldr	r2, [r7, #32]
 800bff2:	e841 2300 	strex	r3, r2, [r1]
 800bff6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e5      	bne.n	800bfca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0310 	and.w	r3, r3, #16
 800c008:	2b10      	cmp	r3, #16
 800c00a:	d10a      	bne.n	800c022 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7ff fdbb 	bl	800bba4 <HAL_UARTEx_RxEventCallback>
 800c02e:	e002      	b.n	800c036 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7f5 fdc7 	bl	8001bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	e002      	b.n	800c040 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e000      	b.n	800c040 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c03e:	2302      	movs	r3, #2
  }
}
 800c040:	4618      	mov	r0, r3
 800c042:	3730      	adds	r7, #48	; 0x30
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c04c:	b0c0      	sub	sp, #256	; 0x100
 800c04e:	af00      	add	r7, sp, #0
 800c050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c064:	68d9      	ldr	r1, [r3, #12]
 800c066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	ea40 0301 	orr.w	r3, r0, r1
 800c070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	431a      	orrs	r2, r3
 800c080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c084:	695b      	ldr	r3, [r3, #20]
 800c086:	431a      	orrs	r2, r3
 800c088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c0a0:	f021 010c 	bic.w	r1, r1, #12
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c2:	6999      	ldr	r1, [r3, #24]
 800c0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	ea40 0301 	orr.w	r3, r0, r1
 800c0ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	4b8f      	ldr	r3, [pc, #572]	; (800c314 <UART_SetConfig+0x2cc>)
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d005      	beq.n	800c0e8 <UART_SetConfig+0xa0>
 800c0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	4b8d      	ldr	r3, [pc, #564]	; (800c318 <UART_SetConfig+0x2d0>)
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d104      	bne.n	800c0f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c0e8:	f7fd fb0a 	bl	8009700 <HAL_RCC_GetPCLK2Freq>
 800c0ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c0f0:	e003      	b.n	800c0fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c0f2:	f7fd faf1 	bl	80096d8 <HAL_RCC_GetPCLK1Freq>
 800c0f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c104:	f040 810c 	bne.w	800c320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c10c:	2200      	movs	r2, #0
 800c10e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c11a:	4622      	mov	r2, r4
 800c11c:	462b      	mov	r3, r5
 800c11e:	1891      	adds	r1, r2, r2
 800c120:	65b9      	str	r1, [r7, #88]	; 0x58
 800c122:	415b      	adcs	r3, r3
 800c124:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c12a:	4621      	mov	r1, r4
 800c12c:	eb12 0801 	adds.w	r8, r2, r1
 800c130:	4629      	mov	r1, r5
 800c132:	eb43 0901 	adc.w	r9, r3, r1
 800c136:	f04f 0200 	mov.w	r2, #0
 800c13a:	f04f 0300 	mov.w	r3, #0
 800c13e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c14a:	4690      	mov	r8, r2
 800c14c:	4699      	mov	r9, r3
 800c14e:	4623      	mov	r3, r4
 800c150:	eb18 0303 	adds.w	r3, r8, r3
 800c154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c158:	462b      	mov	r3, r5
 800c15a:	eb49 0303 	adc.w	r3, r9, r3
 800c15e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c16e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c176:	460b      	mov	r3, r1
 800c178:	18db      	adds	r3, r3, r3
 800c17a:	653b      	str	r3, [r7, #80]	; 0x50
 800c17c:	4613      	mov	r3, r2
 800c17e:	eb42 0303 	adc.w	r3, r2, r3
 800c182:	657b      	str	r3, [r7, #84]	; 0x54
 800c184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c18c:	f7f4 fd36 	bl	8000bfc <__aeabi_uldivmod>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4b61      	ldr	r3, [pc, #388]	; (800c31c <UART_SetConfig+0x2d4>)
 800c196:	fba3 2302 	umull	r2, r3, r3, r2
 800c19a:	095b      	lsrs	r3, r3, #5
 800c19c:	011c      	lsls	r4, r3, #4
 800c19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c1ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	1891      	adds	r1, r2, r2
 800c1b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1b8:	415b      	adcs	r3, r3
 800c1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1c0:	4641      	mov	r1, r8
 800c1c2:	eb12 0a01 	adds.w	sl, r2, r1
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	eb43 0b01 	adc.w	fp, r3, r1
 800c1cc:	f04f 0200 	mov.w	r2, #0
 800c1d0:	f04f 0300 	mov.w	r3, #0
 800c1d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c1dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1e0:	4692      	mov	sl, r2
 800c1e2:	469b      	mov	fp, r3
 800c1e4:	4643      	mov	r3, r8
 800c1e6:	eb1a 0303 	adds.w	r3, sl, r3
 800c1ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	eb4b 0303 	adc.w	r3, fp, r3
 800c1f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c20c:	460b      	mov	r3, r1
 800c20e:	18db      	adds	r3, r3, r3
 800c210:	643b      	str	r3, [r7, #64]	; 0x40
 800c212:	4613      	mov	r3, r2
 800c214:	eb42 0303 	adc.w	r3, r2, r3
 800c218:	647b      	str	r3, [r7, #68]	; 0x44
 800c21a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c21e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c222:	f7f4 fceb 	bl	8000bfc <__aeabi_uldivmod>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4611      	mov	r1, r2
 800c22c:	4b3b      	ldr	r3, [pc, #236]	; (800c31c <UART_SetConfig+0x2d4>)
 800c22e:	fba3 2301 	umull	r2, r3, r3, r1
 800c232:	095b      	lsrs	r3, r3, #5
 800c234:	2264      	movs	r2, #100	; 0x64
 800c236:	fb02 f303 	mul.w	r3, r2, r3
 800c23a:	1acb      	subs	r3, r1, r3
 800c23c:	00db      	lsls	r3, r3, #3
 800c23e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c242:	4b36      	ldr	r3, [pc, #216]	; (800c31c <UART_SetConfig+0x2d4>)
 800c244:	fba3 2302 	umull	r2, r3, r3, r2
 800c248:	095b      	lsrs	r3, r3, #5
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c250:	441c      	add	r4, r3
 800c252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c256:	2200      	movs	r2, #0
 800c258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c25c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c264:	4642      	mov	r2, r8
 800c266:	464b      	mov	r3, r9
 800c268:	1891      	adds	r1, r2, r2
 800c26a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c26c:	415b      	adcs	r3, r3
 800c26e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c274:	4641      	mov	r1, r8
 800c276:	1851      	adds	r1, r2, r1
 800c278:	6339      	str	r1, [r7, #48]	; 0x30
 800c27a:	4649      	mov	r1, r9
 800c27c:	414b      	adcs	r3, r1
 800c27e:	637b      	str	r3, [r7, #52]	; 0x34
 800c280:	f04f 0200 	mov.w	r2, #0
 800c284:	f04f 0300 	mov.w	r3, #0
 800c288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c28c:	4659      	mov	r1, fp
 800c28e:	00cb      	lsls	r3, r1, #3
 800c290:	4651      	mov	r1, sl
 800c292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c296:	4651      	mov	r1, sl
 800c298:	00ca      	lsls	r2, r1, #3
 800c29a:	4610      	mov	r0, r2
 800c29c:	4619      	mov	r1, r3
 800c29e:	4603      	mov	r3, r0
 800c2a0:	4642      	mov	r2, r8
 800c2a2:	189b      	adds	r3, r3, r2
 800c2a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2a8:	464b      	mov	r3, r9
 800c2aa:	460a      	mov	r2, r1
 800c2ac:	eb42 0303 	adc.w	r3, r2, r3
 800c2b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	18db      	adds	r3, r3, r3
 800c2cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	eb42 0303 	adc.w	r3, r2, r3
 800c2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c2da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c2de:	f7f4 fc8d 	bl	8000bfc <__aeabi_uldivmod>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <UART_SetConfig+0x2d4>)
 800c2e8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2ec:	095b      	lsrs	r3, r3, #5
 800c2ee:	2164      	movs	r1, #100	; 0x64
 800c2f0:	fb01 f303 	mul.w	r3, r1, r3
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	3332      	adds	r3, #50	; 0x32
 800c2fa:	4a08      	ldr	r2, [pc, #32]	; (800c31c <UART_SetConfig+0x2d4>)
 800c2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c300:	095b      	lsrs	r3, r3, #5
 800c302:	f003 0207 	and.w	r2, r3, #7
 800c306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4422      	add	r2, r4
 800c30e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c310:	e106      	b.n	800c520 <UART_SetConfig+0x4d8>
 800c312:	bf00      	nop
 800c314:	40011000 	.word	0x40011000
 800c318:	40011400 	.word	0x40011400
 800c31c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c324:	2200      	movs	r2, #0
 800c326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c32a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c32e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c332:	4642      	mov	r2, r8
 800c334:	464b      	mov	r3, r9
 800c336:	1891      	adds	r1, r2, r2
 800c338:	6239      	str	r1, [r7, #32]
 800c33a:	415b      	adcs	r3, r3
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
 800c33e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c342:	4641      	mov	r1, r8
 800c344:	1854      	adds	r4, r2, r1
 800c346:	4649      	mov	r1, r9
 800c348:	eb43 0501 	adc.w	r5, r3, r1
 800c34c:	f04f 0200 	mov.w	r2, #0
 800c350:	f04f 0300 	mov.w	r3, #0
 800c354:	00eb      	lsls	r3, r5, #3
 800c356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c35a:	00e2      	lsls	r2, r4, #3
 800c35c:	4614      	mov	r4, r2
 800c35e:	461d      	mov	r5, r3
 800c360:	4643      	mov	r3, r8
 800c362:	18e3      	adds	r3, r4, r3
 800c364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c368:	464b      	mov	r3, r9
 800c36a:	eb45 0303 	adc.w	r3, r5, r3
 800c36e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c37e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c382:	f04f 0200 	mov.w	r2, #0
 800c386:	f04f 0300 	mov.w	r3, #0
 800c38a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c38e:	4629      	mov	r1, r5
 800c390:	008b      	lsls	r3, r1, #2
 800c392:	4621      	mov	r1, r4
 800c394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c398:	4621      	mov	r1, r4
 800c39a:	008a      	lsls	r2, r1, #2
 800c39c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c3a0:	f7f4 fc2c 	bl	8000bfc <__aeabi_uldivmod>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4b60      	ldr	r3, [pc, #384]	; (800c52c <UART_SetConfig+0x4e4>)
 800c3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c3ae:	095b      	lsrs	r3, r3, #5
 800c3b0:	011c      	lsls	r4, r3, #4
 800c3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c3c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c3c4:	4642      	mov	r2, r8
 800c3c6:	464b      	mov	r3, r9
 800c3c8:	1891      	adds	r1, r2, r2
 800c3ca:	61b9      	str	r1, [r7, #24]
 800c3cc:	415b      	adcs	r3, r3
 800c3ce:	61fb      	str	r3, [r7, #28]
 800c3d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3d4:	4641      	mov	r1, r8
 800c3d6:	1851      	adds	r1, r2, r1
 800c3d8:	6139      	str	r1, [r7, #16]
 800c3da:	4649      	mov	r1, r9
 800c3dc:	414b      	adcs	r3, r1
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	f04f 0200 	mov.w	r2, #0
 800c3e4:	f04f 0300 	mov.w	r3, #0
 800c3e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c3ec:	4659      	mov	r1, fp
 800c3ee:	00cb      	lsls	r3, r1, #3
 800c3f0:	4651      	mov	r1, sl
 800c3f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3f6:	4651      	mov	r1, sl
 800c3f8:	00ca      	lsls	r2, r1, #3
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	4603      	mov	r3, r0
 800c400:	4642      	mov	r2, r8
 800c402:	189b      	adds	r3, r3, r2
 800c404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c408:	464b      	mov	r3, r9
 800c40a:	460a      	mov	r2, r1
 800c40c:	eb42 0303 	adc.w	r3, r2, r3
 800c410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c41e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c420:	f04f 0200 	mov.w	r2, #0
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c42c:	4649      	mov	r1, r9
 800c42e:	008b      	lsls	r3, r1, #2
 800c430:	4641      	mov	r1, r8
 800c432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c436:	4641      	mov	r1, r8
 800c438:	008a      	lsls	r2, r1, #2
 800c43a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c43e:	f7f4 fbdd 	bl	8000bfc <__aeabi_uldivmod>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	4611      	mov	r1, r2
 800c448:	4b38      	ldr	r3, [pc, #224]	; (800c52c <UART_SetConfig+0x4e4>)
 800c44a:	fba3 2301 	umull	r2, r3, r3, r1
 800c44e:	095b      	lsrs	r3, r3, #5
 800c450:	2264      	movs	r2, #100	; 0x64
 800c452:	fb02 f303 	mul.w	r3, r2, r3
 800c456:	1acb      	subs	r3, r1, r3
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	3332      	adds	r3, #50	; 0x32
 800c45c:	4a33      	ldr	r2, [pc, #204]	; (800c52c <UART_SetConfig+0x4e4>)
 800c45e:	fba2 2303 	umull	r2, r3, r2, r3
 800c462:	095b      	lsrs	r3, r3, #5
 800c464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c468:	441c      	add	r4, r3
 800c46a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c46e:	2200      	movs	r2, #0
 800c470:	673b      	str	r3, [r7, #112]	; 0x70
 800c472:	677a      	str	r2, [r7, #116]	; 0x74
 800c474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c478:	4642      	mov	r2, r8
 800c47a:	464b      	mov	r3, r9
 800c47c:	1891      	adds	r1, r2, r2
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	415b      	adcs	r3, r3
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c488:	4641      	mov	r1, r8
 800c48a:	1851      	adds	r1, r2, r1
 800c48c:	6039      	str	r1, [r7, #0]
 800c48e:	4649      	mov	r1, r9
 800c490:	414b      	adcs	r3, r1
 800c492:	607b      	str	r3, [r7, #4]
 800c494:	f04f 0200 	mov.w	r2, #0
 800c498:	f04f 0300 	mov.w	r3, #0
 800c49c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4a0:	4659      	mov	r1, fp
 800c4a2:	00cb      	lsls	r3, r1, #3
 800c4a4:	4651      	mov	r1, sl
 800c4a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4aa:	4651      	mov	r1, sl
 800c4ac:	00ca      	lsls	r2, r1, #3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4642      	mov	r2, r8
 800c4b6:	189b      	adds	r3, r3, r2
 800c4b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4ba:	464b      	mov	r3, r9
 800c4bc:	460a      	mov	r2, r1
 800c4be:	eb42 0303 	adc.w	r3, r2, r3
 800c4c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	663b      	str	r3, [r7, #96]	; 0x60
 800c4ce:	667a      	str	r2, [r7, #100]	; 0x64
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	f04f 0300 	mov.w	r3, #0
 800c4d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c4dc:	4649      	mov	r1, r9
 800c4de:	008b      	lsls	r3, r1, #2
 800c4e0:	4641      	mov	r1, r8
 800c4e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4e6:	4641      	mov	r1, r8
 800c4e8:	008a      	lsls	r2, r1, #2
 800c4ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c4ee:	f7f4 fb85 	bl	8000bfc <__aeabi_uldivmod>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	4b0d      	ldr	r3, [pc, #52]	; (800c52c <UART_SetConfig+0x4e4>)
 800c4f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c4fc:	095b      	lsrs	r3, r3, #5
 800c4fe:	2164      	movs	r1, #100	; 0x64
 800c500:	fb01 f303 	mul.w	r3, r1, r3
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	011b      	lsls	r3, r3, #4
 800c508:	3332      	adds	r3, #50	; 0x32
 800c50a:	4a08      	ldr	r2, [pc, #32]	; (800c52c <UART_SetConfig+0x4e4>)
 800c50c:	fba2 2303 	umull	r2, r3, r2, r3
 800c510:	095b      	lsrs	r3, r3, #5
 800c512:	f003 020f 	and.w	r2, r3, #15
 800c516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4422      	add	r2, r4
 800c51e:	609a      	str	r2, [r3, #8]
}
 800c520:	bf00      	nop
 800c522:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c526:	46bd      	mov	sp, r7
 800c528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c52c:	51eb851f 	.word	0x51eb851f

0800c530 <__NVIC_SetPriority>:
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	6039      	str	r1, [r7, #0]
 800c53a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c53c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c540:	2b00      	cmp	r3, #0
 800c542:	db0a      	blt.n	800c55a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	b2da      	uxtb	r2, r3
 800c548:	490c      	ldr	r1, [pc, #48]	; (800c57c <__NVIC_SetPriority+0x4c>)
 800c54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c54e:	0112      	lsls	r2, r2, #4
 800c550:	b2d2      	uxtb	r2, r2
 800c552:	440b      	add	r3, r1
 800c554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c558:	e00a      	b.n	800c570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	4908      	ldr	r1, [pc, #32]	; (800c580 <__NVIC_SetPriority+0x50>)
 800c560:	79fb      	ldrb	r3, [r7, #7]
 800c562:	f003 030f 	and.w	r3, r3, #15
 800c566:	3b04      	subs	r3, #4
 800c568:	0112      	lsls	r2, r2, #4
 800c56a:	b2d2      	uxtb	r2, r2
 800c56c:	440b      	add	r3, r1
 800c56e:	761a      	strb	r2, [r3, #24]
}
 800c570:	bf00      	nop
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr
 800c57c:	e000e100 	.word	0xe000e100
 800c580:	e000ed00 	.word	0xe000ed00

0800c584 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c584:	b580      	push	{r7, lr}
 800c586:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c588:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <SysTick_Handler+0x1c>)
 800c58a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c58c:	f001 fcfe 	bl	800df8c <xTaskGetSchedulerState>
 800c590:	4603      	mov	r3, r0
 800c592:	2b01      	cmp	r3, #1
 800c594:	d001      	beq.n	800c59a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c596:	f002 fae7 	bl	800eb68 <xPortSysTickHandler>
  }
}
 800c59a:	bf00      	nop
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	e000e010 	.word	0xe000e010

0800c5a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	f06f 0004 	mvn.w	r0, #4
 800c5ae:	f7ff ffbf 	bl	800c530 <__NVIC_SetPriority>
#endif
}
 800c5b2:	bf00      	nop
 800c5b4:	bd80      	pop	{r7, pc}
	...

0800c5b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5be:	f3ef 8305 	mrs	r3, IPSR
 800c5c2:	603b      	str	r3, [r7, #0]
  return(result);
 800c5c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d003      	beq.n	800c5d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c5ca:	f06f 0305 	mvn.w	r3, #5
 800c5ce:	607b      	str	r3, [r7, #4]
 800c5d0:	e00c      	b.n	800c5ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <osKernelInitialize+0x44>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d105      	bne.n	800c5e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c5da:	4b08      	ldr	r3, [pc, #32]	; (800c5fc <osKernelInitialize+0x44>)
 800c5dc:	2201      	movs	r2, #1
 800c5de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	e002      	b.n	800c5ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5ec:	687b      	ldr	r3, [r7, #4]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	200005bc 	.word	0x200005bc

0800c600 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c606:	f3ef 8305 	mrs	r3, IPSR
 800c60a:	603b      	str	r3, [r7, #0]
  return(result);
 800c60c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c612:	f06f 0305 	mvn.w	r3, #5
 800c616:	607b      	str	r3, [r7, #4]
 800c618:	e010      	b.n	800c63c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c61a:	4b0b      	ldr	r3, [pc, #44]	; (800c648 <osKernelStart+0x48>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d109      	bne.n	800c636 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c622:	f7ff ffbf 	bl	800c5a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c626:	4b08      	ldr	r3, [pc, #32]	; (800c648 <osKernelStart+0x48>)
 800c628:	2202      	movs	r2, #2
 800c62a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c62c:	f001 f866 	bl	800d6fc <vTaskStartScheduler>
      stat = osOK;
 800c630:	2300      	movs	r3, #0
 800c632:	607b      	str	r3, [r7, #4]
 800c634:	e002      	b.n	800c63c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c63a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c63c:	687b      	ldr	r3, [r7, #4]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	200005bc 	.word	0x200005bc

0800c64c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08e      	sub	sp, #56	; 0x38
 800c650:	af04      	add	r7, sp, #16
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c65c:	f3ef 8305 	mrs	r3, IPSR
 800c660:	617b      	str	r3, [r7, #20]
  return(result);
 800c662:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c664:	2b00      	cmp	r3, #0
 800c666:	d17e      	bne.n	800c766 <osThreadNew+0x11a>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d07b      	beq.n	800c766 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c66e:	2380      	movs	r3, #128	; 0x80
 800c670:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c672:	2318      	movs	r3, #24
 800c674:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c67a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c67e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d045      	beq.n	800c712 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <osThreadNew+0x48>
        name = attr->name;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d008      	beq.n	800c6ba <osThreadNew+0x6e>
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	2b38      	cmp	r3, #56	; 0x38
 800c6ac:	d805      	bhi.n	800c6ba <osThreadNew+0x6e>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <osThreadNew+0x72>
        return (NULL);
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e054      	b.n	800c768 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	695b      	ldr	r3, [r3, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	089b      	lsrs	r3, r3, #2
 800c6cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00e      	beq.n	800c6f4 <osThreadNew+0xa8>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	2b5b      	cmp	r3, #91	; 0x5b
 800c6dc:	d90a      	bls.n	800c6f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <osThreadNew+0xa8>
        mem = 1;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	61bb      	str	r3, [r7, #24]
 800c6f2:	e010      	b.n	800c716 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10c      	bne.n	800c716 <osThreadNew+0xca>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d108      	bne.n	800c716 <osThreadNew+0xca>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d104      	bne.n	800c716 <osThreadNew+0xca>
          mem = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	61bb      	str	r3, [r7, #24]
 800c710:	e001      	b.n	800c716 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d110      	bne.n	800c73e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c724:	9202      	str	r2, [sp, #8]
 800c726:	9301      	str	r3, [sp, #4]
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	6a3a      	ldr	r2, [r7, #32]
 800c730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 fe0c 	bl	800d350 <xTaskCreateStatic>
 800c738:	4603      	mov	r3, r0
 800c73a:	613b      	str	r3, [r7, #16]
 800c73c:	e013      	b.n	800c766 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d110      	bne.n	800c766 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c744:	6a3b      	ldr	r3, [r7, #32]
 800c746:	b29a      	uxth	r2, r3
 800c748:	f107 0310 	add.w	r3, r7, #16
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f000 fe57 	bl	800d40a <xTaskCreate>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d001      	beq.n	800c766 <osThreadNew+0x11a>
            hTask = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c766:	693b      	ldr	r3, [r7, #16]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3728      	adds	r7, #40	; 0x28
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c778:	f3ef 8305 	mrs	r3, IPSR
 800c77c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c77e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c780:	2b00      	cmp	r3, #0
 800c782:	d003      	beq.n	800c78c <osDelay+0x1c>
    stat = osErrorISR;
 800c784:	f06f 0305 	mvn.w	r3, #5
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e007      	b.n	800c79c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 ff7c 	bl	800d694 <vTaskDelay>
    }
  }

  return (stat);
 800c79c:	68fb      	ldr	r3, [r7, #12]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
	...

0800c7a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	4a07      	ldr	r2, [pc, #28]	; (800c7d4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c7b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	4a06      	ldr	r2, [pc, #24]	; (800c7d8 <vApplicationGetIdleTaskMemory+0x30>)
 800c7be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2280      	movs	r2, #128	; 0x80
 800c7c4:	601a      	str	r2, [r3, #0]
}
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	200005c0 	.word	0x200005c0
 800c7d8:	2000061c 	.word	0x2000061c

0800c7dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4a07      	ldr	r2, [pc, #28]	; (800c808 <vApplicationGetTimerTaskMemory+0x2c>)
 800c7ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	4a06      	ldr	r2, [pc, #24]	; (800c80c <vApplicationGetTimerTaskMemory+0x30>)
 800c7f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7fa:	601a      	str	r2, [r3, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	2000081c 	.word	0x2000081c
 800c80c:	20000878 	.word	0x20000878

0800c810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f103 0208 	add.w	r2, r3, #8
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f103 0208 	add.w	r2, r3, #8
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f103 0208 	add.w	r2, r3, #8
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c85e:	bf00      	nop
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c86a:	b480      	push	{r7}
 800c86c:	b085      	sub	sp, #20
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	689a      	ldr	r2, [r3, #8]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	683a      	ldr	r2, [r7, #0]
 800c88e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	601a      	str	r2, [r3, #0]
}
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b085      	sub	sp, #20
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8c8:	d103      	bne.n	800c8d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	e00c      	b.n	800c8ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	3308      	adds	r3, #8
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	e002      	b.n	800c8e0 <vListInsert+0x2e>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d2f6      	bcs.n	800c8da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]
}
 800c918:	bf00      	nop
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	6892      	ldr	r2, [r2, #8]
 800c93a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	6852      	ldr	r2, [r2, #4]
 800c944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d103      	bne.n	800c958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	689a      	ldr	r2, [r3, #8]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	1e5a      	subs	r2, r3, #1
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10a      	bne.n	800c9a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c990:	f383 8811 	msr	BASEPRI, r3
 800c994:	f3bf 8f6f 	isb	sy
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c99e:	bf00      	nop
 800c9a0:	e7fe      	b.n	800c9a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c9a2:	f002 f84f 	bl	800ea44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ae:	68f9      	ldr	r1, [r7, #12]
 800c9b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9b2:	fb01 f303 	mul.w	r3, r1, r3
 800c9b6:	441a      	add	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	68f9      	ldr	r1, [r7, #12]
 800c9d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9d8:	fb01 f303 	mul.w	r3, r1, r3
 800c9dc:	441a      	add	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	22ff      	movs	r2, #255	; 0xff
 800c9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	22ff      	movs	r2, #255	; 0xff
 800c9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d114      	bne.n	800ca22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d01a      	beq.n	800ca36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	3310      	adds	r3, #16
 800ca04:	4618      	mov	r0, r3
 800ca06:	f001 f903 	bl	800dc10 <xTaskRemoveFromEventList>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d012      	beq.n	800ca36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ca10:	4b0c      	ldr	r3, [pc, #48]	; (800ca44 <xQueueGenericReset+0xcc>)
 800ca12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	e009      	b.n	800ca36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3310      	adds	r3, #16
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff fef2 	bl	800c810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3324      	adds	r3, #36	; 0x24
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff feed 	bl	800c810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca36:	f002 f835 	bl	800eaa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca3a:	2301      	movs	r3, #1
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	e000ed04 	.word	0xe000ed04

0800ca48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08e      	sub	sp, #56	; 0x38
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
 800ca54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d10a      	bne.n	800ca72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca60:	f383 8811 	msr	BASEPRI, r3
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	f3bf 8f4f 	dsb	sy
 800ca6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca6e:	bf00      	nop
 800ca70:	e7fe      	b.n	800ca70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d10a      	bne.n	800ca8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7c:	f383 8811 	msr	BASEPRI, r3
 800ca80:	f3bf 8f6f 	isb	sy
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca8a:	bf00      	nop
 800ca8c:	e7fe      	b.n	800ca8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <xQueueGenericCreateStatic+0x52>
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <xQueueGenericCreateStatic+0x56>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e000      	b.n	800caa0 <xQueueGenericCreateStatic+0x58>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	623b      	str	r3, [r7, #32]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d102      	bne.n	800cac6 <xQueueGenericCreateStatic+0x7e>
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d101      	bne.n	800caca <xQueueGenericCreateStatic+0x82>
 800cac6:	2301      	movs	r3, #1
 800cac8:	e000      	b.n	800cacc <xQueueGenericCreateStatic+0x84>
 800caca:	2300      	movs	r3, #0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10a      	bne.n	800cae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	f383 8811 	msr	BASEPRI, r3
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	61fb      	str	r3, [r7, #28]
}
 800cae2:	bf00      	nop
 800cae4:	e7fe      	b.n	800cae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cae6:	2350      	movs	r3, #80	; 0x50
 800cae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	2b50      	cmp	r3, #80	; 0x50
 800caee:	d00a      	beq.n	800cb06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800caf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf4:	f383 8811 	msr	BASEPRI, r3
 800caf8:	f3bf 8f6f 	isb	sy
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	61bb      	str	r3, [r7, #24]
}
 800cb02:	bf00      	nop
 800cb04:	e7fe      	b.n	800cb04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cb06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00d      	beq.n	800cb2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4613      	mov	r3, r2
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 f805 	bl	800cb38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3730      	adds	r7, #48	; 0x30
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d103      	bne.n	800cb54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	69ba      	ldr	r2, [r7, #24]
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	e002      	b.n	800cb5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	68ba      	ldr	r2, [r7, #8]
 800cb64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb66:	2101      	movs	r1, #1
 800cb68:	69b8      	ldr	r0, [r7, #24]
 800cb6a:	f7ff ff05 	bl	800c978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	78fa      	ldrb	r2, [r7, #3]
 800cb72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb76:	bf00      	nop
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08e      	sub	sp, #56	; 0x38
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xQueueGenericSend+0x32>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d103      	bne.n	800cbc0 <xQueueGenericSend+0x40>
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <xQueueGenericSend+0x44>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e000      	b.n	800cbc6 <xQueueGenericSend+0x46>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <xQueueGenericSend+0x60>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	d103      	bne.n	800cbee <xQueueGenericSend+0x6e>
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d101      	bne.n	800cbf2 <xQueueGenericSend+0x72>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <xQueueGenericSend+0x74>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10a      	bne.n	800cc0e <xQueueGenericSend+0x8e>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	623b      	str	r3, [r7, #32]
}
 800cc0a:	bf00      	nop
 800cc0c:	e7fe      	b.n	800cc0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc0e:	f001 f9bd 	bl	800df8c <xTaskGetSchedulerState>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <xQueueGenericSend+0x9e>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <xQueueGenericSend+0xa2>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e000      	b.n	800cc24 <xQueueGenericSend+0xa4>
 800cc22:	2300      	movs	r3, #0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10a      	bne.n	800cc3e <xQueueGenericSend+0xbe>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	61fb      	str	r3, [r7, #28]
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc3e:	f001 ff01 	bl	800ea44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d302      	bcc.n	800cc54 <xQueueGenericSend+0xd4>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d129      	bne.n	800cca8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	68b9      	ldr	r1, [r7, #8]
 800cc58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc5a:	f000 fa0b 	bl	800d074 <prvCopyDataToQueue>
 800cc5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d010      	beq.n	800cc8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6a:	3324      	adds	r3, #36	; 0x24
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 ffcf 	bl	800dc10 <xTaskRemoveFromEventList>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d013      	beq.n	800cca0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc78:	4b3f      	ldr	r3, [pc, #252]	; (800cd78 <xQueueGenericSend+0x1f8>)
 800cc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7e:	601a      	str	r2, [r3, #0]
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	f3bf 8f6f 	isb	sy
 800cc88:	e00a      	b.n	800cca0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d007      	beq.n	800cca0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc90:	4b39      	ldr	r3, [pc, #228]	; (800cd78 <xQueueGenericSend+0x1f8>)
 800cc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cca0:	f001 ff00 	bl	800eaa4 <vPortExitCritical>
				return pdPASS;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e063      	b.n	800cd70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccae:	f001 fef9 	bl	800eaa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e05c      	b.n	800cd70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d106      	bne.n	800ccca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ccbc:	f107 0314 	add.w	r3, r7, #20
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f001 f809 	bl	800dcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ccca:	f001 feeb 	bl	800eaa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ccce:	f000 fd7b 	bl	800d7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ccd2:	f001 feb7 	bl	800ea44 <vPortEnterCritical>
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccdc:	b25b      	sxtb	r3, r3
 800ccde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cce2:	d103      	bne.n	800ccec <xQueueGenericSend+0x16c>
 800cce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccf2:	b25b      	sxtb	r3, r3
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccf8:	d103      	bne.n	800cd02 <xQueueGenericSend+0x182>
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd02:	f001 fecf 	bl	800eaa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd06:	1d3a      	adds	r2, r7, #4
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	4611      	mov	r1, r2
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fff8 	bl	800dd04 <xTaskCheckForTimeOut>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d124      	bne.n	800cd64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd1c:	f000 faa2 	bl	800d264 <prvIsQueueFull>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d018      	beq.n	800cd58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	3310      	adds	r3, #16
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 ff1e 	bl	800db70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd36:	f000 fa2d 	bl	800d194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd3a:	f000 fd53 	bl	800d7e4 <xTaskResumeAll>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f47f af7c 	bne.w	800cc3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cd46:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <xQueueGenericSend+0x1f8>)
 800cd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd4c:	601a      	str	r2, [r3, #0]
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	e772      	b.n	800cc3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd5a:	f000 fa1b 	bl	800d194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd5e:	f000 fd41 	bl	800d7e4 <xTaskResumeAll>
 800cd62:	e76c      	b.n	800cc3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd66:	f000 fa15 	bl	800d194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd6a:	f000 fd3b 	bl	800d7e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3738      	adds	r7, #56	; 0x38
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b090      	sub	sp, #64	; 0x40
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d10a      	bne.n	800cdaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d103      	bne.n	800cdb8 <xQueueGenericSendFromISR+0x3c>
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <xQueueGenericSendFromISR+0x40>
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e000      	b.n	800cdbe <xQueueGenericSendFromISR+0x42>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdd4:	bf00      	nop
 800cdd6:	e7fe      	b.n	800cdd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d103      	bne.n	800cde6 <xQueueGenericSendFromISR+0x6a>
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d101      	bne.n	800cdea <xQueueGenericSendFromISR+0x6e>
 800cde6:	2301      	movs	r3, #1
 800cde8:	e000      	b.n	800cdec <xQueueGenericSendFromISR+0x70>
 800cdea:	2300      	movs	r3, #0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10a      	bne.n	800ce06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	623b      	str	r3, [r7, #32]
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce06:	f001 feff 	bl	800ec08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce0a:	f3ef 8211 	mrs	r2, BASEPRI
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	61fa      	str	r2, [r7, #28]
 800ce20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d302      	bcc.n	800ce38 <xQueueGenericSendFromISR+0xbc>
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2b02      	cmp	r3, #2
 800ce36:	d12f      	bne.n	800ce98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	68b9      	ldr	r1, [r7, #8]
 800ce4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce4e:	f000 f911 	bl	800d074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce5a:	d112      	bne.n	800ce82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d016      	beq.n	800ce92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	3324      	adds	r3, #36	; 0x24
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 fed1 	bl	800dc10 <xTaskRemoveFromEventList>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00e      	beq.n	800ce92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	601a      	str	r2, [r3, #0]
 800ce80:	e007      	b.n	800ce92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce86:	3301      	adds	r3, #1
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	b25a      	sxtb	r2, r3
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce92:	2301      	movs	r3, #1
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ce96:	e001      	b.n	800ce9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cea6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3740      	adds	r7, #64	; 0x40
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
	...

0800ceb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08c      	sub	sp, #48	; 0x30
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cec0:	2300      	movs	r3, #0
 800cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10a      	bne.n	800cee4 <xQueueReceive+0x30>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	623b      	str	r3, [r7, #32]
}
 800cee0:	bf00      	nop
 800cee2:	e7fe      	b.n	800cee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d103      	bne.n	800cef2 <xQueueReceive+0x3e>
 800ceea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <xQueueReceive+0x42>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e000      	b.n	800cef8 <xQueueReceive+0x44>
 800cef6:	2300      	movs	r3, #0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xQueueReceive+0x5e>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	61fb      	str	r3, [r7, #28]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf12:	f001 f83b 	bl	800df8c <xTaskGetSchedulerState>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d102      	bne.n	800cf22 <xQueueReceive+0x6e>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d101      	bne.n	800cf26 <xQueueReceive+0x72>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e000      	b.n	800cf28 <xQueueReceive+0x74>
 800cf26:	2300      	movs	r3, #0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10a      	bne.n	800cf42 <xQueueReceive+0x8e>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	61bb      	str	r3, [r7, #24]
}
 800cf3e:	bf00      	nop
 800cf40:	e7fe      	b.n	800cf40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf42:	f001 fd7f 	bl	800ea44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d01f      	beq.n	800cf92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf56:	f000 f8f7 	bl	800d148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	1e5a      	subs	r2, r3, #1
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00f      	beq.n	800cf8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6c:	3310      	adds	r3, #16
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 fe4e 	bl	800dc10 <xTaskRemoveFromEventList>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d007      	beq.n	800cf8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf7a:	4b3d      	ldr	r3, [pc, #244]	; (800d070 <xQueueReceive+0x1bc>)
 800cf7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf8a:	f001 fd8b 	bl	800eaa4 <vPortExitCritical>
				return pdPASS;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e069      	b.n	800d066 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d103      	bne.n	800cfa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf98:	f001 fd84 	bl	800eaa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	e062      	b.n	800d066 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d106      	bne.n	800cfb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 fe94 	bl	800dcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfb4:	f001 fd76 	bl	800eaa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfb8:	f000 fc06 	bl	800d7c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfbc:	f001 fd42 	bl	800ea44 <vPortEnterCritical>
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cfc6:	b25b      	sxtb	r3, r3
 800cfc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfcc:	d103      	bne.n	800cfd6 <xQueueReceive+0x122>
 800cfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfdc:	b25b      	sxtb	r3, r3
 800cfde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe2:	d103      	bne.n	800cfec <xQueueReceive+0x138>
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfec:	f001 fd5a 	bl	800eaa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cff0:	1d3a      	adds	r2, r7, #4
 800cff2:	f107 0310 	add.w	r3, r7, #16
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 fe83 	bl	800dd04 <xTaskCheckForTimeOut>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d123      	bne.n	800d04c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d006:	f000 f917 	bl	800d238 <prvIsQueueEmpty>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d017      	beq.n	800d040 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	3324      	adds	r3, #36	; 0x24
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	4611      	mov	r1, r2
 800d018:	4618      	mov	r0, r3
 800d01a:	f000 fda9 	bl	800db70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d020:	f000 f8b8 	bl	800d194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d024:	f000 fbde 	bl	800d7e4 <xTaskResumeAll>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d189      	bne.n	800cf42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d02e:	4b10      	ldr	r3, [pc, #64]	; (800d070 <xQueueReceive+0x1bc>)
 800d030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	e780      	b.n	800cf42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d042:	f000 f8a7 	bl	800d194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d046:	f000 fbcd 	bl	800d7e4 <xTaskResumeAll>
 800d04a:	e77a      	b.n	800cf42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d04c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d04e:	f000 f8a1 	bl	800d194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d052:	f000 fbc7 	bl	800d7e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d058:	f000 f8ee 	bl	800d238 <prvIsQueueEmpty>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f43f af6f 	beq.w	800cf42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d066:	4618      	mov	r0, r3
 800d068:	3730      	adds	r7, #48	; 0x30
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	e000ed04 	.word	0xe000ed04

0800d074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d080:	2300      	movs	r3, #0
 800d082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10d      	bne.n	800d0ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d14d      	bne.n	800d136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 ff92 	bl	800dfc8 <xTaskPriorityDisinherit>
 800d0a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	609a      	str	r2, [r3, #8]
 800d0ac:	e043      	b.n	800d136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d119      	bne.n	800d0e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6858      	ldr	r0, [r3, #4]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68b9      	ldr	r1, [r7, #8]
 800d0c0:	f002 fbf0 	bl	800f8a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0cc:	441a      	add	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	685a      	ldr	r2, [r3, #4]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d32b      	bcc.n	800d136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	605a      	str	r2, [r3, #4]
 800d0e6:	e026      	b.n	800d136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	68d8      	ldr	r0, [r3, #12]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	68b9      	ldr	r1, [r7, #8]
 800d0f4:	f002 fbd6 	bl	800f8a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	68da      	ldr	r2, [r3, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d100:	425b      	negs	r3, r3
 800d102:	441a      	add	r2, r3
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	68da      	ldr	r2, [r3, #12]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	429a      	cmp	r2, r3
 800d112:	d207      	bcs.n	800d124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	689a      	ldr	r2, [r3, #8]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11c:	425b      	negs	r3, r3
 800d11e:	441a      	add	r2, r3
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b02      	cmp	r3, #2
 800d128:	d105      	bne.n	800d136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	3b01      	subs	r3, #1
 800d134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	1c5a      	adds	r2, r3, #1
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d13e:	697b      	ldr	r3, [r7, #20]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d156:	2b00      	cmp	r3, #0
 800d158:	d018      	beq.n	800d18c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68da      	ldr	r2, [r3, #12]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d162:	441a      	add	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68da      	ldr	r2, [r3, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	689b      	ldr	r3, [r3, #8]
 800d170:	429a      	cmp	r2, r3
 800d172:	d303      	bcc.n	800d17c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68d9      	ldr	r1, [r3, #12]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d184:	461a      	mov	r2, r3
 800d186:	6838      	ldr	r0, [r7, #0]
 800d188:	f002 fb8c 	bl	800f8a4 <memcpy>
	}
}
 800d18c:	bf00      	nop
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d19c:	f001 fc52 	bl	800ea44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1a8:	e011      	b.n	800d1ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d012      	beq.n	800d1d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3324      	adds	r3, #36	; 0x24
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 fd2a 	bl	800dc10 <xTaskRemoveFromEventList>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d1c2:	f000 fe01 	bl	800ddc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	dce9      	bgt.n	800d1aa <prvUnlockQueue+0x16>
 800d1d6:	e000      	b.n	800d1da <prvUnlockQueue+0x46>
					break;
 800d1d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	22ff      	movs	r2, #255	; 0xff
 800d1de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d1e2:	f001 fc5f 	bl	800eaa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1e6:	f001 fc2d 	bl	800ea44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1f2:	e011      	b.n	800d218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d012      	beq.n	800d222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3310      	adds	r3, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f000 fd05 	bl	800dc10 <xTaskRemoveFromEventList>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d20c:	f000 fddc 	bl	800ddc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d210:	7bbb      	ldrb	r3, [r7, #14]
 800d212:	3b01      	subs	r3, #1
 800d214:	b2db      	uxtb	r3, r3
 800d216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dce9      	bgt.n	800d1f4 <prvUnlockQueue+0x60>
 800d220:	e000      	b.n	800d224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	22ff      	movs	r2, #255	; 0xff
 800d228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d22c:	f001 fc3a 	bl	800eaa4 <vPortExitCritical>
}
 800d230:	bf00      	nop
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d240:	f001 fc00 	bl	800ea44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d102      	bne.n	800d252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d24c:	2301      	movs	r3, #1
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	e001      	b.n	800d256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d256:	f001 fc25 	bl	800eaa4 <vPortExitCritical>

	return xReturn;
 800d25a:	68fb      	ldr	r3, [r7, #12]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d26c:	f001 fbea 	bl	800ea44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d278:	429a      	cmp	r2, r3
 800d27a:	d102      	bne.n	800d282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d27c:	2301      	movs	r3, #1
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	e001      	b.n	800d286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d282:	2300      	movs	r3, #0
 800d284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d286:	f001 fc0d 	bl	800eaa4 <vPortExitCritical>

	return xReturn;
 800d28a:	68fb      	ldr	r3, [r7, #12]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3710      	adds	r7, #16
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d294:	b480      	push	{r7}
 800d296:	b085      	sub	sp, #20
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d29e:	2300      	movs	r3, #0
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	e014      	b.n	800d2ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d2a4:	4a0f      	ldr	r2, [pc, #60]	; (800d2e4 <vQueueAddToRegistry+0x50>)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10b      	bne.n	800d2c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d2b0:	490c      	ldr	r1, [pc, #48]	; (800d2e4 <vQueueAddToRegistry+0x50>)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d2ba:	4a0a      	ldr	r2, [pc, #40]	; (800d2e4 <vQueueAddToRegistry+0x50>)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	4413      	add	r3, r2
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d2c6:	e006      	b.n	800d2d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2b07      	cmp	r3, #7
 800d2d2:	d9e7      	bls.n	800d2a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20000c78 	.word	0x20000c78

0800d2e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d2f8:	f001 fba4 	bl	800ea44 <vPortEnterCritical>
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d302:	b25b      	sxtb	r3, r3
 800d304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d308:	d103      	bne.n	800d312 <vQueueWaitForMessageRestricted+0x2a>
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d318:	b25b      	sxtb	r3, r3
 800d31a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d31e:	d103      	bne.n	800d328 <vQueueWaitForMessageRestricted+0x40>
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d328:	f001 fbbc 	bl	800eaa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d330:	2b00      	cmp	r3, #0
 800d332:	d106      	bne.n	800d342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	3324      	adds	r3, #36	; 0x24
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	68b9      	ldr	r1, [r7, #8]
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 fc3b 	bl	800dbb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d342:	6978      	ldr	r0, [r7, #20]
 800d344:	f7ff ff26 	bl	800d194 <prvUnlockQueue>
	}
 800d348:	bf00      	nop
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d350:	b580      	push	{r7, lr}
 800d352:	b08e      	sub	sp, #56	; 0x38
 800d354:	af04      	add	r7, sp, #16
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
 800d35c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	623b      	str	r3, [r7, #32]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10a      	bne.n	800d396 <xTaskCreateStatic+0x46>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	61fb      	str	r3, [r7, #28]
}
 800d392:	bf00      	nop
 800d394:	e7fe      	b.n	800d394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d396:	235c      	movs	r3, #92	; 0x5c
 800d398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	2b5c      	cmp	r3, #92	; 0x5c
 800d39e:	d00a      	beq.n	800d3b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	61bb      	str	r3, [r7, #24]
}
 800d3b2:	bf00      	nop
 800d3b4:	e7fe      	b.n	800d3b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d3b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d01e      	beq.n	800d3fc <xTaskCreateStatic+0xac>
 800d3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d01b      	beq.n	800d3fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9303      	str	r3, [sp, #12]
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	9302      	str	r3, [sp, #8]
 800d3de:	f107 0314 	add.w	r3, r7, #20
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	68b9      	ldr	r1, [r7, #8]
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f000 f850 	bl	800d494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3f6:	f000 f8dd 	bl	800d5b4 <prvAddNewTaskToReadyList>
 800d3fa:	e001      	b.n	800d400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d400:	697b      	ldr	r3, [r7, #20]
	}
 800d402:	4618      	mov	r0, r3
 800d404:	3728      	adds	r7, #40	; 0x28
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b08c      	sub	sp, #48	; 0x30
 800d40e:	af04      	add	r7, sp, #16
 800d410:	60f8      	str	r0, [r7, #12]
 800d412:	60b9      	str	r1, [r7, #8]
 800d414:	603b      	str	r3, [r7, #0]
 800d416:	4613      	mov	r3, r2
 800d418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d41a:	88fb      	ldrh	r3, [r7, #6]
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 fc32 	bl	800ec88 <pvPortMalloc>
 800d424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00e      	beq.n	800d44a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d42c:	205c      	movs	r0, #92	; 0x5c
 800d42e:	f001 fc2b 	bl	800ec88 <pvPortMalloc>
 800d432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d003      	beq.n	800d442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	631a      	str	r2, [r3, #48]	; 0x30
 800d440:	e005      	b.n	800d44e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d442:	6978      	ldr	r0, [r7, #20]
 800d444:	f001 fcec 	bl	800ee20 <vPortFree>
 800d448:	e001      	b.n	800d44e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d017      	beq.n	800d484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d45c:	88fa      	ldrh	r2, [r7, #6]
 800d45e:	2300      	movs	r3, #0
 800d460:	9303      	str	r3, [sp, #12]
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	9302      	str	r3, [sp, #8]
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f000 f80e 	bl	800d494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d478:	69f8      	ldr	r0, [r7, #28]
 800d47a:	f000 f89b 	bl	800d5b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d47e:	2301      	movs	r3, #1
 800d480:	61bb      	str	r3, [r7, #24]
 800d482:	e002      	b.n	800d48a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d48a:	69bb      	ldr	r3, [r7, #24]
	}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3720      	adds	r7, #32
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	21a5      	movs	r1, #165	; 0xa5
 800d4ae:	f002 f9c5 	bl	800f83c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	4413      	add	r3, r2
 800d4c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	f023 0307 	bic.w	r3, r3, #7
 800d4ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	617b      	str	r3, [r7, #20]
}
 800d4e8:	bf00      	nop
 800d4ea:	e7fe      	b.n	800d4ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01f      	beq.n	800d532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	61fb      	str	r3, [r7, #28]
 800d4f6:	e012      	b.n	800d51e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4f8:	68ba      	ldr	r2, [r7, #8]
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	7819      	ldrb	r1, [r3, #0]
 800d500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	4413      	add	r3, r2
 800d506:	3334      	adds	r3, #52	; 0x34
 800d508:	460a      	mov	r2, r1
 800d50a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	4413      	add	r3, r2
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d006      	beq.n	800d526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	3301      	adds	r3, #1
 800d51c:	61fb      	str	r3, [r7, #28]
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	2b0f      	cmp	r3, #15
 800d522:	d9e9      	bls.n	800d4f8 <prvInitialiseNewTask+0x64>
 800d524:	e000      	b.n	800d528 <prvInitialiseNewTask+0x94>
			{
				break;
 800d526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d530:	e003      	b.n	800d53a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	2200      	movs	r2, #0
 800d536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53c:	2b37      	cmp	r3, #55	; 0x37
 800d53e:	d901      	bls.n	800d544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d540:	2337      	movs	r3, #55	; 0x37
 800d542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d54e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d552:	2200      	movs	r2, #0
 800d554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d558:	3304      	adds	r3, #4
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff f978 	bl	800c850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	3318      	adds	r3, #24
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff f973 	bl	800c850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d56e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d57e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	2200      	movs	r2, #0
 800d584:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d588:	2200      	movs	r2, #0
 800d58a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	68f9      	ldr	r1, [r7, #12]
 800d592:	69b8      	ldr	r0, [r7, #24]
 800d594:	f001 f928 	bl	800e7e8 <pxPortInitialiseStack>
 800d598:	4602      	mov	r2, r0
 800d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5aa:	bf00      	nop
 800d5ac:	3720      	adds	r7, #32
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d5bc:	f001 fa42 	bl	800ea44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d5c0:	4b2d      	ldr	r3, [pc, #180]	; (800d678 <prvAddNewTaskToReadyList+0xc4>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	4a2c      	ldr	r2, [pc, #176]	; (800d678 <prvAddNewTaskToReadyList+0xc4>)
 800d5c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5ca:	4b2c      	ldr	r3, [pc, #176]	; (800d67c <prvAddNewTaskToReadyList+0xc8>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d109      	bne.n	800d5e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d5d2:	4a2a      	ldr	r2, [pc, #168]	; (800d67c <prvAddNewTaskToReadyList+0xc8>)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5d8:	4b27      	ldr	r3, [pc, #156]	; (800d678 <prvAddNewTaskToReadyList+0xc4>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d110      	bne.n	800d602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5e0:	f000 fc16 	bl	800de10 <prvInitialiseTaskLists>
 800d5e4:	e00d      	b.n	800d602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5e6:	4b26      	ldr	r3, [pc, #152]	; (800d680 <prvAddNewTaskToReadyList+0xcc>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d109      	bne.n	800d602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5ee:	4b23      	ldr	r3, [pc, #140]	; (800d67c <prvAddNewTaskToReadyList+0xc8>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d802      	bhi.n	800d602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5fc:	4a1f      	ldr	r2, [pc, #124]	; (800d67c <prvAddNewTaskToReadyList+0xc8>)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d602:	4b20      	ldr	r3, [pc, #128]	; (800d684 <prvAddNewTaskToReadyList+0xd0>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3301      	adds	r3, #1
 800d608:	4a1e      	ldr	r2, [pc, #120]	; (800d684 <prvAddNewTaskToReadyList+0xd0>)
 800d60a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d60c:	4b1d      	ldr	r3, [pc, #116]	; (800d684 <prvAddNewTaskToReadyList+0xd0>)
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d618:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <prvAddNewTaskToReadyList+0xd4>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d903      	bls.n	800d628 <prvAddNewTaskToReadyList+0x74>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d624:	4a18      	ldr	r2, [pc, #96]	; (800d688 <prvAddNewTaskToReadyList+0xd4>)
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d62c:	4613      	mov	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4a15      	ldr	r2, [pc, #84]	; (800d68c <prvAddNewTaskToReadyList+0xd8>)
 800d636:	441a      	add	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3304      	adds	r3, #4
 800d63c:	4619      	mov	r1, r3
 800d63e:	4610      	mov	r0, r2
 800d640:	f7ff f913 	bl	800c86a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d644:	f001 fa2e 	bl	800eaa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d648:	4b0d      	ldr	r3, [pc, #52]	; (800d680 <prvAddNewTaskToReadyList+0xcc>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00e      	beq.n	800d66e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d650:	4b0a      	ldr	r3, [pc, #40]	; (800d67c <prvAddNewTaskToReadyList+0xc8>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d207      	bcs.n	800d66e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d65e:	4b0c      	ldr	r3, [pc, #48]	; (800d690 <prvAddNewTaskToReadyList+0xdc>)
 800d660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	2000118c 	.word	0x2000118c
 800d67c:	20000cb8 	.word	0x20000cb8
 800d680:	20001198 	.word	0x20001198
 800d684:	200011a8 	.word	0x200011a8
 800d688:	20001194 	.word	0x20001194
 800d68c:	20000cbc 	.word	0x20000cbc
 800d690:	e000ed04 	.word	0xe000ed04

0800d694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d017      	beq.n	800d6d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d6a6:	4b13      	ldr	r3, [pc, #76]	; (800d6f4 <vTaskDelay+0x60>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00a      	beq.n	800d6c4 <vTaskDelay+0x30>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	60bb      	str	r3, [r7, #8]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d6c4:	f000 f880 	bl	800d7c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fcea 	bl	800e0a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6d0:	f000 f888 	bl	800d7e4 <xTaskResumeAll>
 800d6d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d107      	bne.n	800d6ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d6dc:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <vTaskDelay+0x64>)
 800d6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6ec:	bf00      	nop
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	200011b4 	.word	0x200011b4
 800d6f8:	e000ed04 	.word	0xe000ed04

0800d6fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08a      	sub	sp, #40	; 0x28
 800d700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d702:	2300      	movs	r3, #0
 800d704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d706:	2300      	movs	r3, #0
 800d708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d70a:	463a      	mov	r2, r7
 800d70c:	1d39      	adds	r1, r7, #4
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	4618      	mov	r0, r3
 800d714:	f7ff f848 	bl	800c7a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	9202      	str	r2, [sp, #8]
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	2300      	movs	r3, #0
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	2300      	movs	r3, #0
 800d728:	460a      	mov	r2, r1
 800d72a:	4921      	ldr	r1, [pc, #132]	; (800d7b0 <vTaskStartScheduler+0xb4>)
 800d72c:	4821      	ldr	r0, [pc, #132]	; (800d7b4 <vTaskStartScheduler+0xb8>)
 800d72e:	f7ff fe0f 	bl	800d350 <xTaskCreateStatic>
 800d732:	4603      	mov	r3, r0
 800d734:	4a20      	ldr	r2, [pc, #128]	; (800d7b8 <vTaskStartScheduler+0xbc>)
 800d736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d738:	4b1f      	ldr	r3, [pc, #124]	; (800d7b8 <vTaskStartScheduler+0xbc>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d740:	2301      	movs	r3, #1
 800d742:	617b      	str	r3, [r7, #20]
 800d744:	e001      	b.n	800d74a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d746:	2300      	movs	r3, #0
 800d748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d102      	bne.n	800d756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d750:	f000 fcfc 	bl	800e14c <xTimerCreateTimerTask>
 800d754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d116      	bne.n	800d78a <vTaskStartScheduler+0x8e>
	__asm volatile
 800d75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d760:	f383 8811 	msr	BASEPRI, r3
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	613b      	str	r3, [r7, #16]
}
 800d76e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d770:	4b12      	ldr	r3, [pc, #72]	; (800d7bc <vTaskStartScheduler+0xc0>)
 800d772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d778:	4b11      	ldr	r3, [pc, #68]	; (800d7c0 <vTaskStartScheduler+0xc4>)
 800d77a:	2201      	movs	r2, #1
 800d77c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d77e:	4b11      	ldr	r3, [pc, #68]	; (800d7c4 <vTaskStartScheduler+0xc8>)
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d784:	f001 f8bc 	bl	800e900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d788:	e00e      	b.n	800d7a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d790:	d10a      	bne.n	800d7a8 <vTaskStartScheduler+0xac>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	60fb      	str	r3, [r7, #12]
}
 800d7a4:	bf00      	nop
 800d7a6:	e7fe      	b.n	800d7a6 <vTaskStartScheduler+0xaa>
}
 800d7a8:	bf00      	nop
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	08010204 	.word	0x08010204
 800d7b4:	0800dde1 	.word	0x0800dde1
 800d7b8:	200011b0 	.word	0x200011b0
 800d7bc:	200011ac 	.word	0x200011ac
 800d7c0:	20001198 	.word	0x20001198
 800d7c4:	20001190 	.word	0x20001190

0800d7c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7cc:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <vTaskSuspendAll+0x18>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	4a03      	ldr	r2, [pc, #12]	; (800d7e0 <vTaskSuspendAll+0x18>)
 800d7d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7d6:	bf00      	nop
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	200011b4 	.word	0x200011b4

0800d7e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7f2:	4b42      	ldr	r3, [pc, #264]	; (800d8fc <xTaskResumeAll+0x118>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10a      	bne.n	800d810 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	603b      	str	r3, [r7, #0]
}
 800d80c:	bf00      	nop
 800d80e:	e7fe      	b.n	800d80e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d810:	f001 f918 	bl	800ea44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d814:	4b39      	ldr	r3, [pc, #228]	; (800d8fc <xTaskResumeAll+0x118>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3b01      	subs	r3, #1
 800d81a:	4a38      	ldr	r2, [pc, #224]	; (800d8fc <xTaskResumeAll+0x118>)
 800d81c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d81e:	4b37      	ldr	r3, [pc, #220]	; (800d8fc <xTaskResumeAll+0x118>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d162      	bne.n	800d8ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d826:	4b36      	ldr	r3, [pc, #216]	; (800d900 <xTaskResumeAll+0x11c>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d05e      	beq.n	800d8ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d82e:	e02f      	b.n	800d890 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d830:	4b34      	ldr	r3, [pc, #208]	; (800d904 <xTaskResumeAll+0x120>)
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	3318      	adds	r3, #24
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff f871 	bl	800c924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3304      	adds	r3, #4
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff f86c 	bl	800c924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	4b2d      	ldr	r3, [pc, #180]	; (800d908 <xTaskResumeAll+0x124>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d903      	bls.n	800d860 <xTaskResumeAll+0x7c>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	4a2a      	ldr	r2, [pc, #168]	; (800d908 <xTaskResumeAll+0x124>)
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d864:	4613      	mov	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4a27      	ldr	r2, [pc, #156]	; (800d90c <xTaskResumeAll+0x128>)
 800d86e:	441a      	add	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	3304      	adds	r3, #4
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f7fe fff7 	bl	800c86a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d880:	4b23      	ldr	r3, [pc, #140]	; (800d910 <xTaskResumeAll+0x12c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d886:	429a      	cmp	r2, r3
 800d888:	d302      	bcc.n	800d890 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d88a:	4b22      	ldr	r3, [pc, #136]	; (800d914 <xTaskResumeAll+0x130>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d890:	4b1c      	ldr	r3, [pc, #112]	; (800d904 <xTaskResumeAll+0x120>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1cb      	bne.n	800d830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d89e:	f000 fb55 	bl	800df4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d8a2:	4b1d      	ldr	r3, [pc, #116]	; (800d918 <xTaskResumeAll+0x134>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d010      	beq.n	800d8d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8ae:	f000 f847 	bl	800d940 <xTaskIncrementTick>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d8b8:	4b16      	ldr	r3, [pc, #88]	; (800d914 <xTaskResumeAll+0x130>)
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f1      	bne.n	800d8ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <xTaskResumeAll+0x134>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8d0:	4b10      	ldr	r3, [pc, #64]	; (800d914 <xTaskResumeAll+0x130>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d009      	beq.n	800d8ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8dc:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <xTaskResumeAll+0x138>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8ec:	f001 f8da 	bl	800eaa4 <vPortExitCritical>

	return xAlreadyYielded;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	200011b4 	.word	0x200011b4
 800d900:	2000118c 	.word	0x2000118c
 800d904:	2000114c 	.word	0x2000114c
 800d908:	20001194 	.word	0x20001194
 800d90c:	20000cbc 	.word	0x20000cbc
 800d910:	20000cb8 	.word	0x20000cb8
 800d914:	200011a0 	.word	0x200011a0
 800d918:	2000119c 	.word	0x2000119c
 800d91c:	e000ed04 	.word	0xe000ed04

0800d920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d926:	4b05      	ldr	r3, [pc, #20]	; (800d93c <xTaskGetTickCount+0x1c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d92c:	687b      	ldr	r3, [r7, #4]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	20001190 	.word	0x20001190

0800d940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d94a:	4b4f      	ldr	r3, [pc, #316]	; (800da88 <xTaskIncrementTick+0x148>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f040 808f 	bne.w	800da72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d954:	4b4d      	ldr	r3, [pc, #308]	; (800da8c <xTaskIncrementTick+0x14c>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d95c:	4a4b      	ldr	r2, [pc, #300]	; (800da8c <xTaskIncrementTick+0x14c>)
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d120      	bne.n	800d9aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d968:	4b49      	ldr	r3, [pc, #292]	; (800da90 <xTaskIncrementTick+0x150>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <xTaskIncrementTick+0x48>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	603b      	str	r3, [r7, #0]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <xTaskIncrementTick+0x46>
 800d988:	4b41      	ldr	r3, [pc, #260]	; (800da90 <xTaskIncrementTick+0x150>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	60fb      	str	r3, [r7, #12]
 800d98e:	4b41      	ldr	r3, [pc, #260]	; (800da94 <xTaskIncrementTick+0x154>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a3f      	ldr	r2, [pc, #252]	; (800da90 <xTaskIncrementTick+0x150>)
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	4a3f      	ldr	r2, [pc, #252]	; (800da94 <xTaskIncrementTick+0x154>)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	4b3e      	ldr	r3, [pc, #248]	; (800da98 <xTaskIncrementTick+0x158>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	4a3d      	ldr	r2, [pc, #244]	; (800da98 <xTaskIncrementTick+0x158>)
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	f000 fad1 	bl	800df4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9aa:	4b3c      	ldr	r3, [pc, #240]	; (800da9c <xTaskIncrementTick+0x15c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d349      	bcc.n	800da48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9b4:	4b36      	ldr	r3, [pc, #216]	; (800da90 <xTaskIncrementTick+0x150>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d104      	bne.n	800d9c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9be:	4b37      	ldr	r3, [pc, #220]	; (800da9c <xTaskIncrementTick+0x15c>)
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9c4:	601a      	str	r2, [r3, #0]
					break;
 800d9c6:	e03f      	b.n	800da48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9c8:	4b31      	ldr	r3, [pc, #196]	; (800da90 <xTaskIncrementTick+0x150>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d203      	bcs.n	800d9e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9e0:	4a2e      	ldr	r2, [pc, #184]	; (800da9c <xTaskIncrementTick+0x15c>)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9e6:	e02f      	b.n	800da48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe ff99 	bl	800c924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d004      	beq.n	800da04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	3318      	adds	r3, #24
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe ff90 	bl	800c924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da08:	4b25      	ldr	r3, [pc, #148]	; (800daa0 <xTaskIncrementTick+0x160>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d903      	bls.n	800da18 <xTaskIncrementTick+0xd8>
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	4a22      	ldr	r2, [pc, #136]	; (800daa0 <xTaskIncrementTick+0x160>)
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1c:	4613      	mov	r3, r2
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	4413      	add	r3, r2
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <xTaskIncrementTick+0x164>)
 800da26:	441a      	add	r2, r3
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	3304      	adds	r3, #4
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fe ff1b 	bl	800c86a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da38:	4b1b      	ldr	r3, [pc, #108]	; (800daa8 <xTaskIncrementTick+0x168>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3e:	429a      	cmp	r2, r3
 800da40:	d3b8      	bcc.n	800d9b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da42:	2301      	movs	r3, #1
 800da44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da46:	e7b5      	b.n	800d9b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da48:	4b17      	ldr	r3, [pc, #92]	; (800daa8 <xTaskIncrementTick+0x168>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	4915      	ldr	r1, [pc, #84]	; (800daa4 <xTaskIncrementTick+0x164>)
 800da50:	4613      	mov	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4413      	add	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	440b      	add	r3, r1
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d901      	bls.n	800da64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da60:	2301      	movs	r3, #1
 800da62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da64:	4b11      	ldr	r3, [pc, #68]	; (800daac <xTaskIncrementTick+0x16c>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d007      	beq.n	800da7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800da6c:	2301      	movs	r3, #1
 800da6e:	617b      	str	r3, [r7, #20]
 800da70:	e004      	b.n	800da7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da72:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <xTaskIncrementTick+0x170>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	3301      	adds	r3, #1
 800da78:	4a0d      	ldr	r2, [pc, #52]	; (800dab0 <xTaskIncrementTick+0x170>)
 800da7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da7c:	697b      	ldr	r3, [r7, #20]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	200011b4 	.word	0x200011b4
 800da8c:	20001190 	.word	0x20001190
 800da90:	20001144 	.word	0x20001144
 800da94:	20001148 	.word	0x20001148
 800da98:	200011a4 	.word	0x200011a4
 800da9c:	200011ac 	.word	0x200011ac
 800daa0:	20001194 	.word	0x20001194
 800daa4:	20000cbc 	.word	0x20000cbc
 800daa8:	20000cb8 	.word	0x20000cb8
 800daac:	200011a0 	.word	0x200011a0
 800dab0:	2000119c 	.word	0x2000119c

0800dab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800daba:	4b28      	ldr	r3, [pc, #160]	; (800db5c <vTaskSwitchContext+0xa8>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dac2:	4b27      	ldr	r3, [pc, #156]	; (800db60 <vTaskSwitchContext+0xac>)
 800dac4:	2201      	movs	r2, #1
 800dac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dac8:	e041      	b.n	800db4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800daca:	4b25      	ldr	r3, [pc, #148]	; (800db60 <vTaskSwitchContext+0xac>)
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dad0:	4b24      	ldr	r3, [pc, #144]	; (800db64 <vTaskSwitchContext+0xb0>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	60fb      	str	r3, [r7, #12]
 800dad6:	e010      	b.n	800dafa <vTaskSwitchContext+0x46>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10a      	bne.n	800daf4 <vTaskSwitchContext+0x40>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	607b      	str	r3, [r7, #4]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <vTaskSwitchContext+0x3e>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3b01      	subs	r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
 800dafa:	491b      	ldr	r1, [pc, #108]	; (800db68 <vTaskSwitchContext+0xb4>)
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	4613      	mov	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	440b      	add	r3, r1
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d0e4      	beq.n	800dad8 <vTaskSwitchContext+0x24>
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	4613      	mov	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4413      	add	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	4a13      	ldr	r2, [pc, #76]	; (800db68 <vTaskSwitchContext+0xb4>)
 800db1a:	4413      	add	r3, r2
 800db1c:	60bb      	str	r3, [r7, #8]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	605a      	str	r2, [r3, #4]
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	3308      	adds	r3, #8
 800db30:	429a      	cmp	r2, r3
 800db32:	d104      	bne.n	800db3e <vTaskSwitchContext+0x8a>
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	605a      	str	r2, [r3, #4]
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	4a09      	ldr	r2, [pc, #36]	; (800db6c <vTaskSwitchContext+0xb8>)
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	4a06      	ldr	r2, [pc, #24]	; (800db64 <vTaskSwitchContext+0xb0>)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6013      	str	r3, [r2, #0]
}
 800db4e:	bf00      	nop
 800db50:	3714      	adds	r7, #20
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	200011b4 	.word	0x200011b4
 800db60:	200011a0 	.word	0x200011a0
 800db64:	20001194 	.word	0x20001194
 800db68:	20000cbc 	.word	0x20000cbc
 800db6c:	20000cb8 	.word	0x20000cb8

0800db70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10a      	bne.n	800db96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	60fb      	str	r3, [r7, #12]
}
 800db92:	bf00      	nop
 800db94:	e7fe      	b.n	800db94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db96:	4b07      	ldr	r3, [pc, #28]	; (800dbb4 <vTaskPlaceOnEventList+0x44>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	3318      	adds	r3, #24
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7fe fe87 	bl	800c8b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dba4:	2101      	movs	r1, #1
 800dba6:	6838      	ldr	r0, [r7, #0]
 800dba8:	f000 fa7c 	bl	800e0a4 <prvAddCurrentTaskToDelayedList>
}
 800dbac:	bf00      	nop
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20000cb8 	.word	0x20000cb8

0800dbb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10a      	bne.n	800dbe0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	617b      	str	r3, [r7, #20]
}
 800dbdc:	bf00      	nop
 800dbde:	e7fe      	b.n	800dbde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbe0:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <vTaskPlaceOnEventListRestricted+0x54>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3318      	adds	r3, #24
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7fe fe3e 	bl	800c86a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d002      	beq.n	800dbfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dbf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dbfa:	6879      	ldr	r1, [r7, #4]
 800dbfc:	68b8      	ldr	r0, [r7, #8]
 800dbfe:	f000 fa51 	bl	800e0a4 <prvAddCurrentTaskToDelayedList>
	}
 800dc02:	bf00      	nop
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	20000cb8 	.word	0x20000cb8

0800dc10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10a      	bne.n	800dc3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	60fb      	str	r3, [r7, #12]
}
 800dc38:	bf00      	nop
 800dc3a:	e7fe      	b.n	800dc3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	3318      	adds	r3, #24
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fe6f 	bl	800c924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc46:	4b1e      	ldr	r3, [pc, #120]	; (800dcc0 <xTaskRemoveFromEventList+0xb0>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d11d      	bne.n	800dc8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	3304      	adds	r3, #4
 800dc52:	4618      	mov	r0, r3
 800dc54:	f7fe fe66 	bl	800c924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc5c:	4b19      	ldr	r3, [pc, #100]	; (800dcc4 <xTaskRemoveFromEventList+0xb4>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d903      	bls.n	800dc6c <xTaskRemoveFromEventList+0x5c>
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc68:	4a16      	ldr	r2, [pc, #88]	; (800dcc4 <xTaskRemoveFromEventList+0xb4>)
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc70:	4613      	mov	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4413      	add	r3, r2
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	4a13      	ldr	r2, [pc, #76]	; (800dcc8 <xTaskRemoveFromEventList+0xb8>)
 800dc7a:	441a      	add	r2, r3
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	3304      	adds	r3, #4
 800dc80:	4619      	mov	r1, r3
 800dc82:	4610      	mov	r0, r2
 800dc84:	f7fe fdf1 	bl	800c86a <vListInsertEnd>
 800dc88:	e005      	b.n	800dc96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	3318      	adds	r3, #24
 800dc8e:	4619      	mov	r1, r3
 800dc90:	480e      	ldr	r0, [pc, #56]	; (800dccc <xTaskRemoveFromEventList+0xbc>)
 800dc92:	f7fe fdea 	bl	800c86a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9a:	4b0d      	ldr	r3, [pc, #52]	; (800dcd0 <xTaskRemoveFromEventList+0xc0>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d905      	bls.n	800dcb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dca4:	2301      	movs	r3, #1
 800dca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dca8:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <xTaskRemoveFromEventList+0xc4>)
 800dcaa:	2201      	movs	r2, #1
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	e001      	b.n	800dcb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dcb4:	697b      	ldr	r3, [r7, #20]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200011b4 	.word	0x200011b4
 800dcc4:	20001194 	.word	0x20001194
 800dcc8:	20000cbc 	.word	0x20000cbc
 800dccc:	2000114c 	.word	0x2000114c
 800dcd0:	20000cb8 	.word	0x20000cb8
 800dcd4:	200011a0 	.word	0x200011a0

0800dcd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dce0:	4b06      	ldr	r3, [pc, #24]	; (800dcfc <vTaskInternalSetTimeOutState+0x24>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dce8:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <vTaskInternalSetTimeOutState+0x28>)
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	605a      	str	r2, [r3, #4]
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr
 800dcfc:	200011a4 	.word	0x200011a4
 800dd00:	20001190 	.word	0x20001190

0800dd04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10a      	bne.n	800dd2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	613b      	str	r3, [r7, #16]
}
 800dd26:	bf00      	nop
 800dd28:	e7fe      	b.n	800dd28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	60fb      	str	r3, [r7, #12]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd46:	f000 fe7d 	bl	800ea44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd4a:	4b1d      	ldr	r3, [pc, #116]	; (800ddc0 <xTaskCheckForTimeOut+0xbc>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	1ad3      	subs	r3, r2, r3
 800dd58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd62:	d102      	bne.n	800dd6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd64:	2300      	movs	r3, #0
 800dd66:	61fb      	str	r3, [r7, #28]
 800dd68:	e023      	b.n	800ddb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	4b15      	ldr	r3, [pc, #84]	; (800ddc4 <xTaskCheckForTimeOut+0xc0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d007      	beq.n	800dd86 <xTaskCheckForTimeOut+0x82>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	69ba      	ldr	r2, [r7, #24]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d302      	bcc.n	800dd86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd80:	2301      	movs	r3, #1
 800dd82:	61fb      	str	r3, [r7, #28]
 800dd84:	e015      	b.n	800ddb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d20b      	bcs.n	800dda8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	1ad2      	subs	r2, r2, r3
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff ff9b 	bl	800dcd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dda2:	2300      	movs	r3, #0
 800dda4:	61fb      	str	r3, [r7, #28]
 800dda6:	e004      	b.n	800ddb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ddb2:	f000 fe77 	bl	800eaa4 <vPortExitCritical>

	return xReturn;
 800ddb6:	69fb      	ldr	r3, [r7, #28]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3720      	adds	r7, #32
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20001190 	.word	0x20001190
 800ddc4:	200011a4 	.word	0x200011a4

0800ddc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddcc:	4b03      	ldr	r3, [pc, #12]	; (800dddc <vTaskMissedYield+0x14>)
 800ddce:	2201      	movs	r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	200011a0 	.word	0x200011a0

0800dde0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dde8:	f000 f852 	bl	800de90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ddec:	4b06      	ldr	r3, [pc, #24]	; (800de08 <prvIdleTask+0x28>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d9f9      	bls.n	800dde8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ddf4:	4b05      	ldr	r3, [pc, #20]	; (800de0c <prvIdleTask+0x2c>)
 800ddf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	f3bf 8f4f 	dsb	sy
 800de00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de04:	e7f0      	b.n	800dde8 <prvIdleTask+0x8>
 800de06:	bf00      	nop
 800de08:	20000cbc 	.word	0x20000cbc
 800de0c:	e000ed04 	.word	0xe000ed04

0800de10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de16:	2300      	movs	r3, #0
 800de18:	607b      	str	r3, [r7, #4]
 800de1a:	e00c      	b.n	800de36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	4613      	mov	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4a12      	ldr	r2, [pc, #72]	; (800de70 <prvInitialiseTaskLists+0x60>)
 800de28:	4413      	add	r3, r2
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe fcf0 	bl	800c810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3301      	adds	r3, #1
 800de34:	607b      	str	r3, [r7, #4]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b37      	cmp	r3, #55	; 0x37
 800de3a:	d9ef      	bls.n	800de1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de3c:	480d      	ldr	r0, [pc, #52]	; (800de74 <prvInitialiseTaskLists+0x64>)
 800de3e:	f7fe fce7 	bl	800c810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de42:	480d      	ldr	r0, [pc, #52]	; (800de78 <prvInitialiseTaskLists+0x68>)
 800de44:	f7fe fce4 	bl	800c810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de48:	480c      	ldr	r0, [pc, #48]	; (800de7c <prvInitialiseTaskLists+0x6c>)
 800de4a:	f7fe fce1 	bl	800c810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de4e:	480c      	ldr	r0, [pc, #48]	; (800de80 <prvInitialiseTaskLists+0x70>)
 800de50:	f7fe fcde 	bl	800c810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de54:	480b      	ldr	r0, [pc, #44]	; (800de84 <prvInitialiseTaskLists+0x74>)
 800de56:	f7fe fcdb 	bl	800c810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de5a:	4b0b      	ldr	r3, [pc, #44]	; (800de88 <prvInitialiseTaskLists+0x78>)
 800de5c:	4a05      	ldr	r2, [pc, #20]	; (800de74 <prvInitialiseTaskLists+0x64>)
 800de5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de60:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <prvInitialiseTaskLists+0x7c>)
 800de62:	4a05      	ldr	r2, [pc, #20]	; (800de78 <prvInitialiseTaskLists+0x68>)
 800de64:	601a      	str	r2, [r3, #0]
}
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20000cbc 	.word	0x20000cbc
 800de74:	2000111c 	.word	0x2000111c
 800de78:	20001130 	.word	0x20001130
 800de7c:	2000114c 	.word	0x2000114c
 800de80:	20001160 	.word	0x20001160
 800de84:	20001178 	.word	0x20001178
 800de88:	20001144 	.word	0x20001144
 800de8c:	20001148 	.word	0x20001148

0800de90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de96:	e019      	b.n	800decc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de98:	f000 fdd4 	bl	800ea44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de9c:	4b10      	ldr	r3, [pc, #64]	; (800dee0 <prvCheckTasksWaitingTermination+0x50>)
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fe fd3b 	bl	800c924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800deae:	4b0d      	ldr	r3, [pc, #52]	; (800dee4 <prvCheckTasksWaitingTermination+0x54>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	3b01      	subs	r3, #1
 800deb4:	4a0b      	ldr	r2, [pc, #44]	; (800dee4 <prvCheckTasksWaitingTermination+0x54>)
 800deb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800deb8:	4b0b      	ldr	r3, [pc, #44]	; (800dee8 <prvCheckTasksWaitingTermination+0x58>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3b01      	subs	r3, #1
 800debe:	4a0a      	ldr	r2, [pc, #40]	; (800dee8 <prvCheckTasksWaitingTermination+0x58>)
 800dec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dec2:	f000 fdef 	bl	800eaa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f810 	bl	800deec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800decc:	4b06      	ldr	r3, [pc, #24]	; (800dee8 <prvCheckTasksWaitingTermination+0x58>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e1      	bne.n	800de98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	20001160 	.word	0x20001160
 800dee4:	2000118c 	.word	0x2000118c
 800dee8:	20001174 	.word	0x20001174

0800deec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800defa:	2b00      	cmp	r3, #0
 800defc:	d108      	bne.n	800df10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df02:	4618      	mov	r0, r3
 800df04:	f000 ff8c 	bl	800ee20 <vPortFree>
				vPortFree( pxTCB );
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 ff89 	bl	800ee20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df0e:	e018      	b.n	800df42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800df16:	2b01      	cmp	r3, #1
 800df18:	d103      	bne.n	800df22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 ff80 	bl	800ee20 <vPortFree>
	}
 800df20:	e00f      	b.n	800df42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d00a      	beq.n	800df42 <prvDeleteTCB+0x56>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	60fb      	str	r3, [r7, #12]
}
 800df3e:	bf00      	nop
 800df40:	e7fe      	b.n	800df40 <prvDeleteTCB+0x54>
	}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df52:	4b0c      	ldr	r3, [pc, #48]	; (800df84 <prvResetNextTaskUnblockTime+0x38>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d104      	bne.n	800df66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df5c:	4b0a      	ldr	r3, [pc, #40]	; (800df88 <prvResetNextTaskUnblockTime+0x3c>)
 800df5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df64:	e008      	b.n	800df78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df66:	4b07      	ldr	r3, [pc, #28]	; (800df84 <prvResetNextTaskUnblockTime+0x38>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	68db      	ldr	r3, [r3, #12]
 800df6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	4a04      	ldr	r2, [pc, #16]	; (800df88 <prvResetNextTaskUnblockTime+0x3c>)
 800df76:	6013      	str	r3, [r2, #0]
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr
 800df84:	20001144 	.word	0x20001144
 800df88:	200011ac 	.word	0x200011ac

0800df8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df92:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <xTaskGetSchedulerState+0x34>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d102      	bne.n	800dfa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df9a:	2301      	movs	r3, #1
 800df9c:	607b      	str	r3, [r7, #4]
 800df9e:	e008      	b.n	800dfb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dfa0:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <xTaskGetSchedulerState+0x38>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d102      	bne.n	800dfae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	607b      	str	r3, [r7, #4]
 800dfac:	e001      	b.n	800dfb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dfb2:	687b      	ldr	r3, [r7, #4]
	}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr
 800dfc0:	20001198 	.word	0x20001198
 800dfc4:	200011b4 	.word	0x200011b4

0800dfc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d056      	beq.n	800e08c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dfde:	4b2e      	ldr	r3, [pc, #184]	; (800e098 <xTaskPriorityDisinherit+0xd0>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	693a      	ldr	r2, [r7, #16]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d00a      	beq.n	800dffe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	60fb      	str	r3, [r7, #12]
}
 800dffa:	bf00      	nop
 800dffc:	e7fe      	b.n	800dffc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10a      	bne.n	800e01c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	60bb      	str	r3, [r7, #8]
}
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e020:	1e5a      	subs	r2, r3, #1
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e02e:	429a      	cmp	r2, r3
 800e030:	d02c      	beq.n	800e08c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e036:	2b00      	cmp	r3, #0
 800e038:	d128      	bne.n	800e08c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	3304      	adds	r3, #4
 800e03e:	4618      	mov	r0, r3
 800e040:	f7fe fc70 	bl	800c924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e050:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05c:	4b0f      	ldr	r3, [pc, #60]	; (800e09c <xTaskPriorityDisinherit+0xd4>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d903      	bls.n	800e06c <xTaskPriorityDisinherit+0xa4>
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	4a0c      	ldr	r2, [pc, #48]	; (800e09c <xTaskPriorityDisinherit+0xd4>)
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4a09      	ldr	r2, [pc, #36]	; (800e0a0 <xTaskPriorityDisinherit+0xd8>)
 800e07a:	441a      	add	r2, r3
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	3304      	adds	r3, #4
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f7fe fbf1 	bl	800c86a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e088:	2301      	movs	r3, #1
 800e08a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e08c:	697b      	ldr	r3, [r7, #20]
	}
 800e08e:	4618      	mov	r0, r3
 800e090:	3718      	adds	r7, #24
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20000cb8 	.word	0x20000cb8
 800e09c:	20001194 	.word	0x20001194
 800e0a0:	20000cbc 	.word	0x20000cbc

0800e0a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e0ae:	4b21      	ldr	r3, [pc, #132]	; (800e134 <prvAddCurrentTaskToDelayedList+0x90>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0b4:	4b20      	ldr	r3, [pc, #128]	; (800e138 <prvAddCurrentTaskToDelayedList+0x94>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fc32 	bl	800c924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0c6:	d10a      	bne.n	800e0de <prvAddCurrentTaskToDelayedList+0x3a>
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d007      	beq.n	800e0de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0ce:	4b1a      	ldr	r3, [pc, #104]	; (800e138 <prvAddCurrentTaskToDelayedList+0x94>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4819      	ldr	r0, [pc, #100]	; (800e13c <prvAddCurrentTaskToDelayedList+0x98>)
 800e0d8:	f7fe fbc7 	bl	800c86a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e0dc:	e026      	b.n	800e12c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e0de:	68fa      	ldr	r2, [r7, #12]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e0e6:	4b14      	ldr	r3, [pc, #80]	; (800e138 <prvAddCurrentTaskToDelayedList+0x94>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d209      	bcs.n	800e10a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0f6:	4b12      	ldr	r3, [pc, #72]	; (800e140 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	4b0f      	ldr	r3, [pc, #60]	; (800e138 <prvAddCurrentTaskToDelayedList+0x94>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	3304      	adds	r3, #4
 800e100:	4619      	mov	r1, r3
 800e102:	4610      	mov	r0, r2
 800e104:	f7fe fbd5 	bl	800c8b2 <vListInsert>
}
 800e108:	e010      	b.n	800e12c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e10a:	4b0e      	ldr	r3, [pc, #56]	; (800e144 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	4b0a      	ldr	r3, [pc, #40]	; (800e138 <prvAddCurrentTaskToDelayedList+0x94>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	3304      	adds	r3, #4
 800e114:	4619      	mov	r1, r3
 800e116:	4610      	mov	r0, r2
 800e118:	f7fe fbcb 	bl	800c8b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e11c:	4b0a      	ldr	r3, [pc, #40]	; (800e148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	429a      	cmp	r2, r3
 800e124:	d202      	bcs.n	800e12c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e126:	4a08      	ldr	r2, [pc, #32]	; (800e148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	6013      	str	r3, [r2, #0]
}
 800e12c:	bf00      	nop
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	20001190 	.word	0x20001190
 800e138:	20000cb8 	.word	0x20000cb8
 800e13c:	20001178 	.word	0x20001178
 800e140:	20001148 	.word	0x20001148
 800e144:	20001144 	.word	0x20001144
 800e148:	200011ac 	.word	0x200011ac

0800e14c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08a      	sub	sp, #40	; 0x28
 800e150:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e152:	2300      	movs	r3, #0
 800e154:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e156:	f000 fb07 	bl	800e768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e15a:	4b1c      	ldr	r3, [pc, #112]	; (800e1cc <xTimerCreateTimerTask+0x80>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d021      	beq.n	800e1a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e166:	2300      	movs	r3, #0
 800e168:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e16a:	1d3a      	adds	r2, r7, #4
 800e16c:	f107 0108 	add.w	r1, r7, #8
 800e170:	f107 030c 	add.w	r3, r7, #12
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe fb31 	bl	800c7dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e17a:	6879      	ldr	r1, [r7, #4]
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	68fa      	ldr	r2, [r7, #12]
 800e180:	9202      	str	r2, [sp, #8]
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	2302      	movs	r3, #2
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	2300      	movs	r3, #0
 800e18a:	460a      	mov	r2, r1
 800e18c:	4910      	ldr	r1, [pc, #64]	; (800e1d0 <xTimerCreateTimerTask+0x84>)
 800e18e:	4811      	ldr	r0, [pc, #68]	; (800e1d4 <xTimerCreateTimerTask+0x88>)
 800e190:	f7ff f8de 	bl	800d350 <xTaskCreateStatic>
 800e194:	4603      	mov	r3, r0
 800e196:	4a10      	ldr	r2, [pc, #64]	; (800e1d8 <xTimerCreateTimerTask+0x8c>)
 800e198:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e19a:	4b0f      	ldr	r3, [pc, #60]	; (800e1d8 <xTimerCreateTimerTask+0x8c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10a      	bne.n	800e1c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	613b      	str	r3, [r7, #16]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e1c2:	697b      	ldr	r3, [r7, #20]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3718      	adds	r7, #24
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	200011e8 	.word	0x200011e8
 800e1d0:	0801020c 	.word	0x0801020c
 800e1d4:	0800e311 	.word	0x0800e311
 800e1d8:	200011ec 	.word	0x200011ec

0800e1dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	; 0x28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10a      	bne.n	800e20a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f8:	f383 8811 	msr	BASEPRI, r3
 800e1fc:	f3bf 8f6f 	isb	sy
 800e200:	f3bf 8f4f 	dsb	sy
 800e204:	623b      	str	r3, [r7, #32]
}
 800e206:	bf00      	nop
 800e208:	e7fe      	b.n	800e208 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e20a:	4b1a      	ldr	r3, [pc, #104]	; (800e274 <xTimerGenericCommand+0x98>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d02a      	beq.n	800e268 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b05      	cmp	r3, #5
 800e222:	dc18      	bgt.n	800e256 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e224:	f7ff feb2 	bl	800df8c <xTaskGetSchedulerState>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d109      	bne.n	800e242 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e22e:	4b11      	ldr	r3, [pc, #68]	; (800e274 <xTimerGenericCommand+0x98>)
 800e230:	6818      	ldr	r0, [r3, #0]
 800e232:	f107 0110 	add.w	r1, r7, #16
 800e236:	2300      	movs	r3, #0
 800e238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e23a:	f7fe fca1 	bl	800cb80 <xQueueGenericSend>
 800e23e:	6278      	str	r0, [r7, #36]	; 0x24
 800e240:	e012      	b.n	800e268 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e242:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <xTimerGenericCommand+0x98>)
 800e244:	6818      	ldr	r0, [r3, #0]
 800e246:	f107 0110 	add.w	r1, r7, #16
 800e24a:	2300      	movs	r3, #0
 800e24c:	2200      	movs	r2, #0
 800e24e:	f7fe fc97 	bl	800cb80 <xQueueGenericSend>
 800e252:	6278      	str	r0, [r7, #36]	; 0x24
 800e254:	e008      	b.n	800e268 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e256:	4b07      	ldr	r3, [pc, #28]	; (800e274 <xTimerGenericCommand+0x98>)
 800e258:	6818      	ldr	r0, [r3, #0]
 800e25a:	f107 0110 	add.w	r1, r7, #16
 800e25e:	2300      	movs	r3, #0
 800e260:	683a      	ldr	r2, [r7, #0]
 800e262:	f7fe fd8b 	bl	800cd7c <xQueueGenericSendFromISR>
 800e266:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3728      	adds	r7, #40	; 0x28
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	200011e8 	.word	0x200011e8

0800e278 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e282:	4b22      	ldr	r3, [pc, #136]	; (800e30c <prvProcessExpiredTimer+0x94>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	3304      	adds	r3, #4
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe fb47 	bl	800c924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e29c:	f003 0304 	and.w	r3, r3, #4
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d022      	beq.n	800e2ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	699a      	ldr	r2, [r3, #24]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	18d1      	adds	r1, r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	6978      	ldr	r0, [r7, #20]
 800e2b2:	f000 f8d1 	bl	800e458 <prvInsertTimerInActiveList>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d01f      	beq.n	800e2fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2bc:	2300      	movs	r3, #0
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	6978      	ldr	r0, [r7, #20]
 800e2c8:	f7ff ff88 	bl	800e1dc <xTimerGenericCommand>
 800e2cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d113      	bne.n	800e2fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d8:	f383 8811 	msr	BASEPRI, r3
 800e2dc:	f3bf 8f6f 	isb	sy
 800e2e0:	f3bf 8f4f 	dsb	sy
 800e2e4:	60fb      	str	r3, [r7, #12]
}
 800e2e6:	bf00      	nop
 800e2e8:	e7fe      	b.n	800e2e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2f0:	f023 0301 	bic.w	r3, r3, #1
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	6a1b      	ldr	r3, [r3, #32]
 800e300:	6978      	ldr	r0, [r7, #20]
 800e302:	4798      	blx	r3
}
 800e304:	bf00      	nop
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	200011e0 	.word	0x200011e0

0800e310 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e318:	f107 0308 	add.w	r3, r7, #8
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 f857 	bl	800e3d0 <prvGetNextExpireTime>
 800e322:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	4619      	mov	r1, r3
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 f803 	bl	800e334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e32e:	f000 f8d5 	bl	800e4dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e332:	e7f1      	b.n	800e318 <prvTimerTask+0x8>

0800e334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e33e:	f7ff fa43 	bl	800d7c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e342:	f107 0308 	add.w	r3, r7, #8
 800e346:	4618      	mov	r0, r3
 800e348:	f000 f866 	bl	800e418 <prvSampleTimeNow>
 800e34c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d130      	bne.n	800e3b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d10a      	bne.n	800e370 <prvProcessTimerOrBlockTask+0x3c>
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d806      	bhi.n	800e370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e362:	f7ff fa3f 	bl	800d7e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e366:	68f9      	ldr	r1, [r7, #12]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ff85 	bl	800e278 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e36e:	e024      	b.n	800e3ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d008      	beq.n	800e388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e376:	4b13      	ldr	r3, [pc, #76]	; (800e3c4 <prvProcessTimerOrBlockTask+0x90>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <prvProcessTimerOrBlockTask+0x50>
 800e380:	2301      	movs	r3, #1
 800e382:	e000      	b.n	800e386 <prvProcessTimerOrBlockTask+0x52>
 800e384:	2300      	movs	r3, #0
 800e386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e388:	4b0f      	ldr	r3, [pc, #60]	; (800e3c8 <prvProcessTimerOrBlockTask+0x94>)
 800e38a:	6818      	ldr	r0, [r3, #0]
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	4619      	mov	r1, r3
 800e396:	f7fe ffa7 	bl	800d2e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e39a:	f7ff fa23 	bl	800d7e4 <xTaskResumeAll>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10a      	bne.n	800e3ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e3a4:	4b09      	ldr	r3, [pc, #36]	; (800e3cc <prvProcessTimerOrBlockTask+0x98>)
 800e3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	f3bf 8f6f 	isb	sy
}
 800e3b4:	e001      	b.n	800e3ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e3b6:	f7ff fa15 	bl	800d7e4 <xTaskResumeAll>
}
 800e3ba:	bf00      	nop
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200011e4 	.word	0x200011e4
 800e3c8:	200011e8 	.word	0x200011e8
 800e3cc:	e000ed04 	.word	0xe000ed04

0800e3d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b085      	sub	sp, #20
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	; (800e414 <prvGetNextExpireTime+0x44>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d101      	bne.n	800e3e6 <prvGetNextExpireTime+0x16>
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	e000      	b.n	800e3e8 <prvGetNextExpireTime+0x18>
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d105      	bne.n	800e400 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3f4:	4b07      	ldr	r3, [pc, #28]	; (800e414 <prvGetNextExpireTime+0x44>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	60fb      	str	r3, [r7, #12]
 800e3fe:	e001      	b.n	800e404 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e400:	2300      	movs	r3, #0
 800e402:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e404:	68fb      	ldr	r3, [r7, #12]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3714      	adds	r7, #20
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	200011e0 	.word	0x200011e0

0800e418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e420:	f7ff fa7e 	bl	800d920 <xTaskGetTickCount>
 800e424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e426:	4b0b      	ldr	r3, [pc, #44]	; (800e454 <prvSampleTimeNow+0x3c>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d205      	bcs.n	800e43c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e430:	f000 f936 	bl	800e6a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	601a      	str	r2, [r3, #0]
 800e43a:	e002      	b.n	800e442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e442:	4a04      	ldr	r2, [pc, #16]	; (800e454 <prvSampleTimeNow+0x3c>)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e448:	68fb      	ldr	r3, [r7, #12]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	200011f0 	.word	0x200011f0

0800e458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e466:	2300      	movs	r3, #0
 800e468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	68ba      	ldr	r2, [r7, #8]
 800e46e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e476:	68ba      	ldr	r2, [r7, #8]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d812      	bhi.n	800e4a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	1ad2      	subs	r2, r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	699b      	ldr	r3, [r3, #24]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d302      	bcc.n	800e492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e48c:	2301      	movs	r3, #1
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	e01b      	b.n	800e4ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e492:	4b10      	ldr	r3, [pc, #64]	; (800e4d4 <prvInsertTimerInActiveList+0x7c>)
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	3304      	adds	r3, #4
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f7fe fa08 	bl	800c8b2 <vListInsert>
 800e4a2:	e012      	b.n	800e4ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d206      	bcs.n	800e4ba <prvInsertTimerInActiveList+0x62>
 800e4ac:	68ba      	ldr	r2, [r7, #8]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d302      	bcc.n	800e4ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	617b      	str	r3, [r7, #20]
 800e4b8:	e007      	b.n	800e4ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4ba:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <prvInsertTimerInActiveList+0x80>)
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f7fe f9f4 	bl	800c8b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e4ca:	697b      	ldr	r3, [r7, #20]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3718      	adds	r7, #24
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	200011e4 	.word	0x200011e4
 800e4d8:	200011e0 	.word	0x200011e0

0800e4dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08e      	sub	sp, #56	; 0x38
 800e4e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4e2:	e0ca      	b.n	800e67a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	da18      	bge.n	800e51c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e4ea:	1d3b      	adds	r3, r7, #4
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10a      	bne.n	800e50c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	61fb      	str	r3, [r7, #28]
}
 800e508:	bf00      	nop
 800e50a:	e7fe      	b.n	800e50a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e512:	6850      	ldr	r0, [r2, #4]
 800e514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e516:	6892      	ldr	r2, [r2, #8]
 800e518:	4611      	mov	r1, r2
 800e51a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f2c0 80ab 	blt.w	800e67a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52a:	695b      	ldr	r3, [r3, #20]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	3304      	adds	r3, #4
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe f9f5 	bl	800c924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e53a:	463b      	mov	r3, r7
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7ff ff6b 	bl	800e418 <prvSampleTimeNow>
 800e542:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b09      	cmp	r3, #9
 800e548:	f200 8096 	bhi.w	800e678 <prvProcessReceivedCommands+0x19c>
 800e54c:	a201      	add	r2, pc, #4	; (adr r2, 800e554 <prvProcessReceivedCommands+0x78>)
 800e54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e552:	bf00      	nop
 800e554:	0800e57d 	.word	0x0800e57d
 800e558:	0800e57d 	.word	0x0800e57d
 800e55c:	0800e57d 	.word	0x0800e57d
 800e560:	0800e5f1 	.word	0x0800e5f1
 800e564:	0800e605 	.word	0x0800e605
 800e568:	0800e64f 	.word	0x0800e64f
 800e56c:	0800e57d 	.word	0x0800e57d
 800e570:	0800e57d 	.word	0x0800e57d
 800e574:	0800e5f1 	.word	0x0800e5f1
 800e578:	0800e605 	.word	0x0800e605
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e582:	f043 0301 	orr.w	r3, r3, #1
 800e586:	b2da      	uxtb	r2, r3
 800e588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	699b      	ldr	r3, [r3, #24]
 800e594:	18d1      	adds	r1, r2, r3
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e59a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e59c:	f7ff ff5c 	bl	800e458 <prvInsertTimerInActiveList>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d069      	beq.n	800e67a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	6a1b      	ldr	r3, [r3, #32]
 800e5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d05e      	beq.n	800e67a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	441a      	add	r2, r3
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5ce:	f7ff fe05 	bl	800e1dc <xTimerGenericCommand>
 800e5d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d14f      	bne.n	800e67a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	61bb      	str	r3, [r7, #24]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5f6:	f023 0301 	bic.w	r3, r3, #1
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e602:	e03a      	b.n	800e67a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e60a:	f043 0301 	orr.w	r3, r3, #1
 800e60e:	b2da      	uxtb	r2, r3
 800e610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61e:	699b      	ldr	r3, [r3, #24]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	617b      	str	r3, [r7, #20]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63c:	699a      	ldr	r2, [r3, #24]
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	18d1      	adds	r1, r2, r3
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e648:	f7ff ff06 	bl	800e458 <prvInsertTimerInActiveList>
					break;
 800e64c:	e015      	b.n	800e67a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e654:	f003 0302 	and.w	r3, r3, #2
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d103      	bne.n	800e664 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e65e:	f000 fbdf 	bl	800ee20 <vPortFree>
 800e662:	e00a      	b.n	800e67a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e66a:	f023 0301 	bic.w	r3, r3, #1
 800e66e:	b2da      	uxtb	r2, r3
 800e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e676:	e000      	b.n	800e67a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e678:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e67a:	4b08      	ldr	r3, [pc, #32]	; (800e69c <prvProcessReceivedCommands+0x1c0>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	1d39      	adds	r1, r7, #4
 800e680:	2200      	movs	r2, #0
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe fc16 	bl	800ceb4 <xQueueReceive>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f47f af2a 	bne.w	800e4e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e690:	bf00      	nop
 800e692:	bf00      	nop
 800e694:	3730      	adds	r7, #48	; 0x30
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	200011e8 	.word	0x200011e8

0800e6a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6a6:	e048      	b.n	800e73a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6a8:	4b2d      	ldr	r3, [pc, #180]	; (800e760 <prvSwitchTimerLists+0xc0>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6b2:	4b2b      	ldr	r3, [pc, #172]	; (800e760 <prvSwitchTimerLists+0xc0>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3304      	adds	r3, #4
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fe f92f 	bl	800c924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6d4:	f003 0304 	and.w	r3, r3, #4
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d02e      	beq.n	800e73a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d90e      	bls.n	800e70c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e6fa:	4b19      	ldr	r3, [pc, #100]	; (800e760 <prvSwitchTimerLists+0xc0>)
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3304      	adds	r3, #4
 800e702:	4619      	mov	r1, r3
 800e704:	4610      	mov	r0, r2
 800e706:	f7fe f8d4 	bl	800c8b2 <vListInsert>
 800e70a:	e016      	b.n	800e73a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e70c:	2300      	movs	r3, #0
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	2300      	movs	r3, #0
 800e712:	693a      	ldr	r2, [r7, #16]
 800e714:	2100      	movs	r1, #0
 800e716:	68f8      	ldr	r0, [r7, #12]
 800e718:	f7ff fd60 	bl	800e1dc <xTimerGenericCommand>
 800e71c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10a      	bne.n	800e73a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	603b      	str	r3, [r7, #0]
}
 800e736:	bf00      	nop
 800e738:	e7fe      	b.n	800e738 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e73a:	4b09      	ldr	r3, [pc, #36]	; (800e760 <prvSwitchTimerLists+0xc0>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1b1      	bne.n	800e6a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e744:	4b06      	ldr	r3, [pc, #24]	; (800e760 <prvSwitchTimerLists+0xc0>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e74a:	4b06      	ldr	r3, [pc, #24]	; (800e764 <prvSwitchTimerLists+0xc4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a04      	ldr	r2, [pc, #16]	; (800e760 <prvSwitchTimerLists+0xc0>)
 800e750:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e752:	4a04      	ldr	r2, [pc, #16]	; (800e764 <prvSwitchTimerLists+0xc4>)
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	6013      	str	r3, [r2, #0]
}
 800e758:	bf00      	nop
 800e75a:	3718      	adds	r7, #24
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}
 800e760:	200011e0 	.word	0x200011e0
 800e764:	200011e4 	.word	0x200011e4

0800e768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b082      	sub	sp, #8
 800e76c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e76e:	f000 f969 	bl	800ea44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e772:	4b15      	ldr	r3, [pc, #84]	; (800e7c8 <prvCheckForValidListAndQueue+0x60>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d120      	bne.n	800e7bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e77a:	4814      	ldr	r0, [pc, #80]	; (800e7cc <prvCheckForValidListAndQueue+0x64>)
 800e77c:	f7fe f848 	bl	800c810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e780:	4813      	ldr	r0, [pc, #76]	; (800e7d0 <prvCheckForValidListAndQueue+0x68>)
 800e782:	f7fe f845 	bl	800c810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e786:	4b13      	ldr	r3, [pc, #76]	; (800e7d4 <prvCheckForValidListAndQueue+0x6c>)
 800e788:	4a10      	ldr	r2, [pc, #64]	; (800e7cc <prvCheckForValidListAndQueue+0x64>)
 800e78a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e78c:	4b12      	ldr	r3, [pc, #72]	; (800e7d8 <prvCheckForValidListAndQueue+0x70>)
 800e78e:	4a10      	ldr	r2, [pc, #64]	; (800e7d0 <prvCheckForValidListAndQueue+0x68>)
 800e790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e792:	2300      	movs	r3, #0
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	4b11      	ldr	r3, [pc, #68]	; (800e7dc <prvCheckForValidListAndQueue+0x74>)
 800e798:	4a11      	ldr	r2, [pc, #68]	; (800e7e0 <prvCheckForValidListAndQueue+0x78>)
 800e79a:	2110      	movs	r1, #16
 800e79c:	200a      	movs	r0, #10
 800e79e:	f7fe f953 	bl	800ca48 <xQueueGenericCreateStatic>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	4a08      	ldr	r2, [pc, #32]	; (800e7c8 <prvCheckForValidListAndQueue+0x60>)
 800e7a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7a8:	4b07      	ldr	r3, [pc, #28]	; (800e7c8 <prvCheckForValidListAndQueue+0x60>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d005      	beq.n	800e7bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7b0:	4b05      	ldr	r3, [pc, #20]	; (800e7c8 <prvCheckForValidListAndQueue+0x60>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	490b      	ldr	r1, [pc, #44]	; (800e7e4 <prvCheckForValidListAndQueue+0x7c>)
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe fd6c 	bl	800d294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7bc:	f000 f972 	bl	800eaa4 <vPortExitCritical>
}
 800e7c0:	bf00      	nop
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	200011e8 	.word	0x200011e8
 800e7cc:	200011b8 	.word	0x200011b8
 800e7d0:	200011cc 	.word	0x200011cc
 800e7d4:	200011e0 	.word	0x200011e0
 800e7d8:	200011e4 	.word	0x200011e4
 800e7dc:	20001294 	.word	0x20001294
 800e7e0:	200011f4 	.word	0x200011f4
 800e7e4:	08010214 	.word	0x08010214

0800e7e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	3b04      	subs	r3, #4
 800e7f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	3b04      	subs	r3, #4
 800e806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	f023 0201 	bic.w	r2, r3, #1
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3b04      	subs	r3, #4
 800e816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e818:	4a0c      	ldr	r2, [pc, #48]	; (800e84c <pxPortInitialiseStack+0x64>)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3b14      	subs	r3, #20
 800e822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3b04      	subs	r3, #4
 800e82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f06f 0202 	mvn.w	r2, #2
 800e836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	3b20      	subs	r3, #32
 800e83c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e83e:	68fb      	ldr	r3, [r7, #12]
}
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	0800e851 	.word	0x0800e851

0800e850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e85a:	4b12      	ldr	r3, [pc, #72]	; (800e8a4 <prvTaskExitError+0x54>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e862:	d00a      	beq.n	800e87a <prvTaskExitError+0x2a>
	__asm volatile
 800e864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	60fb      	str	r3, [r7, #12]
}
 800e876:	bf00      	nop
 800e878:	e7fe      	b.n	800e878 <prvTaskExitError+0x28>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	60bb      	str	r3, [r7, #8]
}
 800e88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e88e:	bf00      	nop
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d0fc      	beq.n	800e890 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e896:	bf00      	nop
 800e898:	bf00      	nop
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	20000150 	.word	0x20000150
	...

0800e8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8b0:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <pxCurrentTCBConst2>)
 800e8b2:	6819      	ldr	r1, [r3, #0]
 800e8b4:	6808      	ldr	r0, [r1, #0]
 800e8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ba:	f380 8809 	msr	PSP, r0
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f04f 0000 	mov.w	r0, #0
 800e8c6:	f380 8811 	msr	BASEPRI, r0
 800e8ca:	4770      	bx	lr
 800e8cc:	f3af 8000 	nop.w

0800e8d0 <pxCurrentTCBConst2>:
 800e8d0:	20000cb8 	.word	0x20000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e8d4:	bf00      	nop
 800e8d6:	bf00      	nop

0800e8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e8d8:	4808      	ldr	r0, [pc, #32]	; (800e8fc <prvPortStartFirstTask+0x24>)
 800e8da:	6800      	ldr	r0, [r0, #0]
 800e8dc:	6800      	ldr	r0, [r0, #0]
 800e8de:	f380 8808 	msr	MSP, r0
 800e8e2:	f04f 0000 	mov.w	r0, #0
 800e8e6:	f380 8814 	msr	CONTROL, r0
 800e8ea:	b662      	cpsie	i
 800e8ec:	b661      	cpsie	f
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	df00      	svc	0
 800e8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e8fa:	bf00      	nop
 800e8fc:	e000ed08 	.word	0xe000ed08

0800e900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e906:	4b46      	ldr	r3, [pc, #280]	; (800ea20 <xPortStartScheduler+0x120>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a46      	ldr	r2, [pc, #280]	; (800ea24 <xPortStartScheduler+0x124>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d10a      	bne.n	800e926 <xPortStartScheduler+0x26>
	__asm volatile
 800e910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e914:	f383 8811 	msr	BASEPRI, r3
 800e918:	f3bf 8f6f 	isb	sy
 800e91c:	f3bf 8f4f 	dsb	sy
 800e920:	613b      	str	r3, [r7, #16]
}
 800e922:	bf00      	nop
 800e924:	e7fe      	b.n	800e924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e926:	4b3e      	ldr	r3, [pc, #248]	; (800ea20 <xPortStartScheduler+0x120>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4a3f      	ldr	r2, [pc, #252]	; (800ea28 <xPortStartScheduler+0x128>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d10a      	bne.n	800e946 <xPortStartScheduler+0x46>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e934:	f383 8811 	msr	BASEPRI, r3
 800e938:	f3bf 8f6f 	isb	sy
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	60fb      	str	r3, [r7, #12]
}
 800e942:	bf00      	nop
 800e944:	e7fe      	b.n	800e944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e946:	4b39      	ldr	r3, [pc, #228]	; (800ea2c <xPortStartScheduler+0x12c>)
 800e948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	22ff      	movs	r2, #255	; 0xff
 800e956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e960:	78fb      	ldrb	r3, [r7, #3]
 800e962:	b2db      	uxtb	r3, r3
 800e964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e968:	b2da      	uxtb	r2, r3
 800e96a:	4b31      	ldr	r3, [pc, #196]	; (800ea30 <xPortStartScheduler+0x130>)
 800e96c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e96e:	4b31      	ldr	r3, [pc, #196]	; (800ea34 <xPortStartScheduler+0x134>)
 800e970:	2207      	movs	r2, #7
 800e972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e974:	e009      	b.n	800e98a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e976:	4b2f      	ldr	r3, [pc, #188]	; (800ea34 <xPortStartScheduler+0x134>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	3b01      	subs	r3, #1
 800e97c:	4a2d      	ldr	r2, [pc, #180]	; (800ea34 <xPortStartScheduler+0x134>)
 800e97e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e980:	78fb      	ldrb	r3, [r7, #3]
 800e982:	b2db      	uxtb	r3, r3
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	b2db      	uxtb	r3, r3
 800e988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e98a:	78fb      	ldrb	r3, [r7, #3]
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e992:	2b80      	cmp	r3, #128	; 0x80
 800e994:	d0ef      	beq.n	800e976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e996:	4b27      	ldr	r3, [pc, #156]	; (800ea34 <xPortStartScheduler+0x134>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f1c3 0307 	rsb	r3, r3, #7
 800e99e:	2b04      	cmp	r3, #4
 800e9a0:	d00a      	beq.n	800e9b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a6:	f383 8811 	msr	BASEPRI, r3
 800e9aa:	f3bf 8f6f 	isb	sy
 800e9ae:	f3bf 8f4f 	dsb	sy
 800e9b2:	60bb      	str	r3, [r7, #8]
}
 800e9b4:	bf00      	nop
 800e9b6:	e7fe      	b.n	800e9b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9b8:	4b1e      	ldr	r3, [pc, #120]	; (800ea34 <xPortStartScheduler+0x134>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	021b      	lsls	r3, r3, #8
 800e9be:	4a1d      	ldr	r2, [pc, #116]	; (800ea34 <xPortStartScheduler+0x134>)
 800e9c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e9c2:	4b1c      	ldr	r3, [pc, #112]	; (800ea34 <xPortStartScheduler+0x134>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9ca:	4a1a      	ldr	r2, [pc, #104]	; (800ea34 <xPortStartScheduler+0x134>)
 800e9cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	b2da      	uxtb	r2, r3
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e9d6:	4b18      	ldr	r3, [pc, #96]	; (800ea38 <xPortStartScheduler+0x138>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a17      	ldr	r2, [pc, #92]	; (800ea38 <xPortStartScheduler+0x138>)
 800e9dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e9e2:	4b15      	ldr	r3, [pc, #84]	; (800ea38 <xPortStartScheduler+0x138>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a14      	ldr	r2, [pc, #80]	; (800ea38 <xPortStartScheduler+0x138>)
 800e9e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e9ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e9ee:	f000 f8dd 	bl	800ebac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e9f2:	4b12      	ldr	r3, [pc, #72]	; (800ea3c <xPortStartScheduler+0x13c>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e9f8:	f000 f8fc 	bl	800ebf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e9fc:	4b10      	ldr	r3, [pc, #64]	; (800ea40 <xPortStartScheduler+0x140>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a0f      	ldr	r2, [pc, #60]	; (800ea40 <xPortStartScheduler+0x140>)
 800ea02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea08:	f7ff ff66 	bl	800e8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea0c:	f7ff f852 	bl	800dab4 <vTaskSwitchContext>
	prvTaskExitError();
 800ea10:	f7ff ff1e 	bl	800e850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3718      	adds	r7, #24
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	e000ed00 	.word	0xe000ed00
 800ea24:	410fc271 	.word	0x410fc271
 800ea28:	410fc270 	.word	0x410fc270
 800ea2c:	e000e400 	.word	0xe000e400
 800ea30:	200012e4 	.word	0x200012e4
 800ea34:	200012e8 	.word	0x200012e8
 800ea38:	e000ed20 	.word	0xe000ed20
 800ea3c:	20000150 	.word	0x20000150
 800ea40:	e000ef34 	.word	0xe000ef34

0800ea44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	607b      	str	r3, [r7, #4]
}
 800ea5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea5e:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <vPortEnterCritical+0x58>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3301      	adds	r3, #1
 800ea64:	4a0d      	ldr	r2, [pc, #52]	; (800ea9c <vPortEnterCritical+0x58>)
 800ea66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea68:	4b0c      	ldr	r3, [pc, #48]	; (800ea9c <vPortEnterCritical+0x58>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d10f      	bne.n	800ea90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ea70:	4b0b      	ldr	r3, [pc, #44]	; (800eaa0 <vPortEnterCritical+0x5c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ea7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	603b      	str	r3, [r7, #0]
}
 800ea8c:	bf00      	nop
 800ea8e:	e7fe      	b.n	800ea8e <vPortEnterCritical+0x4a>
	}
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	20000150 	.word	0x20000150
 800eaa0:	e000ed04 	.word	0xe000ed04

0800eaa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eaaa:	4b12      	ldr	r3, [pc, #72]	; (800eaf4 <vPortExitCritical+0x50>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10a      	bne.n	800eac8 <vPortExitCritical+0x24>
	__asm volatile
 800eab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	607b      	str	r3, [r7, #4]
}
 800eac4:	bf00      	nop
 800eac6:	e7fe      	b.n	800eac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eac8:	4b0a      	ldr	r3, [pc, #40]	; (800eaf4 <vPortExitCritical+0x50>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3b01      	subs	r3, #1
 800eace:	4a09      	ldr	r2, [pc, #36]	; (800eaf4 <vPortExitCritical+0x50>)
 800ead0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ead2:	4b08      	ldr	r3, [pc, #32]	; (800eaf4 <vPortExitCritical+0x50>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d105      	bne.n	800eae6 <vPortExitCritical+0x42>
 800eada:	2300      	movs	r3, #0
 800eadc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	f383 8811 	msr	BASEPRI, r3
}
 800eae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eae6:	bf00      	nop
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	20000150 	.word	0x20000150
	...

0800eb00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb00:	f3ef 8009 	mrs	r0, PSP
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	4b15      	ldr	r3, [pc, #84]	; (800eb60 <pxCurrentTCBConst>)
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	f01e 0f10 	tst.w	lr, #16
 800eb10:	bf08      	it	eq
 800eb12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb1a:	6010      	str	r0, [r2, #0]
 800eb1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb24:	f380 8811 	msr	BASEPRI, r0
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f7fe ffc0 	bl	800dab4 <vTaskSwitchContext>
 800eb34:	f04f 0000 	mov.w	r0, #0
 800eb38:	f380 8811 	msr	BASEPRI, r0
 800eb3c:	bc09      	pop	{r0, r3}
 800eb3e:	6819      	ldr	r1, [r3, #0]
 800eb40:	6808      	ldr	r0, [r1, #0]
 800eb42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb46:	f01e 0f10 	tst.w	lr, #16
 800eb4a:	bf08      	it	eq
 800eb4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb50:	f380 8809 	msr	PSP, r0
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	f3af 8000 	nop.w

0800eb60 <pxCurrentTCBConst>:
 800eb60:	20000cb8 	.word	0x20000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop

0800eb68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	607b      	str	r3, [r7, #4]
}
 800eb80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eb82:	f7fe fedd 	bl	800d940 <xTaskIncrementTick>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eb8c:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <xPortSysTickHandler+0x40>)
 800eb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	2300      	movs	r3, #0
 800eb96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f383 8811 	msr	BASEPRI, r3
}
 800eb9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	e000ed04 	.word	0xe000ed04

0800ebac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebac:	b480      	push	{r7}
 800ebae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebb0:	4b0b      	ldr	r3, [pc, #44]	; (800ebe0 <vPortSetupTimerInterrupt+0x34>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebb6:	4b0b      	ldr	r3, [pc, #44]	; (800ebe4 <vPortSetupTimerInterrupt+0x38>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebbc:	4b0a      	ldr	r3, [pc, #40]	; (800ebe8 <vPortSetupTimerInterrupt+0x3c>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a0a      	ldr	r2, [pc, #40]	; (800ebec <vPortSetupTimerInterrupt+0x40>)
 800ebc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebc6:	099b      	lsrs	r3, r3, #6
 800ebc8:	4a09      	ldr	r2, [pc, #36]	; (800ebf0 <vPortSetupTimerInterrupt+0x44>)
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ebce:	4b04      	ldr	r3, [pc, #16]	; (800ebe0 <vPortSetupTimerInterrupt+0x34>)
 800ebd0:	2207      	movs	r2, #7
 800ebd2:	601a      	str	r2, [r3, #0]
}
 800ebd4:	bf00      	nop
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	e000e010 	.word	0xe000e010
 800ebe4:	e000e018 	.word	0xe000e018
 800ebe8:	20000144 	.word	0x20000144
 800ebec:	10624dd3 	.word	0x10624dd3
 800ebf0:	e000e014 	.word	0xe000e014

0800ebf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ebf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec04 <vPortEnableVFP+0x10>
 800ebf8:	6801      	ldr	r1, [r0, #0]
 800ebfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ebfe:	6001      	str	r1, [r0, #0]
 800ec00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec02:	bf00      	nop
 800ec04:	e000ed88 	.word	0xe000ed88

0800ec08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec0e:	f3ef 8305 	mrs	r3, IPSR
 800ec12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b0f      	cmp	r3, #15
 800ec18:	d914      	bls.n	800ec44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec1a:	4a17      	ldr	r2, [pc, #92]	; (800ec78 <vPortValidateInterruptPriority+0x70>)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	4413      	add	r3, r2
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec24:	4b15      	ldr	r3, [pc, #84]	; (800ec7c <vPortValidateInterruptPriority+0x74>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	7afa      	ldrb	r2, [r7, #11]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d20a      	bcs.n	800ec44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	607b      	str	r3, [r7, #4]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec44:	4b0e      	ldr	r3, [pc, #56]	; (800ec80 <vPortValidateInterruptPriority+0x78>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec4c:	4b0d      	ldr	r3, [pc, #52]	; (800ec84 <vPortValidateInterruptPriority+0x7c>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d90a      	bls.n	800ec6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	603b      	str	r3, [r7, #0]
}
 800ec66:	bf00      	nop
 800ec68:	e7fe      	b.n	800ec68 <vPortValidateInterruptPriority+0x60>
	}
 800ec6a:	bf00      	nop
 800ec6c:	3714      	adds	r7, #20
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr
 800ec76:	bf00      	nop
 800ec78:	e000e3f0 	.word	0xe000e3f0
 800ec7c:	200012e4 	.word	0x200012e4
 800ec80:	e000ed0c 	.word	0xe000ed0c
 800ec84:	200012e8 	.word	0x200012e8

0800ec88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b08a      	sub	sp, #40	; 0x28
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ec90:	2300      	movs	r3, #0
 800ec92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ec94:	f7fe fd98 	bl	800d7c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ec98:	4b5b      	ldr	r3, [pc, #364]	; (800ee08 <pvPortMalloc+0x180>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d101      	bne.n	800eca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eca0:	f000 f920 	bl	800eee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eca4:	4b59      	ldr	r3, [pc, #356]	; (800ee0c <pvPortMalloc+0x184>)
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4013      	ands	r3, r2
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f040 8093 	bne.w	800edd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d01d      	beq.n	800ecf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ecb8:	2208      	movs	r2, #8
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f003 0307 	and.w	r3, r3, #7
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d014      	beq.n	800ecf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f023 0307 	bic.w	r3, r3, #7
 800ecd0:	3308      	adds	r3, #8
 800ecd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f003 0307 	and.w	r3, r3, #7
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00a      	beq.n	800ecf4 <pvPortMalloc+0x6c>
	__asm volatile
 800ecde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece2:	f383 8811 	msr	BASEPRI, r3
 800ece6:	f3bf 8f6f 	isb	sy
 800ecea:	f3bf 8f4f 	dsb	sy
 800ecee:	617b      	str	r3, [r7, #20]
}
 800ecf0:	bf00      	nop
 800ecf2:	e7fe      	b.n	800ecf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d06e      	beq.n	800edd8 <pvPortMalloc+0x150>
 800ecfa:	4b45      	ldr	r3, [pc, #276]	; (800ee10 <pvPortMalloc+0x188>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d869      	bhi.n	800edd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed04:	4b43      	ldr	r3, [pc, #268]	; (800ee14 <pvPortMalloc+0x18c>)
 800ed06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed08:	4b42      	ldr	r3, [pc, #264]	; (800ee14 <pvPortMalloc+0x18c>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed0e:	e004      	b.n	800ed1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d903      	bls.n	800ed2c <pvPortMalloc+0xa4>
 800ed24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1f1      	bne.n	800ed10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed2c:	4b36      	ldr	r3, [pc, #216]	; (800ee08 <pvPortMalloc+0x180>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d050      	beq.n	800edd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2208      	movs	r2, #8
 800ed3c:	4413      	add	r3, r2
 800ed3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	6a3b      	ldr	r3, [r7, #32]
 800ed46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4a:	685a      	ldr	r2, [r3, #4]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	1ad2      	subs	r2, r2, r3
 800ed50:	2308      	movs	r3, #8
 800ed52:	005b      	lsls	r3, r3, #1
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d91f      	bls.n	800ed98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	f003 0307 	and.w	r3, r3, #7
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00a      	beq.n	800ed80 <pvPortMalloc+0xf8>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	613b      	str	r3, [r7, #16]
}
 800ed7c:	bf00      	nop
 800ed7e:	e7fe      	b.n	800ed7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	1ad2      	subs	r2, r2, r3
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ed8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ed92:	69b8      	ldr	r0, [r7, #24]
 800ed94:	f000 f908 	bl	800efa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ed98:	4b1d      	ldr	r3, [pc, #116]	; (800ee10 <pvPortMalloc+0x188>)
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	4a1b      	ldr	r2, [pc, #108]	; (800ee10 <pvPortMalloc+0x188>)
 800eda4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eda6:	4b1a      	ldr	r3, [pc, #104]	; (800ee10 <pvPortMalloc+0x188>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	4b1b      	ldr	r3, [pc, #108]	; (800ee18 <pvPortMalloc+0x190>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d203      	bcs.n	800edba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800edb2:	4b17      	ldr	r3, [pc, #92]	; (800ee10 <pvPortMalloc+0x188>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	4a18      	ldr	r2, [pc, #96]	; (800ee18 <pvPortMalloc+0x190>)
 800edb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbc:	685a      	ldr	r2, [r3, #4]
 800edbe:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <pvPortMalloc+0x184>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	431a      	orrs	r2, r3
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	2200      	movs	r2, #0
 800edcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800edce:	4b13      	ldr	r3, [pc, #76]	; (800ee1c <pvPortMalloc+0x194>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3301      	adds	r3, #1
 800edd4:	4a11      	ldr	r2, [pc, #68]	; (800ee1c <pvPortMalloc+0x194>)
 800edd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800edd8:	f7fe fd04 	bl	800d7e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	f003 0307 	and.w	r3, r3, #7
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00a      	beq.n	800edfc <pvPortMalloc+0x174>
	__asm volatile
 800ede6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	60fb      	str	r3, [r7, #12]
}
 800edf8:	bf00      	nop
 800edfa:	e7fe      	b.n	800edfa <pvPortMalloc+0x172>
	return pvReturn;
 800edfc:	69fb      	ldr	r3, [r7, #28]
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3728      	adds	r7, #40	; 0x28
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	20004ef4 	.word	0x20004ef4
 800ee0c:	20004f08 	.word	0x20004f08
 800ee10:	20004ef8 	.word	0x20004ef8
 800ee14:	20004eec 	.word	0x20004eec
 800ee18:	20004efc 	.word	0x20004efc
 800ee1c:	20004f00 	.word	0x20004f00

0800ee20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d04d      	beq.n	800eece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee32:	2308      	movs	r3, #8
 800ee34:	425b      	negs	r3, r3
 800ee36:	697a      	ldr	r2, [r7, #20]
 800ee38:	4413      	add	r3, r2
 800ee3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	4b24      	ldr	r3, [pc, #144]	; (800eed8 <vPortFree+0xb8>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	4013      	ands	r3, r2
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d10a      	bne.n	800ee64 <vPortFree+0x44>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	60fb      	str	r3, [r7, #12]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00a      	beq.n	800ee82 <vPortFree+0x62>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	60bb      	str	r3, [r7, #8]
}
 800ee7e:	bf00      	nop
 800ee80:	e7fe      	b.n	800ee80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	685a      	ldr	r2, [r3, #4]
 800ee86:	4b14      	ldr	r3, [pc, #80]	; (800eed8 <vPortFree+0xb8>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d01e      	beq.n	800eece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d11a      	bne.n	800eece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	685a      	ldr	r2, [r3, #4]
 800ee9c:	4b0e      	ldr	r3, [pc, #56]	; (800eed8 <vPortFree+0xb8>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	43db      	mvns	r3, r3
 800eea2:	401a      	ands	r2, r3
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eea8:	f7fe fc8e 	bl	800d7c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	685a      	ldr	r2, [r3, #4]
 800eeb0:	4b0a      	ldr	r3, [pc, #40]	; (800eedc <vPortFree+0xbc>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	4a09      	ldr	r2, [pc, #36]	; (800eedc <vPortFree+0xbc>)
 800eeb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eeba:	6938      	ldr	r0, [r7, #16]
 800eebc:	f000 f874 	bl	800efa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eec0:	4b07      	ldr	r3, [pc, #28]	; (800eee0 <vPortFree+0xc0>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	3301      	adds	r3, #1
 800eec6:	4a06      	ldr	r2, [pc, #24]	; (800eee0 <vPortFree+0xc0>)
 800eec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800eeca:	f7fe fc8b 	bl	800d7e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eece:	bf00      	nop
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20004f08 	.word	0x20004f08
 800eedc:	20004ef8 	.word	0x20004ef8
 800eee0:	20004f04 	.word	0x20004f04

0800eee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eeea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eeee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eef0:	4b27      	ldr	r3, [pc, #156]	; (800ef90 <prvHeapInit+0xac>)
 800eef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f003 0307 	and.w	r3, r3, #7
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00c      	beq.n	800ef18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	3307      	adds	r3, #7
 800ef02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f023 0307 	bic.w	r3, r3, #7
 800ef0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef0c:	68ba      	ldr	r2, [r7, #8]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	4a1f      	ldr	r2, [pc, #124]	; (800ef90 <prvHeapInit+0xac>)
 800ef14:	4413      	add	r3, r2
 800ef16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef1c:	4a1d      	ldr	r2, [pc, #116]	; (800ef94 <prvHeapInit+0xb0>)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef22:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <prvHeapInit+0xb0>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef30:	2208      	movs	r2, #8
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	1a9b      	subs	r3, r3, r2
 800ef36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f023 0307 	bic.w	r3, r3, #7
 800ef3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	4a15      	ldr	r2, [pc, #84]	; (800ef98 <prvHeapInit+0xb4>)
 800ef44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef46:	4b14      	ldr	r3, [pc, #80]	; (800ef98 <prvHeapInit+0xb4>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef4e:	4b12      	ldr	r3, [pc, #72]	; (800ef98 <prvHeapInit+0xb4>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2200      	movs	r2, #0
 800ef54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	1ad2      	subs	r2, r2, r3
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef64:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <prvHeapInit+0xb4>)
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	4a0a      	ldr	r2, [pc, #40]	; (800ef9c <prvHeapInit+0xb8>)
 800ef72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	4a09      	ldr	r2, [pc, #36]	; (800efa0 <prvHeapInit+0xbc>)
 800ef7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ef7c:	4b09      	ldr	r3, [pc, #36]	; (800efa4 <prvHeapInit+0xc0>)
 800ef7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ef82:	601a      	str	r2, [r3, #0]
}
 800ef84:	bf00      	nop
 800ef86:	3714      	adds	r7, #20
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr
 800ef90:	200012ec 	.word	0x200012ec
 800ef94:	20004eec 	.word	0x20004eec
 800ef98:	20004ef4 	.word	0x20004ef4
 800ef9c:	20004efc 	.word	0x20004efc
 800efa0:	20004ef8 	.word	0x20004ef8
 800efa4:	20004f08 	.word	0x20004f08

0800efa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efb0:	4b28      	ldr	r3, [pc, #160]	; (800f054 <prvInsertBlockIntoFreeList+0xac>)
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e002      	b.n	800efbc <prvInsertBlockIntoFreeList+0x14>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	60fb      	str	r3, [r7, #12]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d8f7      	bhi.n	800efb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	4413      	add	r3, r2
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d108      	bne.n	800efea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	441a      	add	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	441a      	add	r2, r3
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	429a      	cmp	r2, r3
 800effc:	d118      	bne.n	800f030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	4b15      	ldr	r3, [pc, #84]	; (800f058 <prvInsertBlockIntoFreeList+0xb0>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d00d      	beq.n	800f026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685a      	ldr	r2, [r3, #4]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	441a      	add	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	e008      	b.n	800f038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f026:	4b0c      	ldr	r3, [pc, #48]	; (800f058 <prvInsertBlockIntoFreeList+0xb0>)
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	601a      	str	r2, [r3, #0]
 800f02e:	e003      	b.n	800f038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d002      	beq.n	800f046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f046:	bf00      	nop
 800f048:	3714      	adds	r7, #20
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	20004eec 	.word	0x20004eec
 800f058:	20004ef4 	.word	0x20004ef4

0800f05c <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b08a      	sub	sp, #40	; 0x28
 800f060:	af04      	add	r7, sp, #16
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	460b      	mov	r3, r1
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	b2db      	uxtb	r3, r3
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	b2db      	uxtb	r3, r3
 800f076:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800f078:	7afb      	ldrb	r3, [r7, #11]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <_ICM20948_SelectUserBank+0x26>
 800f07e:	2368      	movs	r3, #104	; 0x68
 800f080:	e000      	b.n	800f084 <_ICM20948_SelectUserBank+0x28>
 800f082:	2369      	movs	r3, #105	; 0x69
 800f084:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800f086:	7dbb      	ldrb	r3, [r7, #22]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	005b      	lsls	r3, r3, #1
 800f08c:	b299      	uxth	r1, r3
 800f08e:	230a      	movs	r3, #10
 800f090:	9302      	str	r3, [sp, #8]
 800f092:	2301      	movs	r3, #1
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	f107 0315 	add.w	r3, r7, #21
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	2301      	movs	r3, #1
 800f09e:	227f      	movs	r2, #127	; 0x7f
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f7f9 f845 	bl	8008130 <HAL_I2C_Mem_Write>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af04      	add	r7, sp, #16
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	4608      	mov	r0, r1
 800f0be:	4611      	mov	r1, r2
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	70fb      	strb	r3, [r7, #3]
 800f0c6:	460b      	mov	r3, r1
 800f0c8:	70bb      	strb	r3, [r7, #2]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800f0d2:	78fb      	ldrb	r3, [r7, #3]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <_ICM20948_WriteByte+0x28>
 800f0d8:	2368      	movs	r3, #104	; 0x68
 800f0da:	e000      	b.n	800f0de <_ICM20948_WriteByte+0x2a>
 800f0dc:	2369      	movs	r3, #105	; 0x69
 800f0de:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800f0e0:	7bbb      	ldrb	r3, [r7, #14]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	b299      	uxth	r1, r3
 800f0e8:	78bb      	ldrb	r3, [r7, #2]
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	230a      	movs	r3, #10
 800f0ee:	9302      	str	r3, [sp, #8]
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	9301      	str	r3, [sp, #4]
 800f0f4:	1c7b      	adds	r3, r7, #1
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7f9 f818 	bl	8008130 <HAL_I2C_Mem_Write>
 800f100:	4603      	mov	r3, r0
 800f102:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800f104:	7bfb      	ldrb	r3, [r7, #15]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	4608      	mov	r0, r1
 800f118:	4611      	mov	r1, r2
 800f11a:	461a      	mov	r2, r3
 800f11c:	4603      	mov	r3, r0
 800f11e:	70fb      	strb	r3, [r7, #3]
 800f120:	460b      	mov	r3, r1
 800f122:	70bb      	strb	r3, [r7, #2]
 800f124:	4613      	mov	r3, r2
 800f126:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800f128:	2300      	movs	r3, #0
 800f12a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800f12c:	78fb      	ldrb	r3, [r7, #3]
 800f12e:	2200      	movs	r2, #0
 800f130:	4619      	mov	r1, r3
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff ff92 	bl	800f05c <_ICM20948_SelectUserBank>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800f13c:	78f9      	ldrb	r1, [r7, #3]
 800f13e:	2380      	movs	r3, #128	; 0x80
 800f140:	2206      	movs	r2, #6
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f7ff ffb6 	bl	800f0b4 <_ICM20948_WriteByte>
 800f148:	4603      	mov	r3, r0
 800f14a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800f14c:	20c8      	movs	r0, #200	; 0xc8
 800f14e:	f7f7 ff5d 	bl	800700c <HAL_Delay>

	status = _ICM20948_WriteByte(
 800f152:	78f9      	ldrb	r1, [r7, #3]
 800f154:	2301      	movs	r3, #1
 800f156:	2206      	movs	r2, #6
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7ff ffab 	bl	800f0b4 <_ICM20948_WriteByte>
 800f15e:	4603      	mov	r3, r0
 800f160:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800f162:	78f9      	ldrb	r1, [r7, #3]
 800f164:	2300      	movs	r3, #0
 800f166:	2207      	movs	r2, #7
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff ffa3 	bl	800f0b4 <_ICM20948_WriteByte>
 800f16e:	4603      	mov	r3, r0
 800f170:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800f172:	78fb      	ldrb	r3, [r7, #3]
 800f174:	2202      	movs	r2, #2
 800f176:	4619      	mov	r1, r3
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff ff6f 	bl	800f05c <_ICM20948_SelectUserBank>
 800f17e:	4603      	mov	r3, r0
 800f180:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800f182:	78bb      	ldrb	r3, [r7, #2]
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	b25b      	sxtb	r3, r3
 800f188:	f043 0319 	orr.w	r3, r3, #25
 800f18c:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	78f9      	ldrb	r1, [r7, #3]
 800f192:	2201      	movs	r2, #1
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f7ff ff8d 	bl	800f0b4 <_ICM20948_WriteByte>
 800f19a:	4603      	mov	r3, r0
 800f19c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800f19e:	78f9      	ldrb	r1, [r7, #3]
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	2253      	movs	r2, #83	; 0x53
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f7ff ff85 	bl	800f0b4 <_ICM20948_WriteByte>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800f1ae:	78f9      	ldrb	r1, [r7, #3]
 800f1b0:	2304      	movs	r3, #4
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff ff7d 	bl	800f0b4 <_ICM20948_WriteByte>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800f1be:	787b      	ldrb	r3, [r7, #1]
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	b25b      	sxtb	r3, r3
 800f1c4:	f043 0319 	orr.w	r3, r3, #25
 800f1c8:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	78f9      	ldrb	r1, [r7, #3]
 800f1ce:	2214      	movs	r2, #20
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff ff6f 	bl	800f0b4 <_ICM20948_WriteByte>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800f1da:	78f9      	ldrb	r1, [r7, #3]
 800f1dc:	2304      	movs	r3, #4
 800f1de:	2211      	movs	r2, #17
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7ff ff67 	bl	800f0b4 <_ICM20948_WriteByte>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800f1ea:	78fb      	ldrb	r3, [r7, #3]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff ff33 	bl	800f05c <_ICM20948_SelectUserBank>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800f1fa:	78f9      	ldrb	r1, [r7, #3]
 800f1fc:	2302      	movs	r3, #2
 800f1fe:	220f      	movs	r2, #15
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff ff57 	bl	800f0b4 <_ICM20948_WriteByte>
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800f20a:	2208      	movs	r2, #8
 800f20c:	2131      	movs	r1, #49	; 0x31
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 f806 	bl	800f220 <_AK09918_WriteByte>
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
}
 800f218:	bf00      	nop
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b088      	sub	sp, #32
 800f224:	af04      	add	r7, sp, #16
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	70fb      	strb	r3, [r7, #3]
 800f22c:	4613      	mov	r3, r2
 800f22e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800f230:	2300      	movs	r3, #0
 800f232:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800f234:	78fb      	ldrb	r3, [r7, #3]
 800f236:	b29a      	uxth	r2, r3
 800f238:	230a      	movs	r3, #10
 800f23a:	9302      	str	r3, [sp, #8]
 800f23c:	2301      	movs	r3, #1
 800f23e:	9301      	str	r3, [sp, #4]
 800f240:	1cbb      	adds	r3, r7, #2
 800f242:	9300      	str	r3, [sp, #0]
 800f244:	2301      	movs	r3, #1
 800f246:	2118      	movs	r1, #24
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f7f8 ff71 	bl	8008130 <HAL_I2C_Mem_Write>
 800f24e:	4603      	mov	r3, r0
 800f250:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800f252:	7bfb      	ldrb	r3, [r7, #15]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f262:	2300      	movs	r3, #0
 800f264:	71fb      	strb	r3, [r7, #7]
 800f266:	e026      	b.n	800f2b6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800f268:	79fb      	ldrb	r3, [r7, #7]
 800f26a:	3b50      	subs	r3, #80	; 0x50
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2100      	movs	r1, #0
 800f270:	4618      	mov	r0, r3
 800f272:	f000 f82b 	bl	800f2cc <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800f276:	2100      	movs	r1, #0
 800f278:	2000      	movs	r0, #0
 800f27a:	f000 f827 	bl	800f2cc <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800f27e:	2100      	movs	r1, #0
 800f280:	2010      	movs	r0, #16
 800f282:	f000 f823 	bl	800f2cc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f286:	2300      	movs	r3, #0
 800f288:	71bb      	strb	r3, [r7, #6]
 800f28a:	e00d      	b.n	800f2a8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800f28c:	79ba      	ldrb	r2, [r7, #6]
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	490d      	ldr	r1, [pc, #52]	; (800f2c8 <OLED_Refresh_Gram+0x6c>)
 800f292:	00d2      	lsls	r2, r2, #3
 800f294:	440a      	add	r2, r1
 800f296:	4413      	add	r3, r2
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2101      	movs	r1, #1
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 f815 	bl	800f2cc <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f2a2:	79bb      	ldrb	r3, [r7, #6]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	71bb      	strb	r3, [r7, #6]
 800f2a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	daed      	bge.n	800f28c <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800f2b0:	79fb      	ldrb	r3, [r7, #7]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	71fb      	strb	r3, [r7, #7]
 800f2b6:	79fb      	ldrb	r3, [r7, #7]
 800f2b8:	2b07      	cmp	r3, #7
 800f2ba:	d9d5      	bls.n	800f268 <OLED_Refresh_Gram+0xc>
	}
}
 800f2bc:	bf00      	nop
 800f2be:	bf00      	nop
 800f2c0:	3708      	adds	r7, #8
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	20004f0c 	.word	0x20004f0c

0800f2cc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	460a      	mov	r2, r1
 800f2d6:	71fb      	strb	r3, [r7, #7]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800f2dc:	79bb      	ldrb	r3, [r7, #6]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d006      	beq.n	800f2f0 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f2e8:	481c      	ldr	r0, [pc, #112]	; (800f35c <OLED_WR_Byte+0x90>)
 800f2ea:	f7f8 fdc3 	bl	8007e74 <HAL_GPIO_WritePin>
 800f2ee:	e005      	b.n	800f2fc <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f2f6:	4819      	ldr	r0, [pc, #100]	; (800f35c <OLED_WR_Byte+0x90>)
 800f2f8:	f7f8 fdbc 	bl	8007e74 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	73fb      	strb	r3, [r7, #15]
 800f300:	e01e      	b.n	800f340 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800f302:	2200      	movs	r2, #0
 800f304:	2120      	movs	r1, #32
 800f306:	4815      	ldr	r0, [pc, #84]	; (800f35c <OLED_WR_Byte+0x90>)
 800f308:	f7f8 fdb4 	bl	8007e74 <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800f30c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f310:	2b00      	cmp	r3, #0
 800f312:	da05      	bge.n	800f320 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800f314:	2201      	movs	r2, #1
 800f316:	2140      	movs	r1, #64	; 0x40
 800f318:	4810      	ldr	r0, [pc, #64]	; (800f35c <OLED_WR_Byte+0x90>)
 800f31a:	f7f8 fdab 	bl	8007e74 <HAL_GPIO_WritePin>
 800f31e:	e004      	b.n	800f32a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800f320:	2200      	movs	r2, #0
 800f322:	2140      	movs	r1, #64	; 0x40
 800f324:	480d      	ldr	r0, [pc, #52]	; (800f35c <OLED_WR_Byte+0x90>)
 800f326:	f7f8 fda5 	bl	8007e74 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800f32a:	2201      	movs	r2, #1
 800f32c:	2120      	movs	r1, #32
 800f32e:	480b      	ldr	r0, [pc, #44]	; (800f35c <OLED_WR_Byte+0x90>)
 800f330:	f7f8 fda0 	bl	8007e74 <HAL_GPIO_WritePin>
		dat <<= 1;
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800f33a:	7bfb      	ldrb	r3, [r7, #15]
 800f33c:	3301      	adds	r3, #1
 800f33e:	73fb      	strb	r3, [r7, #15]
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	2b07      	cmp	r3, #7
 800f344:	d9dd      	bls.n	800f302 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800f346:	2201      	movs	r2, #1
 800f348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f34c:	4803      	ldr	r0, [pc, #12]	; (800f35c <OLED_WR_Byte+0x90>)
 800f34e:	f7f8 fd91 	bl	8007e74 <HAL_GPIO_WritePin>
}
 800f352:	bf00      	nop
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	40021000 	.word	0x40021000

0800f360 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f366:	2300      	movs	r3, #0
 800f368:	71fb      	strb	r3, [r7, #7]
 800f36a:	e014      	b.n	800f396 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800f36c:	2300      	movs	r3, #0
 800f36e:	71bb      	strb	r3, [r7, #6]
 800f370:	e00a      	b.n	800f388 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800f372:	79ba      	ldrb	r2, [r7, #6]
 800f374:	79fb      	ldrb	r3, [r7, #7]
 800f376:	490c      	ldr	r1, [pc, #48]	; (800f3a8 <OLED_Clear+0x48>)
 800f378:	00d2      	lsls	r2, r2, #3
 800f37a:	440a      	add	r2, r1
 800f37c:	4413      	add	r3, r2
 800f37e:	2200      	movs	r2, #0
 800f380:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800f382:	79bb      	ldrb	r3, [r7, #6]
 800f384:	3301      	adds	r3, #1
 800f386:	71bb      	strb	r3, [r7, #6]
 800f388:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	daf0      	bge.n	800f372 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800f390:	79fb      	ldrb	r3, [r7, #7]
 800f392:	3301      	adds	r3, #1
 800f394:	71fb      	strb	r3, [r7, #7]
 800f396:	79fb      	ldrb	r3, [r7, #7]
 800f398:	2b07      	cmp	r3, #7
 800f39a:	d9e7      	bls.n	800f36c <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800f39c:	f7ff ff5e 	bl	800f25c <OLED_Refresh_Gram>
}
 800f3a0:	bf00      	nop
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	20004f0c 	.word	0x20004f0c

0800f3ac <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	71fb      	strb	r3, [r7, #7]
 800f3b6:	460b      	mov	r3, r1
 800f3b8:	71bb      	strb	r3, [r7, #6]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800f3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	db41      	blt.n	800f44e <OLED_DrawPoint+0xa2>
 800f3ca:	79bb      	ldrb	r3, [r7, #6]
 800f3cc:	2b3f      	cmp	r3, #63	; 0x3f
 800f3ce:	d83e      	bhi.n	800f44e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800f3d0:	79bb      	ldrb	r3, [r7, #6]
 800f3d2:	08db      	lsrs	r3, r3, #3
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	f1c3 0307 	rsb	r3, r3, #7
 800f3da:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800f3dc:	79bb      	ldrb	r3, [r7, #6]
 800f3de:	f003 0307 	and.w	r3, r3, #7
 800f3e2:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800f3e4:	7b7b      	ldrb	r3, [r7, #13]
 800f3e6:	f1c3 0307 	rsb	r3, r3, #7
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f3f0:	73fb      	strb	r3, [r7, #15]
	if (t)
 800f3f2:	797b      	ldrb	r3, [r7, #5]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d012      	beq.n	800f41e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800f3f8:	79fa      	ldrb	r2, [r7, #7]
 800f3fa:	7bbb      	ldrb	r3, [r7, #14]
 800f3fc:	4917      	ldr	r1, [pc, #92]	; (800f45c <OLED_DrawPoint+0xb0>)
 800f3fe:	00d2      	lsls	r2, r2, #3
 800f400:	440a      	add	r2, r1
 800f402:	4413      	add	r3, r2
 800f404:	7818      	ldrb	r0, [r3, #0]
 800f406:	79fa      	ldrb	r2, [r7, #7]
 800f408:	7bbb      	ldrb	r3, [r7, #14]
 800f40a:	7bf9      	ldrb	r1, [r7, #15]
 800f40c:	4301      	orrs	r1, r0
 800f40e:	b2c8      	uxtb	r0, r1
 800f410:	4912      	ldr	r1, [pc, #72]	; (800f45c <OLED_DrawPoint+0xb0>)
 800f412:	00d2      	lsls	r2, r2, #3
 800f414:	440a      	add	r2, r1
 800f416:	4413      	add	r3, r2
 800f418:	4602      	mov	r2, r0
 800f41a:	701a      	strb	r2, [r3, #0]
 800f41c:	e018      	b.n	800f450 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800f41e:	79fa      	ldrb	r2, [r7, #7]
 800f420:	7bbb      	ldrb	r3, [r7, #14]
 800f422:	490e      	ldr	r1, [pc, #56]	; (800f45c <OLED_DrawPoint+0xb0>)
 800f424:	00d2      	lsls	r2, r2, #3
 800f426:	440a      	add	r2, r1
 800f428:	4413      	add	r3, r2
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	b25a      	sxtb	r2, r3
 800f42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f432:	43db      	mvns	r3, r3
 800f434:	b25b      	sxtb	r3, r3
 800f436:	4013      	ands	r3, r2
 800f438:	b259      	sxtb	r1, r3
 800f43a:	79fa      	ldrb	r2, [r7, #7]
 800f43c:	7bbb      	ldrb	r3, [r7, #14]
 800f43e:	b2c8      	uxtb	r0, r1
 800f440:	4906      	ldr	r1, [pc, #24]	; (800f45c <OLED_DrawPoint+0xb0>)
 800f442:	00d2      	lsls	r2, r2, #3
 800f444:	440a      	add	r2, r1
 800f446:	4413      	add	r3, r2
 800f448:	4602      	mov	r2, r0
 800f44a:	701a      	strb	r2, [r3, #0]
 800f44c:	e000      	b.n	800f450 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800f44e:	bf00      	nop
}
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	20004f0c 	.word	0x20004f0c

0800f460 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800f460:	b590      	push	{r4, r7, lr}
 800f462:	b085      	sub	sp, #20
 800f464:	af00      	add	r7, sp, #0
 800f466:	4604      	mov	r4, r0
 800f468:	4608      	mov	r0, r1
 800f46a:	4611      	mov	r1, r2
 800f46c:	461a      	mov	r2, r3
 800f46e:	4623      	mov	r3, r4
 800f470:	71fb      	strb	r3, [r7, #7]
 800f472:	4603      	mov	r3, r0
 800f474:	71bb      	strb	r3, [r7, #6]
 800f476:	460b      	mov	r3, r1
 800f478:	717b      	strb	r3, [r7, #5]
 800f47a:	4613      	mov	r3, r2
 800f47c:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800f47e:	79bb      	ldrb	r3, [r7, #6]
 800f480:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800f482:	797b      	ldrb	r3, [r7, #5]
 800f484:	3b20      	subs	r3, #32
 800f486:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800f488:	2300      	movs	r3, #0
 800f48a:	73bb      	strb	r3, [r7, #14]
 800f48c:	e04d      	b.n	800f52a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800f48e:	793b      	ldrb	r3, [r7, #4]
 800f490:	2b0c      	cmp	r3, #12
 800f492:	d10b      	bne.n	800f4ac <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800f494:	797a      	ldrb	r2, [r7, #5]
 800f496:	7bb9      	ldrb	r1, [r7, #14]
 800f498:	4828      	ldr	r0, [pc, #160]	; (800f53c <OLED_ShowChar+0xdc>)
 800f49a:	4613      	mov	r3, r2
 800f49c:	005b      	lsls	r3, r3, #1
 800f49e:	4413      	add	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4403      	add	r3, r0
 800f4a4:	440b      	add	r3, r1
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	73fb      	strb	r3, [r7, #15]
 800f4aa:	e007      	b.n	800f4bc <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800f4ac:	797a      	ldrb	r2, [r7, #5]
 800f4ae:	7bbb      	ldrb	r3, [r7, #14]
 800f4b0:	4923      	ldr	r1, [pc, #140]	; (800f540 <OLED_ShowChar+0xe0>)
 800f4b2:	0112      	lsls	r2, r2, #4
 800f4b4:	440a      	add	r2, r1
 800f4b6:	4413      	add	r3, r2
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800f4bc:	2300      	movs	r3, #0
 800f4be:	737b      	strb	r3, [r7, #13]
 800f4c0:	e02d      	b.n	800f51e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800f4c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	da07      	bge.n	800f4da <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800f4ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f4ce:	79b9      	ldrb	r1, [r7, #6]
 800f4d0:	79fb      	ldrb	r3, [r7, #7]
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7ff ff6a 	bl	800f3ac <OLED_DrawPoint>
 800f4d8:	e00c      	b.n	800f4f4 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800f4da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bf0c      	ite	eq
 800f4e2:	2301      	moveq	r3, #1
 800f4e4:	2300      	movne	r3, #0
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	79b9      	ldrb	r1, [r7, #6]
 800f4ec:	79fb      	ldrb	r3, [r7, #7]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7ff ff5c 	bl	800f3ac <OLED_DrawPoint>
			temp <<= 1;
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
 800f4f6:	005b      	lsls	r3, r3, #1
 800f4f8:	73fb      	strb	r3, [r7, #15]
			y++;
 800f4fa:	79bb      	ldrb	r3, [r7, #6]
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800f500:	79ba      	ldrb	r2, [r7, #6]
 800f502:	7b3b      	ldrb	r3, [r7, #12]
 800f504:	1ad2      	subs	r2, r2, r3
 800f506:	793b      	ldrb	r3, [r7, #4]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d105      	bne.n	800f518 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800f50c:	7b3b      	ldrb	r3, [r7, #12]
 800f50e:	71bb      	strb	r3, [r7, #6]
				x++;
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	3301      	adds	r3, #1
 800f514:	71fb      	strb	r3, [r7, #7]
				break;
 800f516:	e005      	b.n	800f524 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800f518:	7b7b      	ldrb	r3, [r7, #13]
 800f51a:	3301      	adds	r3, #1
 800f51c:	737b      	strb	r3, [r7, #13]
 800f51e:	7b7b      	ldrb	r3, [r7, #13]
 800f520:	2b07      	cmp	r3, #7
 800f522:	d9ce      	bls.n	800f4c2 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800f524:	7bbb      	ldrb	r3, [r7, #14]
 800f526:	3301      	adds	r3, #1
 800f528:	73bb      	strb	r3, [r7, #14]
 800f52a:	7bba      	ldrb	r2, [r7, #14]
 800f52c:	793b      	ldrb	r3, [r7, #4]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d3ad      	bcc.n	800f48e <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800f532:	bf00      	nop
 800f534:	bf00      	nop
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd90      	pop	{r4, r7, pc}
 800f53c:	08010450 	.word	0x08010450
 800f540:	080108c4 	.word	0x080108c4

0800f544 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	460a      	mov	r2, r1
 800f54e:	71fb      	strb	r3, [r7, #7]
 800f550:	4613      	mov	r3, r2
 800f552:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800f554:	2301      	movs	r3, #1
 800f556:	60fb      	str	r3, [r7, #12]
	while (n--)
 800f558:	e004      	b.n	800f564 <oled_pow+0x20>
		result *= m;
 800f55a:	79fa      	ldrb	r2, [r7, #7]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	fb02 f303 	mul.w	r3, r2, r3
 800f562:	60fb      	str	r3, [r7, #12]
	while (n--)
 800f564:	79bb      	ldrb	r3, [r7, #6]
 800f566:	1e5a      	subs	r2, r3, #1
 800f568:	71ba      	strb	r2, [r7, #6]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1f5      	bne.n	800f55a <oled_pow+0x16>
	return result;
 800f56e:	68fb      	ldr	r3, [r7, #12]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3714      	adds	r7, #20
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800f57c:	b590      	push	{r4, r7, lr}
 800f57e:	b087      	sub	sp, #28
 800f580:	af02      	add	r7, sp, #8
 800f582:	603a      	str	r2, [r7, #0]
 800f584:	461a      	mov	r2, r3
 800f586:	4603      	mov	r3, r0
 800f588:	71fb      	strb	r3, [r7, #7]
 800f58a:	460b      	mov	r3, r1
 800f58c:	71bb      	strb	r3, [r7, #6]
 800f58e:	4613      	mov	r3, r2
 800f590:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800f592:	2300      	movs	r3, #0
 800f594:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800f596:	2300      	movs	r3, #0
 800f598:	73fb      	strb	r3, [r7, #15]
 800f59a:	e051      	b.n	800f640 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800f59c:	797a      	ldrb	r2, [r7, #5]
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	200a      	movs	r0, #10
 800f5ac:	f7ff ffca 	bl	800f544 <oled_pow>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5b8:	4b26      	ldr	r3, [pc, #152]	; (800f654 <OLED_ShowNumber+0xd8>)
 800f5ba:	fba3 2301 	umull	r2, r3, r3, r1
 800f5be:	08da      	lsrs	r2, r3, #3
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	1aca      	subs	r2, r1, r3
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800f5ce:	7bbb      	ldrb	r3, [r7, #14]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d11d      	bne.n	800f610 <OLED_ShowNumber+0x94>
 800f5d4:	7bfa      	ldrb	r2, [r7, #15]
 800f5d6:	797b      	ldrb	r3, [r7, #5]
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	da18      	bge.n	800f610 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800f5de:	7b7b      	ldrb	r3, [r7, #13]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d113      	bne.n	800f60c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800f5e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5e8:	085b      	lsrs	r3, r3, #1
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	7bfa      	ldrb	r2, [r7, #15]
 800f5ee:	fb12 f303 	smulbb	r3, r2, r3
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	b2d8      	uxtb	r0, r3
 800f5fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5fe:	79b9      	ldrb	r1, [r7, #6]
 800f600:	2201      	movs	r2, #1
 800f602:	9200      	str	r2, [sp, #0]
 800f604:	2220      	movs	r2, #32
 800f606:	f7ff ff2b 	bl	800f460 <OLED_ShowChar>
				continue;
 800f60a:	e016      	b.n	800f63a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800f60c:	2301      	movs	r3, #1
 800f60e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800f610:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f614:	085b      	lsrs	r3, r3, #1
 800f616:	b2db      	uxtb	r3, r3
 800f618:	7bfa      	ldrb	r2, [r7, #15]
 800f61a:	fb12 f303 	smulbb	r3, r2, r3
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	79fb      	ldrb	r3, [r7, #7]
 800f622:	4413      	add	r3, r2
 800f624:	b2d8      	uxtb	r0, r3
 800f626:	7b7b      	ldrb	r3, [r7, #13]
 800f628:	3330      	adds	r3, #48	; 0x30
 800f62a:	b2da      	uxtb	r2, r3
 800f62c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f630:	79b9      	ldrb	r1, [r7, #6]
 800f632:	2401      	movs	r4, #1
 800f634:	9400      	str	r4, [sp, #0]
 800f636:	f7ff ff13 	bl	800f460 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800f63a:	7bfb      	ldrb	r3, [r7, #15]
 800f63c:	3301      	adds	r3, #1
 800f63e:	73fb      	strb	r3, [r7, #15]
 800f640:	7bfa      	ldrb	r2, [r7, #15]
 800f642:	797b      	ldrb	r3, [r7, #5]
 800f644:	429a      	cmp	r2, r3
 800f646:	d3a9      	bcc.n	800f59c <OLED_ShowNumber+0x20>
	}
}
 800f648:	bf00      	nop
 800f64a:	bf00      	nop
 800f64c:	3714      	adds	r7, #20
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd90      	pop	{r4, r7, pc}
 800f652:	bf00      	nop
 800f654:	cccccccd 	.word	0xcccccccd

0800f658 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af02      	add	r7, sp, #8
 800f65e:	4603      	mov	r3, r0
 800f660:	603a      	str	r2, [r7, #0]
 800f662:	71fb      	strb	r3, [r7, #7]
 800f664:	460b      	mov	r3, r1
 800f666:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800f668:	e01f      	b.n	800f6aa <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800f66a:	79fb      	ldrb	r3, [r7, #7]
 800f66c:	2b7a      	cmp	r3, #122	; 0x7a
 800f66e:	d904      	bls.n	800f67a <OLED_ShowString+0x22>
		{
			x = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800f674:	79bb      	ldrb	r3, [r7, #6]
 800f676:	3310      	adds	r3, #16
 800f678:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800f67a:	79bb      	ldrb	r3, [r7, #6]
 800f67c:	2b3a      	cmp	r3, #58	; 0x3a
 800f67e:	d905      	bls.n	800f68c <OLED_ShowString+0x34>
		{
			y = x = 0;
 800f680:	2300      	movs	r3, #0
 800f682:	71fb      	strb	r3, [r7, #7]
 800f684:	79fb      	ldrb	r3, [r7, #7]
 800f686:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800f688:	f7ff fe6a 	bl	800f360 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	781a      	ldrb	r2, [r3, #0]
 800f690:	79b9      	ldrb	r1, [r7, #6]
 800f692:	79f8      	ldrb	r0, [r7, #7]
 800f694:	2301      	movs	r3, #1
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	230c      	movs	r3, #12
 800f69a:	f7ff fee1 	bl	800f460 <OLED_ShowChar>
		x += 8;
 800f69e:	79fb      	ldrb	r3, [r7, #7]
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	71fb      	strb	r3, [r7, #7]
		p++;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d1db      	bne.n	800f66a <OLED_ShowString+0x12>
	}
}
 800f6b2:	bf00      	nop
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800f6c0:	f7f9 fbb2 	bl	8008e28 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800f6c4:	4b41      	ldr	r3, [pc, #260]	; (800f7cc <OLED_Init+0x110>)
 800f6c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c8:	4a40      	ldr	r2, [pc, #256]	; (800f7cc <OLED_Init+0x110>)
 800f6ca:	f023 0301 	bic.w	r3, r3, #1
 800f6ce:	6713      	str	r3, [r2, #112]	; 0x70
 800f6d0:	4b3e      	ldr	r3, [pc, #248]	; (800f7cc <OLED_Init+0x110>)
 800f6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d4:	4a3d      	ldr	r2, [pc, #244]	; (800f7cc <OLED_Init+0x110>)
 800f6d6:	f023 0304 	bic.w	r3, r3, #4
 800f6da:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800f6dc:	f7f9 fbb8 	bl	8008e50 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2180      	movs	r1, #128	; 0x80
 800f6e4:	483a      	ldr	r0, [pc, #232]	; (800f7d0 <OLED_Init+0x114>)
 800f6e6:	f7f8 fbc5 	bl	8007e74 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800f6ea:	2064      	movs	r0, #100	; 0x64
 800f6ec:	f7f7 fc8e 	bl	800700c <HAL_Delay>
	OLED_RST_Set();
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	2180      	movs	r1, #128	; 0x80
 800f6f4:	4836      	ldr	r0, [pc, #216]	; (800f7d0 <OLED_Init+0x114>)
 800f6f6:	f7f8 fbbd 	bl	8007e74 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	20ae      	movs	r0, #174	; 0xae
 800f6fe:	f7ff fde5 	bl	800f2cc <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800f702:	2100      	movs	r1, #0
 800f704:	20d5      	movs	r0, #213	; 0xd5
 800f706:	f7ff fde1 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800f70a:	2100      	movs	r1, #0
 800f70c:	2050      	movs	r0, #80	; 0x50
 800f70e:	f7ff fddd 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800f712:	2100      	movs	r1, #0
 800f714:	20a8      	movs	r0, #168	; 0xa8
 800f716:	f7ff fdd9 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800f71a:	2100      	movs	r1, #0
 800f71c:	203f      	movs	r0, #63	; 0x3f
 800f71e:	f7ff fdd5 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800f722:	2100      	movs	r1, #0
 800f724:	20d3      	movs	r0, #211	; 0xd3
 800f726:	f7ff fdd1 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800f72a:	2100      	movs	r1, #0
 800f72c:	2000      	movs	r0, #0
 800f72e:	f7ff fdcd 	bl	800f2cc <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800f732:	2100      	movs	r1, #0
 800f734:	2040      	movs	r0, #64	; 0x40
 800f736:	f7ff fdc9 	bl	800f2cc <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800f73a:	2100      	movs	r1, #0
 800f73c:	208d      	movs	r0, #141	; 0x8d
 800f73e:	f7ff fdc5 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800f742:	2100      	movs	r1, #0
 800f744:	2014      	movs	r0, #20
 800f746:	f7ff fdc1 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800f74a:	2100      	movs	r1, #0
 800f74c:	2020      	movs	r0, #32
 800f74e:	f7ff fdbd 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800f752:	2100      	movs	r1, #0
 800f754:	2002      	movs	r0, #2
 800f756:	f7ff fdb9 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800f75a:	2100      	movs	r1, #0
 800f75c:	20a1      	movs	r0, #161	; 0xa1
 800f75e:	f7ff fdb5 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800f762:	2100      	movs	r1, #0
 800f764:	20c0      	movs	r0, #192	; 0xc0
 800f766:	f7ff fdb1 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800f76a:	2100      	movs	r1, #0
 800f76c:	20da      	movs	r0, #218	; 0xda
 800f76e:	f7ff fdad 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800f772:	2100      	movs	r1, #0
 800f774:	2012      	movs	r0, #18
 800f776:	f7ff fda9 	bl	800f2cc <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800f77a:	2100      	movs	r1, #0
 800f77c:	2081      	movs	r0, #129	; 0x81
 800f77e:	f7ff fda5 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800f782:	2100      	movs	r1, #0
 800f784:	20ef      	movs	r0, #239	; 0xef
 800f786:	f7ff fda1 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800f78a:	2100      	movs	r1, #0
 800f78c:	20d9      	movs	r0, #217	; 0xd9
 800f78e:	f7ff fd9d 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800f792:	2100      	movs	r1, #0
 800f794:	20f1      	movs	r0, #241	; 0xf1
 800f796:	f7ff fd99 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800f79a:	2100      	movs	r1, #0
 800f79c:	20db      	movs	r0, #219	; 0xdb
 800f79e:	f7ff fd95 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	2030      	movs	r0, #48	; 0x30
 800f7a6:	f7ff fd91 	bl	800f2cc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	20a4      	movs	r0, #164	; 0xa4
 800f7ae:	f7ff fd8d 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	20a6      	movs	r0, #166	; 0xa6
 800f7b6:	f7ff fd89 	bl	800f2cc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	20af      	movs	r0, #175	; 0xaf
 800f7be:	f7ff fd85 	bl	800f2cc <OLED_WR_Byte>
	OLED_Clear();
 800f7c2:	f7ff fdcd 	bl	800f360 <OLED_Clear>
 800f7c6:	bf00      	nop
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	40023800 	.word	0x40023800
 800f7d0:	40021000 	.word	0x40021000

0800f7d4 <sniprintf>:
 800f7d4:	b40c      	push	{r2, r3}
 800f7d6:	b530      	push	{r4, r5, lr}
 800f7d8:	4b17      	ldr	r3, [pc, #92]	; (800f838 <sniprintf+0x64>)
 800f7da:	1e0c      	subs	r4, r1, #0
 800f7dc:	681d      	ldr	r5, [r3, #0]
 800f7de:	b09d      	sub	sp, #116	; 0x74
 800f7e0:	da08      	bge.n	800f7f4 <sniprintf+0x20>
 800f7e2:	238b      	movs	r3, #139	; 0x8b
 800f7e4:	602b      	str	r3, [r5, #0]
 800f7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7ea:	b01d      	add	sp, #116	; 0x74
 800f7ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7f0:	b002      	add	sp, #8
 800f7f2:	4770      	bx	lr
 800f7f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f7f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f7fc:	bf14      	ite	ne
 800f7fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f802:	4623      	moveq	r3, r4
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	9307      	str	r3, [sp, #28]
 800f808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f80c:	9002      	str	r0, [sp, #8]
 800f80e:	9006      	str	r0, [sp, #24]
 800f810:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f814:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f816:	ab21      	add	r3, sp, #132	; 0x84
 800f818:	a902      	add	r1, sp, #8
 800f81a:	4628      	mov	r0, r5
 800f81c:	9301      	str	r3, [sp, #4]
 800f81e:	f000 f8a9 	bl	800f974 <_svfiprintf_r>
 800f822:	1c43      	adds	r3, r0, #1
 800f824:	bfbc      	itt	lt
 800f826:	238b      	movlt	r3, #139	; 0x8b
 800f828:	602b      	strlt	r3, [r5, #0]
 800f82a:	2c00      	cmp	r4, #0
 800f82c:	d0dd      	beq.n	800f7ea <sniprintf+0x16>
 800f82e:	9b02      	ldr	r3, [sp, #8]
 800f830:	2200      	movs	r2, #0
 800f832:	701a      	strb	r2, [r3, #0]
 800f834:	e7d9      	b.n	800f7ea <sniprintf+0x16>
 800f836:	bf00      	nop
 800f838:	200001a0 	.word	0x200001a0

0800f83c <memset>:
 800f83c:	4402      	add	r2, r0
 800f83e:	4603      	mov	r3, r0
 800f840:	4293      	cmp	r3, r2
 800f842:	d100      	bne.n	800f846 <memset+0xa>
 800f844:	4770      	bx	lr
 800f846:	f803 1b01 	strb.w	r1, [r3], #1
 800f84a:	e7f9      	b.n	800f840 <memset+0x4>

0800f84c <__errno>:
 800f84c:	4b01      	ldr	r3, [pc, #4]	; (800f854 <__errno+0x8>)
 800f84e:	6818      	ldr	r0, [r3, #0]
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	200001a0 	.word	0x200001a0

0800f858 <__libc_init_array>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	4d0d      	ldr	r5, [pc, #52]	; (800f890 <__libc_init_array+0x38>)
 800f85c:	4c0d      	ldr	r4, [pc, #52]	; (800f894 <__libc_init_array+0x3c>)
 800f85e:	1b64      	subs	r4, r4, r5
 800f860:	10a4      	asrs	r4, r4, #2
 800f862:	2600      	movs	r6, #0
 800f864:	42a6      	cmp	r6, r4
 800f866:	d109      	bne.n	800f87c <__libc_init_array+0x24>
 800f868:	4d0b      	ldr	r5, [pc, #44]	; (800f898 <__libc_init_array+0x40>)
 800f86a:	4c0c      	ldr	r4, [pc, #48]	; (800f89c <__libc_init_array+0x44>)
 800f86c:	f000 fc6a 	bl	8010144 <_init>
 800f870:	1b64      	subs	r4, r4, r5
 800f872:	10a4      	asrs	r4, r4, #2
 800f874:	2600      	movs	r6, #0
 800f876:	42a6      	cmp	r6, r4
 800f878:	d105      	bne.n	800f886 <__libc_init_array+0x2e>
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f880:	4798      	blx	r3
 800f882:	3601      	adds	r6, #1
 800f884:	e7ee      	b.n	800f864 <__libc_init_array+0xc>
 800f886:	f855 3b04 	ldr.w	r3, [r5], #4
 800f88a:	4798      	blx	r3
 800f88c:	3601      	adds	r6, #1
 800f88e:	e7f2      	b.n	800f876 <__libc_init_array+0x1e>
 800f890:	08010ef0 	.word	0x08010ef0
 800f894:	08010ef0 	.word	0x08010ef0
 800f898:	08010ef0 	.word	0x08010ef0
 800f89c:	08010ef4 	.word	0x08010ef4

0800f8a0 <__retarget_lock_acquire_recursive>:
 800f8a0:	4770      	bx	lr

0800f8a2 <__retarget_lock_release_recursive>:
 800f8a2:	4770      	bx	lr

0800f8a4 <memcpy>:
 800f8a4:	440a      	add	r2, r1
 800f8a6:	4291      	cmp	r1, r2
 800f8a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f8ac:	d100      	bne.n	800f8b0 <memcpy+0xc>
 800f8ae:	4770      	bx	lr
 800f8b0:	b510      	push	{r4, lr}
 800f8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ba:	4291      	cmp	r1, r2
 800f8bc:	d1f9      	bne.n	800f8b2 <memcpy+0xe>
 800f8be:	bd10      	pop	{r4, pc}

0800f8c0 <__ssputs_r>:
 800f8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c4:	688e      	ldr	r6, [r1, #8]
 800f8c6:	461f      	mov	r7, r3
 800f8c8:	42be      	cmp	r6, r7
 800f8ca:	680b      	ldr	r3, [r1, #0]
 800f8cc:	4682      	mov	sl, r0
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	4690      	mov	r8, r2
 800f8d2:	d82c      	bhi.n	800f92e <__ssputs_r+0x6e>
 800f8d4:	898a      	ldrh	r2, [r1, #12]
 800f8d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8da:	d026      	beq.n	800f92a <__ssputs_r+0x6a>
 800f8dc:	6965      	ldr	r5, [r4, #20]
 800f8de:	6909      	ldr	r1, [r1, #16]
 800f8e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8e4:	eba3 0901 	sub.w	r9, r3, r1
 800f8e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8ec:	1c7b      	adds	r3, r7, #1
 800f8ee:	444b      	add	r3, r9
 800f8f0:	106d      	asrs	r5, r5, #1
 800f8f2:	429d      	cmp	r5, r3
 800f8f4:	bf38      	it	cc
 800f8f6:	461d      	movcc	r5, r3
 800f8f8:	0553      	lsls	r3, r2, #21
 800f8fa:	d527      	bpl.n	800f94c <__ssputs_r+0x8c>
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	f000 f957 	bl	800fbb0 <_malloc_r>
 800f902:	4606      	mov	r6, r0
 800f904:	b360      	cbz	r0, 800f960 <__ssputs_r+0xa0>
 800f906:	6921      	ldr	r1, [r4, #16]
 800f908:	464a      	mov	r2, r9
 800f90a:	f7ff ffcb 	bl	800f8a4 <memcpy>
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f918:	81a3      	strh	r3, [r4, #12]
 800f91a:	6126      	str	r6, [r4, #16]
 800f91c:	6165      	str	r5, [r4, #20]
 800f91e:	444e      	add	r6, r9
 800f920:	eba5 0509 	sub.w	r5, r5, r9
 800f924:	6026      	str	r6, [r4, #0]
 800f926:	60a5      	str	r5, [r4, #8]
 800f928:	463e      	mov	r6, r7
 800f92a:	42be      	cmp	r6, r7
 800f92c:	d900      	bls.n	800f930 <__ssputs_r+0x70>
 800f92e:	463e      	mov	r6, r7
 800f930:	6820      	ldr	r0, [r4, #0]
 800f932:	4632      	mov	r2, r6
 800f934:	4641      	mov	r1, r8
 800f936:	f000 fb86 	bl	8010046 <memmove>
 800f93a:	68a3      	ldr	r3, [r4, #8]
 800f93c:	1b9b      	subs	r3, r3, r6
 800f93e:	60a3      	str	r3, [r4, #8]
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	4433      	add	r3, r6
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	2000      	movs	r0, #0
 800f948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94c:	462a      	mov	r2, r5
 800f94e:	f000 fb4b 	bl	800ffe8 <_realloc_r>
 800f952:	4606      	mov	r6, r0
 800f954:	2800      	cmp	r0, #0
 800f956:	d1e0      	bne.n	800f91a <__ssputs_r+0x5a>
 800f958:	6921      	ldr	r1, [r4, #16]
 800f95a:	4650      	mov	r0, sl
 800f95c:	f000 fb9e 	bl	801009c <_free_r>
 800f960:	230c      	movs	r3, #12
 800f962:	f8ca 3000 	str.w	r3, [sl]
 800f966:	89a3      	ldrh	r3, [r4, #12]
 800f968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f96c:	81a3      	strh	r3, [r4, #12]
 800f96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f972:	e7e9      	b.n	800f948 <__ssputs_r+0x88>

0800f974 <_svfiprintf_r>:
 800f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f978:	4698      	mov	r8, r3
 800f97a:	898b      	ldrh	r3, [r1, #12]
 800f97c:	061b      	lsls	r3, r3, #24
 800f97e:	b09d      	sub	sp, #116	; 0x74
 800f980:	4607      	mov	r7, r0
 800f982:	460d      	mov	r5, r1
 800f984:	4614      	mov	r4, r2
 800f986:	d50e      	bpl.n	800f9a6 <_svfiprintf_r+0x32>
 800f988:	690b      	ldr	r3, [r1, #16]
 800f98a:	b963      	cbnz	r3, 800f9a6 <_svfiprintf_r+0x32>
 800f98c:	2140      	movs	r1, #64	; 0x40
 800f98e:	f000 f90f 	bl	800fbb0 <_malloc_r>
 800f992:	6028      	str	r0, [r5, #0]
 800f994:	6128      	str	r0, [r5, #16]
 800f996:	b920      	cbnz	r0, 800f9a2 <_svfiprintf_r+0x2e>
 800f998:	230c      	movs	r3, #12
 800f99a:	603b      	str	r3, [r7, #0]
 800f99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9a0:	e0d0      	b.n	800fb44 <_svfiprintf_r+0x1d0>
 800f9a2:	2340      	movs	r3, #64	; 0x40
 800f9a4:	616b      	str	r3, [r5, #20]
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9aa:	2320      	movs	r3, #32
 800f9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b4:	2330      	movs	r3, #48	; 0x30
 800f9b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb5c <_svfiprintf_r+0x1e8>
 800f9ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9be:	f04f 0901 	mov.w	r9, #1
 800f9c2:	4623      	mov	r3, r4
 800f9c4:	469a      	mov	sl, r3
 800f9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ca:	b10a      	cbz	r2, 800f9d0 <_svfiprintf_r+0x5c>
 800f9cc:	2a25      	cmp	r2, #37	; 0x25
 800f9ce:	d1f9      	bne.n	800f9c4 <_svfiprintf_r+0x50>
 800f9d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d4:	d00b      	beq.n	800f9ee <_svfiprintf_r+0x7a>
 800f9d6:	465b      	mov	r3, fp
 800f9d8:	4622      	mov	r2, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f7ff ff6f 	bl	800f8c0 <__ssputs_r>
 800f9e2:	3001      	adds	r0, #1
 800f9e4:	f000 80a9 	beq.w	800fb3a <_svfiprintf_r+0x1c6>
 800f9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9ea:	445a      	add	r2, fp
 800f9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f000 80a1 	beq.w	800fb3a <_svfiprintf_r+0x1c6>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa02:	f10a 0a01 	add.w	sl, sl, #1
 800fa06:	9304      	str	r3, [sp, #16]
 800fa08:	9307      	str	r3, [sp, #28]
 800fa0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa0e:	931a      	str	r3, [sp, #104]	; 0x68
 800fa10:	4654      	mov	r4, sl
 800fa12:	2205      	movs	r2, #5
 800fa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa18:	4850      	ldr	r0, [pc, #320]	; (800fb5c <_svfiprintf_r+0x1e8>)
 800fa1a:	f7f0 fbd9 	bl	80001d0 <memchr>
 800fa1e:	9a04      	ldr	r2, [sp, #16]
 800fa20:	b9d8      	cbnz	r0, 800fa5a <_svfiprintf_r+0xe6>
 800fa22:	06d0      	lsls	r0, r2, #27
 800fa24:	bf44      	itt	mi
 800fa26:	2320      	movmi	r3, #32
 800fa28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa2c:	0711      	lsls	r1, r2, #28
 800fa2e:	bf44      	itt	mi
 800fa30:	232b      	movmi	r3, #43	; 0x2b
 800fa32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa36:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3c:	d015      	beq.n	800fa6a <_svfiprintf_r+0xf6>
 800fa3e:	9a07      	ldr	r2, [sp, #28]
 800fa40:	4654      	mov	r4, sl
 800fa42:	2000      	movs	r0, #0
 800fa44:	f04f 0c0a 	mov.w	ip, #10
 800fa48:	4621      	mov	r1, r4
 800fa4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa4e:	3b30      	subs	r3, #48	; 0x30
 800fa50:	2b09      	cmp	r3, #9
 800fa52:	d94d      	bls.n	800faf0 <_svfiprintf_r+0x17c>
 800fa54:	b1b0      	cbz	r0, 800fa84 <_svfiprintf_r+0x110>
 800fa56:	9207      	str	r2, [sp, #28]
 800fa58:	e014      	b.n	800fa84 <_svfiprintf_r+0x110>
 800fa5a:	eba0 0308 	sub.w	r3, r0, r8
 800fa5e:	fa09 f303 	lsl.w	r3, r9, r3
 800fa62:	4313      	orrs	r3, r2
 800fa64:	9304      	str	r3, [sp, #16]
 800fa66:	46a2      	mov	sl, r4
 800fa68:	e7d2      	b.n	800fa10 <_svfiprintf_r+0x9c>
 800fa6a:	9b03      	ldr	r3, [sp, #12]
 800fa6c:	1d19      	adds	r1, r3, #4
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	9103      	str	r1, [sp, #12]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	bfbb      	ittet	lt
 800fa76:	425b      	neglt	r3, r3
 800fa78:	f042 0202 	orrlt.w	r2, r2, #2
 800fa7c:	9307      	strge	r3, [sp, #28]
 800fa7e:	9307      	strlt	r3, [sp, #28]
 800fa80:	bfb8      	it	lt
 800fa82:	9204      	strlt	r2, [sp, #16]
 800fa84:	7823      	ldrb	r3, [r4, #0]
 800fa86:	2b2e      	cmp	r3, #46	; 0x2e
 800fa88:	d10c      	bne.n	800faa4 <_svfiprintf_r+0x130>
 800fa8a:	7863      	ldrb	r3, [r4, #1]
 800fa8c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa8e:	d134      	bne.n	800fafa <_svfiprintf_r+0x186>
 800fa90:	9b03      	ldr	r3, [sp, #12]
 800fa92:	1d1a      	adds	r2, r3, #4
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	9203      	str	r2, [sp, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	bfb8      	it	lt
 800fa9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800faa0:	3402      	adds	r4, #2
 800faa2:	9305      	str	r3, [sp, #20]
 800faa4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fb6c <_svfiprintf_r+0x1f8>
 800faa8:	7821      	ldrb	r1, [r4, #0]
 800faaa:	2203      	movs	r2, #3
 800faac:	4650      	mov	r0, sl
 800faae:	f7f0 fb8f 	bl	80001d0 <memchr>
 800fab2:	b138      	cbz	r0, 800fac4 <_svfiprintf_r+0x150>
 800fab4:	9b04      	ldr	r3, [sp, #16]
 800fab6:	eba0 000a 	sub.w	r0, r0, sl
 800faba:	2240      	movs	r2, #64	; 0x40
 800fabc:	4082      	lsls	r2, r0
 800fabe:	4313      	orrs	r3, r2
 800fac0:	3401      	adds	r4, #1
 800fac2:	9304      	str	r3, [sp, #16]
 800fac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac8:	4825      	ldr	r0, [pc, #148]	; (800fb60 <_svfiprintf_r+0x1ec>)
 800faca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800face:	2206      	movs	r2, #6
 800fad0:	f7f0 fb7e 	bl	80001d0 <memchr>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d038      	beq.n	800fb4a <_svfiprintf_r+0x1d6>
 800fad8:	4b22      	ldr	r3, [pc, #136]	; (800fb64 <_svfiprintf_r+0x1f0>)
 800fada:	bb1b      	cbnz	r3, 800fb24 <_svfiprintf_r+0x1b0>
 800fadc:	9b03      	ldr	r3, [sp, #12]
 800fade:	3307      	adds	r3, #7
 800fae0:	f023 0307 	bic.w	r3, r3, #7
 800fae4:	3308      	adds	r3, #8
 800fae6:	9303      	str	r3, [sp, #12]
 800fae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faea:	4433      	add	r3, r6
 800faec:	9309      	str	r3, [sp, #36]	; 0x24
 800faee:	e768      	b.n	800f9c2 <_svfiprintf_r+0x4e>
 800faf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf4:	460c      	mov	r4, r1
 800faf6:	2001      	movs	r0, #1
 800faf8:	e7a6      	b.n	800fa48 <_svfiprintf_r+0xd4>
 800fafa:	2300      	movs	r3, #0
 800fafc:	3401      	adds	r4, #1
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	4619      	mov	r1, r3
 800fb02:	f04f 0c0a 	mov.w	ip, #10
 800fb06:	4620      	mov	r0, r4
 800fb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb0c:	3a30      	subs	r2, #48	; 0x30
 800fb0e:	2a09      	cmp	r2, #9
 800fb10:	d903      	bls.n	800fb1a <_svfiprintf_r+0x1a6>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0c6      	beq.n	800faa4 <_svfiprintf_r+0x130>
 800fb16:	9105      	str	r1, [sp, #20]
 800fb18:	e7c4      	b.n	800faa4 <_svfiprintf_r+0x130>
 800fb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb1e:	4604      	mov	r4, r0
 800fb20:	2301      	movs	r3, #1
 800fb22:	e7f0      	b.n	800fb06 <_svfiprintf_r+0x192>
 800fb24:	ab03      	add	r3, sp, #12
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	462a      	mov	r2, r5
 800fb2a:	4b0f      	ldr	r3, [pc, #60]	; (800fb68 <_svfiprintf_r+0x1f4>)
 800fb2c:	a904      	add	r1, sp, #16
 800fb2e:	4638      	mov	r0, r7
 800fb30:	f3af 8000 	nop.w
 800fb34:	1c42      	adds	r2, r0, #1
 800fb36:	4606      	mov	r6, r0
 800fb38:	d1d6      	bne.n	800fae8 <_svfiprintf_r+0x174>
 800fb3a:	89ab      	ldrh	r3, [r5, #12]
 800fb3c:	065b      	lsls	r3, r3, #25
 800fb3e:	f53f af2d 	bmi.w	800f99c <_svfiprintf_r+0x28>
 800fb42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb44:	b01d      	add	sp, #116	; 0x74
 800fb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4a:	ab03      	add	r3, sp, #12
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	462a      	mov	r2, r5
 800fb50:	4b05      	ldr	r3, [pc, #20]	; (800fb68 <_svfiprintf_r+0x1f4>)
 800fb52:	a904      	add	r1, sp, #16
 800fb54:	4638      	mov	r0, r7
 800fb56:	f000 f919 	bl	800fd8c <_printf_i>
 800fb5a:	e7eb      	b.n	800fb34 <_svfiprintf_r+0x1c0>
 800fb5c:	08010eb4 	.word	0x08010eb4
 800fb60:	08010ebe 	.word	0x08010ebe
 800fb64:	00000000 	.word	0x00000000
 800fb68:	0800f8c1 	.word	0x0800f8c1
 800fb6c:	08010eba 	.word	0x08010eba

0800fb70 <sbrk_aligned>:
 800fb70:	b570      	push	{r4, r5, r6, lr}
 800fb72:	4e0e      	ldr	r6, [pc, #56]	; (800fbac <sbrk_aligned+0x3c>)
 800fb74:	460c      	mov	r4, r1
 800fb76:	6831      	ldr	r1, [r6, #0]
 800fb78:	4605      	mov	r5, r0
 800fb7a:	b911      	cbnz	r1, 800fb82 <sbrk_aligned+0x12>
 800fb7c:	f000 fa7e 	bl	801007c <_sbrk_r>
 800fb80:	6030      	str	r0, [r6, #0]
 800fb82:	4621      	mov	r1, r4
 800fb84:	4628      	mov	r0, r5
 800fb86:	f000 fa79 	bl	801007c <_sbrk_r>
 800fb8a:	1c43      	adds	r3, r0, #1
 800fb8c:	d00a      	beq.n	800fba4 <sbrk_aligned+0x34>
 800fb8e:	1cc4      	adds	r4, r0, #3
 800fb90:	f024 0403 	bic.w	r4, r4, #3
 800fb94:	42a0      	cmp	r0, r4
 800fb96:	d007      	beq.n	800fba8 <sbrk_aligned+0x38>
 800fb98:	1a21      	subs	r1, r4, r0
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f000 fa6e 	bl	801007c <_sbrk_r>
 800fba0:	3001      	adds	r0, #1
 800fba2:	d101      	bne.n	800fba8 <sbrk_aligned+0x38>
 800fba4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fba8:	4620      	mov	r0, r4
 800fbaa:	bd70      	pop	{r4, r5, r6, pc}
 800fbac:	2000544c 	.word	0x2000544c

0800fbb0 <_malloc_r>:
 800fbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbb4:	1ccd      	adds	r5, r1, #3
 800fbb6:	f025 0503 	bic.w	r5, r5, #3
 800fbba:	3508      	adds	r5, #8
 800fbbc:	2d0c      	cmp	r5, #12
 800fbbe:	bf38      	it	cc
 800fbc0:	250c      	movcc	r5, #12
 800fbc2:	2d00      	cmp	r5, #0
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	db01      	blt.n	800fbcc <_malloc_r+0x1c>
 800fbc8:	42a9      	cmp	r1, r5
 800fbca:	d905      	bls.n	800fbd8 <_malloc_r+0x28>
 800fbcc:	230c      	movs	r3, #12
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	2600      	movs	r6, #0
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fcac <_malloc_r+0xfc>
 800fbdc:	f000 f9f8 	bl	800ffd0 <__malloc_lock>
 800fbe0:	f8d8 3000 	ldr.w	r3, [r8]
 800fbe4:	461c      	mov	r4, r3
 800fbe6:	bb5c      	cbnz	r4, 800fc40 <_malloc_r+0x90>
 800fbe8:	4629      	mov	r1, r5
 800fbea:	4638      	mov	r0, r7
 800fbec:	f7ff ffc0 	bl	800fb70 <sbrk_aligned>
 800fbf0:	1c43      	adds	r3, r0, #1
 800fbf2:	4604      	mov	r4, r0
 800fbf4:	d155      	bne.n	800fca2 <_malloc_r+0xf2>
 800fbf6:	f8d8 4000 	ldr.w	r4, [r8]
 800fbfa:	4626      	mov	r6, r4
 800fbfc:	2e00      	cmp	r6, #0
 800fbfe:	d145      	bne.n	800fc8c <_malloc_r+0xdc>
 800fc00:	2c00      	cmp	r4, #0
 800fc02:	d048      	beq.n	800fc96 <_malloc_r+0xe6>
 800fc04:	6823      	ldr	r3, [r4, #0]
 800fc06:	4631      	mov	r1, r6
 800fc08:	4638      	mov	r0, r7
 800fc0a:	eb04 0903 	add.w	r9, r4, r3
 800fc0e:	f000 fa35 	bl	801007c <_sbrk_r>
 800fc12:	4581      	cmp	r9, r0
 800fc14:	d13f      	bne.n	800fc96 <_malloc_r+0xe6>
 800fc16:	6821      	ldr	r1, [r4, #0]
 800fc18:	1a6d      	subs	r5, r5, r1
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	4638      	mov	r0, r7
 800fc1e:	f7ff ffa7 	bl	800fb70 <sbrk_aligned>
 800fc22:	3001      	adds	r0, #1
 800fc24:	d037      	beq.n	800fc96 <_malloc_r+0xe6>
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	442b      	add	r3, r5
 800fc2a:	6023      	str	r3, [r4, #0]
 800fc2c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d038      	beq.n	800fca6 <_malloc_r+0xf6>
 800fc34:	685a      	ldr	r2, [r3, #4]
 800fc36:	42a2      	cmp	r2, r4
 800fc38:	d12b      	bne.n	800fc92 <_malloc_r+0xe2>
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	605a      	str	r2, [r3, #4]
 800fc3e:	e00f      	b.n	800fc60 <_malloc_r+0xb0>
 800fc40:	6822      	ldr	r2, [r4, #0]
 800fc42:	1b52      	subs	r2, r2, r5
 800fc44:	d41f      	bmi.n	800fc86 <_malloc_r+0xd6>
 800fc46:	2a0b      	cmp	r2, #11
 800fc48:	d917      	bls.n	800fc7a <_malloc_r+0xca>
 800fc4a:	1961      	adds	r1, r4, r5
 800fc4c:	42a3      	cmp	r3, r4
 800fc4e:	6025      	str	r5, [r4, #0]
 800fc50:	bf18      	it	ne
 800fc52:	6059      	strne	r1, [r3, #4]
 800fc54:	6863      	ldr	r3, [r4, #4]
 800fc56:	bf08      	it	eq
 800fc58:	f8c8 1000 	streq.w	r1, [r8]
 800fc5c:	5162      	str	r2, [r4, r5]
 800fc5e:	604b      	str	r3, [r1, #4]
 800fc60:	4638      	mov	r0, r7
 800fc62:	f104 060b 	add.w	r6, r4, #11
 800fc66:	f000 f9b9 	bl	800ffdc <__malloc_unlock>
 800fc6a:	f026 0607 	bic.w	r6, r6, #7
 800fc6e:	1d23      	adds	r3, r4, #4
 800fc70:	1af2      	subs	r2, r6, r3
 800fc72:	d0ae      	beq.n	800fbd2 <_malloc_r+0x22>
 800fc74:	1b9b      	subs	r3, r3, r6
 800fc76:	50a3      	str	r3, [r4, r2]
 800fc78:	e7ab      	b.n	800fbd2 <_malloc_r+0x22>
 800fc7a:	42a3      	cmp	r3, r4
 800fc7c:	6862      	ldr	r2, [r4, #4]
 800fc7e:	d1dd      	bne.n	800fc3c <_malloc_r+0x8c>
 800fc80:	f8c8 2000 	str.w	r2, [r8]
 800fc84:	e7ec      	b.n	800fc60 <_malloc_r+0xb0>
 800fc86:	4623      	mov	r3, r4
 800fc88:	6864      	ldr	r4, [r4, #4]
 800fc8a:	e7ac      	b.n	800fbe6 <_malloc_r+0x36>
 800fc8c:	4634      	mov	r4, r6
 800fc8e:	6876      	ldr	r6, [r6, #4]
 800fc90:	e7b4      	b.n	800fbfc <_malloc_r+0x4c>
 800fc92:	4613      	mov	r3, r2
 800fc94:	e7cc      	b.n	800fc30 <_malloc_r+0x80>
 800fc96:	230c      	movs	r3, #12
 800fc98:	603b      	str	r3, [r7, #0]
 800fc9a:	4638      	mov	r0, r7
 800fc9c:	f000 f99e 	bl	800ffdc <__malloc_unlock>
 800fca0:	e797      	b.n	800fbd2 <_malloc_r+0x22>
 800fca2:	6025      	str	r5, [r4, #0]
 800fca4:	e7dc      	b.n	800fc60 <_malloc_r+0xb0>
 800fca6:	605b      	str	r3, [r3, #4]
 800fca8:	deff      	udf	#255	; 0xff
 800fcaa:	bf00      	nop
 800fcac:	20005448 	.word	0x20005448

0800fcb0 <_printf_common>:
 800fcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb4:	4616      	mov	r6, r2
 800fcb6:	4699      	mov	r9, r3
 800fcb8:	688a      	ldr	r2, [r1, #8]
 800fcba:	690b      	ldr	r3, [r1, #16]
 800fcbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	bfb8      	it	lt
 800fcc4:	4613      	movlt	r3, r2
 800fcc6:	6033      	str	r3, [r6, #0]
 800fcc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fccc:	4607      	mov	r7, r0
 800fcce:	460c      	mov	r4, r1
 800fcd0:	b10a      	cbz	r2, 800fcd6 <_printf_common+0x26>
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	6033      	str	r3, [r6, #0]
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	0699      	lsls	r1, r3, #26
 800fcda:	bf42      	ittt	mi
 800fcdc:	6833      	ldrmi	r3, [r6, #0]
 800fcde:	3302      	addmi	r3, #2
 800fce0:	6033      	strmi	r3, [r6, #0]
 800fce2:	6825      	ldr	r5, [r4, #0]
 800fce4:	f015 0506 	ands.w	r5, r5, #6
 800fce8:	d106      	bne.n	800fcf8 <_printf_common+0x48>
 800fcea:	f104 0a19 	add.w	sl, r4, #25
 800fcee:	68e3      	ldr	r3, [r4, #12]
 800fcf0:	6832      	ldr	r2, [r6, #0]
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	42ab      	cmp	r3, r5
 800fcf6:	dc26      	bgt.n	800fd46 <_printf_common+0x96>
 800fcf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcfc:	1e13      	subs	r3, r2, #0
 800fcfe:	6822      	ldr	r2, [r4, #0]
 800fd00:	bf18      	it	ne
 800fd02:	2301      	movne	r3, #1
 800fd04:	0692      	lsls	r2, r2, #26
 800fd06:	d42b      	bmi.n	800fd60 <_printf_common+0xb0>
 800fd08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd0c:	4649      	mov	r1, r9
 800fd0e:	4638      	mov	r0, r7
 800fd10:	47c0      	blx	r8
 800fd12:	3001      	adds	r0, #1
 800fd14:	d01e      	beq.n	800fd54 <_printf_common+0xa4>
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	6922      	ldr	r2, [r4, #16]
 800fd1a:	f003 0306 	and.w	r3, r3, #6
 800fd1e:	2b04      	cmp	r3, #4
 800fd20:	bf02      	ittt	eq
 800fd22:	68e5      	ldreq	r5, [r4, #12]
 800fd24:	6833      	ldreq	r3, [r6, #0]
 800fd26:	1aed      	subeq	r5, r5, r3
 800fd28:	68a3      	ldr	r3, [r4, #8]
 800fd2a:	bf0c      	ite	eq
 800fd2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd30:	2500      	movne	r5, #0
 800fd32:	4293      	cmp	r3, r2
 800fd34:	bfc4      	itt	gt
 800fd36:	1a9b      	subgt	r3, r3, r2
 800fd38:	18ed      	addgt	r5, r5, r3
 800fd3a:	2600      	movs	r6, #0
 800fd3c:	341a      	adds	r4, #26
 800fd3e:	42b5      	cmp	r5, r6
 800fd40:	d11a      	bne.n	800fd78 <_printf_common+0xc8>
 800fd42:	2000      	movs	r0, #0
 800fd44:	e008      	b.n	800fd58 <_printf_common+0xa8>
 800fd46:	2301      	movs	r3, #1
 800fd48:	4652      	mov	r2, sl
 800fd4a:	4649      	mov	r1, r9
 800fd4c:	4638      	mov	r0, r7
 800fd4e:	47c0      	blx	r8
 800fd50:	3001      	adds	r0, #1
 800fd52:	d103      	bne.n	800fd5c <_printf_common+0xac>
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5c:	3501      	adds	r5, #1
 800fd5e:	e7c6      	b.n	800fcee <_printf_common+0x3e>
 800fd60:	18e1      	adds	r1, r4, r3
 800fd62:	1c5a      	adds	r2, r3, #1
 800fd64:	2030      	movs	r0, #48	; 0x30
 800fd66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd6a:	4422      	add	r2, r4
 800fd6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd74:	3302      	adds	r3, #2
 800fd76:	e7c7      	b.n	800fd08 <_printf_common+0x58>
 800fd78:	2301      	movs	r3, #1
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	4649      	mov	r1, r9
 800fd7e:	4638      	mov	r0, r7
 800fd80:	47c0      	blx	r8
 800fd82:	3001      	adds	r0, #1
 800fd84:	d0e6      	beq.n	800fd54 <_printf_common+0xa4>
 800fd86:	3601      	adds	r6, #1
 800fd88:	e7d9      	b.n	800fd3e <_printf_common+0x8e>
	...

0800fd8c <_printf_i>:
 800fd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd90:	7e0f      	ldrb	r7, [r1, #24]
 800fd92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd94:	2f78      	cmp	r7, #120	; 0x78
 800fd96:	4691      	mov	r9, r2
 800fd98:	4680      	mov	r8, r0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	469a      	mov	sl, r3
 800fd9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fda2:	d807      	bhi.n	800fdb4 <_printf_i+0x28>
 800fda4:	2f62      	cmp	r7, #98	; 0x62
 800fda6:	d80a      	bhi.n	800fdbe <_printf_i+0x32>
 800fda8:	2f00      	cmp	r7, #0
 800fdaa:	f000 80d4 	beq.w	800ff56 <_printf_i+0x1ca>
 800fdae:	2f58      	cmp	r7, #88	; 0x58
 800fdb0:	f000 80c0 	beq.w	800ff34 <_printf_i+0x1a8>
 800fdb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdbc:	e03a      	b.n	800fe34 <_printf_i+0xa8>
 800fdbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdc2:	2b15      	cmp	r3, #21
 800fdc4:	d8f6      	bhi.n	800fdb4 <_printf_i+0x28>
 800fdc6:	a101      	add	r1, pc, #4	; (adr r1, 800fdcc <_printf_i+0x40>)
 800fdc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fdcc:	0800fe25 	.word	0x0800fe25
 800fdd0:	0800fe39 	.word	0x0800fe39
 800fdd4:	0800fdb5 	.word	0x0800fdb5
 800fdd8:	0800fdb5 	.word	0x0800fdb5
 800fddc:	0800fdb5 	.word	0x0800fdb5
 800fde0:	0800fdb5 	.word	0x0800fdb5
 800fde4:	0800fe39 	.word	0x0800fe39
 800fde8:	0800fdb5 	.word	0x0800fdb5
 800fdec:	0800fdb5 	.word	0x0800fdb5
 800fdf0:	0800fdb5 	.word	0x0800fdb5
 800fdf4:	0800fdb5 	.word	0x0800fdb5
 800fdf8:	0800ff3d 	.word	0x0800ff3d
 800fdfc:	0800fe65 	.word	0x0800fe65
 800fe00:	0800fef7 	.word	0x0800fef7
 800fe04:	0800fdb5 	.word	0x0800fdb5
 800fe08:	0800fdb5 	.word	0x0800fdb5
 800fe0c:	0800ff5f 	.word	0x0800ff5f
 800fe10:	0800fdb5 	.word	0x0800fdb5
 800fe14:	0800fe65 	.word	0x0800fe65
 800fe18:	0800fdb5 	.word	0x0800fdb5
 800fe1c:	0800fdb5 	.word	0x0800fdb5
 800fe20:	0800feff 	.word	0x0800feff
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	1d1a      	adds	r2, r3, #4
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	602a      	str	r2, [r5, #0]
 800fe2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe34:	2301      	movs	r3, #1
 800fe36:	e09f      	b.n	800ff78 <_printf_i+0x1ec>
 800fe38:	6820      	ldr	r0, [r4, #0]
 800fe3a:	682b      	ldr	r3, [r5, #0]
 800fe3c:	0607      	lsls	r7, r0, #24
 800fe3e:	f103 0104 	add.w	r1, r3, #4
 800fe42:	6029      	str	r1, [r5, #0]
 800fe44:	d501      	bpl.n	800fe4a <_printf_i+0xbe>
 800fe46:	681e      	ldr	r6, [r3, #0]
 800fe48:	e003      	b.n	800fe52 <_printf_i+0xc6>
 800fe4a:	0646      	lsls	r6, r0, #25
 800fe4c:	d5fb      	bpl.n	800fe46 <_printf_i+0xba>
 800fe4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fe52:	2e00      	cmp	r6, #0
 800fe54:	da03      	bge.n	800fe5e <_printf_i+0xd2>
 800fe56:	232d      	movs	r3, #45	; 0x2d
 800fe58:	4276      	negs	r6, r6
 800fe5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe5e:	485a      	ldr	r0, [pc, #360]	; (800ffc8 <_printf_i+0x23c>)
 800fe60:	230a      	movs	r3, #10
 800fe62:	e012      	b.n	800fe8a <_printf_i+0xfe>
 800fe64:	682b      	ldr	r3, [r5, #0]
 800fe66:	6820      	ldr	r0, [r4, #0]
 800fe68:	1d19      	adds	r1, r3, #4
 800fe6a:	6029      	str	r1, [r5, #0]
 800fe6c:	0605      	lsls	r5, r0, #24
 800fe6e:	d501      	bpl.n	800fe74 <_printf_i+0xe8>
 800fe70:	681e      	ldr	r6, [r3, #0]
 800fe72:	e002      	b.n	800fe7a <_printf_i+0xee>
 800fe74:	0641      	lsls	r1, r0, #25
 800fe76:	d5fb      	bpl.n	800fe70 <_printf_i+0xe4>
 800fe78:	881e      	ldrh	r6, [r3, #0]
 800fe7a:	4853      	ldr	r0, [pc, #332]	; (800ffc8 <_printf_i+0x23c>)
 800fe7c:	2f6f      	cmp	r7, #111	; 0x6f
 800fe7e:	bf0c      	ite	eq
 800fe80:	2308      	moveq	r3, #8
 800fe82:	230a      	movne	r3, #10
 800fe84:	2100      	movs	r1, #0
 800fe86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe8a:	6865      	ldr	r5, [r4, #4]
 800fe8c:	60a5      	str	r5, [r4, #8]
 800fe8e:	2d00      	cmp	r5, #0
 800fe90:	bfa2      	ittt	ge
 800fe92:	6821      	ldrge	r1, [r4, #0]
 800fe94:	f021 0104 	bicge.w	r1, r1, #4
 800fe98:	6021      	strge	r1, [r4, #0]
 800fe9a:	b90e      	cbnz	r6, 800fea0 <_printf_i+0x114>
 800fe9c:	2d00      	cmp	r5, #0
 800fe9e:	d04b      	beq.n	800ff38 <_printf_i+0x1ac>
 800fea0:	4615      	mov	r5, r2
 800fea2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fea6:	fb03 6711 	mls	r7, r3, r1, r6
 800feaa:	5dc7      	ldrb	r7, [r0, r7]
 800feac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800feb0:	4637      	mov	r7, r6
 800feb2:	42bb      	cmp	r3, r7
 800feb4:	460e      	mov	r6, r1
 800feb6:	d9f4      	bls.n	800fea2 <_printf_i+0x116>
 800feb8:	2b08      	cmp	r3, #8
 800feba:	d10b      	bne.n	800fed4 <_printf_i+0x148>
 800febc:	6823      	ldr	r3, [r4, #0]
 800febe:	07de      	lsls	r6, r3, #31
 800fec0:	d508      	bpl.n	800fed4 <_printf_i+0x148>
 800fec2:	6923      	ldr	r3, [r4, #16]
 800fec4:	6861      	ldr	r1, [r4, #4]
 800fec6:	4299      	cmp	r1, r3
 800fec8:	bfde      	ittt	le
 800feca:	2330      	movle	r3, #48	; 0x30
 800fecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fed0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fed4:	1b52      	subs	r2, r2, r5
 800fed6:	6122      	str	r2, [r4, #16]
 800fed8:	f8cd a000 	str.w	sl, [sp]
 800fedc:	464b      	mov	r3, r9
 800fede:	aa03      	add	r2, sp, #12
 800fee0:	4621      	mov	r1, r4
 800fee2:	4640      	mov	r0, r8
 800fee4:	f7ff fee4 	bl	800fcb0 <_printf_common>
 800fee8:	3001      	adds	r0, #1
 800feea:	d14a      	bne.n	800ff82 <_printf_i+0x1f6>
 800feec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fef0:	b004      	add	sp, #16
 800fef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	f043 0320 	orr.w	r3, r3, #32
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	4833      	ldr	r0, [pc, #204]	; (800ffcc <_printf_i+0x240>)
 800ff00:	2778      	movs	r7, #120	; 0x78
 800ff02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff06:	6823      	ldr	r3, [r4, #0]
 800ff08:	6829      	ldr	r1, [r5, #0]
 800ff0a:	061f      	lsls	r7, r3, #24
 800ff0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff10:	d402      	bmi.n	800ff18 <_printf_i+0x18c>
 800ff12:	065f      	lsls	r7, r3, #25
 800ff14:	bf48      	it	mi
 800ff16:	b2b6      	uxthmi	r6, r6
 800ff18:	07df      	lsls	r7, r3, #31
 800ff1a:	bf48      	it	mi
 800ff1c:	f043 0320 	orrmi.w	r3, r3, #32
 800ff20:	6029      	str	r1, [r5, #0]
 800ff22:	bf48      	it	mi
 800ff24:	6023      	strmi	r3, [r4, #0]
 800ff26:	b91e      	cbnz	r6, 800ff30 <_printf_i+0x1a4>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	f023 0320 	bic.w	r3, r3, #32
 800ff2e:	6023      	str	r3, [r4, #0]
 800ff30:	2310      	movs	r3, #16
 800ff32:	e7a7      	b.n	800fe84 <_printf_i+0xf8>
 800ff34:	4824      	ldr	r0, [pc, #144]	; (800ffc8 <_printf_i+0x23c>)
 800ff36:	e7e4      	b.n	800ff02 <_printf_i+0x176>
 800ff38:	4615      	mov	r5, r2
 800ff3a:	e7bd      	b.n	800feb8 <_printf_i+0x12c>
 800ff3c:	682b      	ldr	r3, [r5, #0]
 800ff3e:	6826      	ldr	r6, [r4, #0]
 800ff40:	6961      	ldr	r1, [r4, #20]
 800ff42:	1d18      	adds	r0, r3, #4
 800ff44:	6028      	str	r0, [r5, #0]
 800ff46:	0635      	lsls	r5, r6, #24
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	d501      	bpl.n	800ff50 <_printf_i+0x1c4>
 800ff4c:	6019      	str	r1, [r3, #0]
 800ff4e:	e002      	b.n	800ff56 <_printf_i+0x1ca>
 800ff50:	0670      	lsls	r0, r6, #25
 800ff52:	d5fb      	bpl.n	800ff4c <_printf_i+0x1c0>
 800ff54:	8019      	strh	r1, [r3, #0]
 800ff56:	2300      	movs	r3, #0
 800ff58:	6123      	str	r3, [r4, #16]
 800ff5a:	4615      	mov	r5, r2
 800ff5c:	e7bc      	b.n	800fed8 <_printf_i+0x14c>
 800ff5e:	682b      	ldr	r3, [r5, #0]
 800ff60:	1d1a      	adds	r2, r3, #4
 800ff62:	602a      	str	r2, [r5, #0]
 800ff64:	681d      	ldr	r5, [r3, #0]
 800ff66:	6862      	ldr	r2, [r4, #4]
 800ff68:	2100      	movs	r1, #0
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	f7f0 f930 	bl	80001d0 <memchr>
 800ff70:	b108      	cbz	r0, 800ff76 <_printf_i+0x1ea>
 800ff72:	1b40      	subs	r0, r0, r5
 800ff74:	6060      	str	r0, [r4, #4]
 800ff76:	6863      	ldr	r3, [r4, #4]
 800ff78:	6123      	str	r3, [r4, #16]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff80:	e7aa      	b.n	800fed8 <_printf_i+0x14c>
 800ff82:	6923      	ldr	r3, [r4, #16]
 800ff84:	462a      	mov	r2, r5
 800ff86:	4649      	mov	r1, r9
 800ff88:	4640      	mov	r0, r8
 800ff8a:	47d0      	blx	sl
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	d0ad      	beq.n	800feec <_printf_i+0x160>
 800ff90:	6823      	ldr	r3, [r4, #0]
 800ff92:	079b      	lsls	r3, r3, #30
 800ff94:	d413      	bmi.n	800ffbe <_printf_i+0x232>
 800ff96:	68e0      	ldr	r0, [r4, #12]
 800ff98:	9b03      	ldr	r3, [sp, #12]
 800ff9a:	4298      	cmp	r0, r3
 800ff9c:	bfb8      	it	lt
 800ff9e:	4618      	movlt	r0, r3
 800ffa0:	e7a6      	b.n	800fef0 <_printf_i+0x164>
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	4632      	mov	r2, r6
 800ffa6:	4649      	mov	r1, r9
 800ffa8:	4640      	mov	r0, r8
 800ffaa:	47d0      	blx	sl
 800ffac:	3001      	adds	r0, #1
 800ffae:	d09d      	beq.n	800feec <_printf_i+0x160>
 800ffb0:	3501      	adds	r5, #1
 800ffb2:	68e3      	ldr	r3, [r4, #12]
 800ffb4:	9903      	ldr	r1, [sp, #12]
 800ffb6:	1a5b      	subs	r3, r3, r1
 800ffb8:	42ab      	cmp	r3, r5
 800ffba:	dcf2      	bgt.n	800ffa2 <_printf_i+0x216>
 800ffbc:	e7eb      	b.n	800ff96 <_printf_i+0x20a>
 800ffbe:	2500      	movs	r5, #0
 800ffc0:	f104 0619 	add.w	r6, r4, #25
 800ffc4:	e7f5      	b.n	800ffb2 <_printf_i+0x226>
 800ffc6:	bf00      	nop
 800ffc8:	08010ec5 	.word	0x08010ec5
 800ffcc:	08010ed6 	.word	0x08010ed6

0800ffd0 <__malloc_lock>:
 800ffd0:	4801      	ldr	r0, [pc, #4]	; (800ffd8 <__malloc_lock+0x8>)
 800ffd2:	f7ff bc65 	b.w	800f8a0 <__retarget_lock_acquire_recursive>
 800ffd6:	bf00      	nop
 800ffd8:	20005444 	.word	0x20005444

0800ffdc <__malloc_unlock>:
 800ffdc:	4801      	ldr	r0, [pc, #4]	; (800ffe4 <__malloc_unlock+0x8>)
 800ffde:	f7ff bc60 	b.w	800f8a2 <__retarget_lock_release_recursive>
 800ffe2:	bf00      	nop
 800ffe4:	20005444 	.word	0x20005444

0800ffe8 <_realloc_r>:
 800ffe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffec:	4680      	mov	r8, r0
 800ffee:	4614      	mov	r4, r2
 800fff0:	460e      	mov	r6, r1
 800fff2:	b921      	cbnz	r1, 800fffe <_realloc_r+0x16>
 800fff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fff8:	4611      	mov	r1, r2
 800fffa:	f7ff bdd9 	b.w	800fbb0 <_malloc_r>
 800fffe:	b92a      	cbnz	r2, 801000c <_realloc_r+0x24>
 8010000:	f000 f84c 	bl	801009c <_free_r>
 8010004:	4625      	mov	r5, r4
 8010006:	4628      	mov	r0, r5
 8010008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801000c:	f000 f892 	bl	8010134 <_malloc_usable_size_r>
 8010010:	4284      	cmp	r4, r0
 8010012:	4607      	mov	r7, r0
 8010014:	d802      	bhi.n	801001c <_realloc_r+0x34>
 8010016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801001a:	d812      	bhi.n	8010042 <_realloc_r+0x5a>
 801001c:	4621      	mov	r1, r4
 801001e:	4640      	mov	r0, r8
 8010020:	f7ff fdc6 	bl	800fbb0 <_malloc_r>
 8010024:	4605      	mov	r5, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	d0ed      	beq.n	8010006 <_realloc_r+0x1e>
 801002a:	42bc      	cmp	r4, r7
 801002c:	4622      	mov	r2, r4
 801002e:	4631      	mov	r1, r6
 8010030:	bf28      	it	cs
 8010032:	463a      	movcs	r2, r7
 8010034:	f7ff fc36 	bl	800f8a4 <memcpy>
 8010038:	4631      	mov	r1, r6
 801003a:	4640      	mov	r0, r8
 801003c:	f000 f82e 	bl	801009c <_free_r>
 8010040:	e7e1      	b.n	8010006 <_realloc_r+0x1e>
 8010042:	4635      	mov	r5, r6
 8010044:	e7df      	b.n	8010006 <_realloc_r+0x1e>

08010046 <memmove>:
 8010046:	4288      	cmp	r0, r1
 8010048:	b510      	push	{r4, lr}
 801004a:	eb01 0402 	add.w	r4, r1, r2
 801004e:	d902      	bls.n	8010056 <memmove+0x10>
 8010050:	4284      	cmp	r4, r0
 8010052:	4623      	mov	r3, r4
 8010054:	d807      	bhi.n	8010066 <memmove+0x20>
 8010056:	1e43      	subs	r3, r0, #1
 8010058:	42a1      	cmp	r1, r4
 801005a:	d008      	beq.n	801006e <memmove+0x28>
 801005c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010060:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010064:	e7f8      	b.n	8010058 <memmove+0x12>
 8010066:	4402      	add	r2, r0
 8010068:	4601      	mov	r1, r0
 801006a:	428a      	cmp	r2, r1
 801006c:	d100      	bne.n	8010070 <memmove+0x2a>
 801006e:	bd10      	pop	{r4, pc}
 8010070:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010074:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010078:	e7f7      	b.n	801006a <memmove+0x24>
	...

0801007c <_sbrk_r>:
 801007c:	b538      	push	{r3, r4, r5, lr}
 801007e:	4d06      	ldr	r5, [pc, #24]	; (8010098 <_sbrk_r+0x1c>)
 8010080:	2300      	movs	r3, #0
 8010082:	4604      	mov	r4, r0
 8010084:	4608      	mov	r0, r1
 8010086:	602b      	str	r3, [r5, #0]
 8010088:	f7f6 ff0c 	bl	8006ea4 <_sbrk>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_sbrk_r+0x1a>
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	b103      	cbz	r3, 8010096 <_sbrk_r+0x1a>
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	20005450 	.word	0x20005450

0801009c <_free_r>:
 801009c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801009e:	2900      	cmp	r1, #0
 80100a0:	d044      	beq.n	801012c <_free_r+0x90>
 80100a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100a6:	9001      	str	r0, [sp, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f1a1 0404 	sub.w	r4, r1, #4
 80100ae:	bfb8      	it	lt
 80100b0:	18e4      	addlt	r4, r4, r3
 80100b2:	f7ff ff8d 	bl	800ffd0 <__malloc_lock>
 80100b6:	4a1e      	ldr	r2, [pc, #120]	; (8010130 <_free_r+0x94>)
 80100b8:	9801      	ldr	r0, [sp, #4]
 80100ba:	6813      	ldr	r3, [r2, #0]
 80100bc:	b933      	cbnz	r3, 80100cc <_free_r+0x30>
 80100be:	6063      	str	r3, [r4, #4]
 80100c0:	6014      	str	r4, [r2, #0]
 80100c2:	b003      	add	sp, #12
 80100c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100c8:	f7ff bf88 	b.w	800ffdc <__malloc_unlock>
 80100cc:	42a3      	cmp	r3, r4
 80100ce:	d908      	bls.n	80100e2 <_free_r+0x46>
 80100d0:	6825      	ldr	r5, [r4, #0]
 80100d2:	1961      	adds	r1, r4, r5
 80100d4:	428b      	cmp	r3, r1
 80100d6:	bf01      	itttt	eq
 80100d8:	6819      	ldreq	r1, [r3, #0]
 80100da:	685b      	ldreq	r3, [r3, #4]
 80100dc:	1949      	addeq	r1, r1, r5
 80100de:	6021      	streq	r1, [r4, #0]
 80100e0:	e7ed      	b.n	80100be <_free_r+0x22>
 80100e2:	461a      	mov	r2, r3
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	b10b      	cbz	r3, 80100ec <_free_r+0x50>
 80100e8:	42a3      	cmp	r3, r4
 80100ea:	d9fa      	bls.n	80100e2 <_free_r+0x46>
 80100ec:	6811      	ldr	r1, [r2, #0]
 80100ee:	1855      	adds	r5, r2, r1
 80100f0:	42a5      	cmp	r5, r4
 80100f2:	d10b      	bne.n	801010c <_free_r+0x70>
 80100f4:	6824      	ldr	r4, [r4, #0]
 80100f6:	4421      	add	r1, r4
 80100f8:	1854      	adds	r4, r2, r1
 80100fa:	42a3      	cmp	r3, r4
 80100fc:	6011      	str	r1, [r2, #0]
 80100fe:	d1e0      	bne.n	80100c2 <_free_r+0x26>
 8010100:	681c      	ldr	r4, [r3, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	6053      	str	r3, [r2, #4]
 8010106:	440c      	add	r4, r1
 8010108:	6014      	str	r4, [r2, #0]
 801010a:	e7da      	b.n	80100c2 <_free_r+0x26>
 801010c:	d902      	bls.n	8010114 <_free_r+0x78>
 801010e:	230c      	movs	r3, #12
 8010110:	6003      	str	r3, [r0, #0]
 8010112:	e7d6      	b.n	80100c2 <_free_r+0x26>
 8010114:	6825      	ldr	r5, [r4, #0]
 8010116:	1961      	adds	r1, r4, r5
 8010118:	428b      	cmp	r3, r1
 801011a:	bf04      	itt	eq
 801011c:	6819      	ldreq	r1, [r3, #0]
 801011e:	685b      	ldreq	r3, [r3, #4]
 8010120:	6063      	str	r3, [r4, #4]
 8010122:	bf04      	itt	eq
 8010124:	1949      	addeq	r1, r1, r5
 8010126:	6021      	streq	r1, [r4, #0]
 8010128:	6054      	str	r4, [r2, #4]
 801012a:	e7ca      	b.n	80100c2 <_free_r+0x26>
 801012c:	b003      	add	sp, #12
 801012e:	bd30      	pop	{r4, r5, pc}
 8010130:	20005448 	.word	0x20005448

08010134 <_malloc_usable_size_r>:
 8010134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010138:	1f18      	subs	r0, r3, #4
 801013a:	2b00      	cmp	r3, #0
 801013c:	bfbc      	itt	lt
 801013e:	580b      	ldrlt	r3, [r1, r0]
 8010140:	18c0      	addlt	r0, r0, r3
 8010142:	4770      	bx	lr

08010144 <_init>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	bf00      	nop
 8010148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014a:	bc08      	pop	{r3}
 801014c:	469e      	mov	lr, r3
 801014e:	4770      	bx	lr

08010150 <_fini>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	bf00      	nop
 8010154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010156:	bc08      	pop	{r3}
 8010158:	469e      	mov	lr, r3
 801015a:	4770      	bx	lr
