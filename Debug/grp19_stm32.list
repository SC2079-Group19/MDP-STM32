
grp19_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d8c  080100ac  080100ac  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e38  08010e38  000301a4  2**0
                  CONTENTS
  4 .ARM          00000008  08010e38  08010e38  00020e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e40  08010e40  000301a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e40  08010e40  00020e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e44  08010e44  00020e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08010e48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a4  2**0
                  CONTENTS
 10 .bss          000052b0  200001a4  200001a4  000301a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005454  20005454  000301a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e163  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ed2  00000000  00000000  0004e37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b28  00000000  00000000  00052250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000155d  00000000  00000000  00053d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000056e8  00000000  00000000  000552d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f758  00000000  00000000  0005a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9807  00000000  00000000  0007a115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a90  00000000  00000000  0016391c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a4 	.word	0x200001a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010094 	.word	0x08010094

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001a8 	.word	0x200001a8
 80001cc:	08010094 	.word	0x08010094

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b970 	b.w	8000ef4 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	460d      	mov	r5, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4694      	mov	ip, r2
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0xe2>
 8000c42:	fab2 f382 	clz	r3, r2
 8000c46:	b143      	cbz	r3, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	f1c3 0220 	rsb	r2, r3, #32
 8000c50:	409f      	lsls	r7, r3
 8000c52:	fa20 f202 	lsr.w	r2, r0, r2
 8000c56:	4317      	orrs	r7, r2
 8000c58:	409c      	lsls	r4, r3
 8000c5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5e:	fa1f f58c 	uxth.w	r5, ip
 8000c62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c66:	0c22      	lsrs	r2, r4, #16
 8000c68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c70:	fb01 f005 	mul.w	r0, r1, r5
 8000c74:	4290      	cmp	r0, r2
 8000c76:	d90a      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c78:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c80:	f080 811c 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f240 8119 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	4462      	add	r2, ip
 8000c8e:	1a12      	subs	r2, r2, r0
 8000c90:	b2a4      	uxth	r4, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x90>
 8000ca6:	eb1c 0404 	adds.w	r4, ip, r4
 8000caa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cae:	f080 8107 	bcs.w	8000ec0 <__udivmoddi4+0x294>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	f240 8104 	bls.w	8000ec0 <__udivmoddi4+0x294>
 8000cb8:	4464      	add	r4, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11e      	cbz	r6, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40dc      	lsrs	r4, r3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e9c6 4300 	strd	r4, r3, [r6]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0xbc>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80ed 	beq.w	8000eb6 <__udivmoddi4+0x28a>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e9c6 0500 	strd	r0, r5, [r6]
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce8:	fab3 f183 	clz	r1, r3
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d149      	bne.n	8000d84 <__udivmoddi4+0x158>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d302      	bcc.n	8000cfa <__udivmoddi4+0xce>
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	f200 80f8 	bhi.w	8000eea <__udivmoddi4+0x2be>
 8000cfa:	1a84      	subs	r4, r0, r2
 8000cfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	4617      	mov	r7, r2
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d0e2      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	e9c6 4700 	strd	r4, r7, [r6]
 8000d0c:	e7df      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d0e:	b902      	cbnz	r2, 8000d12 <__udivmoddi4+0xe6>
 8000d10:	deff      	udf	#255	; 0xff
 8000d12:	fab2 f382 	clz	r3, r2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1c:	1a8a      	subs	r2, r1, r2
 8000d1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	2101      	movs	r1, #1
 8000d28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000d30:	0c22      	lsrs	r2, r4, #16
 8000d32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d36:	fb0e f005 	mul.w	r0, lr, r5
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000d42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	f200 80cb 	bhi.w	8000ee4 <__udivmoddi4+0x2b8>
 8000d4e:	4645      	mov	r5, r8
 8000d50:	1a12      	subs	r2, r2, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d58:	fb07 2210 	mls	r2, r7, r0, r2
 8000d5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d60:	fb0e fe00 	mul.w	lr, lr, r0
 8000d64:	45a6      	cmp	lr, r4
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x14e>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x14c>
 8000d72:	45a6      	cmp	lr, r4
 8000d74:	f200 80bb 	bhi.w	8000eee <__udivmoddi4+0x2c2>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	eba4 040e 	sub.w	r4, r4, lr
 8000d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d82:	e79f      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d84:	f1c1 0720 	rsb	r7, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d92:	fa05 f401 	lsl.w	r4, r5, r1
 8000d96:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9a:	40fd      	lsrs	r5, r7
 8000d9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	fb09 5518 	mls	r5, r9, r8, r5
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db4:	fb08 f50e 	mul.w	r5, r8, lr
 8000db8:	42a5      	cmp	r5, r4
 8000dba:	fa02 f201 	lsl.w	r2, r2, r1
 8000dbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dcc:	f080 8088 	bcs.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd0:	42a5      	cmp	r5, r4
 8000dd2:	f240 8085 	bls.w	8000ee0 <__udivmoddi4+0x2b4>
 8000dd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000dda:	4464      	add	r4, ip
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	b29d      	uxth	r5, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dfc:	d26c      	bcs.n	8000ed8 <__udivmoddi4+0x2ac>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	d96a      	bls.n	8000ed8 <__udivmoddi4+0x2ac>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	4464      	add	r4, ip
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	42ac      	cmp	r4, r5
 8000e14:	46c8      	mov	r8, r9
 8000e16:	46ae      	mov	lr, r5
 8000e18:	d356      	bcc.n	8000ec8 <__udivmoddi4+0x29c>
 8000e1a:	d053      	beq.n	8000ec4 <__udivmoddi4+0x298>
 8000e1c:	b156      	cbz	r6, 8000e34 <__udivmoddi4+0x208>
 8000e1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000e22:	eb64 040e 	sbc.w	r4, r4, lr
 8000e26:	fa04 f707 	lsl.w	r7, r4, r7
 8000e2a:	40ca      	lsrs	r2, r1
 8000e2c:	40cc      	lsrs	r4, r1
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	e9c6 7400 	strd	r7, r4, [r6]
 8000e34:	4618      	mov	r0, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	f1c3 0120 	rsb	r1, r3, #32
 8000e40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e44:	fa20 f201 	lsr.w	r2, r0, r1
 8000e48:	fa25 f101 	lsr.w	r1, r5, r1
 8000e4c:	409d      	lsls	r5, r3
 8000e4e:	432a      	orrs	r2, r5
 8000e50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e54:	fa1f fe8c 	uxth.w	lr, ip
 8000e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e60:	0c11      	lsrs	r1, r2, #16
 8000e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e66:	fb00 f50e 	mul.w	r5, r0, lr
 8000e6a:	428d      	cmp	r5, r1
 8000e6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x258>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e7a:	d22f      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000e7c:	428d      	cmp	r5, r1
 8000e7e:	d92d      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	1b49      	subs	r1, r1, r5
 8000e86:	b292      	uxth	r2, r2
 8000e88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	fb05 f10e 	mul.w	r1, r5, lr
 8000e98:	4291      	cmp	r1, r2
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x282>
 8000e9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea4:	d216      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000ea6:	4291      	cmp	r1, r2
 8000ea8:	d914      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000eaa:	3d02      	subs	r5, #2
 8000eac:	4462      	add	r2, ip
 8000eae:	1a52      	subs	r2, r2, r1
 8000eb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb4:	e738      	b.n	8000d28 <__udivmoddi4+0xfc>
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e708      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ebc:	4639      	mov	r1, r7
 8000ebe:	e6e6      	b.n	8000c8e <__udivmoddi4+0x62>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	e6fb      	b.n	8000cbc <__udivmoddi4+0x90>
 8000ec4:	4548      	cmp	r0, r9
 8000ec6:	d2a9      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ecc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	e7a3      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed4:	4645      	mov	r5, r8
 8000ed6:	e7ea      	b.n	8000eae <__udivmoddi4+0x282>
 8000ed8:	462b      	mov	r3, r5
 8000eda:	e794      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e7d1      	b.n	8000e84 <__udivmoddi4+0x258>
 8000ee0:	46d0      	mov	r8, sl
 8000ee2:	e77b      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee4:	3d02      	subs	r5, #2
 8000ee6:	4462      	add	r2, ip
 8000ee8:	e732      	b.n	8000d50 <__udivmoddi4+0x124>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e70a      	b.n	8000d04 <__udivmoddi4+0xd8>
 8000eee:	4464      	add	r4, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e742      	b.n	8000d7a <__udivmoddi4+0x14e>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f005 ffef 	bl	8006ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f995 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fd2f 	bl	8001968 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f0a:	f000 fd03 	bl	8001914 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f0e:	f000 fa91 	bl	8001434 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000f12:	f000 fc55 	bl	80017c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f16:	f000 fb59 	bl	80015cc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f1a:	f000 fab9 	bl	8001490 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f1e:	f000 fba9 	bl	8001674 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000f22:	f000 fc17 	bl	8001754 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000f26:	f000 f9e1 	bl	80012ec <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f000 fa31 	bl	8001390 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // oled
  OLED_Init();
 8000f2e:	f00e fb6d 	bl	800f60c <OLED_Init>

  // gyro
  ICM20948_init(&hi2c1, 0, GYRO_FULL_SCALE_2000DPS, ACCEL_FULL_SCALE_2G);
 8000f32:	2300      	movs	r3, #0
 8000f34:	2203      	movs	r2, #3
 8000f36:	2100      	movs	r1, #0
 8000f38:	487b      	ldr	r0, [pc, #492]	; (8001128 <main+0x230>)
 8000f3a:	f00e f890 	bl	800f05e <ICM20948_init>

  // servo

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f3e:	210c      	movs	r1, #12
 8000f40:	487a      	ldr	r0, [pc, #488]	; (800112c <main+0x234>)
 8000f42:	f008 fd51 	bl	80099e8 <HAL_TIM_PWM_Start>

  // motor
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4879      	ldr	r0, [pc, #484]	; (8001130 <main+0x238>)
 8000f4a:	f008 fd4d 	bl	80099e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4877      	ldr	r0, [pc, #476]	; (8001130 <main+0x238>)
 8000f52:	f008 fd49 	bl	80099e8 <HAL_TIM_PWM_Start>

  // encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000f56:	213c      	movs	r1, #60	; 0x3c
 8000f58:	4876      	ldr	r0, [pc, #472]	; (8001134 <main+0x23c>)
 8000f5a:	f009 f8e3 	bl	800a124 <HAL_TIM_Encoder_Start>

  // uart
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8000f5e:	4b76      	ldr	r3, [pc, #472]	; (8001138 <main+0x240>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	461a      	mov	r2, r3
 8000f66:	4975      	ldr	r1, [pc, #468]	; (800113c <main+0x244>)
 8000f68:	4875      	ldr	r0, [pc, #468]	; (8001140 <main+0x248>)
 8000f6a:	f00a faf4 	bl	800b556 <HAL_UART_Receive_IT>

  // ultrasonic
  HAL_TIM_Base_Start(&htim6);
 8000f6e:	4875      	ldr	r0, [pc, #468]	; (8001144 <main+0x24c>)
 8000f70:	f008 fc08 	bl	8009784 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4874      	ldr	r0, [pc, #464]	; (8001148 <main+0x250>)
 8000f78:	f008 fe58 	bl	8009c2c <HAL_TIM_IC_Start_IT>

  // IR
  // HAL_ADC_Start(&hadc1);
  // HAL_ADC_Start(&hadc2);

  __RESET_SERVO_TURN(&htim1);
 8000f7c:	4b6b      	ldr	r3, [pc, #428]	; (800112c <main+0x234>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2291      	movs	r2, #145	; 0x91
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
 8000f84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f88:	f005 ffec 	bl	8006f64 <HAL_Delay>

  // command queue initialization
  curCmd.index = 100;
 8000f8c:	4b6f      	ldr	r3, [pc, #444]	; (800114c <main+0x254>)
 8000f8e:	2264      	movs	r2, #100	; 0x64
 8000f90:	701a      	strb	r2, [r3, #0]
  curCmd.val = 10;
 8000f92:	4b6e      	ldr	r3, [pc, #440]	; (800114c <main+0x254>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	805a      	strh	r2, [r3, #2]

  cQueue.head = 0;
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <main+0x258>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
  cQueue.tail = 0;
 8000f9e:	4b6c      	ldr	r3, [pc, #432]	; (8001150 <main+0x258>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	705a      	strb	r2, [r3, #1]
  cQueue.size = CMD_BUFFER_SIZE;
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <main+0x25c>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b69      	ldr	r3, [pc, #420]	; (8001150 <main+0x258>)
 8000faa:	709a      	strb	r2, [r3, #2]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e00c      	b.n	8000fcc <main+0xd4>
  {
    Command cmd;
    cmd.index = 100;
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	703b      	strb	r3, [r7, #0]
    cmd.val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	807b      	strh	r3, [r7, #2]
    cQueue.buffer[i] = cmd;
 8000fba:	4a65      	ldr	r2, [pc, #404]	; (8001150 <main+0x258>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < CMD_BUFFER_SIZE; i++)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <main+0x25c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	dbec      	blt.n	8000fb2 <main+0xba>
  }
  PIDConfigInit(&pidTSlow, 2.1, 0.045, 0.8);
 8000fd8:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8001158 <main+0x260>
 8000fdc:	eddf 0a5f 	vldr	s1, [pc, #380]	; 800115c <main+0x264>
 8000fe0:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001160 <main+0x268>
 8000fe4:	485f      	ldr	r0, [pc, #380]	; (8001164 <main+0x26c>)
 8000fe6:	f001 facf 	bl	8002588 <PIDConfigInit>
  PIDConfigInit(&pidSlow, 2.1, 0.045, 0.8);
 8000fea:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8001158 <main+0x260>
 8000fee:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800115c <main+0x264>
 8000ff2:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001160 <main+0x268>
 8000ff6:	485c      	ldr	r0, [pc, #368]	; (8001168 <main+0x270>)
 8000ff8:	f001 fac6 	bl	8002588 <PIDConfigInit>
  PIDConfigInit(&pidFast, 1.1, 0.05, 0.3);
 8000ffc:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800116c <main+0x274>
 8001000:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8001170 <main+0x278>
 8001004:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001174 <main+0x27c>
 8001008:	485b      	ldr	r0, [pc, #364]	; (8001178 <main+0x280>)
 800100a:	f001 fabd 	bl	8002588 <PIDConfigInit>
  // TODO:overwrite curCmd for debugging individual task
  // curCmd.index = 1;
  // curCmd.val = 30;

  // UART Rx
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 800100e:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <main+0x240>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	4949      	ldr	r1, [pc, #292]	; (800113c <main+0x244>)
 8001018:	4849      	ldr	r0, [pc, #292]	; (8001140 <main+0x248>)
 800101a:	f00a fa9c 	bl	800b556 <HAL_UART_Receive_IT>

  // adjust steering
  __RESET_SERVO_TURN(&htim1);
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <main+0x234>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2291      	movs	r2, #145	; 0x91
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
 8001026:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800102a:	f005 ff9b 	bl	8006f64 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800102e:	f00b fa6f 	bl	800c510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(runEncoder, NULL, &encoderTask_attributes);
 8001032:	4a52      	ldr	r2, [pc, #328]	; (800117c <main+0x284>)
 8001034:	2100      	movs	r1, #0
 8001036:	4852      	ldr	r0, [pc, #328]	; (8001180 <main+0x288>)
 8001038:	f00b fab4 	bl	800c5a4 <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <main+0x28c>)
 8001040:	6013      	str	r3, [r2, #0]

  /* creation of OledTask */
  OledTaskHandle = osThreadNew(runOledTask, NULL, &OledTask_attributes);
 8001042:	4a51      	ldr	r2, [pc, #324]	; (8001188 <main+0x290>)
 8001044:	2100      	movs	r1, #0
 8001046:	4851      	ldr	r0, [pc, #324]	; (800118c <main+0x294>)
 8001048:	f00b faac 	bl	800c5a4 <osThreadNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a50      	ldr	r2, [pc, #320]	; (8001190 <main+0x298>)
 8001050:	6013      	str	r3, [r2, #0]

  /* creation of FWTask */
  FWTaskHandle = osThreadNew(runFWTask, NULL, &FWTask_attributes);
 8001052:	4a50      	ldr	r2, [pc, #320]	; (8001194 <main+0x29c>)
 8001054:	2100      	movs	r1, #0
 8001056:	4850      	ldr	r0, [pc, #320]	; (8001198 <main+0x2a0>)
 8001058:	f00b faa4 	bl	800c5a4 <osThreadNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a4f      	ldr	r2, [pc, #316]	; (800119c <main+0x2a4>)
 8001060:	6013      	str	r3, [r2, #0]

  /* creation of BWTask */
  BWTaskHandle = osThreadNew(runBWTask, NULL, &BWTask_attributes);
 8001062:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <main+0x2a8>)
 8001064:	2100      	movs	r1, #0
 8001066:	484f      	ldr	r0, [pc, #316]	; (80011a4 <main+0x2ac>)
 8001068:	f00b fa9c 	bl	800c5a4 <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <main+0x2b0>)
 8001070:	6013      	str	r3, [r2, #0]

  /* creation of FLTask */
  FLTaskHandle = osThreadNew(runFLTask, NULL, &FLTask_attributes);
 8001072:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <main+0x2b4>)
 8001074:	2100      	movs	r1, #0
 8001076:	484e      	ldr	r0, [pc, #312]	; (80011b0 <main+0x2b8>)
 8001078:	f00b fa94 	bl	800c5a4 <osThreadNew>
 800107c:	4603      	mov	r3, r0
 800107e:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <main+0x2bc>)
 8001080:	6013      	str	r3, [r2, #0]

  /* creation of FRTask */
  FRTaskHandle = osThreadNew(runFRTask, NULL, &FRTask_attributes);
 8001082:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <main+0x2c0>)
 8001084:	2100      	movs	r1, #0
 8001086:	484d      	ldr	r0, [pc, #308]	; (80011bc <main+0x2c4>)
 8001088:	f00b fa8c 	bl	800c5a4 <osThreadNew>
 800108c:	4603      	mov	r3, r0
 800108e:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <main+0x2c8>)
 8001090:	6013      	str	r3, [r2, #0]

  /* creation of BLTask */
  BLTaskHandle = osThreadNew(runBLTask, NULL, &BLTask_attributes);
 8001092:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <main+0x2cc>)
 8001094:	2100      	movs	r1, #0
 8001096:	484c      	ldr	r0, [pc, #304]	; (80011c8 <main+0x2d0>)
 8001098:	f00b fa84 	bl	800c5a4 <osThreadNew>
 800109c:	4603      	mov	r3, r0
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <main+0x2d4>)
 80010a0:	6013      	str	r3, [r2, #0]

  /* creation of BRTask */
  BRTaskHandle = osThreadNew(runBRTask, NULL, &BRTask_attributes);
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <main+0x2d8>)
 80010a4:	2100      	movs	r1, #0
 80010a6:	484b      	ldr	r0, [pc, #300]	; (80011d4 <main+0x2dc>)
 80010a8:	f00b fa7c 	bl	800c5a4 <osThreadNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <main+0x2e0>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* creation of cmdTask */
  cmdTaskHandle = osThreadNew(runCmdTask, NULL, &cmdTask_attributes);
 80010b2:	4a4a      	ldr	r2, [pc, #296]	; (80011dc <main+0x2e4>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	484a      	ldr	r0, [pc, #296]	; (80011e0 <main+0x2e8>)
 80010b8:	f00b fa74 	bl	800c5a4 <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a49      	ldr	r2, [pc, #292]	; (80011e4 <main+0x2ec>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of moveDistObsTask */
  moveDistObsTaskHandle = osThreadNew(runMoveDistObsTask, NULL, &moveDistObsTask_attributes);
 80010c2:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <main+0x2f0>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4849      	ldr	r0, [pc, #292]	; (80011ec <main+0x2f4>)
 80010c8:	f00b fa6c 	bl	800c5a4 <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <main+0x2f8>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of turnATask */
  turnATaskHandle = osThreadNew(runTurnATask, NULL, &turnATask_attributes);
 80010d2:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <main+0x2fc>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4848      	ldr	r0, [pc, #288]	; (80011f8 <main+0x300>)
 80010d8:	f00b fa64 	bl	800c5a4 <osThreadNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a47      	ldr	r2, [pc, #284]	; (80011fc <main+0x304>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* creation of TDTask */
  TDTaskHandle = osThreadNew(runTDTask, NULL, &TDTask_attributes);
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <main+0x308>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4847      	ldr	r0, [pc, #284]	; (8001204 <main+0x30c>)
 80010e8:	f00b fa5c 	bl	800c5a4 <osThreadNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a46      	ldr	r2, [pc, #280]	; (8001208 <main+0x310>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* creation of turnBTask */
  turnBTaskHandle = osThreadNew(runTurnBTask, NULL, &turnBTask_attributes);
 80010f2:	4a46      	ldr	r2, [pc, #280]	; (800120c <main+0x314>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4846      	ldr	r0, [pc, #280]	; (8001210 <main+0x318>)
 80010f8:	f00b fa54 	bl	800c5a4 <osThreadNew>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a45      	ldr	r2, [pc, #276]	; (8001214 <main+0x31c>)
 8001100:	6013      	str	r3, [r2, #0]

  /* creation of GHTask */
  GHTaskHandle = osThreadNew(runGHTask, NULL, &GHTask_attributes);
 8001102:	4a45      	ldr	r2, [pc, #276]	; (8001218 <main+0x320>)
 8001104:	2100      	movs	r1, #0
 8001106:	4845      	ldr	r0, [pc, #276]	; (800121c <main+0x324>)
 8001108:	f00b fa4c 	bl	800c5a4 <osThreadNew>
 800110c:	4603      	mov	r3, r0
 800110e:	4a44      	ldr	r2, [pc, #272]	; (8001220 <main+0x328>)
 8001110:	6013      	str	r3, [r2, #0]

  /* creation of AMTask */
  AMTaskHandle = osThreadNew(runAMTask, NULL, &AMTask_attributes);
 8001112:	4a44      	ldr	r2, [pc, #272]	; (8001224 <main+0x32c>)
 8001114:	2100      	movs	r1, #0
 8001116:	4844      	ldr	r0, [pc, #272]	; (8001228 <main+0x330>)
 8001118:	f00b fa44 	bl	800c5a4 <osThreadNew>
 800111c:	4603      	mov	r3, r0
 800111e:	4a43      	ldr	r2, [pc, #268]	; (800122c <main+0x334>)
 8001120:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001122:	f00b fa19 	bl	800c558 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001126:	e7fe      	b.n	8001126 <main+0x22e>
 8001128:	20000250 	.word	0x20000250
 800112c:	200002a4 	.word	0x200002a4
 8001130:	200003c4 	.word	0x200003c4
 8001134:	200002ec 	.word	0x200002ec
 8001138:	20000000 	.word	0x20000000
 800113c:	2000048c 	.word	0x2000048c
 8001140:	2000040c 	.word	0x2000040c
 8001144:	2000037c 	.word	0x2000037c
 8001148:	20000334 	.word	0x20000334
 800114c:	200004cc 	.word	0x200004cc
 8001150:	20000498 	.word	0x20000498
 8001154:	20000001 	.word	0x20000001
 8001158:	3f4ccccd 	.word	0x3f4ccccd
 800115c:	3d3851ec 	.word	0x3d3851ec
 8001160:	40066666 	.word	0x40066666
 8001164:	20000518 	.word	0x20000518
 8001168:	20000504 	.word	0x20000504
 800116c:	3e99999a 	.word	0x3e99999a
 8001170:	3d4ccccd 	.word	0x3d4ccccd
 8001174:	3f8ccccd 	.word	0x3f8ccccd
 8001178:	2000052c 	.word	0x2000052c
 800117c:	0801016c 	.word	0x0801016c
 8001180:	080042c1 	.word	0x080042c1
 8001184:	20000450 	.word	0x20000450
 8001188:	08010190 	.word	0x08010190
 800118c:	080042d1 	.word	0x080042d1
 8001190:	20000454 	.word	0x20000454
 8001194:	080101b4 	.word	0x080101b4
 8001198:	08004351 	.word	0x08004351
 800119c:	20000458 	.word	0x20000458
 80011a0:	080101d8 	.word	0x080101d8
 80011a4:	080045a5 	.word	0x080045a5
 80011a8:	2000045c 	.word	0x2000045c
 80011ac:	080101fc 	.word	0x080101fc
 80011b0:	080047cd 	.word	0x080047cd
 80011b4:	20000460 	.word	0x20000460
 80011b8:	08010220 	.word	0x08010220
 80011bc:	08004bd9 	.word	0x08004bd9
 80011c0:	20000464 	.word	0x20000464
 80011c4:	08010244 	.word	0x08010244
 80011c8:	08004ff1 	.word	0x08004ff1
 80011cc:	20000468 	.word	0x20000468
 80011d0:	08010268 	.word	0x08010268
 80011d4:	080053fd 	.word	0x080053fd
 80011d8:	2000046c 	.word	0x2000046c
 80011dc:	0801028c 	.word	0x0801028c
 80011e0:	0800580d 	.word	0x0800580d
 80011e4:	20000470 	.word	0x20000470
 80011e8:	080102b0 	.word	0x080102b0
 80011ec:	08005ef1 	.word	0x08005ef1
 80011f0:	20000474 	.word	0x20000474
 80011f4:	080102d4 	.word	0x080102d4
 80011f8:	08005fe9 	.word	0x08005fe9
 80011fc:	20000478 	.word	0x20000478
 8001200:	080102f8 	.word	0x080102f8
 8001204:	08006131 	.word	0x08006131
 8001208:	2000047c 	.word	0x2000047c
 800120c:	0801031c 	.word	0x0801031c
 8001210:	08006241 	.word	0x08006241
 8001214:	20000480 	.word	0x20000480
 8001218:	08010340 	.word	0x08010340
 800121c:	08006459 	.word	0x08006459
 8001220:	20000484 	.word	0x20000484
 8001224:	08010364 	.word	0x08010364
 8001228:	080065bd 	.word	0x080065bd
 800122c:	20000488 	.word	0x20000488

08001230 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f00e faa4 	bl	800f78c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <SystemClock_Config+0xb4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <SystemClock_Config+0xb4>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <SystemClock_Config+0xb4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <SystemClock_Config+0xb8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <SystemClock_Config+0xb8>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <SystemClock_Config+0xb8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fd95 	bl	8008dd0 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012ac:	f005 fa78 	bl	80067a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 fff8 	bl	80092c0 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012d6:	f005 fa63 	bl	80067a0 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3750      	adds	r7, #80	; 0x50
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_ADC1_Init+0x98>)
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_ADC1_Init+0x9c>)
 8001302:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <MX_ADC1_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_ADC1_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_ADC1_Init+0x98>)
 8001318:	2200      	movs	r2, #0
 800131a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_ADC1_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_ADC1_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_ADC1_Init+0x98>)
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_ADC1_Init+0xa0>)
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_ADC1_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_ADC1_Init+0x98>)
 8001338:	2201      	movs	r2, #1
 800133a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_ADC1_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_ADC1_Init+0x98>)
 8001346:	2201      	movs	r2, #1
 8001348:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800134a:	480e      	ldr	r0, [pc, #56]	; (8001384 <MX_ADC1_Init+0x98>)
 800134c:	f005 fe2e 	bl	8006fac <HAL_ADC_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001356:	f005 fa23 	bl	80067a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_11;
 800135a:	230b      	movs	r3, #11
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_ADC1_Init+0x98>)
 800136c:	f006 f800 	bl	8007370 <HAL_ADC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001376:	f005 fa13 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001c0 	.word	0x200001c0
 8001388:	40012000 	.word	0x40012000
 800138c:	0f000001 	.word	0x0f000001

08001390 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc2.Instance = ADC2;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_ADC2_Init+0x98>)
 80013a4:	4a21      	ldr	r2, [pc, #132]	; (800142c <MX_ADC2_Init+0x9c>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_ADC2_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_ADC2_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_ADC2_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_ADC2_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_ADC2_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_ADC2_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_ADC2_Init+0x98>)
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <MX_ADC2_Init+0xa0>)
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_ADC2_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_ADC2_Init+0x98>)
 80013dc:	2201      	movs	r2, #1
 80013de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_ADC2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_ADC2_Init+0x98>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013ee:	480e      	ldr	r0, [pc, #56]	; (8001428 <MX_ADC2_Init+0x98>)
 80013f0:	f005 fddc 	bl	8006fac <HAL_ADC_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80013fa:	f005 f9d1 	bl	80067a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_12;
 80013fe:	230c      	movs	r3, #12
 8001400:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_ADC2_Init+0x98>)
 8001410:	f005 ffae 	bl	8007370 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f005 f9c1 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000208 	.word	0x20000208
 800142c:	40012100 	.word	0x40012100
 8001430:	0f000001 	.word	0x0f000001

08001434 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f006 fcc5 	bl	8007e00 <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f005 f990 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000250 	.word	0x20000250
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b096      	sub	sp, #88	; 0x58
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2220      	movs	r2, #32
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00e f95f 	bl	800f78c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ce:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014d0:	4a3d      	ldr	r2, [pc, #244]	; (80015c8 <MX_TIM1_Init+0x138>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014d6:	22a0      	movs	r2, #160	; 0xa0
 80014d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f4:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <MX_TIM1_Init+0x134>)
 80014fc:	f008 f8f2 	bl	80096e4 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001506:	f005 f94b 	bl	80067a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001514:	4619      	mov	r1, r3
 8001516:	482b      	ldr	r0, [pc, #172]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001518:	f009 f8f8 	bl	800a70c <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001522:	f005 f93d 	bl	80067a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001526:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001528:	f008 fa04 	bl	8009934 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001532:	f005 f935 	bl	80067a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001542:	4619      	mov	r1, r3
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001546:	f009 fe45 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001550:	f005 f926 	bl	80067a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	220c      	movs	r2, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4813      	ldr	r0, [pc, #76]	; (80015c4 <MX_TIM1_Init+0x134>)
 8001576:	f009 f807 	bl	800a588 <HAL_TIM_PWM_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001580:	f005 f90e 	bl	80067a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM1_Init+0x134>)
 80015a8:	f009 fe90 	bl	800b2cc <HAL_TIMEx_ConfigBreakDeadTime>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80015b2:	f005 f8f5 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM1_Init+0x134>)
 80015b8:	f005 fb00 	bl	8006bbc <HAL_TIM_MspPostInit>
}
 80015bc:	bf00      	nop
 80015be:	3758      	adds	r7, #88	; 0x58
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200002a4 	.word	0x200002a4
 80015c8:	40010000 	.word	0x40010000

080015cc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2224      	movs	r2, #36	; 0x24
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f00e f8d6 	bl	800f78c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_TIM2_Init+0xa4>)
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM2_Init+0xa4>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM2_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001610:	2303      	movs	r3, #3
 8001612:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001620:	230a      	movs	r3, #10
 8001622:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001628:	2301      	movs	r3, #1
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001630:	230a      	movs	r3, #10
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <MX_TIM2_Init+0xa4>)
 800163c:	f008 fccc 	bl	8009fd8 <HAL_TIM_Encoder_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001646:	f005 f8ab 	bl	80067a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_TIM2_Init+0xa4>)
 8001658:	f009 fdbc 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001662:	f005 f89d 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	; 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002ec 	.word	0x200002ec

08001674 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_TIM3_Init+0xd8>)
 80016a0:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <MX_TIM3_Init+0xdc>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16 - 1;
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <MX_TIM3_Init+0xd8>)
 80016a6:	220f      	movs	r2, #15
 80016a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_TIM3_Init+0xd8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_TIM3_Init+0xd8>)
 80016b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <MX_TIM3_Init+0xd8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b23      	ldr	r3, [pc, #140]	; (800174c <MX_TIM3_Init+0xd8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c4:	4821      	ldr	r0, [pc, #132]	; (800174c <MX_TIM3_Init+0xd8>)
 80016c6:	f008 f80d 	bl	80096e4 <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80016d0:	f005 f866 	bl	80067a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	4619      	mov	r1, r3
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <MX_TIM3_Init+0xd8>)
 80016e2:	f009 f813 	bl	800a70c <HAL_TIM_ConfigClockSource>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f005 f858 	bl	80067a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016f0:	4816      	ldr	r0, [pc, #88]	; (800174c <MX_TIM3_Init+0xd8>)
 80016f2:	f008 fa41 	bl	8009b78 <HAL_TIM_IC_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016fc:	f005 f850 	bl	80067a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <MX_TIM3_Init+0xd8>)
 8001710:	f009 fd60 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800171a:	f005 f841 	bl	80067a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800171e:	230a      	movs	r3, #10
 8001720:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001722:	2301      	movs	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800172e:	463b      	mov	r3, r7
 8001730:	2204      	movs	r2, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_TIM3_Init+0xd8>)
 8001736:	f008 fe8b 	bl	800a450 <HAL_TIM_IC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001740:	f005 f82e 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000334 	.word	0x20000334
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175a:	463b      	mov	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001764:	4a15      	ldr	r2, [pc, #84]	; (80017bc <MX_TIM6_Init+0x68>)
 8001766:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_TIM6_Init+0x64>)
 800176a:	220f      	movs	r2, #15
 800176c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_TIM6_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_TIM6_Init+0x64>)
 8001784:	f007 ffae 	bl	80096e4 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800178e:	f005 f807 	bl	80067a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <MX_TIM6_Init+0x64>)
 80017a0:	f009 fd18 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80017aa:	f004 fff9 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000037c 	.word	0x2000037c
 80017bc:	40001000 	.word	0x40001000

080017c0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b096      	sub	sp, #88	; 0x58
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	615a      	str	r2, [r3, #20]
 80017f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00d ffc7 	bl	800f78c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <MX_TIM8_Init+0x14c>)
 8001800:	4a43      	ldr	r2, [pc, #268]	; (8001910 <MX_TIM8_Init+0x150>)
 8001802:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <MX_TIM8_Init+0x14c>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <MX_TIM8_Init+0x14c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MX_TIM8_Init+0x14c>)
 8001812:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001816:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <MX_TIM8_Init+0x14c>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <MX_TIM8_Init+0x14c>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <MX_TIM8_Init+0x14c>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800182a:	4838      	ldr	r0, [pc, #224]	; (800190c <MX_TIM8_Init+0x14c>)
 800182c:	f007 ff5a 	bl	80096e4 <HAL_TIM_Base_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001836:	f004 ffb3 	bl	80067a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001844:	4619      	mov	r1, r3
 8001846:	4831      	ldr	r0, [pc, #196]	; (800190c <MX_TIM8_Init+0x14c>)
 8001848:	f008 ff60 	bl	800a70c <HAL_TIM_ConfigClockSource>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001852:	f004 ffa5 	bl	80067a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001856:	482d      	ldr	r0, [pc, #180]	; (800190c <MX_TIM8_Init+0x14c>)
 8001858:	f008 f86c 	bl	8009934 <HAL_TIM_PWM_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001862:	f004 ff9d 	bl	80067a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800186e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001872:	4619      	mov	r1, r3
 8001874:	4825      	ldr	r0, [pc, #148]	; (800190c <MX_TIM8_Init+0x14c>)
 8001876:	f009 fcad 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001880:	f004 ff8e 	bl	80067a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001884:	2360      	movs	r3, #96	; 0x60
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <MX_TIM8_Init+0x14c>)
 80018aa:	f008 fe6d 	bl	800a588 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80018b4:	f004 ff74 	bl	80067a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	2204      	movs	r2, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <MX_TIM8_Init+0x14c>)
 80018c2:	f008 fe61 	bl	800a588 <HAL_TIM_PWM_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80018cc:	f004 ff68 	bl	80067a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_TIM8_Init+0x14c>)
 80018f4:	f009 fcea 	bl	800b2cc <HAL_TIMEx_ConfigBreakDeadTime>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80018fe:	f004 ff4f 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
}
 8001902:	bf00      	nop
 8001904:	3758      	adds	r7, #88	; 0x58
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200003c4 	.word	0x200003c4
 8001910:	40010400 	.word	0x40010400

08001914 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_USART3_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USART3_UART_Init+0x4c>)
 800194c:	f009 fd24 	bl	800b398 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f004 ff23 	bl	80067a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000040c 	.word	0x2000040c
 8001964:	40004800 	.word	0x40004800

08001968 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <MX_GPIO_Init+0xfc>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_GPIO_Init+0xfc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_GPIO_Init+0x100>)
 80019f6:	f006 f9e9 	bl	8007dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin | BIN1_Pin | BIN2_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	213c      	movs	r1, #60	; 0x3c
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <MX_GPIO_Init+0x104>)
 8001a00:	f006 f9e4 	bl	8007dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin US_Trig_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin | LED3_Pin | US_Trig_Pin;
 8001a04:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4812      	ldr	r0, [pc, #72]	; (8001a68 <MX_GPIO_Init+0x100>)
 8001a1e:	f006 f839 	bl	8007a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_GPIO_Init+0x104>)
 8001a3a:	f006 f82b 	bl	8007a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin | BIN2_Pin;
 8001a3e:	2330      	movs	r3, #48	; 0x30
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_GPIO_Init+0x104>)
 8001a56:	f006 f81d 	bl	8007a94 <HAL_GPIO_Init>
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40020000 	.word	0x40020000

08001a70 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t US_diff = 0;
uint8_t Is_First_Captured = 0; // is the first value captured ?

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // if the interrupt source is channel2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7f1b      	ldrb	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 808c 	bne.w	8001b9a <HAL_TIM_IC_CaptureCallback+0x12a>
  {
    if (Is_First_Captured == 0) // if the first value is not captured
 8001a82:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d11a      	bne.n	8001ac0 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f008 ff05 	bl	800a89c <HAL_TIM_ReadCapturedValue>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001a96:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 1;                                    // set the first captured as true
 8001a98:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      // Now change the polarity to falling edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a1a      	ldr	r2, [r3, #32]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001aac:	621a      	str	r2, [r3, #32]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	621a      	str	r2, [r3, #32]
      // set polarity to rising edge
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
    }
  }
}
 8001abe:	e06c      	b.n	8001b9a <HAL_TIM_IC_CaptureCallback+0x12a>
    else if (Is_First_Captured == 1) // if the first is already captured
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d168      	bne.n	8001b9a <HAL_TIM_IC_CaptureCallback+0x12a>
      IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read second value
 8001ac8:	2104      	movs	r1, #4
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f008 fee6 	bl	800a89c <HAL_TIM_ReadCapturedValue>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ad4:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
      if (IC_Val2 > IC_Val1)
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_TIM_IC_CaptureCallback+0x94>
        obsDist_US = IC_Val2 - IC_Val1;
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001afe:	edc3 7a00 	vstr	s15, [r3]
 8001b02:	e014      	b.n	8001b2e <HAL_TIM_IC_CaptureCallback+0xbe>
      else if (IC_Val1 > IC_Val2)
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d90e      	bls.n	8001b2e <HAL_TIM_IC_CaptureCallback+0xbe>
        obsDist_US = (0xffff - IC_Val1) + IC_Val2;
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b1e:	33ff      	adds	r3, #255	; 0xff
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
      obsDist_US = obsDist_US * .034 / 2;
 8001b2e:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd00 	bl	8000538 <__aeabi_f2d>
 8001b38:	a31b      	add	r3, pc, #108	; (adr r3, 8001ba8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd53 	bl	80005e8 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b52:	f7fe fe73 	bl	800083c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7fe fffd 	bl	8000b5c <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001b66:	6013      	str	r3, [r2, #0]
      Is_First_Captured = 0; // set it back to false
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7c:	621a      	str	r2, [r3, #32]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a12      	ldr	r2, [r2, #32]
 8001b88:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0204 	bic.w	r2, r2, #4
 8001b98:	60da      	str	r2, [r3, #12]
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	b020c49c 	.word	0xb020c49c
 8001bac:	3fa16872 	.word	0x3fa16872
 8001bb0:	20000560 	.word	0x20000560
 8001bb4:	20000558 	.word	0x20000558
 8001bb8:	2000055c 	.word	0x2000055c
 8001bbc:	20000554 	.word	0x20000554
 8001bc0:	20000334 	.word	0x20000334

08001bc4 <HAL_UART_RxCpltCallback>:
// int targetD = 5;
// uint8_t tempDir = 1;
// int8_t step = 0;
// uint8_t turnMode = 2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  // TODO: add delimeter at end of command
  //  prevent unused argument(s) compilation warning
  UNUSED(huart);
  int val;

  val = (aRxBuffer[2] - 48) * 10 + (aRxBuffer[3] - 48);
 8001bcc:	4b95      	ldr	r3, [pc, #596]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001be0:	78db      	ldrb	r3, [r3, #3]
 8001be2:	3b30      	subs	r3, #48	; 0x30
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  if (aRxBuffer[4] >= '0' && aRxBuffer[4] <= '9')
 8001be8:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	2b2f      	cmp	r3, #47	; 0x2f
 8001bee:	d90e      	bls.n	8001c0e <HAL_UART_RxCpltCallback+0x4a>
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	2b39      	cmp	r3, #57	; 0x39
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_UART_RxCpltCallback+0x4a>
    // val += (aRxBuffer[4] - 48) * 100;
    val = val * 10 + (aRxBuffer[4] - 48);
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b87      	ldr	r3, [pc, #540]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001c06:	791b      	ldrb	r3, [r3, #4]
 8001c08:	3b30      	subs	r3, #48	; 0x30
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  manualMode = 0;
 8001c0e:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <HAL_UART_RxCpltCallback+0x264>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]

  if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T')
 8001c14:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b53      	cmp	r3, #83	; 0x53
 8001c1a:	d15b      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x110>
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b54      	cmp	r3, #84	; 0x54
 8001c22:	d157      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x110>
  { // only STOP can preempt any greedy task
    //		__ADD_COMMAND(cQueue, 0, 0); // stop
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001c24:	4b81      	ldr	r3, [pc, #516]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2c:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
 8001c34:	4b7e      	ldr	r3, [pc, #504]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	4b7e      	ldr	r3, [pc, #504]	; (8001e34 <HAL_UART_RxCpltCallback+0x270>)
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	4b7c      	ldr	r3, [pc, #496]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001c3e:	2211      	movs	r2, #17
 8001c40:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_UART_RxCpltCallback+0x274>)
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_UART_RxCpltCallback+0x278>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
    PIDConfigReset(&pidTSlow);
 8001c50:	487b      	ldr	r0, [pc, #492]	; (8001e40 <HAL_UART_RxCpltCallback+0x27c>)
 8001c52:	f000 fcba 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001c56:	487b      	ldr	r0, [pc, #492]	; (8001e44 <HAL_UART_RxCpltCallback+0x280>)
 8001c58:	f000 fcb7 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001c5c:	487a      	ldr	r0, [pc, #488]	; (8001e48 <HAL_UART_RxCpltCallback+0x284>)
 8001c5e:	f000 fcb4 	bl	80025ca <PIDConfigReset>
    curDistTick = 0;
 8001c62:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <HAL_UART_RxCpltCallback+0x288>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c68:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d113      	bne.n	8001c9c <HAL_UART_RxCpltCallback+0xd8>
    {
      __CLEAR_CURCMD(curCmd);
 8001c74:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001c76:	2264      	movs	r2, #100	; 0x64
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001c80:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_UART_RxCpltCallback+0x294>)
 8001c82:	210f      	movs	r1, #15
 8001c84:	4875      	ldr	r0, [pc, #468]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001c86:	f00d fd4d 	bl	800f724 <sniprintf>
 8001c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8e:	2206      	movs	r2, #6
 8001c90:	4973      	ldr	r1, [pc, #460]	; (8001e60 <HAL_UART_RxCpltCallback+0x29c>)
 8001c92:	4874      	ldr	r0, [pc, #464]	; (8001e64 <HAL_UART_RxCpltCallback+0x2a0>)
 8001c94:	f009 fbcd 	bl	800b432 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001c98:	f000 bc39 	b.w	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001c9c:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	4a6c      	ldr	r2, [pc, #432]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001ca2:	496b      	ldr	r1, [pc, #428]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001cb4:	7892      	ldrb	r2, [r2, #2]
 8001cb6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cba:	fb01 f202 	mul.w	r2, r1, r2
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001cc4:	705a      	strb	r2, [r3, #1]
 8001cc6:	4a68      	ldr	r2, [pc, #416]	; (8001e68 <HAL_UART_RxCpltCallback+0x2a4>)
 8001cc8:	210f      	movs	r1, #15
 8001cca:	4864      	ldr	r0, [pc, #400]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001ccc:	f00d fd2a 	bl	800f724 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001cd0:	f000 bc1d 	b.w	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
  }
  else if (aRxBuffer[0] == 'R' && aRxBuffer[1] == 'S')
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b52      	cmp	r3, #82	; 0x52
 8001cda:	d161      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x1dc>
 8001cdc:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001cde:	785b      	ldrb	r3, [r3, #1]
 8001ce0:	2b53      	cmp	r3, #83	; 0x53
 8001ce2:	d15d      	bne.n	8001da0 <HAL_UART_RxCpltCallback+0x1dc>
  {
    __ON_TASK_END(&htim8, prevTask, curTask);
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_UART_RxCpltCallback+0x268>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf4:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001cf6:	781a      	ldrb	r2, [r3, #0]
 8001cf8:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_UART_RxCpltCallback+0x270>)
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_UART_RxCpltCallback+0x26c>)
 8001cfe:	2211      	movs	r2, #17
 8001d00:	701a      	strb	r2, [r3, #0]
    angleNow = 0;
 8001d02:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_UART_RxCpltCallback+0x274>)
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
    gyroZ = 0; // reset angle for PID
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <HAL_UART_RxCpltCallback+0x278>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
    __RESET_SERVO_TURN(&htim1);
 8001d10:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <HAL_UART_RxCpltCallback+0x2a8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2291      	movs	r2, #145	; 0x91
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
 8001d18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d1c:	f005 f922 	bl	8006f64 <HAL_Delay>
    PIDConfigReset(&pidTSlow);
 8001d20:	4847      	ldr	r0, [pc, #284]	; (8001e40 <HAL_UART_RxCpltCallback+0x27c>)
 8001d22:	f000 fc52 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidSlow);
 8001d26:	4847      	ldr	r0, [pc, #284]	; (8001e44 <HAL_UART_RxCpltCallback+0x280>)
 8001d28:	f000 fc4f 	bl	80025ca <PIDConfigReset>
    PIDConfigReset(&pidFast);
 8001d2c:	4846      	ldr	r0, [pc, #280]	; (8001e48 <HAL_UART_RxCpltCallback+0x284>)
 8001d2e:	f000 fc4c 	bl	80025ca <PIDConfigReset>
    curDistTick = 0;
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_UART_RxCpltCallback+0x288>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	801a      	strh	r2, [r3, #0]
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d38:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b44      	ldr	r3, [pc, #272]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d112      	bne.n	8001d6a <HAL_UART_RxCpltCallback+0x1a6>
    {
      __CLEAR_CURCMD(curCmd);
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001d46:	2264      	movs	r2, #100	; 0x64
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8001d50:	4a41      	ldr	r2, [pc, #260]	; (8001e58 <HAL_UART_RxCpltCallback+0x294>)
 8001d52:	210f      	movs	r1, #15
 8001d54:	4841      	ldr	r0, [pc, #260]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001d56:	f00d fce5 	bl	800f724 <sniprintf>
 8001d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5e:	2206      	movs	r2, #6
 8001d60:	493f      	ldr	r1, [pc, #252]	; (8001e60 <HAL_UART_RxCpltCallback+0x29c>)
 8001d62:	4840      	ldr	r0, [pc, #256]	; (8001e64 <HAL_UART_RxCpltCallback+0x2a0>)
 8001d64:	f009 fb65 	bl	800b432 <HAL_UART_Transmit>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d68:	e3d1      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
    else
    {
      __READ_COMMAND(cQueue, curCmd, rxMsg);
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d6c:	785b      	ldrb	r3, [r3, #1]
 8001d6e:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_UART_RxCpltCallback+0x290>)
 8001d70:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a33      	ldr	r2, [pc, #204]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d82:	7892      	ldrb	r2, [r2, #2]
 8001d84:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d88:	fb01 f202 	mul.w	r2, r1, r2
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001d92:	705a      	strb	r2, [r3, #1]
 8001d94:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <HAL_UART_RxCpltCallback+0x2a4>)
 8001d96:	210f      	movs	r1, #15
 8001d98:	4830      	ldr	r0, [pc, #192]	; (8001e5c <HAL_UART_RxCpltCallback+0x298>)
 8001d9a:	f00d fcc3 	bl	800f724 <sniprintf>
    if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8001d9e:	e3b6      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
    }
  }
  else if (aRxBuffer[0] == 'F' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b46      	cmp	r3, #70	; 0x46
 8001da6:	d165      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0x2b0>
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b57      	cmp	r3, #87	; 0x57
 8001dae:	d003      	beq.n	8001db8 <HAL_UART_RxCpltCallback+0x1f4>
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	2b53      	cmp	r3, #83	; 0x53
 8001db6:	d15d      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0x2b0>
  { // FW or FS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	2b2d      	cmp	r3, #45	; 0x2d
 8001dbe:	d105      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x208>
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001dc2:	78db      	ldrb	r3, [r3, #3]
 8001dc4:	2b2d      	cmp	r3, #45	; 0x2d
 8001dc6:	d101      	bne.n	8001dcc <HAL_UART_RxCpltCallback+0x208>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_UART_RxCpltCallback+0x20a>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_UART_RxCpltCallback+0x264>)
 8001dd2:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_UART_RxCpltCallback+0x260>)
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	2b53      	cmp	r3, #83	; 0x53
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_UART_RxCpltCallback+0x2ac>)
 8001de6:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 1, val);
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	2201      	movs	r2, #1
 8001df4:	711a      	strb	r2, [r3, #4]
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	b291      	uxth	r1, r2
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	460a      	mov	r2, r1
 8001e06:	80da      	strh	r2, [r3, #6]
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e10:	7892      	ldrb	r2, [r2, #2]
 8001e12:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e16:	fb01 f202 	mul.w	r2, r1, r2
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_UART_RxCpltCallback+0x28c>)
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e374      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 8001e24:	2000048c 	.word	0x2000048c
 8001e28:	200004e0 	.word	0x200004e0
 8001e2c:	200003c4 	.word	0x200003c4
 8001e30:	20000134 	.word	0x20000134
 8001e34:	20000135 	.word	0x20000135
 8001e38:	200004e8 	.word	0x200004e8
 8001e3c:	200004ee 	.word	0x200004ee
 8001e40:	20000518 	.word	0x20000518
 8001e44:	20000504 	.word	0x20000504
 8001e48:	2000052c 	.word	0x2000052c
 8001e4c:	200004fc 	.word	0x200004fc
 8001e50:	20000498 	.word	0x20000498
 8001e54:	200004cc 	.word	0x200004cc
 8001e58:	0801013c 	.word	0x0801013c
 8001e5c:	200004d0 	.word	0x200004d0
 8001e60:	08010144 	.word	0x08010144
 8001e64:	2000040c 	.word	0x2000040c
 8001e68:	0801014c 	.word	0x0801014c
 8001e6c:	200002a4 	.word	0x200002a4
 8001e70:	20000136 	.word	0x20000136
  }
  else if (aRxBuffer[0] == 'B' && (aRxBuffer[1] == 'W' || aRxBuffer[1] == 'S'))
 8001e74:	4b96      	ldr	r3, [pc, #600]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b42      	cmp	r3, #66	; 0x42
 8001e7a:	d13d      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x334>
 8001e7c:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e7e:	785b      	ldrb	r3, [r3, #1]
 8001e80:	2b57      	cmp	r3, #87	; 0x57
 8001e82:	d003      	beq.n	8001e8c <HAL_UART_RxCpltCallback+0x2c8>
 8001e84:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b53      	cmp	r3, #83	; 0x53
 8001e8a:	d135      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x334>
  { // BW or BS
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001e8c:	4b90      	ldr	r3, [pc, #576]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e8e:	789b      	ldrb	r3, [r3, #2]
 8001e90:	2b2d      	cmp	r3, #45	; 0x2d
 8001e92:	d105      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x2dc>
 8001e94:	4b8e      	ldr	r3, [pc, #568]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001e96:	78db      	ldrb	r3, [r3, #3]
 8001e98:	2b2d      	cmp	r3, #45	; 0x2d
 8001e9a:	d101      	bne.n	8001ea0 <HAL_UART_RxCpltCallback+0x2dc>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_UART_RxCpltCallback+0x2de>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001ea6:	701a      	strb	r2, [r3, #0]
    moveMode = aRxBuffer[1] == 'S' ? SLOW : FAST;
 8001ea8:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001eaa:	785b      	ldrb	r3, [r3, #1]
 8001eac:	2b53      	cmp	r3, #83	; 0x53
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b87      	ldr	r3, [pc, #540]	; (80020d8 <HAL_UART_RxCpltCallback+0x514>)
 8001eba:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 2, val);
 8001ebc:	4b87      	ldr	r3, [pc, #540]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4a86      	ldr	r2, [pc, #536]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	711a      	strb	r2, [r3, #4]
 8001eca:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	b291      	uxth	r1, r2
 8001ed2:	4a82      	ldr	r2, [pc, #520]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	460a      	mov	r2, r1
 8001eda:	80da      	strh	r2, [r3, #6]
 8001edc:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ee4:	7892      	ldrb	r2, [r2, #2]
 8001ee6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eea:	fb01 f202 	mul.w	r2, r1, r2
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b7a      	ldr	r3, [pc, #488]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e30a      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }

  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L')
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b46      	cmp	r3, #70	; 0x46
 8001efe:	d136      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x3aa>
 8001f00:	4b73      	ldr	r3, [pc, #460]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b4c      	cmp	r3, #76	; 0x4c
 8001f06:	d132      	bne.n	8001f6e <HAL_UART_RxCpltCallback+0x3aa>
  { // FL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f08:	4b71      	ldr	r3, [pc, #452]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	2b2d      	cmp	r3, #45	; 0x2d
 8001f0e:	d105      	bne.n	8001f1c <HAL_UART_RxCpltCallback+0x358>
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	2b2d      	cmp	r3, #45	; 0x2d
 8001f16:	d101      	bne.n	8001f1c <HAL_UART_RxCpltCallback+0x358>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_UART_RxCpltCallback+0x35a>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b6c      	ldr	r3, [pc, #432]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f22:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 3 + (manualMode ? 0 : 4), val);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_RxCpltCallback+0x36c>
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	e000      	b.n	8001f32 <HAL_UART_RxCpltCallback+0x36e>
 8001f30:	2107      	movs	r1, #7
 8001f32:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	4a69      	ldr	r2, [pc, #420]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	711a      	strb	r2, [r3, #4]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	b291      	uxth	r1, r2
 8001f48:	4a64      	ldr	r2, [pc, #400]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	460a      	mov	r2, r1
 8001f50:	80da      	strh	r2, [r3, #6]
 8001f52:	4b62      	ldr	r3, [pc, #392]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a60      	ldr	r2, [pc, #384]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f5a:	7892      	ldrb	r2, [r2, #2]
 8001f5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f60:	fb01 f202 	mul.w	r2, r1, r2
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e2cf      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R')
 8001f6e:	4b58      	ldr	r3, [pc, #352]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b46      	cmp	r3, #70	; 0x46
 8001f74:	d136      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0x420>
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b52      	cmp	r3, #82	; 0x52
 8001f7c:	d132      	bne.n	8001fe4 <HAL_UART_RxCpltCallback+0x420>
  { // FR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001f7e:	4b54      	ldr	r3, [pc, #336]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f80:	789b      	ldrb	r3, [r3, #2]
 8001f82:	2b2d      	cmp	r3, #45	; 0x2d
 8001f84:	d105      	bne.n	8001f92 <HAL_UART_RxCpltCallback+0x3ce>
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001f88:	78db      	ldrb	r3, [r3, #3]
 8001f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001f8c:	d101      	bne.n	8001f92 <HAL_UART_RxCpltCallback+0x3ce>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_UART_RxCpltCallback+0x3d0>
 8001f92:	2300      	movs	r3, #0
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f98:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 4 + (manualMode ? 0 : 4), val);
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_RxCpltCallback+0x3e2>
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	e000      	b.n	8001fa8 <HAL_UART_RxCpltCallback+0x3e4>
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	711a      	strb	r2, [r3, #4]
 8001fb6:	4b49      	ldr	r3, [pc, #292]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	b291      	uxth	r1, r2
 8001fbe:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	80da      	strh	r2, [r3, #6]
 8001fc8:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a43      	ldr	r2, [pc, #268]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fd0:	7892      	ldrb	r2, [r2, #2]
 8001fd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fd6:	fb01 f202 	mul.w	r2, r1, r2
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e294      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L')
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b42      	cmp	r3, #66	; 0x42
 8001fea:	d136      	bne.n	800205a <HAL_UART_RxCpltCallback+0x496>
 8001fec:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ff2:	d132      	bne.n	800205a <HAL_UART_RxCpltCallback+0x496>
  { // BL
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001ff6:	789b      	ldrb	r3, [r3, #2]
 8001ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8001ffa:	d105      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x444>
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	2b2d      	cmp	r3, #45	; 0x2d
 8002002:	d101      	bne.n	8002008 <HAL_UART_RxCpltCallback+0x444>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_UART_RxCpltCallback+0x446>
 8002008:	2300      	movs	r3, #0
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 800200e:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 5 + (manualMode ? 0 : 4), val);
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_UART_RxCpltCallback+0x458>
 8002018:	2105      	movs	r1, #5
 800201a:	e000      	b.n	800201e <HAL_UART_RxCpltCallback+0x45a>
 800201c:	2109      	movs	r1, #9
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	460a      	mov	r2, r1
 800202a:	711a      	strb	r2, [r3, #4]
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	b291      	uxth	r1, r2
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	460a      	mov	r2, r1
 800203c:	80da      	strh	r2, [r3, #6]
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002046:	7892      	ldrb	r2, [r2, #2]
 8002048:	fb93 f1f2 	sdiv	r1, r3, r2
 800204c:	fb01 f202 	mul.w	r2, r1, r2
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e259      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  }
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R')
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b42      	cmp	r3, #66	; 0x42
 8002060:	d13e      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x51c>
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	2b52      	cmp	r3, #82	; 0x52
 8002068:	d13a      	bne.n	80020e0 <HAL_UART_RxCpltCallback+0x51c>
  { // BR
    manualMode = aRxBuffer[2] == '-' && aRxBuffer[3] == '-';
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 800206c:	789b      	ldrb	r3, [r3, #2]
 800206e:	2b2d      	cmp	r3, #45	; 0x2d
 8002070:	d105      	bne.n	800207e <HAL_UART_RxCpltCallback+0x4ba>
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_UART_RxCpltCallback+0x50c>)
 8002074:	78db      	ldrb	r3, [r3, #3]
 8002076:	2b2d      	cmp	r3, #45	; 0x2d
 8002078:	d101      	bne.n	800207e <HAL_UART_RxCpltCallback+0x4ba>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_UART_RxCpltCallback+0x4bc>
 800207e:	2300      	movs	r3, #0
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8002084:	701a      	strb	r2, [r3, #0]
    __ADD_COMMAND(cQueue, 6 + (manualMode ? 0 : 4), val);
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_UART_RxCpltCallback+0x510>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_RxCpltCallback+0x4ce>
 800208e:	2106      	movs	r1, #6
 8002090:	e000      	b.n	8002094 <HAL_UART_RxCpltCallback+0x4d0>
 8002092:	210a      	movs	r1, #10
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	460a      	mov	r2, r1
 80020a0:	711a      	strb	r2, [r3, #4]
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	b291      	uxth	r1, r2
 80020aa:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	460a      	mov	r2, r1
 80020b2:	80da      	strh	r2, [r3, #6]
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a08      	ldr	r2, [pc, #32]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020bc:	7892      	ldrb	r2, [r2, #2]
 80020be:	fb93 f1f2 	sdiv	r1, r3, r2
 80020c2:	fb01 f202 	mul.w	r2, r1, r2
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_UART_RxCpltCallback+0x518>)
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e21e      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 80020d0:	2000048c 	.word	0x2000048c
 80020d4:	200004e0 	.word	0x200004e0
 80020d8:	20000136 	.word	0x20000136
 80020dc:	20000498 	.word	0x20000498
  }
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'L')
 80020e0:	4b97      	ldr	r3, [pc, #604]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b54      	cmp	r3, #84	; 0x54
 80020e6:	d121      	bne.n	800212c <HAL_UART_RxCpltCallback+0x568>
 80020e8:	4b95      	ldr	r3, [pc, #596]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	2b4c      	cmp	r3, #76	; 0x4c
 80020ee:	d11d      	bne.n	800212c <HAL_UART_RxCpltCallback+0x568>
    __ADD_COMMAND(cQueue, 11, val); // TL turn left max
 80020f0:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4a93      	ldr	r2, [pc, #588]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	220b      	movs	r2, #11
 80020fc:	711a      	strb	r2, [r3, #4]
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	b291      	uxth	r1, r2
 8002106:	4a8f      	ldr	r2, [pc, #572]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	460a      	mov	r2, r1
 800210e:	80da      	strh	r2, [r3, #6]
 8002110:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a8b      	ldr	r2, [pc, #556]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002118:	7892      	ldrb	r2, [r2, #2]
 800211a:	fb93 f1f2 	sdiv	r1, r3, r2
 800211e:	fb01 f202 	mul.w	r2, r1, r2
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b87      	ldr	r3, [pc, #540]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e1f0      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'R')
 800212c:	4b84      	ldr	r3, [pc, #528]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b54      	cmp	r3, #84	; 0x54
 8002132:	d121      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x5b4>
 8002134:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002136:	785b      	ldrb	r3, [r3, #1]
 8002138:	2b52      	cmp	r3, #82	; 0x52
 800213a:	d11d      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x5b4>
    __ADD_COMMAND(cQueue, 12, val); // TR turn right max
 800213c:	4b81      	ldr	r3, [pc, #516]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	220c      	movs	r2, #12
 8002148:	711a      	strb	r2, [r3, #4]
 800214a:	4b7e      	ldr	r3, [pc, #504]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	b291      	uxth	r1, r2
 8002152:	4a7c      	ldr	r2, [pc, #496]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	460a      	mov	r2, r1
 800215a:	80da      	strh	r2, [r3, #6]
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	4a78      	ldr	r2, [pc, #480]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002164:	7892      	ldrb	r2, [r2, #2]
 8002166:	fb93 f1f2 	sdiv	r1, r3, r2
 800216a:	fb01 f202 	mul.w	r2, r1, r2
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b74      	ldr	r3, [pc, #464]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e1ca      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'D' && aRxBuffer[1] == 'T')
 8002178:	4b71      	ldr	r3, [pc, #452]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b44      	cmp	r3, #68	; 0x44
 800217e:	d121      	bne.n	80021c4 <HAL_UART_RxCpltCallback+0x600>
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	2b54      	cmp	r3, #84	; 0x54
 8002186:	d11d      	bne.n	80021c4 <HAL_UART_RxCpltCallback+0x600>
    __ADD_COMMAND(cQueue, 14, val); // DT move until specified distance from obstacle
 8002188:	4b6e      	ldr	r3, [pc, #440]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4a6d      	ldr	r2, [pc, #436]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	220e      	movs	r2, #14
 8002194:	711a      	strb	r2, [r3, #4]
 8002196:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	b291      	uxth	r1, r2
 800219e:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	460a      	mov	r2, r1
 80021a6:	80da      	strh	r2, [r3, #6]
 80021a8:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	4a65      	ldr	r2, [pc, #404]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021b0:	7892      	ldrb	r2, [r2, #2]
 80021b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80021b6:	fb01 f202 	mul.w	r2, r1, r2
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e1a4      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'D')
 80021c4:	4b5e      	ldr	r3, [pc, #376]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b54      	cmp	r3, #84	; 0x54
 80021ca:	d121      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x64c>
 80021cc:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b44      	cmp	r3, #68	; 0x44
 80021d2:	d11d      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x64c>
    __ADD_COMMAND(cQueue, 15, val); // TD move until specified distance from obstacle and record distance travelled,
 80021d4:	4b5b      	ldr	r3, [pc, #364]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	220f      	movs	r2, #15
 80021e0:	711a      	strb	r2, [r3, #4]
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	b291      	uxth	r1, r2
 80021ea:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	460a      	mov	r2, r1
 80021f2:	80da      	strh	r2, [r3, #6]
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80021fc:	7892      	ldrb	r2, [r2, #2]
 80021fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002202:	fb01 f202 	mul.w	r2, r1, r2
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e17e      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
                                    // and travelled backward to staring point - for debugging only
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'A')
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b46      	cmp	r3, #70	; 0x46
 8002216:	d121      	bne.n	800225c <HAL_UART_RxCpltCallback+0x698>
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800221a:	785b      	ldrb	r3, [r3, #1]
 800221c:	2b41      	cmp	r3, #65	; 0x41
 800221e:	d11d      	bne.n	800225c <HAL_UART_RxCpltCallback+0x698>
    __ADD_COMMAND(cQueue, 88, val); // forward anti-clockwise rotation with variable
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	2258      	movs	r2, #88	; 0x58
 800222c:	711a      	strb	r2, [r3, #4]
 800222e:	4b45      	ldr	r3, [pc, #276]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	b291      	uxth	r1, r2
 8002236:	4a43      	ldr	r2, [pc, #268]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	460a      	mov	r2, r1
 800223e:	80da      	strh	r2, [r3, #6]
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002248:	7892      	ldrb	r2, [r2, #2]
 800224a:	fb93 f1f2 	sdiv	r1, r3, r2
 800224e:	fb01 f202 	mul.w	r2, r1, r2
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e158      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'C')
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b46      	cmp	r3, #70	; 0x46
 8002262:	d121      	bne.n	80022a8 <HAL_UART_RxCpltCallback+0x6e4>
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b43      	cmp	r3, #67	; 0x43
 800226a:	d11d      	bne.n	80022a8 <HAL_UART_RxCpltCallback+0x6e4>
    __ADD_COMMAND(cQueue, 89, val); // forward clockwise rotation with variable
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4a34      	ldr	r2, [pc, #208]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	2259      	movs	r2, #89	; 0x59
 8002278:	711a      	strb	r2, [r3, #4]
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	b291      	uxth	r1, r2
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	460a      	mov	r2, r1
 800228a:	80da      	strh	r2, [r3, #6]
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002294:	7892      	ldrb	r2, [r2, #2]
 8002296:	fb93 f1f2 	sdiv	r1, r3, r2
 800229a:	fb01 f202 	mul.w	r2, r1, r2
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e132      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'A')
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b42      	cmp	r3, #66	; 0x42
 80022ae:	d121      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x730>
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b41      	cmp	r3, #65	; 0x41
 80022b6:	d11d      	bne.n	80022f4 <HAL_UART_RxCpltCallback+0x730>
    __ADD_COMMAND(cQueue, 90, val); // backward anti-clockwise rotation with variable
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	225a      	movs	r2, #90	; 0x5a
 80022c4:	711a      	strb	r2, [r3, #4]
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	b291      	uxth	r1, r2
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	460a      	mov	r2, r1
 80022d6:	80da      	strh	r2, [r3, #6]
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022e0:	7892      	ldrb	r2, [r2, #2]
 80022e2:	fb93 f1f2 	sdiv	r1, r3, r2
 80022e6:	fb01 f202 	mul.w	r2, r1, r2
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	e10c      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'C')
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b42      	cmp	r3, #66	; 0x42
 80022fa:	d125      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x784>
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_UART_RxCpltCallback+0x77c>)
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	2b43      	cmp	r3, #67	; 0x43
 8002302:	d121      	bne.n	8002348 <HAL_UART_RxCpltCallback+0x784>
    __ADD_COMMAND(cQueue, 91, val); // backward clockwise rotation with variable
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	225b      	movs	r2, #91	; 0x5b
 8002310:	711a      	strb	r2, [r3, #4]
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	b291      	uxth	r1, r2
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	460a      	mov	r2, r1
 8002322:	80da      	strh	r2, [r3, #6]
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800232c:	7892      	ldrb	r2, [r2, #2]
 800232e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002332:	fb01 f202 	mul.w	r2, r1, r2
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b02      	ldr	r3, [pc, #8]	; (8002344 <HAL_UART_RxCpltCallback+0x780>)
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e0e6      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 8002340:	2000048c 	.word	0x2000048c
 8002344:	20000498 	.word	0x20000498
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'A')
 8002348:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b54      	cmp	r3, #84	; 0x54
 800234e:	d121      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x7d0>
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b41      	cmp	r3, #65	; 0x41
 8002356:	d11d      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x7d0>
    __ADD_COMMAND(cQueue, 92, val);
 8002358:	4b85      	ldr	r3, [pc, #532]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4a84      	ldr	r2, [pc, #528]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	225c      	movs	r2, #92	; 0x5c
 8002364:	711a      	strb	r2, [r3, #4]
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	b291      	uxth	r1, r2
 800236e:	4a80      	ldr	r2, [pc, #512]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	80da      	strh	r2, [r3, #6]
 8002378:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002380:	7892      	ldrb	r2, [r2, #2]
 8002382:	fb93 f1f2 	sdiv	r1, r3, r2
 8002386:	fb01 f202 	mul.w	r2, r1, r2
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e0bc      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'R')
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b49      	cmp	r3, #73	; 0x49
 800239a:	d121      	bne.n	80023e0 <HAL_UART_RxCpltCallback+0x81c>
 800239c:	4b73      	ldr	r3, [pc, #460]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	2b52      	cmp	r3, #82	; 0x52
 80023a2:	d11d      	bne.n	80023e0 <HAL_UART_RxCpltCallback+0x81c>
    __ADD_COMMAND(cQueue, 93, val);
 80023a4:	4b72      	ldr	r3, [pc, #456]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4a71      	ldr	r2, [pc, #452]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	225d      	movs	r2, #93	; 0x5d
 80023b0:	711a      	strb	r2, [r3, #4]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	b291      	uxth	r1, r2
 80023ba:	4a6d      	ldr	r2, [pc, #436]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	460a      	mov	r2, r1
 80023c2:	80da      	strh	r2, [r3, #6]
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023cc:	7892      	ldrb	r2, [r2, #2]
 80023ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80023d2:	fb01 f202 	mul.w	r2, r1, r2
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e096      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'I' && aRxBuffer[1] == 'C')
 80023e0:	4b62      	ldr	r3, [pc, #392]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b49      	cmp	r3, #73	; 0x49
 80023e6:	d121      	bne.n	800242c <HAL_UART_RxCpltCallback+0x868>
 80023e8:	4b60      	ldr	r3, [pc, #384]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2b43      	cmp	r3, #67	; 0x43
 80023ee:	d11d      	bne.n	800242c <HAL_UART_RxCpltCallback+0x868>
    __ADD_COMMAND(cQueue, 94, val);
 80023f0:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	225e      	movs	r2, #94	; 0x5e
 80023fc:	711a      	strb	r2, [r3, #4]
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b291      	uxth	r1, r2
 8002406:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	460a      	mov	r2, r1
 800240e:	80da      	strh	r2, [r3, #6]
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002418:	7892      	ldrb	r2, [r2, #2]
 800241a:	fb93 f1f2 	sdiv	r1, r3, r2
 800241e:	fb01 f202 	mul.w	r2, r1, r2
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b52      	ldr	r3, [pc, #328]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e070      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'T' && aRxBuffer[1] == 'B')
 800242c:	4b4f      	ldr	r3, [pc, #316]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b54      	cmp	r3, #84	; 0x54
 8002432:	d121      	bne.n	8002478 <HAL_UART_RxCpltCallback+0x8b4>
 8002434:	4b4d      	ldr	r3, [pc, #308]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	2b42      	cmp	r3, #66	; 0x42
 800243a:	d11d      	bne.n	8002478 <HAL_UART_RxCpltCallback+0x8b4>
    __ADD_COMMAND(cQueue, 95, val);
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	225f      	movs	r2, #95	; 0x5f
 8002448:	711a      	strb	r2, [r3, #4]
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	b291      	uxth	r1, r2
 8002452:	4a47      	ldr	r2, [pc, #284]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	460a      	mov	r2, r1
 800245a:	80da      	strh	r2, [r3, #6]
 800245c:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002464:	7892      	ldrb	r2, [r2, #2]
 8002466:	fb93 f1f2 	sdiv	r1, r3, r2
 800246a:	fb01 f202 	mul.w	r2, r1, r2
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e04a      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'G' && aRxBuffer[1] == 'H')
 8002478:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b47      	cmp	r3, #71	; 0x47
 800247e:	d121      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x900>
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	2b48      	cmp	r3, #72	; 0x48
 8002486:	d11d      	bne.n	80024c4 <HAL_UART_RxCpltCallback+0x900>
    __ADD_COMMAND(cQueue, 96, val);
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	2260      	movs	r2, #96	; 0x60
 8002494:	711a      	strb	r2, [r3, #4]
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	b291      	uxth	r1, r2
 800249e:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	460a      	mov	r2, r1
 80024a6:	80da      	strh	r2, [r3, #6]
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a30      	ldr	r2, [pc, #192]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024b0:	7892      	ldrb	r2, [r2, #2]
 80024b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80024b6:	fb01 f202 	mul.w	r2, r1, r2
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e024      	b.n	800250e <HAL_UART_RxCpltCallback+0x94a>
  else if (aRxBuffer[0] == 'A' && aRxBuffer[1] == 'M')
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b41      	cmp	r3, #65	; 0x41
 80024ca:	d120      	bne.n	800250e <HAL_UART_RxCpltCallback+0x94a>
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2b4d      	cmp	r3, #77	; 0x4d
 80024d2:	d11c      	bne.n	800250e <HAL_UART_RxCpltCallback+0x94a>
    __ADD_COMMAND(cQueue, 97, val);
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	2261      	movs	r2, #97	; 0x61
 80024e0:	711a      	strb	r2, [r3, #4]
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	b291      	uxth	r1, r2
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	460a      	mov	r2, r1
 80024f2:	80da      	strh	r2, [r3, #6]
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 80024fc:	7892      	ldrb	r2, [r2, #2]
 80024fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002502:	fb01 f202 	mul.w	r2, r1, r2
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800250c:	701a      	strb	r2, [r3, #0]
  if (!__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	429a      	cmp	r2, r3
 8002518:	d019      	beq.n	800254e <HAL_UART_RxCpltCallback+0x98a>
  {
    __READ_COMMAND(cQueue, curCmd, rxMsg);
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <HAL_UART_RxCpltCallback+0x9b0>)
 8002520:	4913      	ldr	r1, [pc, #76]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	3301      	adds	r3, #1
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002532:	7892      	ldrb	r2, [r2, #2]
 8002534:	fb93 f1f2 	sdiv	r1, r3, r2
 8002538:	fb01 f202 	mul.w	r2, r1, r2
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_UART_RxCpltCallback+0x9ac>)
 8002542:	705a      	strb	r2, [r3, #1]
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_UART_RxCpltCallback+0x9b4>)
 8002546:	210f      	movs	r1, #15
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <HAL_UART_RxCpltCallback+0x9b8>)
 800254a:	f00d f8eb 	bl	800f724 <sniprintf>
  }

  // clear aRx buffer
  __HAL_UART_FLUSH_DRREGISTER(&huart3);
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_UART_RxCpltCallback+0x9bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
  HAL_UART_Receive_IT(&huart3, aRxBuffer, RX_BUFFER_SIZE);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_UART_RxCpltCallback+0x9c0>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_UART_RxCpltCallback+0x9a8>)
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <HAL_UART_RxCpltCallback+0x9bc>)
 8002560:	f008 fff9 	bl	800b556 <HAL_UART_Receive_IT>
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2000048c 	.word	0x2000048c
 8002570:	20000498 	.word	0x20000498
 8002574:	200004cc 	.word	0x200004cc
 8002578:	0801014c 	.word	0x0801014c
 800257c:	200004d0 	.word	0x200004d0
 8002580:	2000040c 	.word	0x2000040c
 8002584:	20000000 	.word	0x20000000

08002588 <PIDConfigInit>:

// pid
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	ed87 0a02 	vstr	s0, [r7, #8]
 8002594:	edc7 0a01 	vstr	s1, [r7, #4]
 8002598:	ed87 1a00 	vstr	s2, [r7]
  cfg->Kp = Kp;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	601a      	str	r2, [r3, #0]
  cfg->Ki = Ki;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	605a      	str	r2, [r3, #4]
  cfg->Kd = Kd;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	609a      	str	r2, [r3, #8]
  cfg->ek1 = 0;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <PIDConfigReset>:

void PIDConfigReset(PIDConfig *cfg)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  cfg->ek1 = 0;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  cfg->ekSum = 0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HCSR04_Read>:

void HCSR04_Read(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025fa:	481a      	ldr	r0, [pc, #104]	; (8002664 <HCSR04_Read+0x74>)
 80025fc:	f005 fbe6 	bl	8007dcc <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HCSR04_Read+0x78>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HCSR04_Read+0x78>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b31      	cmp	r3, #49	; 0x31
 8002610:	d9fa      	bls.n	8002608 <HCSR04_Read+0x18>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_SET);   // pull the TRIG pin HIGH
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002618:	4812      	ldr	r0, [pc, #72]	; (8002664 <HCSR04_Read+0x74>)
 800261a:	f005 fbd7 	bl	8007dcc <HAL_GPIO_WritePin>
  __delay_us(&htim6, 10);                                            // wait for 10 us
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HCSR04_Read+0x78>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HCSR04_Read+0x78>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b09      	cmp	r3, #9
 800262e:	d9fa      	bls.n	8002626 <HCSR04_Read+0x36>
  HAL_GPIO_WritePin(US_Trig_GPIO_Port, US_Trig_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002636:	480b      	ldr	r0, [pc, #44]	; (8002664 <HCSR04_Read+0x74>)
 8002638:	f005 fbc8 	bl	8007dcc <HAL_GPIO_WritePin>
  __delay_us(&htim6, 50);
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HCSR04_Read+0x78>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2200      	movs	r2, #0
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HCSR04_Read+0x78>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	2b31      	cmp	r3, #49	; 0x31
 800264c:	d9fa      	bls.n	8002644 <HCSR04_Read+0x54>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HCSR04_Read+0x7c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HCSR04_Read+0x7c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0204 	orr.w	r2, r2, #4
 800265c:	60da      	str	r2, [r3, #12]
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	2000037c 	.word	0x2000037c
 800266c:	20000334 	.word	0x20000334

08002670 <StraightLineMove>:

int8_t dir = 1;
int correction = 0;

void StraightLineMove(const uint8_t speedMode)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af04      	add	r7, sp, #16
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]

  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ); // polling
 800267a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800267e:	9302      	str	r3, [sp, #8]
 8002680:	2302      	movs	r3, #2
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	4ba9      	ldr	r3, [pc, #676]	; (800292c <StraightLineMove+0x2bc>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2301      	movs	r3, #1
 800268a:	2237      	movs	r2, #55	; 0x37
 800268c:	21d0      	movs	r1, #208	; 0xd0
 800268e:	48a8      	ldr	r0, [pc, #672]	; (8002930 <StraightLineMove+0x2c0>)
 8002690:	f005 fdf4 	bl	800827c <HAL_I2C_Mem_Read>
 8002694:	4ba5      	ldr	r3, [pc, #660]	; (800292c <StraightLineMove+0x2bc>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21a      	sxth	r2, r3
 800269c:	4ba3      	ldr	r3, [pc, #652]	; (800292c <StraightLineMove+0x2bc>)
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	4313      	orrs	r3, r2
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	4ba3      	ldr	r3, [pc, #652]	; (8002934 <StraightLineMove+0x2c4>)
 80026a8:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80026aa:	4ba3      	ldr	r3, [pc, #652]	; (8002938 <StraightLineMove+0x2c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	4b9e      	ldr	r3, [pc, #632]	; (800293c <StraightLineMove+0x2cc>)
 80026c2:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;s
 80026c4:	4b9b      	ldr	r3, [pc, #620]	; (8002934 <StraightLineMove+0x2c4>)
 80026c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ca:	f113 0f04 	cmn.w	r3, #4
 80026ce:	db04      	blt.n	80026da <StraightLineMove+0x6a>
 80026d0:	4b98      	ldr	r3, [pc, #608]	; (8002934 <StraightLineMove+0x2c4>)
 80026d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d6:	2b0b      	cmp	r3, #11
 80026d8:	dd07      	ble.n	80026ea <StraightLineMove+0x7a>
 80026da:	4b96      	ldr	r3, [pc, #600]	; (8002934 <StraightLineMove+0x2c4>)
 80026dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e8:	e001      	b.n	80026ee <StraightLineMove+0x7e>
 80026ea:	eddf 7a95 	vldr	s15, [pc, #596]	; 8002940 <StraightLineMove+0x2d0>
 80026ee:	4b95      	ldr	r3, [pc, #596]	; (8002944 <StraightLineMove+0x2d4>)
 80026f0:	ed93 7a00 	vldr	s14, [r3]
 80026f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f8:	4b92      	ldr	r3, [pc, #584]	; (8002944 <StraightLineMove+0x2d4>)
 80026fa:	edc3 7a00 	vstr	s15, [r3]

  if (speedMode == SPEED_MODE_T)
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d164      	bne.n	80027ce <StraightLineMove+0x15e>
    __PID_SPEED_T(pidTSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <StraightLineMove+0x2d8>)
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <StraightLineMove+0x2d4>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	4b8c      	ldr	r3, [pc, #560]	; (8002948 <StraightLineMove+0x2d8>)
 8002716:	edd3 6a01 	vldr	s13, [r3, #4]
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <StraightLineMove+0x2d8>)
 800271c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002728:	4b87      	ldr	r3, [pc, #540]	; (8002948 <StraightLineMove+0x2d8>)
 800272a:	edd3 6a02 	vldr	s13, [r3, #8]
 800272e:	4b86      	ldr	r3, [pc, #536]	; (8002948 <StraightLineMove+0x2d8>)
 8002730:	ed93 6a03 	vldr	s12, [r3, #12]
 8002734:	4b83      	ldr	r3, [pc, #524]	; (8002944 <StraightLineMove+0x2d4>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274a:	ee17 2a90 	vmov	r2, s15
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <StraightLineMove+0x2dc>)
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <StraightLineMove+0x2d4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7c      	ldr	r2, [pc, #496]	; (8002948 <StraightLineMove+0x2d8>)
 8002758:	60d3      	str	r3, [r2, #12]
 800275a:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <StraightLineMove+0x2d8>)
 800275c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <StraightLineMove+0x2d4>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b77      	ldr	r3, [pc, #476]	; (8002948 <StraightLineMove+0x2d8>)
 800276c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <StraightLineMove+0x2dc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002778:	dc06      	bgt.n	8002788 <StraightLineMove+0x118>
 800277a:	4b74      	ldr	r3, [pc, #464]	; (800294c <StraightLineMove+0x2dc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a74      	ldr	r2, [pc, #464]	; (8002950 <StraightLineMove+0x2e0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bfb8      	it	lt
 8002784:	4613      	movlt	r3, r2
 8002786:	e001      	b.n	800278c <StraightLineMove+0x11c>
 8002788:	f44f 7316 	mov.w	r3, #600	; 0x258
 800278c:	4a6f      	ldr	r2, [pc, #444]	; (800294c <StraightLineMove+0x2dc>)
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <StraightLineMove+0x2cc>)
 8002792:	f993 3000 	ldrsb.w	r3, [r3]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b6c      	ldr	r3, [pc, #432]	; (800294c <StraightLineMove+0x2dc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	fb12 f303 	smulbb	r3, r2, r3
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <StraightLineMove+0x2e4>)
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <StraightLineMove+0x2cc>)
 80027b0:	f993 3000 	ldrsb.w	r3, [r3]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b65      	ldr	r3, [pc, #404]	; (800294c <StraightLineMove+0x2dc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	fb12 f303 	smulbb	r3, r2, r3
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b63      	ldr	r3, [pc, #396]	; (8002958 <StraightLineMove+0x2e8>)
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e0ef      	b.n	80029ae <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_2)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d165      	bne.n	80028a0 <StraightLineMove+0x230>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <StraightLineMove+0x2ec>)
 80027d6:	ed93 7a00 	vldr	s14, [r3]
 80027da:	4b5a      	ldr	r3, [pc, #360]	; (8002944 <StraightLineMove+0x2d4>)
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <StraightLineMove+0x2ec>)
 80027e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80027ea:	4b5c      	ldr	r3, [pc, #368]	; (800295c <StraightLineMove+0x2ec>)
 80027ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80027f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f8:	4b58      	ldr	r3, [pc, #352]	; (800295c <StraightLineMove+0x2ec>)
 80027fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80027fe:	4b57      	ldr	r3, [pc, #348]	; (800295c <StraightLineMove+0x2ec>)
 8002800:	ed93 6a03 	vldr	s12, [r3, #12]
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <StraightLineMove+0x2d4>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800280e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281a:	ee17 2a90 	vmov	r2, s15
 800281e:	4b4b      	ldr	r3, [pc, #300]	; (800294c <StraightLineMove+0x2dc>)
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <StraightLineMove+0x2d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4d      	ldr	r2, [pc, #308]	; (800295c <StraightLineMove+0x2ec>)
 8002828:	60d3      	str	r3, [r2, #12]
 800282a:	4b4c      	ldr	r3, [pc, #304]	; (800295c <StraightLineMove+0x2ec>)
 800282c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002830:	4b44      	ldr	r3, [pc, #272]	; (8002944 <StraightLineMove+0x2d4>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	4b48      	ldr	r3, [pc, #288]	; (800295c <StraightLineMove+0x2ec>)
 800283c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <StraightLineMove+0x2dc>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002848:	dc06      	bgt.n	8002858 <StraightLineMove+0x1e8>
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <StraightLineMove+0x2dc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a44      	ldr	r2, [pc, #272]	; (8002960 <StraightLineMove+0x2f0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	bfb8      	it	lt
 8002854:	4613      	movlt	r3, r2
 8002856:	e001      	b.n	800285c <StraightLineMove+0x1ec>
 8002858:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <StraightLineMove+0x2dc>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <StraightLineMove+0x2cc>)
 8002862:	f993 3000 	ldrsb.w	r3, [r3]
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b38      	ldr	r3, [pc, #224]	; (800294c <StraightLineMove+0x2dc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	fb12 f303 	smulbb	r3, r2, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <StraightLineMove+0x2e4>)
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <StraightLineMove+0x2cc>)
 8002880:	f993 3000 	ldrsb.w	r3, [r3]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b31      	ldr	r3, [pc, #196]	; (800294c <StraightLineMove+0x2dc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	fb12 f303 	smulbb	r3, r2, r3
 8002890:	b29b      	uxth	r3, r3
 8002892:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8002896:	3308      	adds	r3, #8
 8002898:	b29a      	uxth	r2, r3
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <StraightLineMove+0x2e8>)
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	e086      	b.n	80029ae <StraightLineMove+0x33e>
  else if (speedMode == SPEED_MODE_1)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 8083 	bne.w	80029ae <StraightLineMove+0x33e>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <StraightLineMove+0x2f4>)
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <StraightLineMove+0x2d4>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <StraightLineMove+0x2f4>)
 80028ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <StraightLineMove+0x2f4>)
 80028c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <StraightLineMove+0x2f4>)
 80028ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <StraightLineMove+0x2f4>)
 80028d4:	ed93 6a03 	vldr	s12, [r3, #12]
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <StraightLineMove+0x2d4>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80028e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ee:	ee17 2a90 	vmov	r2, s15
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <StraightLineMove+0x2dc>)
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <StraightLineMove+0x2d4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <StraightLineMove+0x2f4>)
 80028fc:	60d3      	str	r3, [r2, #12]
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <StraightLineMove+0x2f4>)
 8002900:	ed93 7a04 	vldr	s14, [r3, #16]
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <StraightLineMove+0x2d4>)
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <StraightLineMove+0x2f4>)
 8002910:	edc3 7a04 	vstr	s15, [r3, #16]
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <StraightLineMove+0x2dc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800291c:	dc24      	bgt.n	8002968 <StraightLineMove+0x2f8>
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <StraightLineMove+0x2dc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <StraightLineMove+0x2f0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bfb8      	it	lt
 8002928:	4613      	movlt	r3, r2
 800292a:	e01f      	b.n	800296c <StraightLineMove+0x2fc>
 800292c:	200004ec 	.word	0x200004ec
 8002930:	20000250 	.word	0x20000250
 8002934:	200004ee 	.word	0x200004ee
 8002938:	200002ec 	.word	0x200002ec
 800293c:	20000140 	.word	0x20000140
 8002940:	00000000 	.word	0x00000000
 8002944:	200004e8 	.word	0x200004e8
 8002948:	20000518 	.word	0x20000518
 800294c:	20000568 	.word	0x20000568
 8002950:	fffffda8 	.word	0xfffffda8
 8002954:	200004f0 	.word	0x200004f0
 8002958:	200004f2 	.word	0x200004f2
 800295c:	2000052c 	.word	0x2000052c
 8002960:	fffffd44 	.word	0xfffffd44
 8002964:	20000504 	.word	0x20000504
 8002968:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800296c:	4a17      	ldr	r2, [pc, #92]	; (80029cc <StraightLineMove+0x35c>)
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <StraightLineMove+0x360>)
 8002972:	f993 3000 	ldrsb.w	r3, [r3]
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <StraightLineMove+0x35c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	fb12 f303 	smulbb	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <StraightLineMove+0x364>)
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <StraightLineMove+0x360>)
 8002990:	f993 3000 	ldrsb.w	r3, [r3]
 8002994:	b29a      	uxth	r2, r3
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <StraightLineMove+0x35c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	fb12 f303 	smulbb	r3, r2, r3
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 80029a6:	330c      	adds	r3, #12
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <StraightLineMove+0x368>)
 80029ac:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <StraightLineMove+0x364>)
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <StraightLineMove+0x36c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <StraightLineMove+0x368>)
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <StraightLineMove+0x36c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000568 	.word	0x20000568
 80029d0:	20000140 	.word	0x20000140
 80029d4:	200004f0 	.word	0x200004f0
 80029d8:	200004f2 	.word	0x200004f2
 80029dc:	200003c4 	.word	0x200003c4

080029e0 <RobotMoveDist>:
 * @param targetDist Pointer to the target distance to move.
 * @param dir The direction to move the robot in.
 * @param speedMode The speed mode to use for the movement.
 */
void RobotMoveDist(float *targetDist, const uint8_t dir, const uint8_t speedMode)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
 80029ec:	4613      	mov	r3, r2
 80029ee:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 80029f0:	4ba1      	ldr	r3, [pc, #644]	; (8002c78 <RobotMoveDist+0x298>)
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 80029f8:	4ba0      	ldr	r3, [pc, #640]	; (8002c7c <RobotMoveDist+0x29c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80029fe:	48a0      	ldr	r0, [pc, #640]	; (8002c80 <RobotMoveDist+0x2a0>)
 8002a00:	f7ff fde3 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002a04:	489f      	ldr	r0, [pc, #636]	; (8002c84 <RobotMoveDist+0x2a4>)
 8002a06:	f7ff fde0 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002a0a:	489f      	ldr	r0, [pc, #636]	; (8002c88 <RobotMoveDist+0x2a8>)
 8002a0c:	f7ff fddd 	bl	80025ca <PIDConfigReset>
  curDistTick = 0;
 8002a10:	4b9e      	ldr	r3, [pc, #632]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 8002a16:	4b9e      	ldr	r3, [pc, #632]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
  __GET_TARGETTICK(*targetDist, targetDistTick);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd89 	bl	8000538 <__aeabi_f2d>
 8002a26:	a38e      	add	r3, pc, #568	; (adr r3, 8002c60 <RobotMoveDist+0x280>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fddc 	bl	80005e8 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	a38b      	add	r3, pc, #556	; (adr r3, 8002c68 <RobotMoveDist+0x288>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fc1b 	bl	8000278 <__aeabi_dsub>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	4b91      	ldr	r3, [pc, #580]	; (8002c94 <RobotMoveDist+0x2b4>)
 8002a50:	f7fd fef4 	bl	800083c <__aeabi_ddiv>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	4b8d      	ldr	r3, [pc, #564]	; (8002c98 <RobotMoveDist+0x2b8>)
 8002a62:	f7fd fdc1 	bl	80005e8 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b8a      	ldr	r3, [pc, #552]	; (8002c9c <RobotMoveDist+0x2bc>)
 8002a74:	f7fd fc00 	bl	8000278 <__aeabi_dsub>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f84c 	bl	8000b1c <__aeabi_d2uiz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b85      	ldr	r3, [pc, #532]	; (8002ca0 <RobotMoveDist+0x2c0>)
 8002a8a:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8002a8c:	f004 fa5e 	bl	8006f4c <HAL_GetTick>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a84      	ldr	r2, [pc, #528]	; (8002ca4 <RobotMoveDist+0x2c4>)
 8002a94:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4880      	ldr	r0, [pc, #512]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002aa8:	f005 f990 	bl	8007dcc <HAL_GPIO_WritePin>
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2108      	movs	r1, #8
 8002abc:	487a      	ldr	r0, [pc, #488]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002abe:	f005 f985 	bl	8007dcc <HAL_GPIO_WritePin>
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	4875      	ldr	r0, [pc, #468]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002ad4:	f005 f97a 	bl	8007dcc <HAL_GPIO_WritePin>
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	486f      	ldr	r0, [pc, #444]	; (8002ca8 <RobotMoveDist+0x2c8>)
 8002aea:	f005 f96f 	bl	8007dcc <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <RobotMoveDist+0x2cc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002af8:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <RobotMoveDist+0x2cc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b6a      	ldr	r3, [pc, #424]	; (8002cac <RobotMoveDist+0x2cc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d117      	bne.n	8002b40 <RobotMoveDist+0x160>
 8002b10:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d806      	bhi.n	8002b2a <RobotMoveDist+0x14a>
 8002b1c:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	e007      	b.n	8002b3a <RobotMoveDist+0x15a>
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002b3c:	8013      	strh	r3, [r2, #0]
 8002b3e:	e016      	b.n	8002b6e <RobotMoveDist+0x18e>
 8002b40:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d306      	bcc.n	8002b5a <RobotMoveDist+0x17a>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	e007      	b.n	8002b6a <RobotMoveDist+0x18a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4a49      	ldr	r2, [pc, #292]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002b6c:	8013      	strh	r3, [r2, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <RobotMoveDist+0x2d0>)
 8002b74:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002b76:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <RobotMoveDist+0x2b0>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002b84:	801a      	strh	r2, [r3, #0]
    if (curDistTick >= targetDistTick)
 8002b86:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <RobotMoveDist+0x2c0>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	f080 80a5 	bcs.w	8002cde <RobotMoveDist+0x2fe>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002b94:	f004 f9da 	bl	8006f4c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <RobotMoveDist+0x2c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b09      	cmp	r3, #9
 8002ba2:	d9aa      	bls.n	8002afa <RobotMoveDist+0x11a>
    {
      if (speedMode == SPEED_MODE_T)
 8002ba4:	78bb      	ldrb	r3, [r7, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <RobotMoveDist+0x1d2>
      {
        StraightLineMove(SPEED_MODE_T);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff fd60 	bl	8002670 <StraightLineMove>
 8002bb0:	e08f      	b.n	8002cd2 <RobotMoveDist+0x2f2>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002bb2:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <RobotMoveDist+0x2ac>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <RobotMoveDist+0x2c0>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bfb8      	it	lt
 8002bc2:	425b      	neglt	r3, r3
 8002bc4:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <RobotMoveDist+0x2d4>)
 8002bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8002bca:	11d2      	asrs	r2, r2, #7
 8002bcc:	17db      	asrs	r3, r3, #31
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002bda:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11e      	bne.n	8002c22 <RobotMoveDist+0x242>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	dd02      	ble.n	8002bfe <RobotMoveDist+0x21e>
 8002bf8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002bfc:	e00e      	b.n	8002c1c <RobotMoveDist+0x23c>
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d502      	bpl.n	8002c18 <RobotMoveDist+0x238>
 8002c12:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002c16:	e001      	b.n	8002c1c <RobotMoveDist+0x23c>
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e052      	b.n	8002cc8 <RobotMoveDist+0x2e8>
        else if (speedMode == SPEED_MODE_2)
 8002c22:	78bb      	ldrb	r3, [r7, #2]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d14f      	bne.n	8002cc8 <RobotMoveDist+0x2e8>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	dd02      	ble.n	8002c42 <RobotMoveDist+0x262>
 8002c3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c40:	e040      	b.n	8002cc4 <RobotMoveDist+0x2e4>
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <RobotMoveDist+0x2d8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc76 	bl	8000538 <__aeabi_f2d>
 8002c4c:	a308      	add	r3, pc, #32	; (adr r3, 8002c70 <RobotMoveDist+0x290>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd ff3b 	bl	8000acc <__aeabi_dcmplt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <RobotMoveDist+0x2e0>
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <RobotMoveDist+0x2dc>)
 8002c5e:	e031      	b.n	8002cc4 <RobotMoveDist+0x2e4>
 8002c60:	fc66b22a 	.word	0xfc66b22a
 8002c64:	3ff266ac 	.word	0x3ff266ac
 8002c68:	bb2526f8 	.word	0xbb2526f8
 8002c6c:	3feee3d4 	.word	0x3feee3d4
 8002c70:	9999999a 	.word	0x9999999a
 8002c74:	3fd99999 	.word	0x3fd99999
 8002c78:	200004e8 	.word	0x200004e8
 8002c7c:	200004ee 	.word	0x200004ee
 8002c80:	20000518 	.word	0x20000518
 8002c84:	20000504 	.word	0x20000504
 8002c88:	2000052c 	.word	0x2000052c
 8002c8c:	200004fc 	.word	0x200004fc
 8002c90:	20000500 	.word	0x20000500
 8002c94:	40340000 	.word	0x40340000
 8002c98:	4094a000 	.word	0x4094a000
 8002c9c:	40240000 	.word	0x40240000
 8002ca0:	200004fe 	.word	0x200004fe
 8002ca4:	200004f4 	.word	0x200004f4
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	200002ec 	.word	0x200002ec
 8002cb0:	20000502 	.word	0x20000502
 8002cb4:	21195767 	.word	0x21195767
 8002cb8:	20000138 	.word	0x20000138
 8002cbc:	3ecccccd 	.word	0x3ecccccd
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <RobotMoveDist+0x318>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <RobotMoveDist+0x318>)
 8002cc6:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002cc8:	78bb      	ldrb	r3, [r7, #2]
 8002cca:	490b      	ldr	r1, [pc, #44]	; (8002cf8 <RobotMoveDist+0x318>)
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f963 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002cd2:	f004 f93b 	bl	8006f4c <HAL_GetTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <RobotMoveDist+0x31c>)
 8002cda:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002cdc:	e70d      	b.n	8002afa <RobotMoveDist+0x11a>
      break;
 8002cde:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <RobotMoveDist+0x320>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <RobotMoveDist+0x320>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000138 	.word	0x20000138
 8002cfc:	200004f4 	.word	0x200004f4
 8002d00:	200003c4 	.word	0x200003c4
 8002d04:	00000000 	.word	0x00000000

08002d08 <RobotMoveTick>:
 * @param targetTick Pointer to the target number of encoder ticks to move the robot.
 * @param dir The direction to move the robot in (1 for forward, 0 for backward).
 * @param speedMode The speed mode to use for the movement (SPEED_MODE_T, SPEED_MODE_1, or SPEED_MODE_2).
 */
void RobotMoveTick(uint16_t *targetTick, const uint8_t dir, uint8_t speedMode)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
 8002d14:	4613      	mov	r3, r2
 8002d16:	70bb      	strb	r3, [r7, #2]
  angleNow = 0;
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <RobotMoveTick+0x250>)
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
  gyroZ = 0; // reset angle for PID
 8002d20:	4b8e      	ldr	r3, [pc, #568]	; (8002f5c <RobotMoveTick+0x254>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 8002d26:	488e      	ldr	r0, [pc, #568]	; (8002f60 <RobotMoveTick+0x258>)
 8002d28:	f7ff fc4f 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8002d2c:	488d      	ldr	r0, [pc, #564]	; (8002f64 <RobotMoveTick+0x25c>)
 8002d2e:	f7ff fc4c 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8002d32:	488d      	ldr	r0, [pc, #564]	; (8002f68 <RobotMoveTick+0x260>)
 8002d34:	f7ff fc49 	bl	80025ca <PIDConfigReset>
  curDistTick = 0;
 8002d38:	4b8c      	ldr	r3, [pc, #560]	; (8002f6c <RobotMoveTick+0x264>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	801a      	strh	r2, [r3, #0]
  dist_dL = 0;
 8002d3e:	4b8c      	ldr	r3, [pc, #560]	; (8002f70 <RobotMoveTick+0x268>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]

  last_curTask_tick = HAL_GetTick();
 8002d44:	f004 f902 	bl	8006f4c <HAL_GetTick>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4a8a      	ldr	r2, [pc, #552]	; (8002f74 <RobotMoveTick+0x26c>)
 8002d4c:	6013      	str	r3, [r2, #0]
  __SET_MOTOR_DIRECTION(dir);
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	4886      	ldr	r0, [pc, #536]	; (8002f78 <RobotMoveTick+0x270>)
 8002d60:	f005 f834 	bl	8007dcc <HAL_GPIO_WritePin>
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	2108      	movs	r1, #8
 8002d74:	4880      	ldr	r0, [pc, #512]	; (8002f78 <RobotMoveTick+0x270>)
 8002d76:	f005 f829 	bl	8007dcc <HAL_GPIO_WritePin>
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	2120      	movs	r1, #32
 8002d8a:	487b      	ldr	r0, [pc, #492]	; (8002f78 <RobotMoveTick+0x270>)
 8002d8c:	f005 f81e 	bl	8007dcc <HAL_GPIO_WritePin>
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2110      	movs	r1, #16
 8002da0:	4875      	ldr	r0, [pc, #468]	; (8002f78 <RobotMoveTick+0x270>)
 8002da2:	f005 f813 	bl	8007dcc <HAL_GPIO_WritePin>
  __SET_ENCODER_LAST_TICK(&htim2, lastDistTick_L);
 8002da6:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <RobotMoveTick+0x274>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	4b74      	ldr	r3, [pc, #464]	; (8002f80 <RobotMoveTick+0x278>)
 8002db0:	801a      	strh	r2, [r3, #0]
  do
  {

    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002db2:	4b72      	ldr	r3, [pc, #456]	; (8002f7c <RobotMoveTick+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b70      	ldr	r3, [pc, #448]	; (8002f7c <RobotMoveTick+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d117      	bne.n	8002df8 <RobotMoveTick+0xf0>
 8002dc8:	4b6d      	ldr	r3, [pc, #436]	; (8002f80 <RobotMoveTick+0x278>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d806      	bhi.n	8002de2 <RobotMoveTick+0xda>
 8002dd4:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <RobotMoveTick+0x278>)
 8002dd6:	881a      	ldrh	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	e007      	b.n	8002df2 <RobotMoveTick+0xea>
 8002de2:	4b67      	ldr	r3, [pc, #412]	; (8002f80 <RobotMoveTick+0x278>)
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <RobotMoveTick+0x268>)
 8002df4:	8013      	strh	r3, [r2, #0]
 8002df6:	e016      	b.n	8002e26 <RobotMoveTick+0x11e>
 8002df8:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <RobotMoveTick+0x278>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d306      	bcc.n	8002e12 <RobotMoveTick+0x10a>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <RobotMoveTick+0x278>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	e007      	b.n	8002e22 <RobotMoveTick+0x11a>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <RobotMoveTick+0x278>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4a53      	ldr	r2, [pc, #332]	; (8002f70 <RobotMoveTick+0x268>)
 8002e24:	8013      	strh	r3, [r2, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <RobotMoveTick+0x278>)
 8002e2c:	801a      	strh	r2, [r3, #0]
    curDistTick += dist_dL;
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <RobotMoveTick+0x264>)
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	4b4f      	ldr	r3, [pc, #316]	; (8002f70 <RobotMoveTick+0x268>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <RobotMoveTick+0x264>)
 8002e3c:	801a      	strh	r2, [r3, #0]

    if (curDistTick >= targetTick)
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <RobotMoveTick+0x264>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d974      	bls.n	8002f34 <RobotMoveTick+0x22c>
      break;

    if (HAL_GetTick() - last_curTask_tick >= 10)
 8002e4a:	f004 f87f 	bl	8006f4c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <RobotMoveTick+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b09      	cmp	r3, #9
 8002e58:	d9ab      	bls.n	8002db2 <RobotMoveTick+0xaa>
    {
      if (speedMode == SPEED_MODE_T)
 8002e5a:	78bb      	ldrb	r3, [r7, #2]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <RobotMoveTick+0x160>
      {
        StraightLineMove(SPEED_MODE_T);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7ff fc05 	bl	8002670 <StraightLineMove>
 8002e66:	e05f      	b.n	8002f28 <RobotMoveTick+0x220>
      }
      else
      {
        speedScale = abs(curDistTick - targetDistTick) / 990; // start to slow down at last 990 ticks (15cm)
 8002e68:	4b40      	ldr	r3, [pc, #256]	; (8002f6c <RobotMoveTick+0x264>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <RobotMoveTick+0x27c>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bfb8      	it	lt
 8002e78:	425b      	neglt	r3, r3
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <RobotMoveTick+0x280>)
 8002e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e80:	11d2      	asrs	r2, r2, #7
 8002e82:	17db      	asrs	r3, r3, #31
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <RobotMoveTick+0x284>)
 8002e90:	edc3 7a00 	vstr	s15, [r3]
        if (speedMode == SPEED_MODE_1)
 8002e94:	78bb      	ldrb	r3, [r7, #2]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d11e      	bne.n	8002ed8 <RobotMoveTick+0x1d0>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <RobotMoveTick+0x284>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	dd02      	ble.n	8002eb4 <RobotMoveTick+0x1ac>
 8002eae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002eb2:	e00e      	b.n	8002ed2 <RobotMoveTick+0x1ca>
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <RobotMoveTick+0x284>)
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec6:	d502      	bpl.n	8002ece <RobotMoveTick+0x1c6>
 8002ec8:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002ecc:	e001      	b.n	8002ed2 <RobotMoveTick+0x1ca>
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <RobotMoveTick+0x284>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2e      	ldr	r2, [pc, #184]	; (8002f8c <RobotMoveTick+0x284>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	e022      	b.n	8002f1e <RobotMoveTick+0x216>
        else if (speedMode == SPEED_MODE_2)
 8002ed8:	78bb      	ldrb	r3, [r7, #2]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d11f      	bne.n	8002f1e <RobotMoveTick+0x216>
          speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <RobotMoveTick+0x284>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	dd02      	ble.n	8002ef8 <RobotMoveTick+0x1f0>
 8002ef2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002ef6:	e010      	b.n	8002f1a <RobotMoveTick+0x212>
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <RobotMoveTick+0x284>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb1b 	bl	8000538 <__aeabi_f2d>
 8002f02:	a313      	add	r3, pc, #76	; (adr r3, 8002f50 <RobotMoveTick+0x248>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fde0 	bl	8000acc <__aeabi_dcmplt>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <RobotMoveTick+0x20e>
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <RobotMoveTick+0x288>)
 8002f14:	e001      	b.n	8002f1a <RobotMoveTick+0x212>
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <RobotMoveTick+0x284>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <RobotMoveTick+0x284>)
 8002f1c:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(speedMode, &speedScale);
 8002f1e:	78bb      	ldrb	r3, [r7, #2]
 8002f20:	491a      	ldr	r1, [pc, #104]	; (8002f8c <RobotMoveTick+0x284>)
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f838 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8002f28:	f004 f810 	bl	8006f4c <HAL_GetTick>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <RobotMoveTick+0x26c>)
 8002f30:	6013      	str	r3, [r2, #0]
    __GET_ENCODER_TICK_DELTA(&htim2, lastDistTick_L, dist_dL);
 8002f32:	e73e      	b.n	8002db2 <RobotMoveTick+0xaa>
      break;
 8002f34:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <RobotMoveTick+0x28c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <RobotMoveTick+0x28c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	9999999a 	.word	0x9999999a
 8002f54:	3fd99999 	.word	0x3fd99999
 8002f58:	200004e8 	.word	0x200004e8
 8002f5c:	200004ee 	.word	0x200004ee
 8002f60:	20000518 	.word	0x20000518
 8002f64:	20000504 	.word	0x20000504
 8002f68:	2000052c 	.word	0x2000052c
 8002f6c:	200004fc 	.word	0x200004fc
 8002f70:	20000500 	.word	0x20000500
 8002f74:	200004f4 	.word	0x200004f4
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	200002ec 	.word	0x200002ec
 8002f80:	20000502 	.word	0x20000502
 8002f84:	200004fe 	.word	0x200004fe
 8002f88:	21195767 	.word	0x21195767
 8002f8c:	20000138 	.word	0x20000138
 8002f90:	3ecccccd 	.word	0x3ecccccd
 8002f94:	200003c4 	.word	0x200003c4

08002f98 <StraightLineMoveSpeedScale>:

void StraightLineMoveSpeedScale(const uint8_t speedMode, float *speedScale)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);            // polling
 8002fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa8:	9302      	str	r3, [sp, #8]
 8002faa:	2302      	movs	r3, #2
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	4b9b      	ldr	r3, [pc, #620]	; (800321c <StraightLineMoveSpeedScale+0x284>)
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	2237      	movs	r2, #55	; 0x37
 8002fb6:	21d0      	movs	r1, #208	; 0xd0
 8002fb8:	4899      	ldr	r0, [pc, #612]	; (8003220 <StraightLineMoveSpeedScale+0x288>)
 8002fba:	f005 f95f 	bl	800827c <HAL_I2C_Mem_Read>
 8002fbe:	4b97      	ldr	r3, [pc, #604]	; (800321c <StraightLineMoveSpeedScale+0x284>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	4b95      	ldr	r3, [pc, #596]	; (800321c <StraightLineMoveSpeedScale+0x284>)
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	4b94      	ldr	r3, [pc, #592]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8002fd2:	801a      	strh	r2, [r3, #0]
  dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1;  // use only one of the wheel to determine car direction
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <StraightLineMoveSpeedScale+0x290>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d101      	bne.n	8002fe6 <StraightLineMoveSpeedScale+0x4e>
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	e001      	b.n	8002fea <StraightLineMoveSpeedScale+0x52>
 8002fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fea:	4b90      	ldr	r3, [pc, #576]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 8002fec:	701a      	strb	r2, [r3, #0]
  angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002fee:	4b8d      	ldr	r3, [pc, #564]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	f113 0f04 	cmn.w	r3, #4
 8002ff8:	db04      	blt.n	8003004 <StraightLineMoveSpeedScale+0x6c>
 8002ffa:	4b8a      	ldr	r3, [pc, #552]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8002ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003000:	2b0b      	cmp	r3, #11
 8003002:	dd07      	ble.n	8003014 <StraightLineMoveSpeedScale+0x7c>
 8003004:	4b87      	ldr	r3, [pc, #540]	; (8003224 <StraightLineMoveSpeedScale+0x28c>)
 8003006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003012:	e001      	b.n	8003018 <StraightLineMoveSpeedScale+0x80>
 8003014:	eddf 7a86 	vldr	s15, [pc, #536]	; 8003230 <StraightLineMoveSpeedScale+0x298>
 8003018:	4b86      	ldr	r3, [pc, #536]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800301a:	ed93 7a00 	vldr	s14, [r3]
 800301e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003022:	4b84      	ldr	r3, [pc, #528]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003024:	edc3 7a00 	vstr	s15, [r3]
  if (speedMode == SPEED_MODE_1)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d165      	bne.n	80030fa <StraightLineMoveSpeedScale+0x162>
    __PID_SPEED_1(pidSlow, angleNow, correction, dir, newDutyL, newDutyR);
 800302e:	4b82      	ldr	r3, [pc, #520]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003030:	ed93 7a00 	vldr	s14, [r3]
 8003034:	4b7f      	ldr	r3, [pc, #508]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303e:	4b7e      	ldr	r3, [pc, #504]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003040:	edd3 6a01 	vldr	s13, [r3, #4]
 8003044:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003046:	edd3 7a04 	vldr	s15, [r3, #16]
 800304a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800304e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003052:	4b79      	ldr	r3, [pc, #484]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003054:	edd3 6a02 	vldr	s13, [r3, #8]
 8003058:	4b77      	ldr	r3, [pc, #476]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 800305a:	ed93 6a03 	vldr	s12, [r3, #12]
 800305e:	4b75      	ldr	r3, [pc, #468]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003074:	ee17 2a90 	vmov	r2, s15
 8003078:	4b70      	ldr	r3, [pc, #448]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6d      	ldr	r2, [pc, #436]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003086:	ed93 7a04 	vldr	s14, [r3, #16]
 800308a:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	4b68      	ldr	r3, [pc, #416]	; (8003238 <StraightLineMoveSpeedScale+0x2a0>)
 8003096:	edc3 7a04 	vstr	s15, [r3, #16]
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80030a2:	dc06      	bgt.n	80030b2 <StraightLineMoveSpeedScale+0x11a>
 80030a4:	4b65      	ldr	r3, [pc, #404]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <StraightLineMoveSpeedScale+0x2a8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bfb8      	it	lt
 80030ae:	4613      	movlt	r3, r2
 80030b0:	e001      	b.n	80030b6 <StraightLineMoveSpeedScale+0x11e>
 80030b2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80030b6:	4a61      	ldr	r2, [pc, #388]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 80030bc:	f993 3000 	ldrsb.w	r3, [r3]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	4b5e      	ldr	r3, [pc, #376]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	fb12 f303 	smulbb	r3, r2, r3
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	4b5b      	ldr	r3, [pc, #364]	; (8003244 <StraightLineMoveSpeedScale+0x2ac>)
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	4b54      	ldr	r3, [pc, #336]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 80030da:	f993 3000 	ldrsb.w	r3, [r3]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	4b56      	ldr	r3, [pc, #344]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	fb12 f303 	smulbb	r3, r2, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f5c3 630f 	rsb	r3, r3, #2288	; 0x8f0
 80030f0:	330c      	adds	r3, #12
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b54      	ldr	r3, [pc, #336]	; (8003248 <StraightLineMoveSpeedScale+0x2b0>)
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	e067      	b.n	80031ca <StraightLineMoveSpeedScale+0x232>
  else if (speedMode == SPEED_MODE_2)
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d164      	bne.n	80031ca <StraightLineMoveSpeedScale+0x232>
    __PID_SPEED_2(pidFast, angleNow, correction, dir, newDutyL, newDutyR);
 8003100:	4b52      	ldr	r3, [pc, #328]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003102:	ed93 7a00 	vldr	s14, [r3]
 8003106:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	4b4e      	ldr	r3, [pc, #312]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003112:	edd3 6a01 	vldr	s13, [r3, #4]
 8003116:	4b4d      	ldr	r3, [pc, #308]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003118:	edd3 7a04 	vldr	s15, [r3, #16]
 800311c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003124:	4b49      	ldr	r3, [pc, #292]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003126:	edd3 6a02 	vldr	s13, [r3, #8]
 800312a:	4b48      	ldr	r3, [pc, #288]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 800312c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee76 7a67 	vsub.f32	s15, s12, s15
 800313a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003146:	ee17 2a90 	vmov	r2, s15
 800314a:	4b3c      	ldr	r3, [pc, #240]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3e      	ldr	r2, [pc, #248]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003154:	60d3      	str	r3, [r2, #12]
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003158:	ed93 7a04 	vldr	s14, [r3, #16]
 800315c:	4b35      	ldr	r3, [pc, #212]	; (8003234 <StraightLineMoveSpeedScale+0x29c>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <StraightLineMoveSpeedScale+0x2b4>)
 8003168:	edc3 7a04 	vstr	s15, [r3, #16]
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003174:	dc06      	bgt.n	8003184 <StraightLineMoveSpeedScale+0x1ec>
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a31      	ldr	r2, [pc, #196]	; (8003240 <StraightLineMoveSpeedScale+0x2a8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bfb8      	it	lt
 8003180:	4613      	movlt	r3, r2
 8003182:	e001      	b.n	8003188 <StraightLineMoveSpeedScale+0x1f0>
 8003184:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 800318e:	f993 3000 	ldrsb.w	r3, [r3]
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	fb12 f303 	smulbb	r3, r2, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <StraightLineMoveSpeedScale+0x2ac>)
 80031a8:	801a      	strh	r2, [r3, #0]
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <StraightLineMoveSpeedScale+0x294>)
 80031ac:	f993 3000 	ldrsb.w	r3, [r3]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <StraightLineMoveSpeedScale+0x2a4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	fb12 f303 	smulbb	r3, r2, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80031c2:	3308      	adds	r3, #8
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <StraightLineMoveSpeedScale+0x2b0>)
 80031c8:	801a      	strh	r2, [r3, #0]

  __SET_MOTOR_DUTY(&htim8, newDutyL * (*speedScale), newDutyR * (*speedScale));
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <StraightLineMoveSpeedScale+0x2ac>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <StraightLineMoveSpeedScale+0x2b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e8:	ee17 2a90 	vmov	r2, s15
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <StraightLineMoveSpeedScale+0x2b0>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <StraightLineMoveSpeedScale+0x2b8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320c:	ee17 2a90 	vmov	r2, s15
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200004ec 	.word	0x200004ec
 8003220:	20000250 	.word	0x20000250
 8003224:	200004ee 	.word	0x200004ee
 8003228:	200002ec 	.word	0x200002ec
 800322c:	20000140 	.word	0x20000140
 8003230:	00000000 	.word	0x00000000
 8003234:	200004e8 	.word	0x200004e8
 8003238:	20000504 	.word	0x20000504
 800323c:	20000568 	.word	0x20000568
 8003240:	fffffd44 	.word	0xfffffd44
 8003244:	200004f0 	.word	0x200004f0
 8003248:	200004f2 	.word	0x200004f2
 800324c:	2000052c 	.word	0x2000052c
 8003250:	200003c4 	.word	0x200003c4
 8003254:	00000000 	.word	0x00000000

08003258 <RobotTurn>:

void RobotTurn(float *targetAngle)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af04      	add	r7, sp, #16
 800325e:	6078      	str	r0, [r7, #4]
  angleNow = 0;
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <RobotTurn+0x138>)
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <RobotTurn+0x13c>)
 800326a:	2200      	movs	r2, #0
 800326c:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 800326e:	f003 fe6d 	bl	8006f4c <HAL_GetTick>
 8003272:	4603      	mov	r3, r0
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <RobotTurn+0x140>)
 8003276:	6013      	str	r3, [r2, #0]
  do
  {
    if (HAL_GetTick() - last_curTask_tick >= 10)
 8003278:	f003 fe68 	bl	8006f4c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <RobotTurn+0x140>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b09      	cmp	r3, #9
 8003286:	d9f7      	bls.n	8003278 <RobotTurn+0x20>
    { // sample gyro every 5ms
      __Gyro_Read_Z(&hi2c1, readGyroZData, gyroZ);
 8003288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800328c:	9302      	str	r3, [sp, #8]
 800328e:	2302      	movs	r3, #2
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <RobotTurn+0x144>)
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2301      	movs	r3, #1
 8003298:	2237      	movs	r2, #55	; 0x37
 800329a:	21d0      	movs	r1, #208	; 0xd0
 800329c:	4840      	ldr	r0, [pc, #256]	; (80033a0 <RobotTurn+0x148>)
 800329e:	f004 ffed 	bl	800827c <HAL_I2C_Mem_Read>
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <RobotTurn+0x144>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	b21a      	sxth	r2, r3
 80032aa:	4b3c      	ldr	r3, [pc, #240]	; (800339c <RobotTurn+0x144>)
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21a      	sxth	r2, r3
 80032b4:	4b37      	ldr	r3, [pc, #220]	; (8003394 <RobotTurn+0x13c>)
 80032b6:	801a      	strh	r2, [r3, #0]
      angleNow += gyroZ / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <RobotTurn+0x138>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd f93b 	bl	8000538 <__aeabi_f2d>
 80032c2:	4604      	mov	r4, r0
 80032c4:	460d      	mov	r5, r1
 80032c6:	4b33      	ldr	r3, [pc, #204]	; (8003394 <RobotTurn+0x13c>)
 80032c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f921 	bl	8000514 <__aeabi_i2d>
 80032d2:	a32b      	add	r3, pc, #172	; (adr r3, 8003380 <RobotTurn+0x128>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd fab0 	bl	800083c <__aeabi_ddiv>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	a328      	add	r3, pc, #160	; (adr r3, 8003388 <RobotTurn+0x130>)
 80032e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ea:	f7fd f97d 	bl	80005e8 <__aeabi_dmul>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4620      	mov	r0, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	f7fc ffc1 	bl	800027c <__adddf3>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f7fd fc2b 	bl	8000b5c <__aeabi_d2f>
 8003306:	4603      	mov	r3, r0
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <RobotTurn+0x138>)
 800330a:	6013      	str	r3, [r2, #0]
      if (abs(angleNow - *targetAngle) < 0.01)
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <RobotTurn+0x138>)
 800330e:	ed93 7a00 	vldr	s14, [r3]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003320:	ee17 3a90 	vmov	r3, s15
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0d      	blt.n	8003344 <RobotTurn+0xec>
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <RobotTurn+0x138>)
 800332a:	ed93 7a00 	vldr	s14, [r3]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800333c:	ee17 3a90 	vmov	r3, s15
 8003340:	2b00      	cmp	r3, #0
 8003342:	dd05      	ble.n	8003350 <RobotTurn+0xf8>
        break;
      last_curTask_tick = HAL_GetTick();
 8003344:	f003 fe02 	bl	8006f4c <HAL_GetTick>
 8003348:	4603      	mov	r3, r0
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <RobotTurn+0x140>)
 800334c:	6013      	str	r3, [r2, #0]
    if (HAL_GetTick() - last_curTask_tick >= 10)
 800334e:	e793      	b.n	8003278 <RobotTurn+0x20>
        break;
 8003350:	bf00      	nop
    }
  } while (1);
  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <RobotTurn+0x14c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <RobotTurn+0x14c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
  __RESET_SERVO_TURN(&htim1);
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <RobotTurn+0x150>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2291      	movs	r2, #145	; 0x91
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
 800336a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800336e:	f003 fdf9 	bl	8006f64 <HAL_Delay>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bdb0      	pop	{r4, r5, r7, pc}
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w
 8003380:	66666666 	.word	0x66666666
 8003384:	40306666 	.word	0x40306666
 8003388:	47ae147b 	.word	0x47ae147b
 800338c:	3f847ae1 	.word	0x3f847ae1
 8003390:	200004e8 	.word	0x200004e8
 8003394:	200004ee 	.word	0x200004ee
 8003398:	200004f4 	.word	0x200004f4
 800339c:	200004ec 	.word	0x200004ec
 80033a0:	20000250 	.word	0x20000250
 80033a4:	200003c4 	.word	0x200003c4
 80033a8:	200002a4 	.word	0x200002a4
 80033ac:	00000000 	.word	0x00000000

080033b0 <RobotMoveDistObstacle>:
}

// RobotMoveDistObstacle must be called within a task(eg. runFastestPath) and not within an interrupt(eg. UART, EXTI)
// else osDelay won't work and TRI's timer interrupt can't be given chance to update obsDist_US
void RobotMoveDistObstacle(float *targetDist, const uint8_t speedMode)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
  angleNow = 0;
 80033bc:	4b9e      	ldr	r3, [pc, #632]	; (8003638 <RobotMoveDistObstacle+0x288>)
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 80033c4:	4b9d      	ldr	r3, [pc, #628]	; (800363c <RobotMoveDistObstacle+0x28c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 80033ca:	489d      	ldr	r0, [pc, #628]	; (8003640 <RobotMoveDistObstacle+0x290>)
 80033cc:	f7ff f8fd 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 80033d0:	489c      	ldr	r0, [pc, #624]	; (8003644 <RobotMoveDistObstacle+0x294>)
 80033d2:	f7ff f8fa 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 80033d6:	489c      	ldr	r0, [pc, #624]	; (8003648 <RobotMoveDistObstacle+0x298>)
 80033d8:	f7ff f8f7 	bl	80025ca <PIDConfigReset>
  obsDist_US = 1000;
 80033dc:	4b9b      	ldr	r3, [pc, #620]	; (800364c <RobotMoveDistObstacle+0x29c>)
 80033de:	4a9c      	ldr	r2, [pc, #624]	; (8003650 <RobotMoveDistObstacle+0x2a0>)
 80033e0:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Ultrasonic sensor start
 80033e2:	2104      	movs	r1, #4
 80033e4:	489b      	ldr	r0, [pc, #620]	; (8003654 <RobotMoveDistObstacle+0x2a4>)
 80033e6:	f006 fc21 	bl	8009c2c <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 80033ea:	f003 fdaf 	bl	8006f4c <HAL_GetTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a99      	ldr	r2, [pc, #612]	; (8003658 <RobotMoveDistObstacle+0x2a8>)
 80033f2:	6013      	str	r3, [r2, #0]
  int counter = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  int oldspeed = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  do
  {
    HCSR04_Read();
 80033fc:	f7ff f8f8 	bl	80025f0 <HCSR04_Read>
    osDelay(10); // give timer interrupt chance to update obsDist_US value
 8003400:	200a      	movs	r0, #10
 8003402:	f009 f961 	bl	800c6c8 <osDelay>
    if (abs(*targetDist - obsDist_US) <= 1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	ed93 7a00 	vldr	s14, [r3]
 800340c:	4b8f      	ldr	r3, [pc, #572]	; (800364c <RobotMoveDistObstacle+0x29c>)
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341a:	ee17 3a90 	vmov	r3, s15
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003422:	db0e      	blt.n	8003442 <RobotMoveDistObstacle+0x92>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	ed93 7a00 	vldr	s14, [r3]
 800342a:	4b88      	ldr	r3, [pc, #544]	; (800364c <RobotMoveDistObstacle+0x29c>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003438:	ee17 3a90 	vmov	r3, s15
 800343c:	2b01      	cmp	r3, #1
 800343e:	f340 80e6 	ble.w	800360e <RobotMoveDistObstacle+0x25e>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	4b80      	ldr	r3, [pc, #512]	; (800364c <RobotMoveDistObstacle+0x29c>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	2104      	movs	r1, #4
 800346a:	487c      	ldr	r0, [pc, #496]	; (800365c <RobotMoveDistObstacle+0x2ac>)
 800346c:	f004 fcae 	bl	8007dcc <HAL_GPIO_WritePin>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	4b75      	ldr	r3, [pc, #468]	; (800364c <RobotMoveDistObstacle+0x29c>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	bf94      	ite	ls
 8003486:	2301      	movls	r3, #1
 8003488:	2300      	movhi	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	2108      	movs	r1, #8
 8003490:	4872      	ldr	r0, [pc, #456]	; (800365c <RobotMoveDistObstacle+0x2ac>)
 8003492:	f004 fc9b 	bl	8007dcc <HAL_GPIO_WritePin>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	ed93 7a00 	vldr	s14, [r3]
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <RobotMoveDistObstacle+0x29c>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f083 0301 	eor.w	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	2120      	movs	r1, #32
 80034be:	4867      	ldr	r0, [pc, #412]	; (800365c <RobotMoveDistObstacle+0x2ac>)
 80034c0:	f004 fc84 	bl	8007dcc <HAL_GPIO_WritePin>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4b60      	ldr	r3, [pc, #384]	; (800364c <RobotMoveDistObstacle+0x29c>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	bf94      	ite	ls
 80034da:	2301      	movls	r3, #1
 80034dc:	2300      	movhi	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	2110      	movs	r1, #16
 80034e4:	485d      	ldr	r0, [pc, #372]	; (800365c <RobotMoveDistObstacle+0x2ac>)
 80034e6:	f004 fc71 	bl	8007dcc <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 80034ea:	f003 fd2f 	bl	8006f4c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <RobotMoveDistObstacle+0x2a8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b13      	cmp	r3, #19
 80034f8:	d980      	bls.n	80033fc <RobotMoveDistObstacle+0x4c>
    {
      if (speedMode == SPEED_MODE_1)
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d13f      	bne.n	8003580 <RobotMoveDistObstacle+0x1d0>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003500:	4b52      	ldr	r3, [pc, #328]	; (800364c <RobotMoveDistObstacle+0x29c>)
 8003502:	ed93 7a00 	vldr	s14, [r3]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	425b      	neglt	r3, r3
 800351e:	4a50      	ldr	r2, [pc, #320]	; (8003660 <RobotMoveDistObstacle+0x2b0>)
 8003520:	fb82 1203 	smull	r1, r2, r2, r3
 8003524:	441a      	add	r2, r3
 8003526:	10d2      	asrs	r2, r2, #3
 8003528:	17db      	asrs	r3, r3, #31
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	ee07 3a90 	vmov	s15, r3
 8003530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 8003536:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	dd02      	ble.n	8003554 <RobotMoveDistObstacle+0x1a4>
 800354e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003552:	e00e      	b.n	8003572 <RobotMoveDistObstacle+0x1c2>
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 8003556:	edd3 7a00 	vldr	s15, [r3]
 800355a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800355e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	d502      	bpl.n	800356e <RobotMoveDistObstacle+0x1be>
 8003568:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800356c:	e001      	b.n	8003572 <RobotMoveDistObstacle+0x1c2>
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3c      	ldr	r2, [pc, #240]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 8003574:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8003576:	493b      	ldr	r1, [pc, #236]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 8003578:	2001      	movs	r0, #1
 800357a:	f7ff fd0d 	bl	8002f98 <StraightLineMoveSpeedScale>
 800357e:	e040      	b.n	8003602 <RobotMoveDistObstacle+0x252>
          oldspeed = speedScale;
        }*/
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003580:	4b32      	ldr	r3, [pc, #200]	; (800364c <RobotMoveDistObstacle+0x29c>)
 8003582:	ed93 7a00 	vldr	s14, [r3]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003594:	ee17 3a90 	vmov	r3, s15
 8003598:	2b00      	cmp	r3, #0
 800359a:	bfb8      	it	lt
 800359c:	425b      	neglt	r3, r3
 800359e:	4a30      	ldr	r2, [pc, #192]	; (8003660 <RobotMoveDistObstacle+0x2b0>)
 80035a0:	fb82 1203 	smull	r1, r2, r2, r3
 80035a4:	441a      	add	r2, r3
 80035a6:	10d2      	asrs	r2, r2, #3
 80035a8:	17db      	asrs	r3, r3, #31
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 80035b6:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	dd02      	ble.n	80035d4 <RobotMoveDistObstacle+0x224>
 80035ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80035d2:	e010      	b.n	80035f6 <RobotMoveDistObstacle+0x246>
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ffad 	bl	8000538 <__aeabi_f2d>
 80035de:	a314      	add	r3, pc, #80	; (adr r3, 8003630 <RobotMoveDistObstacle+0x280>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fd fa72 	bl	8000acc <__aeabi_dcmplt>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <RobotMoveDistObstacle+0x242>
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <RobotMoveDistObstacle+0x2b8>)
 80035f0:	e001      	b.n	80035f6 <RobotMoveDistObstacle+0x246>
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 80035f8:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80035fa:	491a      	ldr	r1, [pc, #104]	; (8003664 <RobotMoveDistObstacle+0x2b4>)
 80035fc:	2002      	movs	r0, #2
 80035fe:	f7ff fccb 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 8003602:	f003 fca3 	bl	8006f4c <HAL_GetTick>
 8003606:	4603      	mov	r3, r0
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <RobotMoveDistObstacle+0x2a8>)
 800360a:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 800360c:	e6f6      	b.n	80033fc <RobotMoveDistObstacle+0x4c>
      break;
 800360e:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <RobotMoveDistObstacle+0x2bc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2200      	movs	r2, #0
 8003616:	635a      	str	r2, [r3, #52]	; 0x34
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <RobotMoveDistObstacle+0x2bc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2200      	movs	r2, #0
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8003620:	2104      	movs	r1, #4
 8003622:	480c      	ldr	r0, [pc, #48]	; (8003654 <RobotMoveDistObstacle+0x2a4>)
 8003624:	f006 fc2a 	bl	8009e7c <HAL_TIM_IC_Stop_IT>
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	9999999a 	.word	0x9999999a
 8003634:	3fd99999 	.word	0x3fd99999
 8003638:	200004e8 	.word	0x200004e8
 800363c:	200004ee 	.word	0x200004ee
 8003640:	20000518 	.word	0x20000518
 8003644:	20000504 	.word	0x20000504
 8003648:	2000052c 	.word	0x2000052c
 800364c:	20000554 	.word	0x20000554
 8003650:	447a0000 	.word	0x447a0000
 8003654:	20000334 	.word	0x20000334
 8003658:	200004f4 	.word	0x200004f4
 800365c:	40020000 	.word	0x40020000
 8003660:	88888889 	.word	0x88888889
 8003664:	20000138 	.word	0x20000138
 8003668:	3ecccccd 	.word	0x3ecccccd
 800366c:	200003c4 	.word	0x200003c4

08003670 <RobotMoveDistObstacleMem>:
 *
 * @param targetDist Pointer to the target distance to be traveled.
 * @param speedMode The speed mode to be used for the movement.
 */
void RobotMoveDistObstacleMem(uint16_t *savedDistTick, float *targetDist, const uint8_t speedMode)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]
  angleNow = 0;
 800367e:	4ba0      	ldr	r3, [pc, #640]	; (8003900 <RobotMoveDistObstacleMem+0x290>)
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003686:	4b9f      	ldr	r3, [pc, #636]	; (8003904 <RobotMoveDistObstacleMem+0x294>)
 8003688:	2200      	movs	r2, #0
 800368a:	801a      	strh	r2, [r3, #0]
  PIDConfigReset(&pidTSlow);
 800368c:	489e      	ldr	r0, [pc, #632]	; (8003908 <RobotMoveDistObstacleMem+0x298>)
 800368e:	f7fe ff9c 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003692:	489e      	ldr	r0, [pc, #632]	; (800390c <RobotMoveDistObstacleMem+0x29c>)
 8003694:	f7fe ff99 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003698:	489d      	ldr	r0, [pc, #628]	; (8003910 <RobotMoveDistObstacleMem+0x2a0>)
 800369a:	f7fe ff96 	bl	80025ca <PIDConfigReset>
  obsDist_US = 1000;
 800369e:	4b9d      	ldr	r3, [pc, #628]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 80036a0:	4a9d      	ldr	r2, [pc, #628]	; (8003918 <RobotMoveDistObstacleMem+0x2a8>)
 80036a2:	601a      	str	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // Ultrasonic sensor start
 80036a4:	2104      	movs	r1, #4
 80036a6:	489d      	ldr	r0, [pc, #628]	; (800391c <RobotMoveDistObstacleMem+0x2ac>)
 80036a8:	f006 fac0 	bl	8009c2c <HAL_TIM_IC_Start_IT>
  last_curTask_tick = HAL_GetTick();
 80036ac:	f003 fc4e 	bl	8006f4c <HAL_GetTick>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4a9b      	ldr	r2, [pc, #620]	; (8003920 <RobotMoveDistObstacleMem+0x2b0>)
 80036b4:	6013      	str	r3, [r2, #0]
  distMem_DL = 0;
 80036b6:	4b9b      	ldr	r3, [pc, #620]	; (8003924 <RobotMoveDistObstacleMem+0x2b4>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	801a      	strh	r2, [r3, #0]
  savedDistTick = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  do
  {
    HCSR04_Read();
 80036c0:	f7fe ff96 	bl	80025f0 <HCSR04_Read>
    osDelay(10); // give timer interrupt chance to update obsDist_US value
 80036c4:	200a      	movs	r0, #10
 80036c6:	f008 ffff 	bl	800c6c8 <osDelay>

    if (abs(*targetDist - obsDist_US) < 0.1)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	4b90      	ldr	r3, [pc, #576]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036de:	ee17 3a90 	vmov	r3, s15
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db0e      	blt.n	8003704 <RobotMoveDistObstacleMem+0x94>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	ed93 7a00 	vldr	s14, [r3]
 80036ec:	4b89      	ldr	r3, [pc, #548]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036fa:	ee17 3a90 	vmov	r3, s15
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f340 80e6 	ble.w	80038d0 <RobotMoveDistObstacleMem+0x260>
      break;
    __SET_MOTOR_DIRECTION(obsDist_US >= *targetDist);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	ed93 7a00 	vldr	s14, [r3]
 800370a:	4b82      	ldr	r3, [pc, #520]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	bf94      	ite	ls
 800371a:	2301      	movls	r3, #1
 800371c:	2300      	movhi	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	2104      	movs	r1, #4
 800372c:	487e      	ldr	r0, [pc, #504]	; (8003928 <RobotMoveDistObstacleMem+0x2b8>)
 800372e:	f004 fb4d 	bl	8007dcc <HAL_GPIO_WritePin>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	ed93 7a00 	vldr	s14, [r3]
 8003738:	4b76      	ldr	r3, [pc, #472]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	2108      	movs	r1, #8
 8003752:	4875      	ldr	r0, [pc, #468]	; (8003928 <RobotMoveDistObstacleMem+0x2b8>)
 8003754:	f004 fb3a 	bl	8007dcc <HAL_GPIO_WritePin>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	ed93 7a00 	vldr	s14, [r3]
 800375e:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	bf94      	ite	ls
 800376e:	2301      	movls	r3, #1
 8003770:	2300      	movhi	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f083 0301 	eor.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	2120      	movs	r1, #32
 8003780:	4869      	ldr	r0, [pc, #420]	; (8003928 <RobotMoveDistObstacleMem+0x2b8>)
 8003782:	f004 fb23 	bl	8007dcc <HAL_GPIO_WritePin>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	ed93 7a00 	vldr	s14, [r3]
 800378c:	4b61      	ldr	r3, [pc, #388]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	2110      	movs	r1, #16
 80037a6:	4860      	ldr	r0, [pc, #384]	; (8003928 <RobotMoveDistObstacleMem+0x2b8>)
 80037a8:	f004 fb10 	bl	8007dcc <HAL_GPIO_WritePin>
    if (HAL_GetTick() - last_curTask_tick >= 20)
 80037ac:	f003 fbce 	bl	8006f4c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <RobotMoveDistObstacleMem+0x2b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b13      	cmp	r3, #19
 80037ba:	d981      	bls.n	80036c0 <RobotMoveDistObstacleMem+0x50>
    {
      if (speedMode == SPEED_MODE_1)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d13f      	bne.n	8003842 <RobotMoveDistObstacleMem+0x1d2>
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 80037c2:	4b54      	ldr	r3, [pc, #336]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 80037c4:	ed93 7a00 	vldr	s14, [r3]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037d6:	ee17 3a90 	vmov	r3, s15
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfb8      	it	lt
 80037de:	425b      	neglt	r3, r3
 80037e0:	4a52      	ldr	r2, [pc, #328]	; (800392c <RobotMoveDistObstacleMem+0x2bc>)
 80037e2:	fb82 1203 	smull	r1, r2, r2, r3
 80037e6:	441a      	add	r2, r3
 80037e8:	10d2      	asrs	r2, r2, #3
 80037ea:	17db      	asrs	r3, r3, #31
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f6:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 80037f8:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.75 ? 0.75 : speedScale);
 80037fc:	4b4c      	ldr	r3, [pc, #304]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 80037fe:	edd3 7a00 	vldr	s15, [r3]
 8003802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	dd02      	ble.n	8003816 <RobotMoveDistObstacleMem+0x1a6>
 8003810:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003814:	e00e      	b.n	8003834 <RobotMoveDistObstacleMem+0x1c4>
 8003816:	4b46      	ldr	r3, [pc, #280]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 8003818:	edd3 7a00 	vldr	s15, [r3]
 800381c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	d502      	bpl.n	8003830 <RobotMoveDistObstacleMem+0x1c0>
 800382a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800382e:	e001      	b.n	8003834 <RobotMoveDistObstacleMem+0x1c4>
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3e      	ldr	r2, [pc, #248]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 8003836:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_1, &speedScale);
 8003838:	493d      	ldr	r1, [pc, #244]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 800383a:	2001      	movs	r0, #1
 800383c:	f7ff fbac 	bl	8002f98 <StraightLineMoveSpeedScale>
 8003840:	e040      	b.n	80038c4 <RobotMoveDistObstacleMem+0x254>
      }
      else
      {
        speedScale = abs(obsDist_US - *targetDist) / 15; // slow down at 15cm
 8003842:	4b34      	ldr	r3, [pc, #208]	; (8003914 <RobotMoveDistObstacleMem+0x2a4>)
 8003844:	ed93 7a00 	vldr	s14, [r3]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003856:	ee17 3a90 	vmov	r3, s15
 800385a:	2b00      	cmp	r3, #0
 800385c:	bfb8      	it	lt
 800385e:	425b      	neglt	r3, r3
 8003860:	4a32      	ldr	r2, [pc, #200]	; (800392c <RobotMoveDistObstacleMem+0x2bc>)
 8003862:	fb82 1203 	smull	r1, r2, r2, r3
 8003866:	441a      	add	r2, r3
 8003868:	10d2      	asrs	r2, r2, #3
 800386a:	17db      	asrs	r3, r3, #31
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003876:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 8003878:	edc3 7a00 	vstr	s15, [r3]
        speedScale = speedScale > 1 ? 1 : (speedScale < 0.4 ? 0.4 : speedScale);
 800387c:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388e:	dd02      	ble.n	8003896 <RobotMoveDistObstacleMem+0x226>
 8003890:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003894:	e010      	b.n	80038b8 <RobotMoveDistObstacleMem+0x248>
 8003896:	4b26      	ldr	r3, [pc, #152]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fe4c 	bl	8000538 <__aeabi_f2d>
 80038a0:	a315      	add	r3, pc, #84	; (adr r3, 80038f8 <RobotMoveDistObstacleMem+0x288>)
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f7fd f911 	bl	8000acc <__aeabi_dcmplt>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <RobotMoveDistObstacleMem+0x244>
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <RobotMoveDistObstacleMem+0x2c4>)
 80038b2:	e001      	b.n	80038b8 <RobotMoveDistObstacleMem+0x248>
 80038b4:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 80038ba:	6013      	str	r3, [r2, #0]
        StraightLineMoveSpeedScale(SPEED_MODE_2, &speedScale);
 80038bc:	491c      	ldr	r1, [pc, #112]	; (8003930 <RobotMoveDistObstacleMem+0x2c0>)
 80038be:	2002      	movs	r0, #2
 80038c0:	f7ff fb6a 	bl	8002f98 <StraightLineMoveSpeedScale>
      }

      last_curTask_tick = HAL_GetTick();
 80038c4:	f003 fb42 	bl	8006f4c <HAL_GetTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <RobotMoveDistObstacleMem+0x2b0>)
 80038cc:	6013      	str	r3, [r2, #0]
    HCSR04_Read();
 80038ce:	e6f7      	b.n	80036c0 <RobotMoveDistObstacleMem+0x50>
      break;
 80038d0:	bf00      	nop
    }

  } while (1);

  __SET_MOTOR_DUTY(&htim8, 0, 0);
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <RobotMoveDistObstacleMem+0x2c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	635a      	str	r2, [r3, #52]	; 0x34
 80038da:	4b17      	ldr	r3, [pc, #92]	; (8003938 <RobotMoveDistObstacleMem+0x2c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80038e2:	2104      	movs	r1, #4
 80038e4:	480d      	ldr	r0, [pc, #52]	; (800391c <RobotMoveDistObstacleMem+0x2ac>)
 80038e6:	f006 fac9 	bl	8009e7c <HAL_TIM_IC_Stop_IT>
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	f3af 8000 	nop.w
 80038f8:	9999999a 	.word	0x9999999a
 80038fc:	3fd99999 	.word	0x3fd99999
 8003900:	200004e8 	.word	0x200004e8
 8003904:	200004ee 	.word	0x200004ee
 8003908:	20000518 	.word	0x20000518
 800390c:	20000504 	.word	0x20000504
 8003910:	2000052c 	.word	0x2000052c
 8003914:	20000554 	.word	0x20000554
 8003918:	447a0000 	.word	0x447a0000
 800391c:	20000334 	.word	0x20000334
 8003920:	200004f4 	.word	0x200004f4
 8003924:	20000540 	.word	0x20000540
 8003928:	40020000 	.word	0x40020000
 800392c:	88888889 	.word	0x88888889
 8003930:	20000138 	.word	0x20000138
 8003934:	3ecccccd 	.word	0x3ecccccd
 8003938:	200003c4 	.word	0x200003c4
 800393c:	00000000 	.word	0x00000000

08003940 <RobotMoveUntilIROvershoot>:
 *
 * @param isIR_R Determines whether to use the right or left IR sensor.
 *                1 for right, 0 for left.
 */
void RobotMoveUntilIROvershoot(int isIR_R)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 8003948:	48ad      	ldr	r0, [pc, #692]	; (8003c00 <RobotMoveUntilIROvershoot+0x2c0>)
 800394a:	f7fe fe3e 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 800394e:	48ad      	ldr	r0, [pc, #692]	; (8003c04 <RobotMoveUntilIROvershoot+0x2c4>)
 8003950:	f7fe fe3b 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003954:	48ac      	ldr	r0, [pc, #688]	; (8003c08 <RobotMoveUntilIROvershoot+0x2c8>)
 8003956:	f7fe fe38 	bl	80025ca <PIDConfigReset>
  obsDist_IR_R = 0;
 800395a:	4bac      	ldr	r3, [pc, #688]	; (8003c0c <RobotMoveUntilIROvershoot+0x2cc>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0;
 8003960:	4bab      	ldr	r3, [pc, #684]	; (8003c10 <RobotMoveUntilIROvershoot+0x2d0>)
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003966:	4bab      	ldr	r3, [pc, #684]	; (8003c14 <RobotMoveUntilIROvershoot+0x2d4>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 800396e:	4baa      	ldr	r3, [pc, #680]	; (8003c18 <RobotMoveUntilIROvershoot+0x2d8>)
 8003970:	2200      	movs	r2, #0
 8003972:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003974:	f003 faea 	bl	8006f4c <HAL_GetTick>
 8003978:	4603      	mov	r3, r0
 800397a:	4aa8      	ldr	r2, [pc, #672]	; (8003c1c <RobotMoveUntilIROvershoot+0x2dc>)
 800397c:	6013      	str	r3, [r2, #0]
  if (isIR_R)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8094 	beq.w	8003aae <RobotMoveUntilIROvershoot+0x16e>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003986:	48a6      	ldr	r0, [pc, #664]	; (8003c20 <RobotMoveUntilIROvershoot+0x2e0>)
 8003988:	f003 fb54 	bl	8007034 <HAL_ADC_Start>
 800398c:	2114      	movs	r1, #20
 800398e:	48a4      	ldr	r0, [pc, #656]	; (8003c20 <RobotMoveUntilIROvershoot+0x2e0>)
 8003990:	f003 fc55 	bl	800723e <HAL_ADC_PollForConversion>
 8003994:	48a2      	ldr	r0, [pc, #648]	; (8003c20 <RobotMoveUntilIROvershoot+0x2e0>)
 8003996:	f003 fcdd 	bl	8007354 <HAL_ADC_GetValue>
 800399a:	4602      	mov	r2, r0
 800399c:	4ba1      	ldr	r3, [pc, #644]	; (8003c24 <RobotMoveUntilIROvershoot+0x2e4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4413      	add	r3, r2
 80039a2:	4aa0      	ldr	r2, [pc, #640]	; (8003c24 <RobotMoveUntilIROvershoot+0x2e4>)
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4ba0      	ldr	r3, [pc, #640]	; (8003c28 <RobotMoveUntilIROvershoot+0x2e8>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4b9f      	ldr	r3, [pc, #636]	; (8003c2c <RobotMoveUntilIROvershoot+0x2ec>)
 80039ae:	fb83 1302 	smull	r1, r3, r3, r2
 80039b2:	1059      	asrs	r1, r3, #1
 80039b4:	17d3      	asrs	r3, r2, #31
 80039b6:	1ac9      	subs	r1, r1, r3
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	1ad1      	subs	r1, r2, r3
 80039c0:	b28a      	uxth	r2, r1
 80039c2:	4b99      	ldr	r3, [pc, #612]	; (8003c28 <RobotMoveUntilIROvershoot+0x2e8>)
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	4b98      	ldr	r3, [pc, #608]	; (8003c28 <RobotMoveUntilIROvershoot+0x2e8>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d12c      	bne.n	8003a28 <RobotMoveUntilIROvershoot+0xe8>
 80039ce:	4b95      	ldr	r3, [pc, #596]	; (8003c24 <RobotMoveUntilIROvershoot+0x2e4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a95      	ldr	r2, [pc, #596]	; (8003c28 <RobotMoveUntilIROvershoot+0x2e8>)
 80039d4:	8812      	ldrh	r2, [r2, #0]
 80039d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fd8a 	bl	80004f4 <__aeabi_ui2d>
 80039e0:	a37f      	add	r3, pc, #508	; (adr r3, 8003be0 <RobotMoveUntilIROvershoot+0x2a0>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fc47 	bl	8000278 <__aeabi_dsub>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	a37d      	add	r3, pc, #500	; (adr r3, 8003be8 <RobotMoveUntilIROvershoot+0x2a8>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f7fc ff20 	bl	800083c <__aeabi_ddiv>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7fd f88a 	bl	8000b1c <__aeabi_d2uiz>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	4b7f      	ldr	r3, [pc, #508]	; (8003c0c <RobotMoveUntilIROvershoot+0x2cc>)
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	4b84      	ldr	r3, [pc, #528]	; (8003c24 <RobotMoveUntilIROvershoot+0x2e4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a84      	ldr	r2, [pc, #528]	; (8003c28 <RobotMoveUntilIROvershoot+0x2e8>)
 8003a16:	8812      	ldrh	r2, [r2, #0]
 8003a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	4b84      	ldr	r3, [pc, #528]	; (8003c30 <RobotMoveUntilIROvershoot+0x2f0>)
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	4b80      	ldr	r3, [pc, #512]	; (8003c24 <RobotMoveUntilIROvershoot+0x2e4>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003a28:	2014      	movs	r0, #20
 8003a2a:	f008 fe4d 	bl	800c6c8 <osDelay>
      if (obsDist_IR_R > 35)
 8003a2e:	4b77      	ldr	r3, [pc, #476]	; (8003c0c <RobotMoveUntilIROvershoot+0x2cc>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b23      	cmp	r3, #35	; 0x23
 8003a34:	d82e      	bhi.n	8003a94 <RobotMoveUntilIROvershoot+0x154>
        break;
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003a36:	f003 fa89 	bl	8006f4c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <RobotMoveUntilIROvershoot+0x2dc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	d99f      	bls.n	8003986 <RobotMoveUntilIROvershoot+0x46>
      {
        OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
 8003a46:	4b71      	ldr	r3, [pc, #452]	; (8003c0c <RobotMoveUntilIROvershoot+0x2cc>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2305      	movs	r3, #5
 8003a52:	2100      	movs	r1, #0
 8003a54:	2000      	movs	r0, #0
 8003a56:	f00b fd39 	bl	800f4cc <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	4875      	ldr	r0, [pc, #468]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003a60:	f004 f9b4 	bl	8007dcc <HAL_GPIO_WritePin>
 8003a64:	2201      	movs	r2, #1
 8003a66:	2108      	movs	r1, #8
 8003a68:	4872      	ldr	r0, [pc, #456]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003a6a:	f004 f9af 	bl	8007dcc <HAL_GPIO_WritePin>
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2120      	movs	r1, #32
 8003a72:	4870      	ldr	r0, [pc, #448]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003a74:	f004 f9aa 	bl	8007dcc <HAL_GPIO_WritePin>
 8003a78:	2201      	movs	r2, #1
 8003a7a:	2110      	movs	r1, #16
 8003a7c:	486d      	ldr	r0, [pc, #436]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003a7e:	f004 f9a5 	bl	8007dcc <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7fe fdf4 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003a88:	f003 fa60 	bl	8006f4c <HAL_GetTick>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4a63      	ldr	r2, [pc, #396]	; (8003c1c <RobotMoveUntilIROvershoot+0x2dc>)
 8003a90:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003a92:	e778      	b.n	8003986 <RobotMoveUntilIROvershoot+0x46>
        break;
 8003a94:	bf00      	nop
      }

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003a96:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <RobotMoveUntilIROvershoot+0x2f8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9e:	4b66      	ldr	r3, [pc, #408]	; (8003c38 <RobotMoveUntilIROvershoot+0x2f8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003aa6:	485e      	ldr	r0, [pc, #376]	; (8003c20 <RobotMoveUntilIROvershoot+0x2e0>)
 8003aa8:	f003 fb96 	bl	80071d8 <HAL_ADC_Stop>

    } while (1);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 8003aac:	e092      	b.n	8003bd4 <RobotMoveUntilIROvershoot+0x294>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003aae:	4863      	ldr	r0, [pc, #396]	; (8003c3c <RobotMoveUntilIROvershoot+0x2fc>)
 8003ab0:	f003 fac0 	bl	8007034 <HAL_ADC_Start>
 8003ab4:	2114      	movs	r1, #20
 8003ab6:	4861      	ldr	r0, [pc, #388]	; (8003c3c <RobotMoveUntilIROvershoot+0x2fc>)
 8003ab8:	f003 fbc1 	bl	800723e <HAL_ADC_PollForConversion>
 8003abc:	485f      	ldr	r0, [pc, #380]	; (8003c3c <RobotMoveUntilIROvershoot+0x2fc>)
 8003abe:	f003 fc49 	bl	8007354 <HAL_ADC_GetValue>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <RobotMoveUntilIROvershoot+0x300>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <RobotMoveUntilIROvershoot+0x300>)
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b5d      	ldr	r3, [pc, #372]	; (8003c44 <RobotMoveUntilIROvershoot+0x304>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <RobotMoveUntilIROvershoot+0x2ec>)
 8003ad6:	fb83 1302 	smull	r1, r3, r3, r2
 8003ada:	1059      	asrs	r1, r3, #1
 8003adc:	17d3      	asrs	r3, r2, #31
 8003ade:	1ac9      	subs	r1, r1, r3
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	1ad1      	subs	r1, r2, r3
 8003ae8:	b28a      	uxth	r2, r1
 8003aea:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <RobotMoveUntilIROvershoot+0x304>)
 8003aec:	801a      	strh	r2, [r3, #0]
 8003aee:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <RobotMoveUntilIROvershoot+0x304>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d12c      	bne.n	8003b50 <RobotMoveUntilIROvershoot+0x210>
 8003af6:	4b52      	ldr	r3, [pc, #328]	; (8003c40 <RobotMoveUntilIROvershoot+0x300>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a52      	ldr	r2, [pc, #328]	; (8003c44 <RobotMoveUntilIROvershoot+0x304>)
 8003afc:	8812      	ldrh	r2, [r2, #0]
 8003afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fcf6 	bl	80004f4 <__aeabi_ui2d>
 8003b08:	a339      	add	r3, pc, #228	; (adr r3, 8003bf0 <RobotMoveUntilIROvershoot+0x2b0>)
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f7fc fbb3 	bl	8000278 <__aeabi_dsub>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	a337      	add	r3, pc, #220	; (adr r3, 8003bf8 <RobotMoveUntilIROvershoot+0x2b8>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f7fc fe8c 	bl	800083c <__aeabi_ddiv>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f7fc fff6 	bl	8000b1c <__aeabi_d2uiz>
 8003b30:	4603      	mov	r3, r0
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <RobotMoveUntilIROvershoot+0x2d0>)
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <RobotMoveUntilIROvershoot+0x300>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a41      	ldr	r2, [pc, #260]	; (8003c44 <RobotMoveUntilIROvershoot+0x304>)
 8003b3e:	8812      	ldrh	r2, [r2, #0]
 8003b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <RobotMoveUntilIROvershoot+0x308>)
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	; (8003c40 <RobotMoveUntilIROvershoot+0x300>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
      osDelay(20);
 8003b50:	2014      	movs	r0, #20
 8003b52:	f008 fdb9 	bl	800c6c8 <osDelay>
      if (obsDist_IR_L > 35)
 8003b56:	4b2e      	ldr	r3, [pc, #184]	; (8003c10 <RobotMoveUntilIROvershoot+0x2d0>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b23      	cmp	r3, #35	; 0x23
 8003b5c:	d82e      	bhi.n	8003bbc <RobotMoveUntilIROvershoot+0x27c>
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003b5e:	f003 f9f5 	bl	8006f4c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <RobotMoveUntilIROvershoot+0x2dc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b09      	cmp	r3, #9
 8003b6c:	d99f      	bls.n	8003aae <RobotMoveUntilIROvershoot+0x16e>
        OLED_ShowNumber(0, 0, obsDist_IR_L, 5, 12);
 8003b6e:	4b28      	ldr	r3, [pc, #160]	; (8003c10 <RobotMoveUntilIROvershoot+0x2d0>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	230c      	movs	r3, #12
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2305      	movs	r3, #5
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f00b fca5 	bl	800f4cc <OLED_ShowNumber>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003b82:	2200      	movs	r2, #0
 8003b84:	2104      	movs	r1, #4
 8003b86:	482b      	ldr	r0, [pc, #172]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003b88:	f004 f920 	bl	8007dcc <HAL_GPIO_WritePin>
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	2108      	movs	r1, #8
 8003b90:	4828      	ldr	r0, [pc, #160]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003b92:	f004 f91b 	bl	8007dcc <HAL_GPIO_WritePin>
 8003b96:	2200      	movs	r2, #0
 8003b98:	2120      	movs	r1, #32
 8003b9a:	4826      	ldr	r0, [pc, #152]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003b9c:	f004 f916 	bl	8007dcc <HAL_GPIO_WritePin>
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	4823      	ldr	r0, [pc, #140]	; (8003c34 <RobotMoveUntilIROvershoot+0x2f4>)
 8003ba6:	f004 f911 	bl	8007dcc <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fe fd60 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003bb0:	f003 f9cc 	bl	8006f4c <HAL_GetTick>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <RobotMoveUntilIROvershoot+0x2dc>)
 8003bb8:	6013      	str	r3, [r2, #0]
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003bba:	e778      	b.n	8003aae <RobotMoveUntilIROvershoot+0x16e>
        break;
 8003bbc:	bf00      	nop
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <RobotMoveUntilIROvershoot+0x2f8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <RobotMoveUntilIROvershoot+0x2f8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003bce:	481b      	ldr	r0, [pc, #108]	; (8003c3c <RobotMoveUntilIROvershoot+0x2fc>)
 8003bd0:	f003 fb02 	bl	80071d8 <HAL_ADC_Stop>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	f3af 8000 	nop.w
 8003be0:	d78811b2 	.word	0xd78811b2
 8003be4:	40aa5cf5 	.word	0x40aa5cf5
 8003be8:	e3e6c4c6 	.word	0xe3e6c4c6
 8003bec:	c04f98da 	.word	0xc04f98da
 8003bf0:	31b9b670 	.word	0x31b9b670
 8003bf4:	40a9a8fd 	.word	0x40a9a8fd
 8003bf8:	725c3dee 	.word	0x725c3dee
 8003bfc:	c04e59dc 	.word	0xc04e59dc
 8003c00:	20000518 	.word	0x20000518
 8003c04:	20000504 	.word	0x20000504
 8003c08:	2000052c 	.word	0x2000052c
 8003c0c:	20000547 	.word	0x20000547
 8003c10:	20000546 	.word	0x20000546
 8003c14:	200004e8 	.word	0x200004e8
 8003c18:	200004ee 	.word	0x200004ee
 8003c1c:	200004f4 	.word	0x200004f4
 8003c20:	200001c0 	.word	0x200001c0
 8003c24:	2000054c 	.word	0x2000054c
 8003c28:	20000548 	.word	0x20000548
 8003c2c:	66666667 	.word	0x66666667
 8003c30:	20000542 	.word	0x20000542
 8003c34:	40020000 	.word	0x40020000
 8003c38:	200003c4 	.word	0x200003c4
 8003c3c:	20000208 	.word	0x20000208
 8003c40:	20000550 	.word	0x20000550
 8003c44:	2000054a 	.word	0x2000054a
 8003c48:	20000544 	.word	0x20000544
 8003c4c:	00000000 	.word	0x00000000

08003c50 <RobotMoveUntilIRCloseDist>:
 *
 * @param isIR_R Flag to indicate if the right IR sensor is being used.
 *                1 if right IR sensor is being used, 0 if left IR sensor is being used.
 */
void RobotMoveUntilIRCloseDist(int isIR_R)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
  PIDConfigReset(&pidTSlow);
 8003c58:	48a9      	ldr	r0, [pc, #676]	; (8003f00 <RobotMoveUntilIRCloseDist+0x2b0>)
 8003c5a:	f7fe fcb6 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidSlow);
 8003c5e:	48a9      	ldr	r0, [pc, #676]	; (8003f04 <RobotMoveUntilIRCloseDist+0x2b4>)
 8003c60:	f7fe fcb3 	bl	80025ca <PIDConfigReset>
  PIDConfigReset(&pidFast);
 8003c64:	48a8      	ldr	r0, [pc, #672]	; (8003f08 <RobotMoveUntilIRCloseDist+0x2b8>)
 8003c66:	f7fe fcb0 	bl	80025ca <PIDConfigReset>
  obsDist_IR_R = 0xFF;
 8003c6a:	4ba8      	ldr	r3, [pc, #672]	; (8003f0c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003c6c:	22ff      	movs	r2, #255	; 0xff
 8003c6e:	701a      	strb	r2, [r3, #0]
  obsDist_IR_L = 0xFF;
 8003c70:	4ba7      	ldr	r3, [pc, #668]	; (8003f10 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003c72:	22ff      	movs	r2, #255	; 0xff
 8003c74:	701a      	strb	r2, [r3, #0]
  angleNow = 0;
 8003c76:	4ba7      	ldr	r3, [pc, #668]	; (8003f14 <RobotMoveUntilIRCloseDist+0x2c4>)
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
  gyroZ = 0;
 8003c7e:	4ba6      	ldr	r3, [pc, #664]	; (8003f18 <RobotMoveUntilIRCloseDist+0x2c8>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	801a      	strh	r2, [r3, #0]
  last_curTask_tick = HAL_GetTick();
 8003c84:	f003 f962 	bl	8006f4c <HAL_GetTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4aa4      	ldr	r2, [pc, #656]	; (8003f1c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003c8c:	6013      	str	r3, [r2, #0]

  if (isIR_R)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8090 	beq.w	8003db6 <RobotMoveUntilIRCloseDist+0x166>
  {
    do
    {
      __ADC_Read_Dist_R(&hadc1, dataPoint_R, IR_data_raw_acc_R, obsDist_IR_R, obsTick_IR_R);
 8003c96:	48a2      	ldr	r0, [pc, #648]	; (8003f20 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003c98:	f003 f9cc 	bl	8007034 <HAL_ADC_Start>
 8003c9c:	2114      	movs	r1, #20
 8003c9e:	48a0      	ldr	r0, [pc, #640]	; (8003f20 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003ca0:	f003 facd 	bl	800723e <HAL_ADC_PollForConversion>
 8003ca4:	489e      	ldr	r0, [pc, #632]	; (8003f20 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003ca6:	f003 fb55 	bl	8007354 <HAL_ADC_GetValue>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b9d      	ldr	r3, [pc, #628]	; (8003f24 <RobotMoveUntilIRCloseDist+0x2d4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a9c      	ldr	r2, [pc, #624]	; (8003f24 <RobotMoveUntilIRCloseDist+0x2d4>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b9c      	ldr	r3, [pc, #624]	; (8003f28 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <RobotMoveUntilIRCloseDist+0x2dc>)
 8003cbe:	fb83 1302 	smull	r1, r3, r3, r2
 8003cc2:	1059      	asrs	r1, r3, #1
 8003cc4:	17d3      	asrs	r3, r2, #31
 8003cc6:	1ac9      	subs	r1, r1, r3
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	1ad1      	subs	r1, r2, r3
 8003cd0:	b28a      	uxth	r2, r1
 8003cd2:	4b95      	ldr	r3, [pc, #596]	; (8003f28 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d12c      	bne.n	8003d38 <RobotMoveUntilIRCloseDist+0xe8>
 8003cde:	4b91      	ldr	r3, [pc, #580]	; (8003f24 <RobotMoveUntilIRCloseDist+0x2d4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a91      	ldr	r2, [pc, #580]	; (8003f28 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fc02 	bl	80004f4 <__aeabi_ui2d>
 8003cf0:	a37b      	add	r3, pc, #492	; (adr r3, 8003ee0 <RobotMoveUntilIRCloseDist+0x290>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fabf 	bl	8000278 <__aeabi_dsub>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4619      	mov	r1, r3
 8003d02:	a379      	add	r3, pc, #484	; (adr r3, 8003ee8 <RobotMoveUntilIRCloseDist+0x298>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fc fd98 	bl	800083c <__aeabi_ddiv>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	f7fc ff02 	bl	8000b1c <__aeabi_d2uiz>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b7b      	ldr	r3, [pc, #492]	; (8003f0c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4b80      	ldr	r3, [pc, #512]	; (8003f24 <RobotMoveUntilIRCloseDist+0x2d4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a80      	ldr	r2, [pc, #512]	; (8003f28 <RobotMoveUntilIRCloseDist+0x2d8>)
 8003d26:	8812      	ldrh	r2, [r2, #0]
 8003d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	4b80      	ldr	r3, [pc, #512]	; (8003f30 <RobotMoveUntilIRCloseDist+0x2e0>)
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	4b7c      	ldr	r3, [pc, #496]	; (8003f24 <RobotMoveUntilIRCloseDist+0x2d4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
      OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
 8003d38:	4b74      	ldr	r3, [pc, #464]	; (8003f0c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	230c      	movs	r3, #12
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	2305      	movs	r3, #5
 8003d44:	2100      	movs	r1, #0
 8003d46:	2000      	movs	r0, #0
 8003d48:	f00b fbc0 	bl	800f4cc <OLED_ShowNumber>
      // osDelay(20);
      // if (obsDist_IR_R < 25)
      //   break;
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003d4c:	f003 f8fe 	bl	8006f4c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b72      	ldr	r3, [pc, #456]	; (8003f1c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d91b      	bls.n	8003d94 <RobotMoveUntilIRCloseDist+0x144>
      {
        // OLED_ShowNumber(0, 0, obsDist_IR_R, 5, 12);
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2104      	movs	r1, #4
 8003d60:	4874      	ldr	r0, [pc, #464]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003d62:	f004 f833 	bl	8007dcc <HAL_GPIO_WritePin>
 8003d66:	2201      	movs	r2, #1
 8003d68:	2108      	movs	r1, #8
 8003d6a:	4872      	ldr	r0, [pc, #456]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003d6c:	f004 f82e 	bl	8007dcc <HAL_GPIO_WritePin>
 8003d70:	2200      	movs	r2, #0
 8003d72:	2120      	movs	r1, #32
 8003d74:	486f      	ldr	r0, [pc, #444]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003d76:	f004 f829 	bl	8007dcc <HAL_GPIO_WritePin>
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	2110      	movs	r1, #16
 8003d7e:	486d      	ldr	r0, [pc, #436]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003d80:	f004 f824 	bl	8007dcc <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fe fc73 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003d8a:	f003 f8df 	bl	8006f4c <HAL_GetTick>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a62      	ldr	r2, [pc, #392]	; (8003f1c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003d92:	6013      	str	r3, [r2, #0]
      }

    } while (obsDist_IR_R >= 25);
 8003d94:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <RobotMoveUntilIRCloseDist+0x2bc>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b18      	cmp	r3, #24
 8003d9a:	f63f af7c 	bhi.w	8003c96 <RobotMoveUntilIRCloseDist+0x46>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003d9e:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34
 8003da6:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc1);
 8003dae:	485c      	ldr	r0, [pc, #368]	; (8003f20 <RobotMoveUntilIRCloseDist+0x2d0>)
 8003db0:	f003 fa12 	bl	80071d8 <HAL_ADC_Stop>

    } while (obsDist_IR_L >= 25);
    __SET_MOTOR_DUTY(&htim8, 0, 0);
    HAL_ADC_Stop(&hadc2);
  }
}
 8003db4:	e08e      	b.n	8003ed4 <RobotMoveUntilIRCloseDist+0x284>
      __ADC_Read_Dist_L(&hadc2, dataPoint_L, IR_data_raw_acc_L, obsDist_IR_L, obsTick_IR_L);
 8003db6:	4861      	ldr	r0, [pc, #388]	; (8003f3c <RobotMoveUntilIRCloseDist+0x2ec>)
 8003db8:	f003 f93c 	bl	8007034 <HAL_ADC_Start>
 8003dbc:	2114      	movs	r1, #20
 8003dbe:	485f      	ldr	r0, [pc, #380]	; (8003f3c <RobotMoveUntilIRCloseDist+0x2ec>)
 8003dc0:	f003 fa3d 	bl	800723e <HAL_ADC_PollForConversion>
 8003dc4:	485d      	ldr	r0, [pc, #372]	; (8003f3c <RobotMoveUntilIRCloseDist+0x2ec>)
 8003dc6:	f003 fac5 	bl	8007354 <HAL_ADC_GetValue>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	4b5c      	ldr	r3, [pc, #368]	; (8003f40 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	4a5b      	ldr	r2, [pc, #364]	; (8003f40 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <RobotMoveUntilIRCloseDist+0x2f4>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <RobotMoveUntilIRCloseDist+0x2dc>)
 8003dde:	fb83 1302 	smull	r1, r3, r3, r2
 8003de2:	1059      	asrs	r1, r3, #1
 8003de4:	17d3      	asrs	r3, r2, #31
 8003de6:	1ac9      	subs	r1, r1, r3
 8003de8:	460b      	mov	r3, r1
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	1ad1      	subs	r1, r2, r3
 8003df0:	b28a      	uxth	r2, r1
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <RobotMoveUntilIRCloseDist+0x2f4>)
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <RobotMoveUntilIRCloseDist+0x2f4>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d12c      	bne.n	8003e58 <RobotMoveUntilIRCloseDist+0x208>
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a50      	ldr	r2, [pc, #320]	; (8003f44 <RobotMoveUntilIRCloseDist+0x2f4>)
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc fb72 	bl	80004f4 <__aeabi_ui2d>
 8003e10:	a337      	add	r3, pc, #220	; (adr r3, 8003ef0 <RobotMoveUntilIRCloseDist+0x2a0>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f7fc fa2f 	bl	8000278 <__aeabi_dsub>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	a335      	add	r3, pc, #212	; (adr r3, 8003ef8 <RobotMoveUntilIRCloseDist+0x2a8>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fd08 	bl	800083c <__aeabi_ddiv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7fc fe72 	bl	8000b1c <__aeabi_d2uiz>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a3f      	ldr	r2, [pc, #252]	; (8003f44 <RobotMoveUntilIRCloseDist+0x2f4>)
 8003e46:	8812      	ldrh	r2, [r2, #0]
 8003e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <RobotMoveUntilIRCloseDist+0x2f8>)
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <RobotMoveUntilIRCloseDist+0x2f0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
      OLED_ShowNumber(0, 0, obsDist_IR_L, 5, 12);
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	230c      	movs	r3, #12
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2305      	movs	r3, #5
 8003e64:	2100      	movs	r1, #0
 8003e66:	2000      	movs	r0, #0
 8003e68:	f00b fb30 	bl	800f4cc <OLED_ShowNumber>
      if (HAL_GetTick() - last_curTask_tick >= 10)
 8003e6c:	f003 f86e 	bl	8006f4c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d91b      	bls.n	8003eb4 <RobotMoveUntilIRCloseDist+0x264>
        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2104      	movs	r1, #4
 8003e80:	482c      	ldr	r0, [pc, #176]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e82:	f003 ffa3 	bl	8007dcc <HAL_GPIO_WritePin>
 8003e86:	2201      	movs	r2, #1
 8003e88:	2108      	movs	r1, #8
 8003e8a:	482a      	ldr	r0, [pc, #168]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e8c:	f003 ff9e 	bl	8007dcc <HAL_GPIO_WritePin>
 8003e90:	2200      	movs	r2, #0
 8003e92:	2120      	movs	r1, #32
 8003e94:	4827      	ldr	r0, [pc, #156]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003e96:	f003 ff99 	bl	8007dcc <HAL_GPIO_WritePin>
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2110      	movs	r1, #16
 8003e9e:	4825      	ldr	r0, [pc, #148]	; (8003f34 <RobotMoveUntilIRCloseDist+0x2e4>)
 8003ea0:	f003 ff94 	bl	8007dcc <HAL_GPIO_WritePin>
        StraightLineMove(SPEED_MODE_1);
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f7fe fbe3 	bl	8002670 <StraightLineMove>
        last_curTask_tick = HAL_GetTick();
 8003eaa:	f003 f84f 	bl	8006f4c <HAL_GetTick>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <RobotMoveUntilIRCloseDist+0x2cc>)
 8003eb2:	6013      	str	r3, [r2, #0]
    } while (obsDist_IR_L >= 25);
 8003eb4:	4b16      	ldr	r3, [pc, #88]	; (8003f10 <RobotMoveUntilIRCloseDist+0x2c0>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b18      	cmp	r3, #24
 8003eba:	f63f af7c 	bhi.w	8003db6 <RobotMoveUntilIRCloseDist+0x166>
    __SET_MOTOR_DUTY(&htim8, 0, 0);
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <RobotMoveUntilIRCloseDist+0x2e8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_ADC_Stop(&hadc2);
 8003ece:	481b      	ldr	r0, [pc, #108]	; (8003f3c <RobotMoveUntilIRCloseDist+0x2ec>)
 8003ed0:	f003 f982 	bl	80071d8 <HAL_ADC_Stop>
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	f3af 8000 	nop.w
 8003ee0:	d78811b2 	.word	0xd78811b2
 8003ee4:	40aa5cf5 	.word	0x40aa5cf5
 8003ee8:	e3e6c4c6 	.word	0xe3e6c4c6
 8003eec:	c04f98da 	.word	0xc04f98da
 8003ef0:	31b9b670 	.word	0x31b9b670
 8003ef4:	40a9a8fd 	.word	0x40a9a8fd
 8003ef8:	725c3dee 	.word	0x725c3dee
 8003efc:	c04e59dc 	.word	0xc04e59dc
 8003f00:	20000518 	.word	0x20000518
 8003f04:	20000504 	.word	0x20000504
 8003f08:	2000052c 	.word	0x2000052c
 8003f0c:	20000547 	.word	0x20000547
 8003f10:	20000546 	.word	0x20000546
 8003f14:	200004e8 	.word	0x200004e8
 8003f18:	200004ee 	.word	0x200004ee
 8003f1c:	200004f4 	.word	0x200004f4
 8003f20:	200001c0 	.word	0x200001c0
 8003f24:	2000054c 	.word	0x2000054c
 8003f28:	20000548 	.word	0x20000548
 8003f2c:	66666667 	.word	0x66666667
 8003f30:	20000542 	.word	0x20000542
 8003f34:	40020000 	.word	0x40020000
 8003f38:	200003c4 	.word	0x200003c4
 8003f3c:	20000208 	.word	0x20000208
 8003f40:	20000550 	.word	0x20000550
 8003f44:	2000054a 	.word	0x2000054a
 8003f48:	20000544 	.word	0x20000544

08003f4c <RobotTurnFC45>:

void RobotTurnFC45()
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  //  FC45
  targetAngle = -(45 - FCOFFSET);
 8003f50:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <RobotTurnFC45+0x78>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	3b2d      	subs	r3, #45	; 0x2d
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5e:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <RobotTurnFC45+0x7c>)
 8003f60:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <RobotTurnFC45+0x80>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6e:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <RobotTurnFC45+0x80>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f240 5235 	movw	r2, #1333	; 0x535
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN_MAX(&htim1, 1);
 8003f78:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <RobotTurnFC45+0x84>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f240 1209 	movw	r2, #265	; 0x109
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
 8003f82:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003f86:	f002 ffed 	bl	8006f64 <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	4811      	ldr	r0, [pc, #68]	; (8003fd4 <RobotTurnFC45+0x88>)
 8003f90:	f003 ff1c 	bl	8007dcc <HAL_GPIO_WritePin>
 8003f94:	2201      	movs	r2, #1
 8003f96:	2108      	movs	r1, #8
 8003f98:	480e      	ldr	r0, [pc, #56]	; (8003fd4 <RobotTurnFC45+0x88>)
 8003f9a:	f003 ff17 	bl	8007dcc <HAL_GPIO_WritePin>
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	480c      	ldr	r0, [pc, #48]	; (8003fd4 <RobotTurnFC45+0x88>)
 8003fa4:	f003 ff12 	bl	8007dcc <HAL_GPIO_WritePin>
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2110      	movs	r1, #16
 8003fac:	4809      	ldr	r0, [pc, #36]	; (8003fd4 <RobotTurnFC45+0x88>)
 8003fae:	f003 ff0d 	bl	8007dcc <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <RobotTurnFC45+0x7c>)
 8003fb4:	f7ff f950 	bl	8003258 <RobotTurn>
  osDelay(300); // reset wheel
 8003fb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003fbc:	f008 fb84 	bl	800c6c8 <osDelay>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000002 	.word	0x20000002
 8003fc8:	200004e4 	.word	0x200004e4
 8003fcc:	200003c4 	.word	0x200003c4
 8003fd0:	200002a4 	.word	0x200002a4
 8003fd4:	40020000 	.word	0x40020000

08003fd8 <RobotTurnFA45>:
  RobotTurn(&targetAngle);
  osDelay(300); // reset wheel
}

void RobotTurnFA45()
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  // FA45
  targetAngle = (45 - FAOFFSET);
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <RobotTurnFA45+0x78>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f1c3 032d 	rsb	r3, r3, #45	; 0x2d
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <RobotTurnFA45+0x7c>)
 8003fee:	edc3 7a00 	vstr	s15, [r3]
  __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <RobotTurnFA45+0x80>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f240 5235 	movw	r2, #1333	; 0x535
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <RobotTurnFA45+0x80>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004004:	639a      	str	r2, [r3, #56]	; 0x38
  __SET_SERVO_TURN(&htim1, 90);
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <RobotTurnFA45+0x84>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	225a      	movs	r2, #90	; 0x5a
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
 800400e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004012:	f002 ffa7 	bl	8006f64 <HAL_Delay>
  __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8004016:	2200      	movs	r2, #0
 8004018:	2104      	movs	r1, #4
 800401a:	4811      	ldr	r0, [pc, #68]	; (8004060 <RobotTurnFA45+0x88>)
 800401c:	f003 fed6 	bl	8007dcc <HAL_GPIO_WritePin>
 8004020:	2201      	movs	r2, #1
 8004022:	2108      	movs	r1, #8
 8004024:	480e      	ldr	r0, [pc, #56]	; (8004060 <RobotTurnFA45+0x88>)
 8004026:	f003 fed1 	bl	8007dcc <HAL_GPIO_WritePin>
 800402a:	2200      	movs	r2, #0
 800402c:	2120      	movs	r1, #32
 800402e:	480c      	ldr	r0, [pc, #48]	; (8004060 <RobotTurnFA45+0x88>)
 8004030:	f003 fecc 	bl	8007dcc <HAL_GPIO_WritePin>
 8004034:	2201      	movs	r2, #1
 8004036:	2110      	movs	r1, #16
 8004038:	4809      	ldr	r0, [pc, #36]	; (8004060 <RobotTurnFA45+0x88>)
 800403a:	f003 fec7 	bl	8007dcc <HAL_GPIO_WritePin>
  RobotTurn(&targetAngle);
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <RobotTurnFA45+0x7c>)
 8004040:	f7ff f90a 	bl	8003258 <RobotTurn>
  osDelay(300);
 8004044:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004048:	f008 fb3e 	bl	800c6c8 <osDelay>
}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000003 	.word	0x20000003
 8004054:	200004e4 	.word	0x200004e4
 8004058:	200003c4 	.word	0x200003c4
 800405c:	200002a4 	.word	0x200002a4
 8004060:	40020000 	.word	0x40020000

08004064 <RobotTurnFR30>:
  osDelay(300);
}

// For Task 2 Turn B
void RobotTurnFR30()
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  targetDist = 4;
 8004068:	4b41      	ldr	r3, [pc, #260]	; (8004170 <RobotTurnFR30+0x10c>)
 800406a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800406e:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004070:	2200      	movs	r2, #0
 8004072:	2101      	movs	r1, #1
 8004074:	483e      	ldr	r0, [pc, #248]	; (8004170 <RobotTurnFR30+0x10c>)
 8004076:	f7fe fcb3 	bl	80029e0 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <RobotTurnFR30+0x110>)
 800407c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004080:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004178 <RobotTurnFR30+0x114>
 8004084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408c:	dd02      	ble.n	8004094 <RobotTurnFR30+0x30>
 800408e:	f240 1309 	movw	r3, #265	; 0x109
 8004092:	e012      	b.n	80040ba <RobotTurnFR30+0x56>
 8004094:	4b37      	ldr	r3, [pc, #220]	; (8004174 <RobotTurnFR30+0x110>)
 8004096:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 800409a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800417c <RobotTurnFR30+0x118>
 800409e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a6:	d501      	bpl.n	80040ac <RobotTurnFR30+0x48>
 80040a8:	2346      	movs	r3, #70	; 0x46
 80040aa:	e006      	b.n	80040ba <RobotTurnFR30+0x56>
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <RobotTurnFR30+0x110>)
 80040ae:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80040b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b6:	ee17 3a90 	vmov	r3, s15
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <RobotTurnFR30+0x11c>)
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	6413      	str	r3, [r2, #64]	; 0x40
 80040c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040c4:	f002 ff4e 	bl	8006f64 <HAL_Delay>
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <RobotTurnFR30+0x110>)
 80040ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040ce:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <RobotTurnFR30+0x120>)
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b28      	ldr	r3, [pc, #160]	; (8004174 <RobotTurnFR30+0x110>)
 80040d4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	2104      	movs	r1, #4
 80040e6:	4828      	ldr	r0, [pc, #160]	; (8004188 <RobotTurnFR30+0x124>)
 80040e8:	f003 fe70 	bl	8007dcc <HAL_GPIO_WritePin>
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <RobotTurnFR30+0x110>)
 80040ee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	2108      	movs	r1, #8
 8004100:	4821      	ldr	r0, [pc, #132]	; (8004188 <RobotTurnFR30+0x124>)
 8004102:	f003 fe63 	bl	8007dcc <HAL_GPIO_WritePin>
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <RobotTurnFR30+0x110>)
 8004108:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	2120      	movs	r1, #32
 800411a:	481b      	ldr	r0, [pc, #108]	; (8004188 <RobotTurnFR30+0x124>)
 800411c:	f003 fe56 	bl	8007dcc <HAL_GPIO_WritePin>
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <RobotTurnFR30+0x110>)
 8004122:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	2110      	movs	r1, #16
 8004134:	4814      	ldr	r0, [pc, #80]	; (8004188 <RobotTurnFR30+0x124>)
 8004136:	f003 fe49 	bl	8007dcc <HAL_GPIO_WritePin>
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <RobotTurnFR30+0x110>)
 800413c:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <RobotTurnFR30+0x128>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	635a      	str	r2, [r3, #52]	; 0x34
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <RobotTurnFR30+0x110>)
 8004148:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 800414c:	4b0f      	ldr	r3, [pc, #60]	; (800418c <RobotTurnFR30+0x128>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 8004152:	480c      	ldr	r0, [pc, #48]	; (8004184 <RobotTurnFR30+0x120>)
 8004154:	f7ff f880 	bl	8003258 <RobotTurn>
  targetDist = 2;
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <RobotTurnFR30+0x10c>)
 800415a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800415e:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <RobotTurnFR30+0x10c>)
 8004166:	f7fe fc3b 	bl	80029e0 <RobotMoveDist>
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200004f8 	.word	0x200004f8
 8004174:	20000004 	.word	0x20000004
 8004178:	43848000 	.word	0x43848000
 800417c:	428c0000 	.word	0x428c0000
 8004180:	200002a4 	.word	0x200002a4
 8004184:	200004e4 	.word	0x200004e4
 8004188:	40020000 	.word	0x40020000
 800418c:	200003c4 	.word	0x200003c4

08004190 <RobotTurnFL30>:
void RobotTurnFL30()
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  targetDist = 5;
 8004194:	4b40      	ldr	r3, [pc, #256]	; (8004298 <RobotTurnFL30+0x108>)
 8004196:	4a41      	ldr	r2, [pc, #260]	; (800429c <RobotTurnFL30+0x10c>)
 8004198:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800419a:	2200      	movs	r2, #0
 800419c:	2101      	movs	r1, #1
 800419e:	483e      	ldr	r0, [pc, #248]	; (8004298 <RobotTurnFL30+0x108>)
 80041a0:	f7fe fc1e 	bl	80029e0 <RobotMoveDist>
  __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 80041a4:	4b3e      	ldr	r3, [pc, #248]	; (80042a0 <RobotTurnFL30+0x110>)
 80041a6:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80041aa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80042a4 <RobotTurnFL30+0x114>
 80041ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	dd02      	ble.n	80041be <RobotTurnFL30+0x2e>
 80041b8:	f240 1309 	movw	r3, #265	; 0x109
 80041bc:	e012      	b.n	80041e4 <RobotTurnFL30+0x54>
 80041be:	4b38      	ldr	r3, [pc, #224]	; (80042a0 <RobotTurnFL30+0x110>)
 80041c0:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80041c4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80042a8 <RobotTurnFL30+0x118>
 80041c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d0:	d501      	bpl.n	80041d6 <RobotTurnFL30+0x46>
 80041d2:	2346      	movs	r3, #70	; 0x46
 80041d4:	e006      	b.n	80041e4 <RobotTurnFL30+0x54>
 80041d6:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <RobotTurnFL30+0x110>)
 80041d8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80041dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e0:	ee17 3a90 	vmov	r3, s15
 80041e4:	4a31      	ldr	r2, [pc, #196]	; (80042ac <RobotTurnFL30+0x11c>)
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80041ee:	f002 feb9 	bl	8006f64 <HAL_Delay>
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <RobotTurnFL30+0x110>)
 80041f4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80041f8:	4a2d      	ldr	r2, [pc, #180]	; (80042b0 <RobotTurnFL30+0x120>)
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <RobotTurnFL30+0x110>)
 80041fe:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	2104      	movs	r1, #4
 8004210:	4828      	ldr	r0, [pc, #160]	; (80042b4 <RobotTurnFL30+0x124>)
 8004212:	f003 fddb 	bl	8007dcc <HAL_GPIO_WritePin>
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <RobotTurnFL30+0x110>)
 8004218:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	2108      	movs	r1, #8
 800422a:	4822      	ldr	r0, [pc, #136]	; (80042b4 <RobotTurnFL30+0x124>)
 800422c:	f003 fdce 	bl	8007dcc <HAL_GPIO_WritePin>
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <RobotTurnFL30+0x110>)
 8004232:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	2120      	movs	r1, #32
 8004244:	481b      	ldr	r0, [pc, #108]	; (80042b4 <RobotTurnFL30+0x124>)
 8004246:	f003 fdc1 	bl	8007dcc <HAL_GPIO_WritePin>
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <RobotTurnFL30+0x110>)
 800424c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf14      	ite	ne
 8004254:	2301      	movne	r3, #1
 8004256:	2300      	moveq	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	2110      	movs	r1, #16
 800425e:	4815      	ldr	r0, [pc, #84]	; (80042b4 <RobotTurnFL30+0x124>)
 8004260:	f003 fdb4 	bl	8007dcc <HAL_GPIO_WritePin>
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <RobotTurnFL30+0x110>)
 8004266:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <RobotTurnFL30+0x128>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	635a      	str	r2, [r3, #52]	; 0x34
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <RobotTurnFL30+0x110>)
 8004272:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <RobotTurnFL30+0x128>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
  RobotTurn(&targetAngle);
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <RobotTurnFL30+0x120>)
 800427e:	f7fe ffeb 	bl	8003258 <RobotTurn>
  targetDist = 3;
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <RobotTurnFL30+0x108>)
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <RobotTurnFL30+0x12c>)
 8004286:	601a      	str	r2, [r3, #0]
  RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004288:	2200      	movs	r2, #0
 800428a:	2100      	movs	r1, #0
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <RobotTurnFL30+0x108>)
 800428e:	f7fe fba7 	bl	80029e0 <RobotMoveDist>
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200004f8 	.word	0x200004f8
 800429c:	40a00000 	.word	0x40a00000
 80042a0:	20000004 	.word	0x20000004
 80042a4:	43848000 	.word	0x43848000
 80042a8:	428c0000 	.word	0x428c0000
 80042ac:	200002a4 	.word	0x200002a4
 80042b0:	200004e4 	.word	0x200004e4
 80042b4:	40020000 	.word	0x40020000
 80042b8:	200003c4 	.word	0x200003c4
 80042bc:	40400000 	.word	0x40400000

080042c0 <runEncoder>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_runEncoder */
void runEncoder(void *argument)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80042c8:	2064      	movs	r0, #100	; 0x64
 80042ca:	f008 f9fd 	bl	800c6c8 <osDelay>
 80042ce:	e7fb      	b.n	80042c8 <runEncoder+0x8>

080042d0 <runOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runOledTask */
void runOledTask(void *argument)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	6078      	str	r0, [r7, #4]
    // HAL_UART_Transmit(&huart3, aRxBuffer, RX_BUFFER_SIZE, 0xFFFF);
    // IR_data_raw_acc_R = HAL_ADC_GetValue(&hadc1);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);

    // ir debugging
    HAL_ADC_Start(&hadc2);
 80042d8:	481a      	ldr	r0, [pc, #104]	; (8004344 <runOledTask+0x74>)
 80042da:	f002 feab 	bl	8007034 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc1);
 80042de:	481a      	ldr	r0, [pc, #104]	; (8004348 <runOledTask+0x78>)
 80042e0:	f002 fea8 	bl	8007034 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 20);
 80042e4:	2114      	movs	r1, #20
 80042e6:	4817      	ldr	r0, [pc, #92]	; (8004344 <runOledTask+0x74>)
 80042e8:	f002 ffa9 	bl	800723e <HAL_ADC_PollForConversion>
    HAL_ADC_PollForConversion(&hadc1, 20);
 80042ec:	2114      	movs	r1, #20
 80042ee:	4816      	ldr	r0, [pc, #88]	; (8004348 <runOledTask+0x78>)
 80042f0:	f002 ffa5 	bl	800723e <HAL_ADC_PollForConversion>
    // HAL_UART_Transmit(&huart3, (uint8_t *)IR_data_raw_acc_R, 4, 0xFFFF);
    // HAL_ADC_Stop(&hadc1);
    // HAL_ADC_Start(&hadc2);
    // HAL_ADC_PollForConversion(&hadc2, 20);
    // IR_data_raw_acc_L = HAL_ADC_GetValue(&hadc2);
    OLED_ShowNumber(0, 20, HAL_ADC_GetValue(&hadc2), 5, 12);
 80042f4:	4813      	ldr	r0, [pc, #76]	; (8004344 <runOledTask+0x74>)
 80042f6:	f003 f82d 	bl	8007354 <HAL_ADC_GetValue>
 80042fa:	4602      	mov	r2, r0
 80042fc:	230c      	movs	r3, #12
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2305      	movs	r3, #5
 8004302:	2114      	movs	r1, #20
 8004304:	2000      	movs	r0, #0
 8004306:	f00b f8e1 	bl	800f4cc <OLED_ShowNumber>
    OLED_ShowNumber(60, 20, HAL_ADC_GetValue(&hadc1), 5, 12);
 800430a:	480f      	ldr	r0, [pc, #60]	; (8004348 <runOledTask+0x78>)
 800430c:	f003 f822 	bl	8007354 <HAL_ADC_GetValue>
 8004310:	4602      	mov	r2, r0
 8004312:	230c      	movs	r3, #12
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2305      	movs	r3, #5
 8004318:	2114      	movs	r1, #20
 800431a:	203c      	movs	r0, #60	; 0x3c
 800431c:	f00b f8d6 	bl	800f4cc <OLED_ShowNumber>

    // char temp[10];
    // snprintf((char *)temp, sizeof(temp) - 1, "%d\n", HAL_ADC_GetValue(&hadc2));
    // HAL_UART_Transmit(&huart3, (uint8_t *)temp, strlen(temp), 0xFFFF);

    HAL_ADC_Stop(&hadc2);
 8004320:	4808      	ldr	r0, [pc, #32]	; (8004344 <runOledTask+0x74>)
 8004322:	f002 ff59 	bl	80071d8 <HAL_ADC_Stop>
    HAL_ADC_Stop(&hadc1);
 8004326:	4808      	ldr	r0, [pc, #32]	; (8004348 <runOledTask+0x78>)
 8004328:	f002 ff56 	bl	80071d8 <HAL_ADC_Stop>
    // us debugging
    // HCSR04_Read();
    // OLED_ShowNumber(0, 0, obsDist_US, 5, 12);

    // display current command
    OLED_ShowString(0, 40, (char *)aRxBuffer);
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <runOledTask+0x7c>)
 800432e:	2128      	movs	r1, #40	; 0x28
 8004330:	2000      	movs	r0, #0
 8004332:	f00b f939 	bl	800f5a8 <OLED_ShowString>

    OLED_Refresh_Gram();
 8004336:	f00a ff39 	bl	800f1ac <OLED_Refresh_Gram>
    osDelay(100);
 800433a:	2064      	movs	r0, #100	; 0x64
 800433c:	f008 f9c4 	bl	800c6c8 <osDelay>
    HAL_ADC_Start(&hadc2);
 8004340:	e7ca      	b.n	80042d8 <runOledTask+0x8>
 8004342:	bf00      	nop
 8004344:	20000208 	.word	0x20000208
 8004348:	200001c0 	.word	0x200001c0
 800434c:	2000048c 	.word	0x2000048c

08004350 <runFWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFWTask */
void runFWTask(void *argument)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFWTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_FORWARD)
 8004358:	4b7b      	ldr	r3, [pc, #492]	; (8004548 <runFWTask+0x1f8>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <runFWTask+0x1a>
      osDelay(1000);
 8004360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004364:	f008 f9b0 	bl	800c6c8 <osDelay>
 8004368:	e7f6      	b.n	8004358 <runFWTask+0x8>
    else
    {
      targetDist = 0;
 800436a:	4b78      	ldr	r3, [pc, #480]	; (800454c <runFWTask+0x1fc>)
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 8004372:	4b77      	ldr	r3, [pc, #476]	; (8004550 <runFWTask+0x200>)
 8004374:	2200      	movs	r2, #0
 8004376:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 8004378:	4b76      	ldr	r3, [pc, #472]	; (8004554 <runFWTask+0x204>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d062      	beq.n	8004446 <runFWTask+0xf6>
      {

        angleNow = 0;
 8004380:	4b75      	ldr	r3, [pc, #468]	; (8004558 <runFWTask+0x208>)
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 8004388:	4b74      	ldr	r3, [pc, #464]	; (800455c <runFWTask+0x20c>)
 800438a:	2200      	movs	r2, #0
 800438c:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 800438e:	4874      	ldr	r0, [pc, #464]	; (8004560 <runFWTask+0x210>)
 8004390:	f7fe f91b 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 8004394:	4873      	ldr	r0, [pc, #460]	; (8004564 <runFWTask+0x214>)
 8004396:	f7fe f918 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidFast);
 800439a:	4873      	ldr	r0, [pc, #460]	; (8004568 <runFWTask+0x218>)
 800439c:	f7fe f915 	bl	80025ca <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_FORWARD);
 80043a0:	2200      	movs	r2, #0
 80043a2:	2104      	movs	r1, #4
 80043a4:	4871      	ldr	r0, [pc, #452]	; (800456c <runFWTask+0x21c>)
 80043a6:	f003 fd11 	bl	8007dcc <HAL_GPIO_WritePin>
 80043aa:	2201      	movs	r2, #1
 80043ac:	2108      	movs	r1, #8
 80043ae:	486f      	ldr	r0, [pc, #444]	; (800456c <runFWTask+0x21c>)
 80043b0:	f003 fd0c 	bl	8007dcc <HAL_GPIO_WritePin>
 80043b4:	2200      	movs	r2, #0
 80043b6:	2120      	movs	r1, #32
 80043b8:	486c      	ldr	r0, [pc, #432]	; (800456c <runFWTask+0x21c>)
 80043ba:	f003 fd07 	bl	8007dcc <HAL_GPIO_WritePin>
 80043be:	2201      	movs	r2, #1
 80043c0:	2110      	movs	r1, #16
 80043c2:	486a      	ldr	r0, [pc, #424]	; (800456c <runFWTask+0x21c>)
 80043c4:	f003 fd02 	bl	8007dcc <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 80043c8:	4b69      	ldr	r3, [pc, #420]	; (8004570 <runFWTask+0x220>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2200      	movs	r2, #0
 80043ce:	635a      	str	r2, [r3, #52]	; 0x34
 80043d0:	4b67      	ldr	r3, [pc, #412]	; (8004570 <runFWTask+0x220>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2200      	movs	r2, #0
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
 80043d8:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <runFWTask+0x1f8>)
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	4b65      	ldr	r3, [pc, #404]	; (8004574 <runFWTask+0x224>)
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	4b59      	ldr	r3, [pc, #356]	; (8004548 <runFWTask+0x1f8>)
 80043e2:	2211      	movs	r2, #17
 80043e4:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80043e6:	4b64      	ldr	r3, [pc, #400]	; (8004578 <runFWTask+0x228>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 80043ec:	4b63      	ldr	r3, [pc, #396]	; (800457c <runFWTask+0x22c>)
 80043ee:	2264      	movs	r2, #100	; 0x64
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	4b62      	ldr	r3, [pc, #392]	; (800457c <runFWTask+0x22c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80043f8:	4a61      	ldr	r2, [pc, #388]	; (8004580 <runFWTask+0x230>)
 80043fa:	210f      	movs	r1, #15
 80043fc:	4861      	ldr	r0, [pc, #388]	; (8004584 <runFWTask+0x234>)
 80043fe:	f00b f991 	bl	800f724 <sniprintf>
 8004402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004406:	2206      	movs	r2, #6
 8004408:	495f      	ldr	r1, [pc, #380]	; (8004588 <runFWTask+0x238>)
 800440a:	4860      	ldr	r0, [pc, #384]	; (800458c <runFWTask+0x23c>)
 800440c:	f007 f811 	bl	800b432 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8004410:	f002 fd9c 	bl	8006f4c <HAL_GetTick>
 8004414:	4603      	mov	r3, r0
 8004416:	4a5e      	ldr	r2, [pc, #376]	; (8004590 <runFWTask+0x240>)
 8004418:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 800441a:	4b4e      	ldr	r3, [pc, #312]	; (8004554 <runFWTask+0x204>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8090 	beq.w	8004544 <runFWTask+0x1f4>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 8004424:	f002 fd92 	bl	8006f4c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	4b59      	ldr	r3, [pc, #356]	; (8004590 <runFWTask+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b09      	cmp	r3, #9
 8004432:	d9f2      	bls.n	800441a <runFWTask+0xca>
          {

            StraightLineMove(SPEED_MODE_T);
 8004434:	2000      	movs	r0, #0
 8004436:	f7fe f91b 	bl	8002670 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 800443a:	f002 fd87 	bl	8006f4c <HAL_GetTick>
 800443e:	4603      	mov	r3, r0
 8004440:	4a53      	ldr	r2, [pc, #332]	; (8004590 <runFWTask+0x240>)
 8004442:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 8004444:	e7e9      	b.n	800441a <runFWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8004446:	4b4d      	ldr	r3, [pc, #308]	; (800457c <runFWTask+0x22c>)
 8004448:	885b      	ldrh	r3, [r3, #2]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	4b3e      	ldr	r3, [pc, #248]	; (800454c <runFWTask+0x1fc>)
 8004454:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 10, move mode must be forced to SLOW
        if (targetDist <= 15)
 8004458:	4b3c      	ldr	r3, [pc, #240]	; (800454c <runFWTask+0x1fc>)
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	d802      	bhi.n	8004472 <runFWTask+0x122>
          moveMode = SLOW;
 800446c:	4b49      	ldr	r3, [pc, #292]	; (8004594 <runFWTask+0x244>)
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]

        if (targetDist >= 100)
 8004472:	4b36      	ldr	r3, [pc, #216]	; (800454c <runFWTask+0x1fc>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004598 <runFWTask+0x248>
 800447c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004484:	db09      	blt.n	800449a <runFWTask+0x14a>
          targetDist -= 2;
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <runFWTask+0x1fc>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <runFWTask+0x1fc>)
 8004496:	edc3 7a00 	vstr	s15, [r3]

        if (moveMode == SLOW)
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <runFWTask+0x244>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <runFWTask+0x15e>
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80044a2:	2200      	movs	r2, #0
 80044a4:	2101      	movs	r1, #1
 80044a6:	4829      	ldr	r0, [pc, #164]	; (800454c <runFWTask+0x1fc>)
 80044a8:	f7fe fa9a 	bl	80029e0 <RobotMoveDist>
 80044ac:	e004      	b.n	80044b8 <runFWTask+0x168>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_2);
 80044ae:	2202      	movs	r2, #2
 80044b0:	2101      	movs	r1, #1
 80044b2:	4826      	ldr	r0, [pc, #152]	; (800454c <runFWTask+0x1fc>)
 80044b4:	f7fe fa94 	bl	80029e0 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <runFWTask+0x220>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	635a      	str	r2, [r3, #52]	; 0x34
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <runFWTask+0x220>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2200      	movs	r2, #0
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <runFWTask+0x1f8>)
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	4b29      	ldr	r3, [pc, #164]	; (8004574 <runFWTask+0x224>)
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <runFWTask+0x1f8>)
 80044d2:	2211      	movs	r2, #17
 80044d4:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <runFWTask+0x228>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80044dc:	4b2f      	ldr	r3, [pc, #188]	; (800459c <runFWTask+0x24c>)
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	4b2e      	ldr	r3, [pc, #184]	; (800459c <runFWTask+0x24c>)
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d112      	bne.n	800450e <runFWTask+0x1be>
        {
          __CLEAR_CURCMD(curCmd);
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <runFWTask+0x22c>)
 80044ea:	2264      	movs	r2, #100	; 0x64
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <runFWTask+0x22c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <runFWTask+0x230>)
 80044f6:	210f      	movs	r1, #15
 80044f8:	4822      	ldr	r0, [pc, #136]	; (8004584 <runFWTask+0x234>)
 80044fa:	f00b f913 	bl	800f724 <sniprintf>
 80044fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004502:	2206      	movs	r2, #6
 8004504:	4920      	ldr	r1, [pc, #128]	; (8004588 <runFWTask+0x238>)
 8004506:	4821      	ldr	r0, [pc, #132]	; (800458c <runFWTask+0x23c>)
 8004508:	f006 ff93 	bl	800b432 <HAL_UART_Transmit>
 800450c:	e724      	b.n	8004358 <runFWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <runFWTask+0x24c>)
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	4a1a      	ldr	r2, [pc, #104]	; (800457c <runFWTask+0x22c>)
 8004514:	4921      	ldr	r1, [pc, #132]	; (800459c <runFWTask+0x24c>)
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b1f      	ldr	r3, [pc, #124]	; (800459c <runFWTask+0x24c>)
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	3301      	adds	r3, #1
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <runFWTask+0x24c>)
 8004526:	7892      	ldrb	r2, [r2, #2]
 8004528:	fb93 f1f2 	sdiv	r1, r3, r2
 800452c:	fb01 f202 	mul.w	r2, r1, r2
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	b2da      	uxtb	r2, r3
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <runFWTask+0x24c>)
 8004536:	705a      	strb	r2, [r3, #1]
 8004538:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <runFWTask+0x250>)
 800453a:	210f      	movs	r1, #15
 800453c:	4811      	ldr	r0, [pc, #68]	; (8004584 <runFWTask+0x234>)
 800453e:	f00b f8f1 	bl	800f724 <sniprintf>
 8004542:	e709      	b.n	8004358 <runFWTask+0x8>
            break;
 8004544:	bf00      	nop
    if (curTask != TASK_MOVE_FORWARD)
 8004546:	e707      	b.n	8004358 <runFWTask+0x8>
 8004548:	20000134 	.word	0x20000134
 800454c:	200004f8 	.word	0x200004f8
 8004550:	200004fe 	.word	0x200004fe
 8004554:	200004e0 	.word	0x200004e0
 8004558:	200004e8 	.word	0x200004e8
 800455c:	200004ee 	.word	0x200004ee
 8004560:	20000518 	.word	0x20000518
 8004564:	20000504 	.word	0x20000504
 8004568:	2000052c 	.word	0x2000052c
 800456c:	40020000 	.word	0x40020000
 8004570:	200003c4 	.word	0x200003c4
 8004574:	20000135 	.word	0x20000135
 8004578:	20000564 	.word	0x20000564
 800457c:	200004cc 	.word	0x200004cc
 8004580:	0801013c 	.word	0x0801013c
 8004584:	200004d0 	.word	0x200004d0
 8004588:	08010144 	.word	0x08010144
 800458c:	2000040c 	.word	0x2000040c
 8004590:	200004f4 	.word	0x200004f4
 8004594:	20000136 	.word	0x20000136
 8004598:	42c80000 	.word	0x42c80000
 800459c:	20000498 	.word	0x20000498
 80045a0:	0801014c 	.word	0x0801014c

080045a4 <runBWTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBWTask */
void runBWTask(void *argument)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBWTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_BACKWARD)
 80045ac:	4b71      	ldr	r3, [pc, #452]	; (8004774 <runBWTask+0x1d0>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d004      	beq.n	80045be <runBWTask+0x1a>
      osDelay(1000);
 80045b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b8:	f008 f886 	bl	800c6c8 <osDelay>
 80045bc:	e7f6      	b.n	80045ac <runBWTask+0x8>
    else
    {
      targetDist = 0;
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <runBWTask+0x1d4>)
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
      targetDistTick = 0;
 80045c6:	4b6d      	ldr	r3, [pc, #436]	; (800477c <runBWTask+0x1d8>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	801a      	strh	r2, [r3, #0]
      if (manualMode)
 80045cc:	4b6c      	ldr	r3, [pc, #432]	; (8004780 <runBWTask+0x1dc>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d061      	beq.n	8004698 <runBWTask+0xf4>
      {

        angleNow = 0;
 80045d4:	4b6b      	ldr	r3, [pc, #428]	; (8004784 <runBWTask+0x1e0>)
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
        gyroZ = 0; // reset angle for PID
 80045dc:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <runBWTask+0x1e4>)
 80045de:	2200      	movs	r2, #0
 80045e0:	801a      	strh	r2, [r3, #0]
        PIDConfigReset(&pidTSlow);
 80045e2:	486a      	ldr	r0, [pc, #424]	; (800478c <runBWTask+0x1e8>)
 80045e4:	f7fd fff1 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidSlow);
 80045e8:	4869      	ldr	r0, [pc, #420]	; (8004790 <runBWTask+0x1ec>)
 80045ea:	f7fd ffee 	bl	80025ca <PIDConfigReset>
        PIDConfigReset(&pidFast);
 80045ee:	4869      	ldr	r0, [pc, #420]	; (8004794 <runBWTask+0x1f0>)
 80045f0:	f7fd ffeb 	bl	80025ca <PIDConfigReset>

        __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 80045f4:	2201      	movs	r2, #1
 80045f6:	2104      	movs	r1, #4
 80045f8:	4867      	ldr	r0, [pc, #412]	; (8004798 <runBWTask+0x1f4>)
 80045fa:	f003 fbe7 	bl	8007dcc <HAL_GPIO_WritePin>
 80045fe:	2200      	movs	r2, #0
 8004600:	2108      	movs	r1, #8
 8004602:	4865      	ldr	r0, [pc, #404]	; (8004798 <runBWTask+0x1f4>)
 8004604:	f003 fbe2 	bl	8007dcc <HAL_GPIO_WritePin>
 8004608:	2201      	movs	r2, #1
 800460a:	2120      	movs	r1, #32
 800460c:	4862      	ldr	r0, [pc, #392]	; (8004798 <runBWTask+0x1f4>)
 800460e:	f003 fbdd 	bl	8007dcc <HAL_GPIO_WritePin>
 8004612:	2200      	movs	r2, #0
 8004614:	2110      	movs	r1, #16
 8004616:	4860      	ldr	r0, [pc, #384]	; (8004798 <runBWTask+0x1f4>)
 8004618:	f003 fbd8 	bl	8007dcc <HAL_GPIO_WritePin>

        __ON_TASK_END(&htim8, prevTask, curTask);
 800461c:	4b5f      	ldr	r3, [pc, #380]	; (800479c <runBWTask+0x1f8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	635a      	str	r2, [r3, #52]	; 0x34
 8004624:	4b5d      	ldr	r3, [pc, #372]	; (800479c <runBWTask+0x1f8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
 800462c:	4b51      	ldr	r3, [pc, #324]	; (8004774 <runBWTask+0x1d0>)
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <runBWTask+0x1fc>)
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <runBWTask+0x1d0>)
 8004636:	2211      	movs	r2, #17
 8004638:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 800463a:	4b5a      	ldr	r3, [pc, #360]	; (80047a4 <runBWTask+0x200>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]

        __CLEAR_CURCMD(curCmd);
 8004640:	4b59      	ldr	r3, [pc, #356]	; (80047a8 <runBWTask+0x204>)
 8004642:	2264      	movs	r2, #100	; 0x64
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	4b58      	ldr	r3, [pc, #352]	; (80047a8 <runBWTask+0x204>)
 8004648:	2200      	movs	r2, #0
 800464a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800464c:	4a57      	ldr	r2, [pc, #348]	; (80047ac <runBWTask+0x208>)
 800464e:	210f      	movs	r1, #15
 8004650:	4857      	ldr	r0, [pc, #348]	; (80047b0 <runBWTask+0x20c>)
 8004652:	f00b f867 	bl	800f724 <sniprintf>
 8004656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800465a:	2206      	movs	r2, #6
 800465c:	4955      	ldr	r1, [pc, #340]	; (80047b4 <runBWTask+0x210>)
 800465e:	4856      	ldr	r0, [pc, #344]	; (80047b8 <runBWTask+0x214>)
 8004660:	f006 fee7 	bl	800b432 <HAL_UART_Transmit>

        last_curTask_tick = HAL_GetTick();
 8004664:	f002 fc72 	bl	8006f4c <HAL_GetTick>
 8004668:	4603      	mov	r3, r0
 800466a:	4a54      	ldr	r2, [pc, #336]	; (80047bc <runBWTask+0x218>)
 800466c:	6013      	str	r3, [r2, #0]
        do
        {
          if (!manualMode)
 800466e:	4b44      	ldr	r3, [pc, #272]	; (8004780 <runBWTask+0x1dc>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d07b      	beq.n	800476e <runBWTask+0x1ca>
            break;
          if (HAL_GetTick() - last_curTask_tick >= 10)
 8004676:	f002 fc69 	bl	8006f4c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <runBWTask+0x218>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b09      	cmp	r3, #9
 8004684:	d9f3      	bls.n	800466e <runBWTask+0xca>
          {
            StraightLineMove(SPEED_MODE_T);
 8004686:	2000      	movs	r0, #0
 8004688:	f7fd fff2 	bl	8002670 <StraightLineMove>
            last_curTask_tick = HAL_GetTick();
 800468c:	f002 fc5e 	bl	8006f4c <HAL_GetTick>
 8004690:	4603      	mov	r3, r0
 8004692:	4a4a      	ldr	r2, [pc, #296]	; (80047bc <runBWTask+0x218>)
 8004694:	6013      	str	r3, [r2, #0]
          if (!manualMode)
 8004696:	e7ea      	b.n	800466e <runBWTask+0xca>
        } while (1);
      }
      else
      {
        //			  osDelay(5000); // for video demo only
        targetDist = (float)curCmd.val;
 8004698:	4b43      	ldr	r3, [pc, #268]	; (80047a8 <runBWTask+0x204>)
 800469a:	885b      	ldrh	r3, [r3, #2]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <runBWTask+0x1d4>)
 80046a6:	edc3 7a00 	vstr	s15, [r3]
        // for target distance lesser than 15, move mode must be forced to SLOW
        if (targetDist <= 15)
 80046aa:	4b33      	ldr	r3, [pc, #204]	; (8004778 <runBWTask+0x1d4>)
 80046ac:	edd3 7a00 	vldr	s15, [r3]
 80046b0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80046b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	d802      	bhi.n	80046c4 <runBWTask+0x120>
          moveMode = SLOW;
 80046be:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <runBWTask+0x21c>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
        if (moveMode == SLOW)
 80046c4:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <runBWTask+0x21c>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <runBWTask+0x134>
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80046cc:	2200      	movs	r2, #0
 80046ce:	2100      	movs	r1, #0
 80046d0:	4829      	ldr	r0, [pc, #164]	; (8004778 <runBWTask+0x1d4>)
 80046d2:	f7fe f985 	bl	80029e0 <RobotMoveDist>
 80046d6:	e004      	b.n	80046e2 <runBWTask+0x13e>
        }
        else
        {
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_2);
 80046d8:	2202      	movs	r2, #2
 80046da:	2100      	movs	r1, #0
 80046dc:	4826      	ldr	r0, [pc, #152]	; (8004778 <runBWTask+0x1d4>)
 80046de:	f7fe f97f 	bl	80029e0 <RobotMoveDist>
        }

        __ON_TASK_END(&htim8, prevTask, curTask);
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <runBWTask+0x1f8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	635a      	str	r2, [r3, #52]	; 0x34
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <runBWTask+0x1f8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <runBWTask+0x1d0>)
 80046f4:	781a      	ldrb	r2, [r3, #0]
 80046f6:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <runBWTask+0x1fc>)
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <runBWTask+0x1d0>)
 80046fc:	2211      	movs	r2, #17
 80046fe:	701a      	strb	r2, [r3, #0]
        clickOnce = 0;
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <runBWTask+0x200>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <runBWTask+0x220>)
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <runBWTask+0x220>)
 800470c:	785b      	ldrb	r3, [r3, #1]
 800470e:	429a      	cmp	r2, r3
 8004710:	d112      	bne.n	8004738 <runBWTask+0x194>
        {
          __CLEAR_CURCMD(curCmd);
 8004712:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <runBWTask+0x204>)
 8004714:	2264      	movs	r2, #100	; 0x64
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <runBWTask+0x204>)
 800471a:	2200      	movs	r2, #0
 800471c:	805a      	strh	r2, [r3, #2]
          __ACK_TASK_DONE(&huart3, rxMsg);
 800471e:	4a23      	ldr	r2, [pc, #140]	; (80047ac <runBWTask+0x208>)
 8004720:	210f      	movs	r1, #15
 8004722:	4823      	ldr	r0, [pc, #140]	; (80047b0 <runBWTask+0x20c>)
 8004724:	f00a fffe 	bl	800f724 <sniprintf>
 8004728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800472c:	2206      	movs	r2, #6
 800472e:	4921      	ldr	r1, [pc, #132]	; (80047b4 <runBWTask+0x210>)
 8004730:	4821      	ldr	r0, [pc, #132]	; (80047b8 <runBWTask+0x214>)
 8004732:	f006 fe7e 	bl	800b432 <HAL_UART_Transmit>
 8004736:	e739      	b.n	80045ac <runBWTask+0x8>
        }
        else
          __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004738:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <runBWTask+0x220>)
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	4a1a      	ldr	r2, [pc, #104]	; (80047a8 <runBWTask+0x204>)
 800473e:	4921      	ldr	r1, [pc, #132]	; (80047c4 <runBWTask+0x220>)
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <runBWTask+0x220>)
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	3301      	adds	r3, #1
 800474e:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <runBWTask+0x220>)
 8004750:	7892      	ldrb	r2, [r2, #2]
 8004752:	fb93 f1f2 	sdiv	r1, r3, r2
 8004756:	fb01 f202 	mul.w	r2, r1, r2
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <runBWTask+0x220>)
 8004760:	705a      	strb	r2, [r3, #1]
 8004762:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <runBWTask+0x224>)
 8004764:	210f      	movs	r1, #15
 8004766:	4812      	ldr	r0, [pc, #72]	; (80047b0 <runBWTask+0x20c>)
 8004768:	f00a ffdc 	bl	800f724 <sniprintf>
 800476c:	e71e      	b.n	80045ac <runBWTask+0x8>
            break;
 800476e:	bf00      	nop
    if (curTask != TASK_MOVE_BACKWARD)
 8004770:	e71c      	b.n	80045ac <runBWTask+0x8>
 8004772:	bf00      	nop
 8004774:	20000134 	.word	0x20000134
 8004778:	200004f8 	.word	0x200004f8
 800477c:	200004fe 	.word	0x200004fe
 8004780:	200004e0 	.word	0x200004e0
 8004784:	200004e8 	.word	0x200004e8
 8004788:	200004ee 	.word	0x200004ee
 800478c:	20000518 	.word	0x20000518
 8004790:	20000504 	.word	0x20000504
 8004794:	2000052c 	.word	0x2000052c
 8004798:	40020000 	.word	0x40020000
 800479c:	200003c4 	.word	0x200003c4
 80047a0:	20000135 	.word	0x20000135
 80047a4:	20000564 	.word	0x20000564
 80047a8:	200004cc 	.word	0x200004cc
 80047ac:	0801013c 	.word	0x0801013c
 80047b0:	200004d0 	.word	0x200004d0
 80047b4:	08010144 	.word	0x08010144
 80047b8:	2000040c 	.word	0x2000040c
 80047bc:	200004f4 	.word	0x200004f4
 80047c0:	20000136 	.word	0x20000136
 80047c4:	20000498 	.word	0x20000498
 80047c8:	0801014c 	.word	0x0801014c

080047cc <runFLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFLTask */
void runFLTask(void *argument)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFLTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FL)
 80047d4:	4b94      	ldr	r3, [pc, #592]	; (8004a28 <runFLTask+0x25c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d004      	beq.n	80047e6 <runFLTask+0x1a>
      osDelay(1000);
 80047dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047e0:	f007 ff72 	bl	800c6c8 <osDelay>
 80047e4:	e7f6      	b.n	80047d4 <runFLTask+0x8>
    else
    {

      switch (curCmd.val)
 80047e6:	4b91      	ldr	r3, [pc, #580]	; (8004a2c <runFLTask+0x260>)
 80047e8:	885b      	ldrh	r3, [r3, #2]
 80047ea:	2b14      	cmp	r3, #20
 80047ec:	f000 8083 	beq.w	80048f6 <runFLTask+0x12a>
 80047f0:	2b1e      	cmp	r3, #30
 80047f2:	f040 80f8 	bne.w	80049e6 <runFLTask+0x21a>
      {
      case 30: // FL30 (3x2)
        targetDist = 5;
 80047f6:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <runFLTask+0x264>)
 80047f8:	4a8e      	ldr	r2, [pc, #568]	; (8004a34 <runFLTask+0x268>)
 80047fa:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80047fc:	2200      	movs	r2, #0
 80047fe:	2101      	movs	r1, #1
 8004800:	488b      	ldr	r0, [pc, #556]	; (8004a30 <runFLTask+0x264>)
 8004802:	f7fe f8ed 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL30], &htim8, &htim1, targetAngle);
 8004806:	4b8c      	ldr	r3, [pc, #560]	; (8004a38 <runFLTask+0x26c>)
 8004808:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800480c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004a3c <runFLTask+0x270>
 8004810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	dd02      	ble.n	8004820 <runFLTask+0x54>
 800481a:	f240 1309 	movw	r3, #265	; 0x109
 800481e:	e012      	b.n	8004846 <runFLTask+0x7a>
 8004820:	4b85      	ldr	r3, [pc, #532]	; (8004a38 <runFLTask+0x26c>)
 8004822:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8004826:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004a40 <runFLTask+0x274>
 800482a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d501      	bpl.n	8004838 <runFLTask+0x6c>
 8004834:	2346      	movs	r3, #70	; 0x46
 8004836:	e006      	b.n	8004846 <runFLTask+0x7a>
 8004838:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <runFLTask+0x26c>)
 800483a:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 800483e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004842:	ee17 3a90 	vmov	r3, s15
 8004846:	4a7f      	ldr	r2, [pc, #508]	; (8004a44 <runFLTask+0x278>)
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	6413      	str	r3, [r2, #64]	; 0x40
 800484c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004850:	f002 fb88 	bl	8006f64 <HAL_Delay>
 8004854:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <runFLTask+0x26c>)
 8004856:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800485a:	4a7b      	ldr	r2, [pc, #492]	; (8004a48 <runFLTask+0x27c>)
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b76      	ldr	r3, [pc, #472]	; (8004a38 <runFLTask+0x26c>)
 8004860:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	2104      	movs	r1, #4
 8004872:	4876      	ldr	r0, [pc, #472]	; (8004a4c <runFLTask+0x280>)
 8004874:	f003 faaa 	bl	8007dcc <HAL_GPIO_WritePin>
 8004878:	4b6f      	ldr	r3, [pc, #444]	; (8004a38 <runFLTask+0x26c>)
 800487a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800487e:	2b00      	cmp	r3, #0
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	2108      	movs	r1, #8
 800488c:	486f      	ldr	r0, [pc, #444]	; (8004a4c <runFLTask+0x280>)
 800488e:	f003 fa9d 	bl	8007dcc <HAL_GPIO_WritePin>
 8004892:	4b69      	ldr	r3, [pc, #420]	; (8004a38 <runFLTask+0x26c>)
 8004894:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	2120      	movs	r1, #32
 80048a6:	4869      	ldr	r0, [pc, #420]	; (8004a4c <runFLTask+0x280>)
 80048a8:	f003 fa90 	bl	8007dcc <HAL_GPIO_WritePin>
 80048ac:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <runFLTask+0x26c>)
 80048ae:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	2110      	movs	r1, #16
 80048c0:	4862      	ldr	r0, [pc, #392]	; (8004a4c <runFLTask+0x280>)
 80048c2:	f003 fa83 	bl	8007dcc <HAL_GPIO_WritePin>
 80048c6:	4b5c      	ldr	r3, [pc, #368]	; (8004a38 <runFLTask+0x26c>)
 80048c8:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
 80048cc:	4b60      	ldr	r3, [pc, #384]	; (8004a50 <runFLTask+0x284>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34
 80048d2:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <runFLTask+0x26c>)
 80048d4:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 80048d8:	4b5d      	ldr	r3, [pc, #372]	; (8004a50 <runFLTask+0x284>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80048de:	485a      	ldr	r0, [pc, #360]	; (8004a48 <runFLTask+0x27c>)
 80048e0:	f7fe fcba 	bl	8003258 <RobotTurn>
        targetDist = 3;
 80048e4:	4b52      	ldr	r3, [pc, #328]	; (8004a30 <runFLTask+0x264>)
 80048e6:	4a5b      	ldr	r2, [pc, #364]	; (8004a54 <runFLTask+0x288>)
 80048e8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2100      	movs	r1, #0
 80048ee:	4850      	ldr	r0, [pc, #320]	; (8004a30 <runFLTask+0x264>)
 80048f0:	f7fe f876 	bl	80029e0 <RobotMoveDist>
        break;
 80048f4:	e111      	b.n	8004b1a <runFLTask+0x34e>
      case 20: // FL20 (outdoor 3x1)
        targetDist = 5;
 80048f6:	4b4e      	ldr	r3, [pc, #312]	; (8004a30 <runFLTask+0x264>)
 80048f8:	4a4e      	ldr	r2, [pc, #312]	; (8004a34 <runFLTask+0x268>)
 80048fa:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2101      	movs	r1, #1
 8004900:	484b      	ldr	r0, [pc, #300]	; (8004a30 <runFLTask+0x264>)
 8004902:	f7fe f86d 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL20], &htim8, &htim1, targetAngle);
 8004906:	4b4c      	ldr	r3, [pc, #304]	; (8004a38 <runFLTask+0x26c>)
 8004908:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800490c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004a3c <runFLTask+0x270>
 8004910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004918:	dd02      	ble.n	8004920 <runFLTask+0x154>
 800491a:	f240 1309 	movw	r3, #265	; 0x109
 800491e:	e012      	b.n	8004946 <runFLTask+0x17a>
 8004920:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <runFLTask+0x26c>)
 8004922:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004926:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004a40 <runFLTask+0x274>
 800492a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	d501      	bpl.n	8004938 <runFLTask+0x16c>
 8004934:	2346      	movs	r3, #70	; 0x46
 8004936:	e006      	b.n	8004946 <runFLTask+0x17a>
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <runFLTask+0x26c>)
 800493a:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 3a90 	vmov	r3, s15
 8004946:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <runFLTask+0x278>)
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	6413      	str	r3, [r2, #64]	; 0x40
 800494c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004950:	f002 fb08 	bl	8006f64 <HAL_Delay>
 8004954:	4b38      	ldr	r3, [pc, #224]	; (8004a38 <runFLTask+0x26c>)
 8004956:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800495a:	4a3b      	ldr	r2, [pc, #236]	; (8004a48 <runFLTask+0x27c>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <runFLTask+0x26c>)
 8004960:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	2104      	movs	r1, #4
 8004972:	4836      	ldr	r0, [pc, #216]	; (8004a4c <runFLTask+0x280>)
 8004974:	f003 fa2a 	bl	8007dcc <HAL_GPIO_WritePin>
 8004978:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <runFLTask+0x26c>)
 800497a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	2108      	movs	r1, #8
 800498c:	482f      	ldr	r0, [pc, #188]	; (8004a4c <runFLTask+0x280>)
 800498e:	f003 fa1d 	bl	8007dcc <HAL_GPIO_WritePin>
 8004992:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <runFLTask+0x26c>)
 8004994:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	2120      	movs	r1, #32
 80049a6:	4829      	ldr	r0, [pc, #164]	; (8004a4c <runFLTask+0x280>)
 80049a8:	f003 fa10 	bl	8007dcc <HAL_GPIO_WritePin>
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <runFLTask+0x26c>)
 80049ae:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	2110      	movs	r1, #16
 80049c0:	4822      	ldr	r0, [pc, #136]	; (8004a4c <runFLTask+0x280>)
 80049c2:	f003 fa03 	bl	8007dcc <HAL_GPIO_WritePin>
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <runFLTask+0x26c>)
 80049c8:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <runFLTask+0x284>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	635a      	str	r2, [r3, #52]	; 0x34
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <runFLTask+0x26c>)
 80049d4:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <runFLTask+0x284>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80049de:	481a      	ldr	r0, [pc, #104]	; (8004a48 <runFLTask+0x27c>)
 80049e0:	f7fe fc3a 	bl	8003258 <RobotTurn>
        break;
 80049e4:	e099      	b.n	8004b1a <runFLTask+0x34e>
      default: // FL00 (indoor 3x1)
        targetDist = 11;
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <runFLTask+0x264>)
 80049e8:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <runFLTask+0x28c>)
 80049ea:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2101      	movs	r1, #1
 80049f0:	480f      	ldr	r0, [pc, #60]	; (8004a30 <runFLTask+0x264>)
 80049f2:	f7fd fff5 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FL00], &htim8, &htim1, targetAngle);
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <runFLTask+0x26c>)
 80049f8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80049fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a3c <runFLTask+0x270>
 8004a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	dd02      	ble.n	8004a10 <runFLTask+0x244>
 8004a0a:	f240 1309 	movw	r3, #265	; 0x109
 8004a0e:	e02c      	b.n	8004a6a <runFLTask+0x29e>
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <runFLTask+0x26c>)
 8004a12:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004a16:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004a40 <runFLTask+0x274>
 8004a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	d51b      	bpl.n	8004a5c <runFLTask+0x290>
 8004a24:	2346      	movs	r3, #70	; 0x46
 8004a26:	e020      	b.n	8004a6a <runFLTask+0x29e>
 8004a28:	20000134 	.word	0x20000134
 8004a2c:	200004cc 	.word	0x200004cc
 8004a30:	200004f8 	.word	0x200004f8
 8004a34:	40a00000 	.word	0x40a00000
 8004a38:	20000004 	.word	0x20000004
 8004a3c:	43848000 	.word	0x43848000
 8004a40:	428c0000 	.word	0x428c0000
 8004a44:	200002a4 	.word	0x200002a4
 8004a48:	200004e4 	.word	0x200004e4
 8004a4c:	40020000 	.word	0x40020000
 8004a50:	200003c4 	.word	0x200003c4
 8004a54:	40400000 	.word	0x40400000
 8004a58:	41300000 	.word	0x41300000
 8004a5c:	4b4e      	ldr	r3, [pc, #312]	; (8004b98 <runFLTask+0x3cc>)
 8004a5e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a66:	ee17 3a90 	vmov	r3, s15
 8004a6a:	4a4c      	ldr	r2, [pc, #304]	; (8004b9c <runFLTask+0x3d0>)
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004a74:	f002 fa76 	bl	8006f64 <HAL_Delay>
 8004a78:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <runFLTask+0x3cc>)
 8004a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a7c:	4a48      	ldr	r2, [pc, #288]	; (8004ba0 <runFLTask+0x3d4>)
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b45      	ldr	r3, [pc, #276]	; (8004b98 <runFLTask+0x3cc>)
 8004a82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	2104      	movs	r1, #4
 8004a94:	4843      	ldr	r0, [pc, #268]	; (8004ba4 <runFLTask+0x3d8>)
 8004a96:	f003 f999 	bl	8007dcc <HAL_GPIO_WritePin>
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <runFLTask+0x3cc>)
 8004a9c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2108      	movs	r1, #8
 8004aae:	483d      	ldr	r0, [pc, #244]	; (8004ba4 <runFLTask+0x3d8>)
 8004ab0:	f003 f98c 	bl	8007dcc <HAL_GPIO_WritePin>
 8004ab4:	4b38      	ldr	r3, [pc, #224]	; (8004b98 <runFLTask+0x3cc>)
 8004ab6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2120      	movs	r1, #32
 8004ac8:	4836      	ldr	r0, [pc, #216]	; (8004ba4 <runFLTask+0x3d8>)
 8004aca:	f003 f97f 	bl	8007dcc <HAL_GPIO_WritePin>
 8004ace:	4b32      	ldr	r3, [pc, #200]	; (8004b98 <runFLTask+0x3cc>)
 8004ad0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	4830      	ldr	r0, [pc, #192]	; (8004ba4 <runFLTask+0x3d8>)
 8004ae4:	f003 f972 	bl	8007dcc <HAL_GPIO_WritePin>
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <runFLTask+0x3cc>)
 8004aea:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8004aee:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <runFLTask+0x3dc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	635a      	str	r2, [r3, #52]	; 0x34
 8004af4:	4b28      	ldr	r3, [pc, #160]	; (8004b98 <runFLTask+0x3cc>)
 8004af6:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8004afa:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <runFLTask+0x3dc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004b00:	4827      	ldr	r0, [pc, #156]	; (8004ba0 <runFLTask+0x3d4>)
 8004b02:	f7fe fba9 	bl	8003258 <RobotTurn>
        targetDist = 2;
 8004b06:	4b29      	ldr	r3, [pc, #164]	; (8004bac <runFLTask+0x3e0>)
 8004b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b0c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2101      	movs	r1, #1
 8004b12:	4826      	ldr	r0, [pc, #152]	; (8004bac <runFLTask+0x3e0>)
 8004b14:	f7fd ff64 	bl	80029e0 <RobotMoveDist>

        break;
 8004b18:	bf00      	nop
      }
      clickOnce = 0;
 8004b1a:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <runFLTask+0x3e4>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <runFLTask+0x3e8>)
 8004b22:	781a      	ldrb	r2, [r3, #0]
 8004b24:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <runFLTask+0x3ec>)
 8004b26:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004b28:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <runFLTask+0x3e8>)
 8004b2a:	2211      	movs	r2, #17
 8004b2c:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <runFLTask+0x3f0>)
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <runFLTask+0x3f0>)
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d112      	bne.n	8004b60 <runFLTask+0x394>
      {
        __CLEAR_CURCMD(curCmd);
 8004b3a:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <runFLTask+0x3f4>)
 8004b3c:	2264      	movs	r2, #100	; 0x64
 8004b3e:	701a      	strb	r2, [r3, #0]
 8004b40:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <runFLTask+0x3f4>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004b46:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <runFLTask+0x3f8>)
 8004b48:	210f      	movs	r1, #15
 8004b4a:	481f      	ldr	r0, [pc, #124]	; (8004bc8 <runFLTask+0x3fc>)
 8004b4c:	f00a fdea 	bl	800f724 <sniprintf>
 8004b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b54:	2206      	movs	r2, #6
 8004b56:	491d      	ldr	r1, [pc, #116]	; (8004bcc <runFLTask+0x400>)
 8004b58:	481d      	ldr	r0, [pc, #116]	; (8004bd0 <runFLTask+0x404>)
 8004b5a:	f006 fc6a 	bl	800b432 <HAL_UART_Transmit>
 8004b5e:	e639      	b.n	80047d4 <runFLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004b60:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <runFLTask+0x3f0>)
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <runFLTask+0x3f4>)
 8004b66:	4915      	ldr	r1, [pc, #84]	; (8004bbc <runFLTask+0x3f0>)
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <runFLTask+0x3f0>)
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	3301      	adds	r3, #1
 8004b76:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <runFLTask+0x3f0>)
 8004b78:	7892      	ldrb	r2, [r2, #2]
 8004b7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8004b7e:	fb01 f202 	mul.w	r2, r1, r2
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <runFLTask+0x3f0>)
 8004b88:	705a      	strb	r2, [r3, #1]
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <runFLTask+0x408>)
 8004b8c:	210f      	movs	r1, #15
 8004b8e:	480e      	ldr	r0, [pc, #56]	; (8004bc8 <runFLTask+0x3fc>)
 8004b90:	f00a fdc8 	bl	800f724 <sniprintf>
    if (curTask != TASK_FL)
 8004b94:	e61e      	b.n	80047d4 <runFLTask+0x8>
 8004b96:	bf00      	nop
 8004b98:	20000004 	.word	0x20000004
 8004b9c:	200002a4 	.word	0x200002a4
 8004ba0:	200004e4 	.word	0x200004e4
 8004ba4:	40020000 	.word	0x40020000
 8004ba8:	200003c4 	.word	0x200003c4
 8004bac:	200004f8 	.word	0x200004f8
 8004bb0:	20000564 	.word	0x20000564
 8004bb4:	20000134 	.word	0x20000134
 8004bb8:	20000135 	.word	0x20000135
 8004bbc:	20000498 	.word	0x20000498
 8004bc0:	200004cc 	.word	0x200004cc
 8004bc4:	0801013c 	.word	0x0801013c
 8004bc8:	200004d0 	.word	0x200004d0
 8004bcc:	08010144 	.word	0x08010144
 8004bd0:	2000040c 	.word	0x2000040c
 8004bd4:	0801014c 	.word	0x0801014c

08004bd8 <runFRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runFRTask */
void runFRTask(void *argument)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runFRTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_FR)
 8004be0:	4b99      	ldr	r3, [pc, #612]	; (8004e48 <runFRTask+0x270>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	d004      	beq.n	8004bf2 <runFRTask+0x1a>
      osDelay(1000);
 8004be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bec:	f007 fd6c 	bl	800c6c8 <osDelay>
 8004bf0:	e7f6      	b.n	8004be0 <runFRTask+0x8>
    else
    {

      switch (curCmd.val)
 8004bf2:	4b96      	ldr	r3, [pc, #600]	; (8004e4c <runFRTask+0x274>)
 8004bf4:	885b      	ldrh	r3, [r3, #2]
 8004bf6:	2b14      	cmp	r3, #20
 8004bf8:	f000 8085 	beq.w	8004d06 <runFRTask+0x12e>
 8004bfc:	2b1e      	cmp	r3, #30
 8004bfe:	f040 8101 	bne.w	8004e04 <runFRTask+0x22c>
      {
      case 30: // FR30 (outdoor)
        targetDist = 4;
 8004c02:	4b93      	ldr	r3, [pc, #588]	; (8004e50 <runFRTask+0x278>)
 8004c04:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004c08:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4890      	ldr	r0, [pc, #576]	; (8004e50 <runFRTask+0x278>)
 8004c10:	f7fd fee6 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR30], &htim8, &htim1, targetAngle);
 8004c14:	4b8f      	ldr	r3, [pc, #572]	; (8004e54 <runFRTask+0x27c>)
 8004c16:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004c1a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8004e58 <runFRTask+0x280>
 8004c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c26:	dd02      	ble.n	8004c2e <runFRTask+0x56>
 8004c28:	f240 1309 	movw	r3, #265	; 0x109
 8004c2c:	e012      	b.n	8004c54 <runFRTask+0x7c>
 8004c2e:	4b89      	ldr	r3, [pc, #548]	; (8004e54 <runFRTask+0x27c>)
 8004c30:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004c34:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8004e5c <runFRTask+0x284>
 8004c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c40:	d501      	bpl.n	8004c46 <runFRTask+0x6e>
 8004c42:	2346      	movs	r3, #70	; 0x46
 8004c44:	e006      	b.n	8004c54 <runFRTask+0x7c>
 8004c46:	4b83      	ldr	r3, [pc, #524]	; (8004e54 <runFRTask+0x27c>)
 8004c48:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8004c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c50:	ee17 3a90 	vmov	r3, s15
 8004c54:	4a82      	ldr	r2, [pc, #520]	; (8004e60 <runFRTask+0x288>)
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c5e:	f002 f981 	bl	8006f64 <HAL_Delay>
 8004c62:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <runFRTask+0x27c>)
 8004c64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c68:	4a7e      	ldr	r2, [pc, #504]	; (8004e64 <runFRTask+0x28c>)
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b79      	ldr	r3, [pc, #484]	; (8004e54 <runFRTask+0x27c>)
 8004c6e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2104      	movs	r1, #4
 8004c80:	4879      	ldr	r0, [pc, #484]	; (8004e68 <runFRTask+0x290>)
 8004c82:	f003 f8a3 	bl	8007dcc <HAL_GPIO_WritePin>
 8004c86:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <runFRTask+0x27c>)
 8004c88:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf14      	ite	ne
 8004c90:	2301      	movne	r3, #1
 8004c92:	2300      	moveq	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	2108      	movs	r1, #8
 8004c9a:	4873      	ldr	r0, [pc, #460]	; (8004e68 <runFRTask+0x290>)
 8004c9c:	f003 f896 	bl	8007dcc <HAL_GPIO_WritePin>
 8004ca0:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <runFRTask+0x27c>)
 8004ca2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2120      	movs	r1, #32
 8004cb4:	486c      	ldr	r0, [pc, #432]	; (8004e68 <runFRTask+0x290>)
 8004cb6:	f003 f889 	bl	8007dcc <HAL_GPIO_WritePin>
 8004cba:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <runFRTask+0x27c>)
 8004cbc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2110      	movs	r1, #16
 8004cce:	4866      	ldr	r0, [pc, #408]	; (8004e68 <runFRTask+0x290>)
 8004cd0:	f003 f87c 	bl	8007dcc <HAL_GPIO_WritePin>
 8004cd4:	4b5f      	ldr	r3, [pc, #380]	; (8004e54 <runFRTask+0x27c>)
 8004cd6:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8004cda:	4b64      	ldr	r3, [pc, #400]	; (8004e6c <runFRTask+0x294>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce0:	4b5c      	ldr	r3, [pc, #368]	; (8004e54 <runFRTask+0x27c>)
 8004ce2:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8004ce6:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <runFRTask+0x294>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004cec:	485d      	ldr	r0, [pc, #372]	; (8004e64 <runFRTask+0x28c>)
 8004cee:	f7fe fab3 	bl	8003258 <RobotTurn>
        targetDist = 2;
 8004cf2:	4b57      	ldr	r3, [pc, #348]	; (8004e50 <runFRTask+0x278>)
 8004cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cf8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4854      	ldr	r0, [pc, #336]	; (8004e50 <runFRTask+0x278>)
 8004d00:	f7fd fe6e 	bl	80029e0 <RobotMoveDist>
        break;
 8004d04:	e116      	b.n	8004f34 <runFRTask+0x35c>
      case 20: // FR20 (outdoor 3x1)
        targetDist = 4;
 8004d06:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <runFRTask+0x278>)
 8004d08:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8004d0c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2101      	movs	r1, #1
 8004d12:	484f      	ldr	r0, [pc, #316]	; (8004e50 <runFRTask+0x278>)
 8004d14:	f7fd fe64 	bl	80029e0 <RobotMoveDist>
        osDelay(10);
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f007 fcd5 	bl	800c6c8 <osDelay>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR20], &htim8, &htim1, targetAngle);
 8004d1e:	4b4d      	ldr	r3, [pc, #308]	; (8004e54 <runFRTask+0x27c>)
 8004d20:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004d24:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004e58 <runFRTask+0x280>
 8004d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d30:	dd02      	ble.n	8004d38 <runFRTask+0x160>
 8004d32:	f240 1309 	movw	r3, #265	; 0x109
 8004d36:	e012      	b.n	8004d5e <runFRTask+0x186>
 8004d38:	4b46      	ldr	r3, [pc, #280]	; (8004e54 <runFRTask+0x27c>)
 8004d3a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004d3e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004e5c <runFRTask+0x284>
 8004d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	d501      	bpl.n	8004d50 <runFRTask+0x178>
 8004d4c:	2346      	movs	r3, #70	; 0x46
 8004d4e:	e006      	b.n	8004d5e <runFRTask+0x186>
 8004d50:	4b40      	ldr	r3, [pc, #256]	; (8004e54 <runFRTask+0x27c>)
 8004d52:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5a:	ee17 3a90 	vmov	r3, s15
 8004d5e:	4a40      	ldr	r2, [pc, #256]	; (8004e60 <runFRTask+0x288>)
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6413      	str	r3, [r2, #64]	; 0x40
 8004d64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d68:	f002 f8fc 	bl	8006f64 <HAL_Delay>
 8004d6c:	4b39      	ldr	r3, [pc, #228]	; (8004e54 <runFRTask+0x27c>)
 8004d6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004d72:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <runFRTask+0x28c>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <runFRTask+0x27c>)
 8004d78:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	2104      	movs	r1, #4
 8004d8a:	4837      	ldr	r0, [pc, #220]	; (8004e68 <runFRTask+0x290>)
 8004d8c:	f003 f81e 	bl	8007dcc <HAL_GPIO_WritePin>
 8004d90:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <runFRTask+0x27c>)
 8004d92:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	2108      	movs	r1, #8
 8004da4:	4830      	ldr	r0, [pc, #192]	; (8004e68 <runFRTask+0x290>)
 8004da6:	f003 f811 	bl	8007dcc <HAL_GPIO_WritePin>
 8004daa:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <runFRTask+0x27c>)
 8004dac:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2120      	movs	r1, #32
 8004dbe:	482a      	ldr	r0, [pc, #168]	; (8004e68 <runFRTask+0x290>)
 8004dc0:	f003 f804 	bl	8007dcc <HAL_GPIO_WritePin>
 8004dc4:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <runFRTask+0x27c>)
 8004dc6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2110      	movs	r1, #16
 8004dd8:	4823      	ldr	r0, [pc, #140]	; (8004e68 <runFRTask+0x290>)
 8004dda:	f002 fff7 	bl	8007dcc <HAL_GPIO_WritePin>
 8004dde:	4b1d      	ldr	r3, [pc, #116]	; (8004e54 <runFRTask+0x27c>)
 8004de0:	f8b3 20c0 	ldrh.w	r2, [r3, #192]	; 0xc0
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <runFRTask+0x294>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <runFRTask+0x27c>)
 8004dec:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <runFRTask+0x294>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004df6:	481b      	ldr	r0, [pc, #108]	; (8004e64 <runFRTask+0x28c>)
 8004df8:	f7fe fa2e 	bl	8003258 <RobotTurn>
        osDelay(10);
 8004dfc:	200a      	movs	r0, #10
 8004dfe:	f007 fc63 	bl	800c6c8 <osDelay>
        break;
 8004e02:	e097      	b.n	8004f34 <runFRTask+0x35c>
      default: // FR00 (indoor 3x2)
        targetDist = 3.5;
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <runFRTask+0x278>)
 8004e06:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <runFRTask+0x298>)
 8004e08:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4810      	ldr	r0, [pc, #64]	; (8004e50 <runFRTask+0x278>)
 8004e10:	f7fd fde6 	bl	80029e0 <RobotMoveDist>
        __SET_CMD_CONFIG(cfgs[CONFIG_FR00], &htim8, &htim1, targetAngle);
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <runFRTask+0x27c>)
 8004e16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004e1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004e58 <runFRTask+0x280>
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	dd02      	ble.n	8004e2e <runFRTask+0x256>
 8004e28:	f240 1309 	movw	r3, #265	; 0x109
 8004e2c:	e029      	b.n	8004e82 <runFRTask+0x2aa>
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <runFRTask+0x27c>)
 8004e30:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004e34:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004e5c <runFRTask+0x284>
 8004e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e40:	d518      	bpl.n	8004e74 <runFRTask+0x29c>
 8004e42:	2346      	movs	r3, #70	; 0x46
 8004e44:	e01d      	b.n	8004e82 <runFRTask+0x2aa>
 8004e46:	bf00      	nop
 8004e48:	20000134 	.word	0x20000134
 8004e4c:	200004cc 	.word	0x200004cc
 8004e50:	200004f8 	.word	0x200004f8
 8004e54:	20000004 	.word	0x20000004
 8004e58:	43848000 	.word	0x43848000
 8004e5c:	428c0000 	.word	0x428c0000
 8004e60:	200002a4 	.word	0x200002a4
 8004e64:	200004e4 	.word	0x200004e4
 8004e68:	40020000 	.word	0x40020000
 8004e6c:	200003c4 	.word	0x200003c4
 8004e70:	40600000 	.word	0x40600000
 8004e74:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <runFRTask+0x3d8>)
 8004e76:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e7e:	ee17 3a90 	vmov	r3, s15
 8004e82:	4a4c      	ldr	r2, [pc, #304]	; (8004fb4 <runFRTask+0x3dc>)
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6413      	str	r3, [r2, #64]	; 0x40
 8004e88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004e8c:	f002 f86a 	bl	8006f64 <HAL_Delay>
 8004e90:	4b47      	ldr	r3, [pc, #284]	; (8004fb0 <runFRTask+0x3d8>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	4a48      	ldr	r2, [pc, #288]	; (8004fb8 <runFRTask+0x3e0>)
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <runFRTask+0x3d8>)
 8004e9c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2104      	movs	r1, #4
 8004eae:	4843      	ldr	r0, [pc, #268]	; (8004fbc <runFRTask+0x3e4>)
 8004eb0:	f002 ff8c 	bl	8007dcc <HAL_GPIO_WritePin>
 8004eb4:	4b3e      	ldr	r3, [pc, #248]	; (8004fb0 <runFRTask+0x3d8>)
 8004eb6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2108      	movs	r1, #8
 8004ec8:	483c      	ldr	r0, [pc, #240]	; (8004fbc <runFRTask+0x3e4>)
 8004eca:	f002 ff7f 	bl	8007dcc <HAL_GPIO_WritePin>
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <runFRTask+0x3d8>)
 8004ed0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2120      	movs	r1, #32
 8004ee2:	4836      	ldr	r0, [pc, #216]	; (8004fbc <runFRTask+0x3e4>)
 8004ee4:	f002 ff72 	bl	8007dcc <HAL_GPIO_WritePin>
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <runFRTask+0x3d8>)
 8004eea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf14      	ite	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	2300      	moveq	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2110      	movs	r1, #16
 8004efc:	482f      	ldr	r0, [pc, #188]	; (8004fbc <runFRTask+0x3e4>)
 8004efe:	f002 ff65 	bl	8007dcc <HAL_GPIO_WritePin>
 8004f02:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <runFRTask+0x3d8>)
 8004f04:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8004f08:	4b2d      	ldr	r3, [pc, #180]	; (8004fc0 <runFRTask+0x3e8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f0e:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <runFRTask+0x3d8>)
 8004f10:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8004f14:	4b2a      	ldr	r3, [pc, #168]	; (8004fc0 <runFRTask+0x3e8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8004f1a:	4827      	ldr	r0, [pc, #156]	; (8004fb8 <runFRTask+0x3e0>)
 8004f1c:	f7fe f99c 	bl	8003258 <RobotTurn>
        targetDist = 2;
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <runFRTask+0x3ec>)
 8004f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f26:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4825      	ldr	r0, [pc, #148]	; (8004fc4 <runFRTask+0x3ec>)
 8004f2e:	f7fd fd57 	bl	80029e0 <RobotMoveDist>

        break;
 8004f32:	bf00      	nop
      }
      clickOnce = 0;
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <runFRTask+0x3f0>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <runFRTask+0x3f4>)
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <runFRTask+0x3f8>)
 8004f40:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8004f42:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <runFRTask+0x3f4>)
 8004f44:	2211      	movs	r2, #17
 8004f46:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8004f48:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <runFRTask+0x3fc>)
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <runFRTask+0x3fc>)
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d112      	bne.n	8004f7a <runFRTask+0x3a2>
      {
        __CLEAR_CURCMD(curCmd);
 8004f54:	4b20      	ldr	r3, [pc, #128]	; (8004fd8 <runFRTask+0x400>)
 8004f56:	2264      	movs	r2, #100	; 0x64
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <runFRTask+0x400>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8004f60:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <runFRTask+0x404>)
 8004f62:	210f      	movs	r1, #15
 8004f64:	481e      	ldr	r0, [pc, #120]	; (8004fe0 <runFRTask+0x408>)
 8004f66:	f00a fbdd 	bl	800f724 <sniprintf>
 8004f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f6e:	2206      	movs	r2, #6
 8004f70:	491c      	ldr	r1, [pc, #112]	; (8004fe4 <runFRTask+0x40c>)
 8004f72:	481d      	ldr	r0, [pc, #116]	; (8004fe8 <runFRTask+0x410>)
 8004f74:	f006 fa5d 	bl	800b432 <HAL_UART_Transmit>
 8004f78:	e632      	b.n	8004be0 <runFRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8004f7a:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <runFRTask+0x3fc>)
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <runFRTask+0x400>)
 8004f80:	4914      	ldr	r1, [pc, #80]	; (8004fd4 <runFRTask+0x3fc>)
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <runFRTask+0x3fc>)
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <runFRTask+0x3fc>)
 8004f92:	7892      	ldrb	r2, [r2, #2]
 8004f94:	fb93 f1f2 	sdiv	r1, r3, r2
 8004f98:	fb01 f202 	mul.w	r2, r1, r2
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <runFRTask+0x3fc>)
 8004fa2:	705a      	strb	r2, [r3, #1]
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <runFRTask+0x414>)
 8004fa6:	210f      	movs	r1, #15
 8004fa8:	480d      	ldr	r0, [pc, #52]	; (8004fe0 <runFRTask+0x408>)
 8004faa:	f00a fbbb 	bl	800f724 <sniprintf>
    if (curTask != TASK_FR)
 8004fae:	e617      	b.n	8004be0 <runFRTask+0x8>
 8004fb0:	20000004 	.word	0x20000004
 8004fb4:	200002a4 	.word	0x200002a4
 8004fb8:	200004e4 	.word	0x200004e4
 8004fbc:	40020000 	.word	0x40020000
 8004fc0:	200003c4 	.word	0x200003c4
 8004fc4:	200004f8 	.word	0x200004f8
 8004fc8:	20000564 	.word	0x20000564
 8004fcc:	20000134 	.word	0x20000134
 8004fd0:	20000135 	.word	0x20000135
 8004fd4:	20000498 	.word	0x20000498
 8004fd8:	200004cc 	.word	0x200004cc
 8004fdc:	0801013c 	.word	0x0801013c
 8004fe0:	200004d0 	.word	0x200004d0
 8004fe4:	08010144 	.word	0x08010144
 8004fe8:	2000040c 	.word	0x2000040c
 8004fec:	0801014c 	.word	0x0801014c

08004ff0 <runBLTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBLTask */
void runBLTask(void *argument)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBLTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BL)
 8004ff8:	4b96      	ldr	r3, [pc, #600]	; (8005254 <runBLTask+0x264>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d004      	beq.n	800500a <runBLTask+0x1a>
      osDelay(1000);
 8005000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005004:	f007 fb60 	bl	800c6c8 <osDelay>
 8005008:	e7f6      	b.n	8004ff8 <runBLTask+0x8>
    else
    {

      switch (curCmd.val)
 800500a:	4b93      	ldr	r3, [pc, #588]	; (8005258 <runBLTask+0x268>)
 800500c:	885b      	ldrh	r3, [r3, #2]
 800500e:	2b14      	cmp	r3, #20
 8005010:	f000 8084 	beq.w	800511c <runBLTask+0x12c>
 8005014:	2b1e      	cmp	r3, #30
 8005016:	f040 80fa 	bne.w	800520e <runBLTask+0x21e>
      {
      case 30: // BL30 (outdoor 3x2)
        targetDist = 1;
 800501a:	4b90      	ldr	r3, [pc, #576]	; (800525c <runBLTask+0x26c>)
 800501c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005020:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005022:	2200      	movs	r2, #0
 8005024:	2101      	movs	r1, #1
 8005026:	488d      	ldr	r0, [pc, #564]	; (800525c <runBLTask+0x26c>)
 8005028:	f7fd fcda 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL30], &htim8, &htim1, targetAngle);
 800502c:	4b8c      	ldr	r3, [pc, #560]	; (8005260 <runBLTask+0x270>)
 800502e:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8005032:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005264 <runBLTask+0x274>
 8005036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503e:	dd02      	ble.n	8005046 <runBLTask+0x56>
 8005040:	f240 1309 	movw	r3, #265	; 0x109
 8005044:	e012      	b.n	800506c <runBLTask+0x7c>
 8005046:	4b86      	ldr	r3, [pc, #536]	; (8005260 <runBLTask+0x270>)
 8005048:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 800504c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8005268 <runBLTask+0x278>
 8005050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005058:	d501      	bpl.n	800505e <runBLTask+0x6e>
 800505a:	2346      	movs	r3, #70	; 0x46
 800505c:	e006      	b.n	800506c <runBLTask+0x7c>
 800505e:	4b80      	ldr	r3, [pc, #512]	; (8005260 <runBLTask+0x270>)
 8005060:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8005064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005068:	ee17 3a90 	vmov	r3, s15
 800506c:	4a7f      	ldr	r2, [pc, #508]	; (800526c <runBLTask+0x27c>)
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
 8005072:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005076:	f001 ff75 	bl	8006f64 <HAL_Delay>
 800507a:	4b79      	ldr	r3, [pc, #484]	; (8005260 <runBLTask+0x270>)
 800507c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8005080:	4a7b      	ldr	r2, [pc, #492]	; (8005270 <runBLTask+0x280>)
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b76      	ldr	r3, [pc, #472]	; (8005260 <runBLTask+0x270>)
 8005086:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	2104      	movs	r1, #4
 8005098:	4876      	ldr	r0, [pc, #472]	; (8005274 <runBLTask+0x284>)
 800509a:	f002 fe97 	bl	8007dcc <HAL_GPIO_WritePin>
 800509e:	4b70      	ldr	r3, [pc, #448]	; (8005260 <runBLTask+0x270>)
 80050a0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bf14      	ite	ne
 80050a8:	2301      	movne	r3, #1
 80050aa:	2300      	moveq	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	2108      	movs	r1, #8
 80050b2:	4870      	ldr	r0, [pc, #448]	; (8005274 <runBLTask+0x284>)
 80050b4:	f002 fe8a 	bl	8007dcc <HAL_GPIO_WritePin>
 80050b8:	4b69      	ldr	r3, [pc, #420]	; (8005260 <runBLTask+0x270>)
 80050ba:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	2120      	movs	r1, #32
 80050cc:	4869      	ldr	r0, [pc, #420]	; (8005274 <runBLTask+0x284>)
 80050ce:	f002 fe7d 	bl	8007dcc <HAL_GPIO_WritePin>
 80050d2:	4b63      	ldr	r3, [pc, #396]	; (8005260 <runBLTask+0x270>)
 80050d4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	2110      	movs	r1, #16
 80050e6:	4863      	ldr	r0, [pc, #396]	; (8005274 <runBLTask+0x284>)
 80050e8:	f002 fe70 	bl	8007dcc <HAL_GPIO_WritePin>
 80050ec:	4b5c      	ldr	r3, [pc, #368]	; (8005260 <runBLTask+0x270>)
 80050ee:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
 80050f2:	4b61      	ldr	r3, [pc, #388]	; (8005278 <runBLTask+0x288>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	635a      	str	r2, [r3, #52]	; 0x34
 80050f8:	4b59      	ldr	r3, [pc, #356]	; (8005260 <runBLTask+0x270>)
 80050fa:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 80050fe:	4b5e      	ldr	r3, [pc, #376]	; (8005278 <runBLTask+0x288>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8005104:	485a      	ldr	r0, [pc, #360]	; (8005270 <runBLTask+0x280>)
 8005106:	f7fe f8a7 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 6;
 800510a:	4b54      	ldr	r3, [pc, #336]	; (800525c <runBLTask+0x26c>)
 800510c:	4a5b      	ldr	r2, [pc, #364]	; (800527c <runBLTask+0x28c>)
 800510e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005110:	2200      	movs	r2, #0
 8005112:	2100      	movs	r1, #0
 8005114:	4851      	ldr	r0, [pc, #324]	; (800525c <runBLTask+0x26c>)
 8005116:	f7fd fc63 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 800511a:	e111      	b.n	8005340 <runBLTask+0x350>
      case 20: // BL20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BL20], &htim8, &htim1, targetAngle);
 800511c:	4b50      	ldr	r3, [pc, #320]	; (8005260 <runBLTask+0x270>)
 800511e:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8005122:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005264 <runBLTask+0x274>
 8005126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	dd02      	ble.n	8005136 <runBLTask+0x146>
 8005130:	f240 1309 	movw	r3, #265	; 0x109
 8005134:	e012      	b.n	800515c <runBLTask+0x16c>
 8005136:	4b4a      	ldr	r3, [pc, #296]	; (8005260 <runBLTask+0x270>)
 8005138:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800513c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005268 <runBLTask+0x278>
 8005140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005148:	d501      	bpl.n	800514e <runBLTask+0x15e>
 800514a:	2346      	movs	r3, #70	; 0x46
 800514c:	e006      	b.n	800515c <runBLTask+0x16c>
 800514e:	4b44      	ldr	r3, [pc, #272]	; (8005260 <runBLTask+0x270>)
 8005150:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8005154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005158:	ee17 3a90 	vmov	r3, s15
 800515c:	4a43      	ldr	r2, [pc, #268]	; (800526c <runBLTask+0x27c>)
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	6413      	str	r3, [r2, #64]	; 0x40
 8005162:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005166:	f001 fefd 	bl	8006f64 <HAL_Delay>
 800516a:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <runBLTask+0x270>)
 800516c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005170:	4a3f      	ldr	r2, [pc, #252]	; (8005270 <runBLTask+0x280>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	4b3a      	ldr	r3, [pc, #232]	; (8005260 <runBLTask+0x270>)
 8005176:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	2104      	movs	r1, #4
 8005188:	483a      	ldr	r0, [pc, #232]	; (8005274 <runBLTask+0x284>)
 800518a:	f002 fe1f 	bl	8007dcc <HAL_GPIO_WritePin>
 800518e:	4b34      	ldr	r3, [pc, #208]	; (8005260 <runBLTask+0x270>)
 8005190:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	2108      	movs	r1, #8
 80051a2:	4834      	ldr	r0, [pc, #208]	; (8005274 <runBLTask+0x284>)
 80051a4:	f002 fe12 	bl	8007dcc <HAL_GPIO_WritePin>
 80051a8:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <runBLTask+0x270>)
 80051aa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	2120      	movs	r1, #32
 80051bc:	482d      	ldr	r0, [pc, #180]	; (8005274 <runBLTask+0x284>)
 80051be:	f002 fe05 	bl	8007dcc <HAL_GPIO_WritePin>
 80051c2:	4b27      	ldr	r3, [pc, #156]	; (8005260 <runBLTask+0x270>)
 80051c4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	2110      	movs	r1, #16
 80051d6:	4827      	ldr	r0, [pc, #156]	; (8005274 <runBLTask+0x284>)
 80051d8:	f002 fdf8 	bl	8007dcc <HAL_GPIO_WritePin>
 80051dc:	4b20      	ldr	r3, [pc, #128]	; (8005260 <runBLTask+0x270>)
 80051de:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <runBLTask+0x288>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <runBLTask+0x270>)
 80051ea:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80051ee:	4b22      	ldr	r3, [pc, #136]	; (8005278 <runBLTask+0x288>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 80051f4:	481e      	ldr	r0, [pc, #120]	; (8005270 <runBLTask+0x280>)
 80051f6:	f7fe f82f 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <runBLTask+0x26c>)
 80051fc:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8005200:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005202:	2200      	movs	r2, #0
 8005204:	2100      	movs	r1, #0
 8005206:	4815      	ldr	r0, [pc, #84]	; (800525c <runBLTask+0x26c>)
 8005208:	f7fd fbea 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 800520c:	e098      	b.n	8005340 <runBLTask+0x350>
      default: // BL00 (indoor 3x2)
        targetDist = 1;
 800520e:	4b13      	ldr	r3, [pc, #76]	; (800525c <runBLTask+0x26c>)
 8005210:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005214:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	4810      	ldr	r0, [pc, #64]	; (800525c <runBLTask+0x26c>)
 800521c:	f7fd fbe0 	bl	80029e0 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_BL00], &htim8, &htim1, targetAngle);
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <runBLTask+0x270>)
 8005222:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005226:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005264 <runBLTask+0x274>
 800522a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	dd02      	ble.n	800523a <runBLTask+0x24a>
 8005234:	f240 1309 	movw	r3, #265	; 0x109
 8005238:	e029      	b.n	800528e <runBLTask+0x29e>
 800523a:	4b09      	ldr	r3, [pc, #36]	; (8005260 <runBLTask+0x270>)
 800523c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005240:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005268 <runBLTask+0x278>
 8005244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	d518      	bpl.n	8005280 <runBLTask+0x290>
 800524e:	2346      	movs	r3, #70	; 0x46
 8005250:	e01d      	b.n	800528e <runBLTask+0x29e>
 8005252:	bf00      	nop
 8005254:	20000134 	.word	0x20000134
 8005258:	200004cc 	.word	0x200004cc
 800525c:	200004f8 	.word	0x200004f8
 8005260:	20000004 	.word	0x20000004
 8005264:	43848000 	.word	0x43848000
 8005268:	428c0000 	.word	0x428c0000
 800526c:	200002a4 	.word	0x200002a4
 8005270:	200004e4 	.word	0x200004e4
 8005274:	40020000 	.word	0x40020000
 8005278:	200003c4 	.word	0x200003c4
 800527c:	40c00000 	.word	0x40c00000
 8005280:	4b4e      	ldr	r3, [pc, #312]	; (80053bc <runBLTask+0x3cc>)
 8005282:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528a:	ee17 3a90 	vmov	r3, s15
 800528e:	4a4c      	ldr	r2, [pc, #304]	; (80053c0 <runBLTask+0x3d0>)
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	6413      	str	r3, [r2, #64]	; 0x40
 8005294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005298:	f001 fe64 	bl	8006f64 <HAL_Delay>
 800529c:	4b47      	ldr	r3, [pc, #284]	; (80053bc <runBLTask+0x3cc>)
 800529e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052a2:	4a48      	ldr	r2, [pc, #288]	; (80053c4 <runBLTask+0x3d4>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	4b45      	ldr	r3, [pc, #276]	; (80053bc <runBLTask+0x3cc>)
 80052a8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	461a      	mov	r2, r3
 80052b8:	2104      	movs	r1, #4
 80052ba:	4843      	ldr	r0, [pc, #268]	; (80053c8 <runBLTask+0x3d8>)
 80052bc:	f002 fd86 	bl	8007dcc <HAL_GPIO_WritePin>
 80052c0:	4b3e      	ldr	r3, [pc, #248]	; (80053bc <runBLTask+0x3cc>)
 80052c2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	2108      	movs	r1, #8
 80052d4:	483c      	ldr	r0, [pc, #240]	; (80053c8 <runBLTask+0x3d8>)
 80052d6:	f002 fd79 	bl	8007dcc <HAL_GPIO_WritePin>
 80052da:	4b38      	ldr	r3, [pc, #224]	; (80053bc <runBLTask+0x3cc>)
 80052dc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	2120      	movs	r1, #32
 80052ee:	4836      	ldr	r0, [pc, #216]	; (80053c8 <runBLTask+0x3d8>)
 80052f0:	f002 fd6c 	bl	8007dcc <HAL_GPIO_WritePin>
 80052f4:	4b31      	ldr	r3, [pc, #196]	; (80053bc <runBLTask+0x3cc>)
 80052f6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bf14      	ite	ne
 80052fe:	2301      	movne	r3, #1
 8005300:	2300      	moveq	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	2110      	movs	r1, #16
 8005308:	482f      	ldr	r0, [pc, #188]	; (80053c8 <runBLTask+0x3d8>)
 800530a:	f002 fd5f 	bl	8007dcc <HAL_GPIO_WritePin>
 800530e:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <runBLTask+0x3cc>)
 8005310:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <runBLTask+0x3dc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	635a      	str	r2, [r3, #52]	; 0x34
 800531a:	4b28      	ldr	r3, [pc, #160]	; (80053bc <runBLTask+0x3cc>)
 800531c:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <runBLTask+0x3dc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8005326:	4827      	ldr	r0, [pc, #156]	; (80053c4 <runBLTask+0x3d4>)
 8005328:	f7fd ff96 	bl	8003258 <RobotTurn>

        targetDist = 8;
 800532c:	4b28      	ldr	r3, [pc, #160]	; (80053d0 <runBLTask+0x3e0>)
 800532e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8005332:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8005334:	2200      	movs	r2, #0
 8005336:	2100      	movs	r1, #0
 8005338:	4825      	ldr	r0, [pc, #148]	; (80053d0 <runBLTask+0x3e0>)
 800533a:	f7fd fb51 	bl	80029e0 <RobotMoveDist>

        break;
 800533e:	bf00      	nop
      }
      clickOnce = 0;
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <runBLTask+0x3e4>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8005346:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <runBLTask+0x3e8>)
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <runBLTask+0x3ec>)
 800534c:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800534e:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <runBLTask+0x3e8>)
 8005350:	2211      	movs	r2, #17
 8005352:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <runBLTask+0x3f0>)
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <runBLTask+0x3f0>)
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	429a      	cmp	r2, r3
 800535e:	d112      	bne.n	8005386 <runBLTask+0x396>
      {
        __CLEAR_CURCMD(curCmd);
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <runBLTask+0x3f4>)
 8005362:	2264      	movs	r2, #100	; 0x64
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <runBLTask+0x3f4>)
 8005368:	2200      	movs	r2, #0
 800536a:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <runBLTask+0x3f8>)
 800536e:	210f      	movs	r1, #15
 8005370:	481e      	ldr	r0, [pc, #120]	; (80053ec <runBLTask+0x3fc>)
 8005372:	f00a f9d7 	bl	800f724 <sniprintf>
 8005376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800537a:	2206      	movs	r2, #6
 800537c:	491c      	ldr	r1, [pc, #112]	; (80053f0 <runBLTask+0x400>)
 800537e:	481d      	ldr	r0, [pc, #116]	; (80053f4 <runBLTask+0x404>)
 8005380:	f006 f857 	bl	800b432 <HAL_UART_Transmit>
 8005384:	e638      	b.n	8004ff8 <runBLTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <runBLTask+0x3f0>)
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <runBLTask+0x3f4>)
 800538c:	4914      	ldr	r1, [pc, #80]	; (80053e0 <runBLTask+0x3f0>)
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <runBLTask+0x3f0>)
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	3301      	adds	r3, #1
 800539c:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <runBLTask+0x3f0>)
 800539e:	7892      	ldrb	r2, [r2, #2]
 80053a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80053a4:	fb01 f202 	mul.w	r2, r1, r2
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <runBLTask+0x3f0>)
 80053ae:	705a      	strb	r2, [r3, #1]
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <runBLTask+0x408>)
 80053b2:	210f      	movs	r1, #15
 80053b4:	480d      	ldr	r0, [pc, #52]	; (80053ec <runBLTask+0x3fc>)
 80053b6:	f00a f9b5 	bl	800f724 <sniprintf>
    if (curTask != TASK_BL)
 80053ba:	e61d      	b.n	8004ff8 <runBLTask+0x8>
 80053bc:	20000004 	.word	0x20000004
 80053c0:	200002a4 	.word	0x200002a4
 80053c4:	200004e4 	.word	0x200004e4
 80053c8:	40020000 	.word	0x40020000
 80053cc:	200003c4 	.word	0x200003c4
 80053d0:	200004f8 	.word	0x200004f8
 80053d4:	20000564 	.word	0x20000564
 80053d8:	20000134 	.word	0x20000134
 80053dc:	20000135 	.word	0x20000135
 80053e0:	20000498 	.word	0x20000498
 80053e4:	200004cc 	.word	0x200004cc
 80053e8:	0801013c 	.word	0x0801013c
 80053ec:	200004d0 	.word	0x200004d0
 80053f0:	08010144 	.word	0x08010144
 80053f4:	2000040c 	.word	0x2000040c
 80053f8:	0801014c 	.word	0x0801014c

080053fc <runBRTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runBRTask */
void runBRTask(void *argument)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runBRTask */

  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_BR)
 8005404:	4b95      	ldr	r3, [pc, #596]	; (800565c <runBRTask+0x260>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b05      	cmp	r3, #5
 800540a:	d004      	beq.n	8005416 <runBRTask+0x1a>
      osDelay(1000);
 800540c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005410:	f007 f95a 	bl	800c6c8 <osDelay>
 8005414:	e7f6      	b.n	8005404 <runBRTask+0x8>
    else
    {

      switch (curCmd.val)
 8005416:	4b92      	ldr	r3, [pc, #584]	; (8005660 <runBRTask+0x264>)
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	2b14      	cmp	r3, #20
 800541c:	f000 8084 	beq.w	8005528 <runBRTask+0x12c>
 8005420:	2b1e      	cmp	r3, #30
 8005422:	f040 80fa 	bne.w	800561a <runBRTask+0x21e>
      {
      case 30: // BR30 (4x2)
        targetDist = 2;
 8005426:	4b8f      	ldr	r3, [pc, #572]	; (8005664 <runBRTask+0x268>)
 8005428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800542c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	488c      	ldr	r0, [pc, #560]	; (8005664 <runBRTask+0x268>)
 8005434:	f7fd fad4 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR30], &htim8, &htim1, targetAngle);
 8005438:	4b8b      	ldr	r3, [pc, #556]	; (8005668 <runBRTask+0x26c>)
 800543a:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 800543e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800566c <runBRTask+0x270>
 8005442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	dd02      	ble.n	8005452 <runBRTask+0x56>
 800544c:	f240 1309 	movw	r3, #265	; 0x109
 8005450:	e012      	b.n	8005478 <runBRTask+0x7c>
 8005452:	4b85      	ldr	r3, [pc, #532]	; (8005668 <runBRTask+0x26c>)
 8005454:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005458:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8005670 <runBRTask+0x274>
 800545c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005464:	d501      	bpl.n	800546a <runBRTask+0x6e>
 8005466:	2346      	movs	r3, #70	; 0x46
 8005468:	e006      	b.n	8005478 <runBRTask+0x7c>
 800546a:	4b7f      	ldr	r3, [pc, #508]	; (8005668 <runBRTask+0x26c>)
 800546c:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 8005470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005474:	ee17 3a90 	vmov	r3, s15
 8005478:	4a7e      	ldr	r2, [pc, #504]	; (8005674 <runBRTask+0x278>)
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	6413      	str	r3, [r2, #64]	; 0x40
 800547e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005482:	f001 fd6f 	bl	8006f64 <HAL_Delay>
 8005486:	4b78      	ldr	r3, [pc, #480]	; (8005668 <runBRTask+0x26c>)
 8005488:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800548c:	4a7a      	ldr	r2, [pc, #488]	; (8005678 <runBRTask+0x27c>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	4b75      	ldr	r3, [pc, #468]	; (8005668 <runBRTask+0x26c>)
 8005492:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8005496:	2b00      	cmp	r3, #0
 8005498:	bf0c      	ite	eq
 800549a:	2301      	moveq	r3, #1
 800549c:	2300      	movne	r3, #0
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	2104      	movs	r1, #4
 80054a4:	4875      	ldr	r0, [pc, #468]	; (800567c <runBRTask+0x280>)
 80054a6:	f002 fc91 	bl	8007dcc <HAL_GPIO_WritePin>
 80054aa:	4b6f      	ldr	r3, [pc, #444]	; (8005668 <runBRTask+0x26c>)
 80054ac:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	2108      	movs	r1, #8
 80054be:	486f      	ldr	r0, [pc, #444]	; (800567c <runBRTask+0x280>)
 80054c0:	f002 fc84 	bl	8007dcc <HAL_GPIO_WritePin>
 80054c4:	4b68      	ldr	r3, [pc, #416]	; (8005668 <runBRTask+0x26c>)
 80054c6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	2120      	movs	r1, #32
 80054d8:	4868      	ldr	r0, [pc, #416]	; (800567c <runBRTask+0x280>)
 80054da:	f002 fc77 	bl	8007dcc <HAL_GPIO_WritePin>
 80054de:	4b62      	ldr	r3, [pc, #392]	; (8005668 <runBRTask+0x26c>)
 80054e0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	2110      	movs	r1, #16
 80054f2:	4862      	ldr	r0, [pc, #392]	; (800567c <runBRTask+0x280>)
 80054f4:	f002 fc6a 	bl	8007dcc <HAL_GPIO_WritePin>
 80054f8:	4b5b      	ldr	r3, [pc, #364]	; (8005668 <runBRTask+0x26c>)
 80054fa:	f8b3 2120 	ldrh.w	r2, [r3, #288]	; 0x120
 80054fe:	4b60      	ldr	r3, [pc, #384]	; (8005680 <runBRTask+0x284>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	635a      	str	r2, [r3, #52]	; 0x34
 8005504:	4b58      	ldr	r3, [pc, #352]	; (8005668 <runBRTask+0x26c>)
 8005506:	f8b3 2122 	ldrh.w	r2, [r3, #290]	; 0x122
 800550a:	4b5d      	ldr	r3, [pc, #372]	; (8005680 <runBRTask+0x284>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8005510:	4859      	ldr	r0, [pc, #356]	; (8005678 <runBRTask+0x27c>)
 8005512:	f7fd fea1 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 7;
 8005516:	4b53      	ldr	r3, [pc, #332]	; (8005664 <runBRTask+0x268>)
 8005518:	4a5a      	ldr	r2, [pc, #360]	; (8005684 <runBRTask+0x288>)
 800551a:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800551c:	2200      	movs	r2, #0
 800551e:	2100      	movs	r1, #0
 8005520:	4850      	ldr	r0, [pc, #320]	; (8005664 <runBRTask+0x268>)
 8005522:	f7fd fa5d 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 8005526:	e110      	b.n	800574a <runBRTask+0x34e>
      case 20: // BR20 (outdoor 3x1)
        // targetDist = 4;
        // RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
        // osDelay(10);
        __SET_CMD_CONFIG(cfgs[CONFIG_BR20], &htim8, &htim1, targetAngle);
 8005528:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <runBRTask+0x26c>)
 800552a:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 800552e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800566c <runBRTask+0x270>
 8005532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	dd02      	ble.n	8005542 <runBRTask+0x146>
 800553c:	f240 1309 	movw	r3, #265	; 0x109
 8005540:	e012      	b.n	8005568 <runBRTask+0x16c>
 8005542:	4b49      	ldr	r3, [pc, #292]	; (8005668 <runBRTask+0x26c>)
 8005544:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005548:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005670 <runBRTask+0x274>
 800554c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005554:	d501      	bpl.n	800555a <runBRTask+0x15e>
 8005556:	2346      	movs	r3, #70	; 0x46
 8005558:	e006      	b.n	8005568 <runBRTask+0x16c>
 800555a:	4b43      	ldr	r3, [pc, #268]	; (8005668 <runBRTask+0x26c>)
 800555c:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
 8005560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005564:	ee17 3a90 	vmov	r3, s15
 8005568:	4a42      	ldr	r2, [pc, #264]	; (8005674 <runBRTask+0x278>)
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	6413      	str	r3, [r2, #64]	; 0x40
 800556e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005572:	f001 fcf7 	bl	8006f64 <HAL_Delay>
 8005576:	4b3c      	ldr	r3, [pc, #240]	; (8005668 <runBRTask+0x26c>)
 8005578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800557c:	4a3e      	ldr	r2, [pc, #248]	; (8005678 <runBRTask+0x27c>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b39      	ldr	r3, [pc, #228]	; (8005668 <runBRTask+0x26c>)
 8005582:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8005586:	2b00      	cmp	r3, #0
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	2104      	movs	r1, #4
 8005594:	4839      	ldr	r0, [pc, #228]	; (800567c <runBRTask+0x280>)
 8005596:	f002 fc19 	bl	8007dcc <HAL_GPIO_WritePin>
 800559a:	4b33      	ldr	r3, [pc, #204]	; (8005668 <runBRTask+0x26c>)
 800559c:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	2108      	movs	r1, #8
 80055ae:	4833      	ldr	r0, [pc, #204]	; (800567c <runBRTask+0x280>)
 80055b0:	f002 fc0c 	bl	8007dcc <HAL_GPIO_WritePin>
 80055b4:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <runBRTask+0x26c>)
 80055b6:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	2120      	movs	r1, #32
 80055c8:	482c      	ldr	r0, [pc, #176]	; (800567c <runBRTask+0x280>)
 80055ca:	f002 fbff 	bl	8007dcc <HAL_GPIO_WritePin>
 80055ce:	4b26      	ldr	r3, [pc, #152]	; (8005668 <runBRTask+0x26c>)
 80055d0:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	2110      	movs	r1, #16
 80055e2:	4826      	ldr	r0, [pc, #152]	; (800567c <runBRTask+0x280>)
 80055e4:	f002 fbf2 	bl	8007dcc <HAL_GPIO_WritePin>
 80055e8:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <runBRTask+0x26c>)
 80055ea:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <runBRTask+0x284>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	635a      	str	r2, [r3, #52]	; 0x34
 80055f4:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <runBRTask+0x26c>)
 80055f6:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80055fa:	4b21      	ldr	r3, [pc, #132]	; (8005680 <runBRTask+0x284>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8005600:	481d      	ldr	r0, [pc, #116]	; (8005678 <runBRTask+0x27c>)
 8005602:	f7fd fe29 	bl	8003258 <RobotTurn>
        // osDelay(10);
        targetDist = 4;
 8005606:	4b17      	ldr	r3, [pc, #92]	; (8005664 <runBRTask+0x268>)
 8005608:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800560c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800560e:	2200      	movs	r2, #0
 8005610:	2100      	movs	r1, #0
 8005612:	4814      	ldr	r0, [pc, #80]	; (8005664 <runBRTask+0x268>)
 8005614:	f7fd f9e4 	bl	80029e0 <RobotMoveDist>
        // osDelay(10);
        break;
 8005618:	e097      	b.n	800574a <runBRTask+0x34e>
      default: // BR00 (indoor 3x1)
        targetDist = 5;
 800561a:	4b12      	ldr	r3, [pc, #72]	; (8005664 <runBRTask+0x268>)
 800561c:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <runBRTask+0x28c>)
 800561e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8005620:	2200      	movs	r2, #0
 8005622:	2101      	movs	r1, #1
 8005624:	480f      	ldr	r0, [pc, #60]	; (8005664 <runBRTask+0x268>)
 8005626:	f7fd f9db 	bl	80029e0 <RobotMoveDist>

        __SET_CMD_CONFIG(cfgs[CONFIG_BR00], &htim8, &htim1, targetAngle);
 800562a:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <runBRTask+0x26c>)
 800562c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005630:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800566c <runBRTask+0x270>
 8005634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	dd02      	ble.n	8005644 <runBRTask+0x248>
 800563e:	f240 1309 	movw	r3, #265	; 0x109
 8005642:	e02a      	b.n	800569a <runBRTask+0x29e>
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <runBRTask+0x26c>)
 8005646:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800564a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005670 <runBRTask+0x274>
 800564e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005656:	d519      	bpl.n	800568c <runBRTask+0x290>
 8005658:	2346      	movs	r3, #70	; 0x46
 800565a:	e01e      	b.n	800569a <runBRTask+0x29e>
 800565c:	20000134 	.word	0x20000134
 8005660:	200004cc 	.word	0x200004cc
 8005664:	200004f8 	.word	0x200004f8
 8005668:	20000004 	.word	0x20000004
 800566c:	43848000 	.word	0x43848000
 8005670:	428c0000 	.word	0x428c0000
 8005674:	200002a4 	.word	0x200002a4
 8005678:	200004e4 	.word	0x200004e4
 800567c:	40020000 	.word	0x40020000
 8005680:	200003c4 	.word	0x200003c4
 8005684:	40e00000 	.word	0x40e00000
 8005688:	40a00000 	.word	0x40a00000
 800568c:	4b4e      	ldr	r3, [pc, #312]	; (80057c8 <runBRTask+0x3cc>)
 800568e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8005692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005696:	ee17 3a90 	vmov	r3, s15
 800569a:	4a4c      	ldr	r2, [pc, #304]	; (80057cc <runBRTask+0x3d0>)
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	6413      	str	r3, [r2, #64]	; 0x40
 80056a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80056a4:	f001 fc5e 	bl	8006f64 <HAL_Delay>
 80056a8:	4b47      	ldr	r3, [pc, #284]	; (80057c8 <runBRTask+0x3cc>)
 80056aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80056ae:	4a48      	ldr	r2, [pc, #288]	; (80057d0 <runBRTask+0x3d4>)
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	4b45      	ldr	r3, [pc, #276]	; (80057c8 <runBRTask+0x3cc>)
 80056b4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	2104      	movs	r1, #4
 80056c6:	4843      	ldr	r0, [pc, #268]	; (80057d4 <runBRTask+0x3d8>)
 80056c8:	f002 fb80 	bl	8007dcc <HAL_GPIO_WritePin>
 80056cc:	4b3e      	ldr	r3, [pc, #248]	; (80057c8 <runBRTask+0x3cc>)
 80056ce:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	2108      	movs	r1, #8
 80056e0:	483c      	ldr	r0, [pc, #240]	; (80057d4 <runBRTask+0x3d8>)
 80056e2:	f002 fb73 	bl	8007dcc <HAL_GPIO_WritePin>
 80056e6:	4b38      	ldr	r3, [pc, #224]	; (80057c8 <runBRTask+0x3cc>)
 80056e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	2120      	movs	r1, #32
 80056fa:	4836      	ldr	r0, [pc, #216]	; (80057d4 <runBRTask+0x3d8>)
 80056fc:	f002 fb66 	bl	8007dcc <HAL_GPIO_WritePin>
 8005700:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <runBRTask+0x3cc>)
 8005702:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005706:	2b00      	cmp	r3, #0
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	2110      	movs	r1, #16
 8005714:	482f      	ldr	r0, [pc, #188]	; (80057d4 <runBRTask+0x3d8>)
 8005716:	f002 fb59 	bl	8007dcc <HAL_GPIO_WritePin>
 800571a:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <runBRTask+0x3cc>)
 800571c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8005720:	4b2d      	ldr	r3, [pc, #180]	; (80057d8 <runBRTask+0x3dc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	635a      	str	r2, [r3, #52]	; 0x34
 8005726:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <runBRTask+0x3cc>)
 8005728:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 800572c:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <runBRTask+0x3dc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
        RobotTurn(&targetAngle);
 8005732:	4827      	ldr	r0, [pc, #156]	; (80057d0 <runBRTask+0x3d4>)
 8005734:	f7fd fd90 	bl	8003258 <RobotTurn>

        targetDist = 3;
 8005738:	4b28      	ldr	r3, [pc, #160]	; (80057dc <runBRTask+0x3e0>)
 800573a:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <runBRTask+0x3e4>)
 800573c:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800573e:	2200      	movs	r2, #0
 8005740:	2100      	movs	r1, #0
 8005742:	4826      	ldr	r0, [pc, #152]	; (80057dc <runBRTask+0x3e0>)
 8005744:	f7fd f94c 	bl	80029e0 <RobotMoveDist>

        break;
 8005748:	bf00      	nop
      }
      clickOnce = 0;
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <runBRTask+0x3e8>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <runBRTask+0x3ec>)
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	4b25      	ldr	r3, [pc, #148]	; (80057ec <runBRTask+0x3f0>)
 8005756:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8005758:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <runBRTask+0x3ec>)
 800575a:	2211      	movs	r2, #17
 800575c:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <runBRTask+0x3f4>)
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	4b23      	ldr	r3, [pc, #140]	; (80057f0 <runBRTask+0x3f4>)
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	429a      	cmp	r2, r3
 8005768:	d112      	bne.n	8005790 <runBRTask+0x394>
      {
        __CLEAR_CURCMD(curCmd);
 800576a:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <runBRTask+0x3f8>)
 800576c:	2264      	movs	r2, #100	; 0x64
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	4b20      	ldr	r3, [pc, #128]	; (80057f4 <runBRTask+0x3f8>)
 8005772:	2200      	movs	r2, #0
 8005774:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005776:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <runBRTask+0x3fc>)
 8005778:	210f      	movs	r1, #15
 800577a:	4820      	ldr	r0, [pc, #128]	; (80057fc <runBRTask+0x400>)
 800577c:	f009 ffd2 	bl	800f724 <sniprintf>
 8005780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005784:	2206      	movs	r2, #6
 8005786:	491e      	ldr	r1, [pc, #120]	; (8005800 <runBRTask+0x404>)
 8005788:	481e      	ldr	r0, [pc, #120]	; (8005804 <runBRTask+0x408>)
 800578a:	f005 fe52 	bl	800b432 <HAL_UART_Transmit>
 800578e:	e639      	b.n	8005404 <runBRTask+0x8>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <runBRTask+0x3f4>)
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	4a17      	ldr	r2, [pc, #92]	; (80057f4 <runBRTask+0x3f8>)
 8005796:	4916      	ldr	r1, [pc, #88]	; (80057f0 <runBRTask+0x3f4>)
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <runBRTask+0x3f4>)
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	3301      	adds	r3, #1
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <runBRTask+0x3f4>)
 80057a8:	7892      	ldrb	r2, [r2, #2]
 80057aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80057ae:	fb01 f202 	mul.w	r2, r1, r2
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <runBRTask+0x3f4>)
 80057b8:	705a      	strb	r2, [r3, #1]
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <runBRTask+0x40c>)
 80057bc:	210f      	movs	r1, #15
 80057be:	480f      	ldr	r0, [pc, #60]	; (80057fc <runBRTask+0x400>)
 80057c0:	f009 ffb0 	bl	800f724 <sniprintf>
    if (curTask != TASK_BR)
 80057c4:	e61e      	b.n	8005404 <runBRTask+0x8>
 80057c6:	bf00      	nop
 80057c8:	20000004 	.word	0x20000004
 80057cc:	200002a4 	.word	0x200002a4
 80057d0:	200004e4 	.word	0x200004e4
 80057d4:	40020000 	.word	0x40020000
 80057d8:	200003c4 	.word	0x200003c4
 80057dc:	200004f8 	.word	0x200004f8
 80057e0:	40400000 	.word	0x40400000
 80057e4:	20000564 	.word	0x20000564
 80057e8:	20000134 	.word	0x20000134
 80057ec:	20000135 	.word	0x20000135
 80057f0:	20000498 	.word	0x20000498
 80057f4:	200004cc 	.word	0x200004cc
 80057f8:	0801013c 	.word	0x0801013c
 80057fc:	200004d0 	.word	0x200004d0
 8005800:	08010144 	.word	0x08010144
 8005804:	2000040c 	.word	0x2000040c
 8005808:	0801014c 	.word	0x0801014c

0800580c <runCmdTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runCmdTask */
void runCmdTask(void *argument)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runCmdTask */
  /* Infinite loop */
  for (;;)
  {
    switch (curCmd.index)
 8005814:	4bc7      	ldr	r3, [pc, #796]	; (8005b34 <runCmdTask+0x328>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	2b63      	cmp	r3, #99	; 0x63
 800581c:	f200 8353 	bhi.w	8005ec6 <runCmdTask+0x6ba>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <runCmdTask+0x1c>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	080059b9 	.word	0x080059b9
 800582c:	080059c7 	.word	0x080059c7
 8005830:	080059d5 	.word	0x080059d5
 8005834:	080059d5 	.word	0x080059d5
 8005838:	080059d5 	.word	0x080059d5
 800583c:	080059d5 	.word	0x080059d5
 8005840:	08005ba9 	.word	0x08005ba9
 8005844:	08005bb7 	.word	0x08005bb7
 8005848:	08005bc5 	.word	0x08005bc5
 800584c:	08005bd3 	.word	0x08005bd3
 8005850:	08005be1 	.word	0x08005be1
 8005854:	08005be1 	.word	0x08005be1
 8005858:	08005ec7 	.word	0x08005ec7
 800585c:	08005c2b 	.word	0x08005c2b
 8005860:	08005c39 	.word	0x08005c39
 8005864:	08005ec7 	.word	0x08005ec7
 8005868:	08005ec7 	.word	0x08005ec7
 800586c:	08005ec7 	.word	0x08005ec7
 8005870:	08005ec7 	.word	0x08005ec7
 8005874:	08005ec7 	.word	0x08005ec7
 8005878:	08005ec7 	.word	0x08005ec7
 800587c:	08005ec7 	.word	0x08005ec7
 8005880:	08005ec7 	.word	0x08005ec7
 8005884:	08005ec7 	.word	0x08005ec7
 8005888:	08005ec7 	.word	0x08005ec7
 800588c:	08005ec7 	.word	0x08005ec7
 8005890:	08005ec7 	.word	0x08005ec7
 8005894:	08005ec7 	.word	0x08005ec7
 8005898:	08005ec7 	.word	0x08005ec7
 800589c:	08005ec7 	.word	0x08005ec7
 80058a0:	08005ec7 	.word	0x08005ec7
 80058a4:	08005ec7 	.word	0x08005ec7
 80058a8:	08005ec7 	.word	0x08005ec7
 80058ac:	08005ec7 	.word	0x08005ec7
 80058b0:	08005ec7 	.word	0x08005ec7
 80058b4:	08005ec7 	.word	0x08005ec7
 80058b8:	08005ec7 	.word	0x08005ec7
 80058bc:	08005ec7 	.word	0x08005ec7
 80058c0:	08005ec7 	.word	0x08005ec7
 80058c4:	08005ec7 	.word	0x08005ec7
 80058c8:	08005ec7 	.word	0x08005ec7
 80058cc:	08005ec7 	.word	0x08005ec7
 80058d0:	08005ec7 	.word	0x08005ec7
 80058d4:	08005ec7 	.word	0x08005ec7
 80058d8:	08005ec7 	.word	0x08005ec7
 80058dc:	08005ec7 	.word	0x08005ec7
 80058e0:	08005ec7 	.word	0x08005ec7
 80058e4:	08005ec7 	.word	0x08005ec7
 80058e8:	08005ec7 	.word	0x08005ec7
 80058ec:	08005ec7 	.word	0x08005ec7
 80058f0:	08005ec7 	.word	0x08005ec7
 80058f4:	08005ec7 	.word	0x08005ec7
 80058f8:	08005ec7 	.word	0x08005ec7
 80058fc:	08005ec7 	.word	0x08005ec7
 8005900:	08005ec7 	.word	0x08005ec7
 8005904:	08005ec7 	.word	0x08005ec7
 8005908:	08005ec7 	.word	0x08005ec7
 800590c:	08005ec7 	.word	0x08005ec7
 8005910:	08005ec7 	.word	0x08005ec7
 8005914:	08005ec7 	.word	0x08005ec7
 8005918:	08005ec7 	.word	0x08005ec7
 800591c:	08005ec7 	.word	0x08005ec7
 8005920:	08005ec7 	.word	0x08005ec7
 8005924:	08005ec7 	.word	0x08005ec7
 8005928:	08005ec7 	.word	0x08005ec7
 800592c:	08005ec7 	.word	0x08005ec7
 8005930:	08005ec7 	.word	0x08005ec7
 8005934:	08005ec7 	.word	0x08005ec7
 8005938:	08005ec7 	.word	0x08005ec7
 800593c:	08005ec7 	.word	0x08005ec7
 8005940:	08005ec7 	.word	0x08005ec7
 8005944:	08005ec7 	.word	0x08005ec7
 8005948:	08005ec7 	.word	0x08005ec7
 800594c:	08005ec7 	.word	0x08005ec7
 8005950:	08005ec7 	.word	0x08005ec7
 8005954:	08005ec7 	.word	0x08005ec7
 8005958:	08005ec7 	.word	0x08005ec7
 800595c:	08005ec7 	.word	0x08005ec7
 8005960:	08005ec7 	.word	0x08005ec7
 8005964:	08005ec7 	.word	0x08005ec7
 8005968:	08005ec7 	.word	0x08005ec7
 800596c:	08005ec7 	.word	0x08005ec7
 8005970:	08005ec7 	.word	0x08005ec7
 8005974:	08005ec7 	.word	0x08005ec7
 8005978:	08005ec7 	.word	0x08005ec7
 800597c:	08005ec7 	.word	0x08005ec7
 8005980:	08005ec7 	.word	0x08005ec7
 8005984:	08005c47 	.word	0x08005c47
 8005988:	08005c47 	.word	0x08005c47
 800598c:	08005d63 	.word	0x08005d63
 8005990:	08005d63 	.word	0x08005d63
 8005994:	08005e73 	.word	0x08005e73
 8005998:	08005e81 	.word	0x08005e81
 800599c:	08005e8f 	.word	0x08005e8f
 80059a0:	08005e9d 	.word	0x08005e9d
 80059a4:	08005eab 	.word	0x08005eab
 80059a8:	08005eb9 	.word	0x08005eb9
 80059ac:	08005ec7 	.word	0x08005ec7
 80059b0:	08005ec7 	.word	0x08005ec7
 80059b4:	08005ec7 	.word	0x08005ec7
    {
      //	  	 case 0: // STOP handled in UART IRQ directly
      //	  	  	  break;
    case 1: // FW
      curTask = TASK_MOVE_FORWARD;
 80059b8:	4b5f      	ldr	r3, [pc, #380]	; (8005b38 <runCmdTask+0x32c>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80059be:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <runCmdTask+0x328>)
 80059c0:	2263      	movs	r2, #99	; 0x63
 80059c2:	701a      	strb	r2, [r3, #0]
      break;
 80059c4:	e280      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 2: // BW
      curTask = TASK_MOVE_BACKWARD;
 80059c6:	4b5c      	ldr	r3, [pc, #368]	; (8005b38 <runCmdTask+0x32c>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 80059cc:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <runCmdTask+0x328>)
 80059ce:	2263      	movs	r2, #99	; 0x63
 80059d0:	701a      	strb	r2, [r3, #0]
      break;
 80059d2:	e279      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 3: // FL manual
    case 4: // FR manual
    case 5: // BL manual
    case 6: // BR manual
      __SET_CMD_CONFIG(cfgs[curCmd.index], &htim8, &htim1, targetAngle);
 80059d4:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <runCmdTask+0x328>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	4a58      	ldr	r2, [pc, #352]	; (8005b3c <runCmdTask+0x330>)
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	4413      	add	r3, r2
 80059de:	3304      	adds	r3, #4
 80059e0:	edd3 7a00 	vldr	s15, [r3]
 80059e4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005b40 <runCmdTask+0x334>
 80059e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f0:	dd02      	ble.n	80059f8 <runCmdTask+0x1ec>
 80059f2:	f240 1309 	movw	r3, #265	; 0x109
 80059f6:	e01c      	b.n	8005a32 <runCmdTask+0x226>
 80059f8:	4b4e      	ldr	r3, [pc, #312]	; (8005b34 <runCmdTask+0x328>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	4a4f      	ldr	r2, [pc, #316]	; (8005b3c <runCmdTask+0x330>)
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	4413      	add	r3, r2
 8005a02:	3304      	adds	r3, #4
 8005a04:	edd3 7a00 	vldr	s15, [r3]
 8005a08:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005b44 <runCmdTask+0x338>
 8005a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	d501      	bpl.n	8005a1a <runCmdTask+0x20e>
 8005a16:	2346      	movs	r3, #70	; 0x46
 8005a18:	e00b      	b.n	8005a32 <runCmdTask+0x226>
 8005a1a:	4b46      	ldr	r3, [pc, #280]	; (8005b34 <runCmdTask+0x328>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4a47      	ldr	r2, [pc, #284]	; (8005b3c <runCmdTask+0x330>)
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	4413      	add	r3, r2
 8005a24:	3304      	adds	r3, #4
 8005a26:	edd3 7a00 	vldr	s15, [r3]
 8005a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a2e:	ee17 3a90 	vmov	r3, s15
 8005a32:	4a45      	ldr	r2, [pc, #276]	; (8005b48 <runCmdTask+0x33c>)
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	6413      	str	r3, [r2, #64]	; 0x40
 8005a38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a3c:	f001 fa92 	bl	8006f64 <HAL_Delay>
 8005a40:	4b3c      	ldr	r3, [pc, #240]	; (8005b34 <runCmdTask+0x328>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <runCmdTask+0x330>)
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4413      	add	r3, r2
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3f      	ldr	r2, [pc, #252]	; (8005b4c <runCmdTask+0x340>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	4b38      	ldr	r3, [pc, #224]	; (8005b34 <runCmdTask+0x328>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	4a39      	ldr	r2, [pc, #228]	; (8005b3c <runCmdTask+0x330>)
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	4413      	add	r3, r2
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2104      	movs	r1, #4
 8005a6e:	4838      	ldr	r0, [pc, #224]	; (8005b50 <runCmdTask+0x344>)
 8005a70:	f002 f9ac 	bl	8007dcc <HAL_GPIO_WritePin>
 8005a74:	4b2f      	ldr	r3, [pc, #188]	; (8005b34 <runCmdTask+0x328>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	4a30      	ldr	r2, [pc, #192]	; (8005b3c <runCmdTask+0x330>)
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	4413      	add	r3, r2
 8005a7e:	330c      	adds	r3, #12
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2108      	movs	r1, #8
 8005a90:	482f      	ldr	r0, [pc, #188]	; (8005b50 <runCmdTask+0x344>)
 8005a92:	f002 f99b 	bl	8007dcc <HAL_GPIO_WritePin>
 8005a96:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <runCmdTask+0x328>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	4a28      	ldr	r2, [pc, #160]	; (8005b3c <runCmdTask+0x330>)
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	4413      	add	r3, r2
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2120      	movs	r1, #32
 8005ab2:	4827      	ldr	r0, [pc, #156]	; (8005b50 <runCmdTask+0x344>)
 8005ab4:	f002 f98a 	bl	8007dcc <HAL_GPIO_WritePin>
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <runCmdTask+0x328>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4a1f      	ldr	r2, [pc, #124]	; (8005b3c <runCmdTask+0x330>)
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	4413      	add	r3, r2
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf14      	ite	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	2300      	moveq	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2110      	movs	r1, #16
 8005ad4:	481e      	ldr	r0, [pc, #120]	; (8005b50 <runCmdTask+0x344>)
 8005ad6:	f002 f979 	bl	8007dcc <HAL_GPIO_WritePin>
 8005ada:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <runCmdTask+0x328>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <runCmdTask+0x330>)
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881a      	ldrh	r2, [r3, #0]
 8005ae6:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <runCmdTask+0x348>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	635a      	str	r2, [r3, #52]	; 0x34
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <runCmdTask+0x328>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	4a12      	ldr	r2, [pc, #72]	; (8005b3c <runCmdTask+0x330>)
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	4413      	add	r3, r2
 8005af6:	3302      	adds	r3, #2
 8005af8:	881a      	ldrh	r2, [r3, #0]
 8005afa:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <runCmdTask+0x348>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <runCmdTask+0x34c>)
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <runCmdTask+0x34c>)
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d12f      	bne.n	8005b6c <runCmdTask+0x360>
      {
        __CLEAR_CURCMD(curCmd);
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <runCmdTask+0x328>)
 8005b0e:	2264      	movs	r2, #100	; 0x64
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <runCmdTask+0x328>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005b18:	4a10      	ldr	r2, [pc, #64]	; (8005b5c <runCmdTask+0x350>)
 8005b1a:	210f      	movs	r1, #15
 8005b1c:	4810      	ldr	r0, [pc, #64]	; (8005b60 <runCmdTask+0x354>)
 8005b1e:	f009 fe01 	bl	800f724 <sniprintf>
 8005b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b26:	2206      	movs	r2, #6
 8005b28:	490e      	ldr	r1, [pc, #56]	; (8005b64 <runCmdTask+0x358>)
 8005b2a:	480f      	ldr	r0, [pc, #60]	; (8005b68 <runCmdTask+0x35c>)
 8005b2c:	f005 fc81 	bl	800b432 <HAL_UART_Transmit>
 8005b30:	e036      	b.n	8005ba0 <runCmdTask+0x394>
 8005b32:	bf00      	nop
 8005b34:	200004cc 	.word	0x200004cc
 8005b38:	20000134 	.word	0x20000134
 8005b3c:	20000004 	.word	0x20000004
 8005b40:	43848000 	.word	0x43848000
 8005b44:	428c0000 	.word	0x428c0000
 8005b48:	200002a4 	.word	0x200002a4
 8005b4c:	200004e4 	.word	0x200004e4
 8005b50:	40020000 	.word	0x40020000
 8005b54:	200003c4 	.word	0x200003c4
 8005b58:	20000498 	.word	0x20000498
 8005b5c:	0801013c 	.word	0x0801013c
 8005b60:	200004d0 	.word	0x200004d0
 8005b64:	08010144 	.word	0x08010144
 8005b68:	2000040c 	.word	0x2000040c
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005b6c:	4b9c      	ldr	r3, [pc, #624]	; (8005de0 <runCmdTask+0x5d4>)
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	4a9c      	ldr	r2, [pc, #624]	; (8005de4 <runCmdTask+0x5d8>)
 8005b72:	499b      	ldr	r1, [pc, #620]	; (8005de0 <runCmdTask+0x5d4>)
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4b98      	ldr	r3, [pc, #608]	; (8005de0 <runCmdTask+0x5d4>)
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	3301      	adds	r3, #1
 8005b82:	4a97      	ldr	r2, [pc, #604]	; (8005de0 <runCmdTask+0x5d4>)
 8005b84:	7892      	ldrb	r2, [r2, #2]
 8005b86:	fb93 f1f2 	sdiv	r1, r3, r2
 8005b8a:	fb01 f202 	mul.w	r2, r1, r2
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	4b93      	ldr	r3, [pc, #588]	; (8005de0 <runCmdTask+0x5d4>)
 8005b94:	705a      	strb	r2, [r3, #1]
 8005b96:	4a94      	ldr	r2, [pc, #592]	; (8005de8 <runCmdTask+0x5dc>)
 8005b98:	210f      	movs	r1, #15
 8005b9a:	4894      	ldr	r0, [pc, #592]	; (8005dec <runCmdTask+0x5e0>)
 8005b9c:	f009 fdc2 	bl	800f724 <sniprintf>
      __PEND_CURCMD(curCmd);
 8005ba0:	4b90      	ldr	r3, [pc, #576]	; (8005de4 <runCmdTask+0x5d8>)
 8005ba2:	2263      	movs	r2, #99	; 0x63
 8005ba4:	701a      	strb	r2, [r3, #0]
      break;
 8005ba6:	e18f      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 7: // FL
      curTask = TASK_FL;
 8005ba8:	4b91      	ldr	r3, [pc, #580]	; (8005df0 <runCmdTask+0x5e4>)
 8005baa:	2202      	movs	r2, #2
 8005bac:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005bae:	4b8d      	ldr	r3, [pc, #564]	; (8005de4 <runCmdTask+0x5d8>)
 8005bb0:	2263      	movs	r2, #99	; 0x63
 8005bb2:	701a      	strb	r2, [r3, #0]
      break;
 8005bb4:	e188      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 8: // FR
      curTask = TASK_FR;
 8005bb6:	4b8e      	ldr	r3, [pc, #568]	; (8005df0 <runCmdTask+0x5e4>)
 8005bb8:	2203      	movs	r2, #3
 8005bba:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005bbc:	4b89      	ldr	r3, [pc, #548]	; (8005de4 <runCmdTask+0x5d8>)
 8005bbe:	2263      	movs	r2, #99	; 0x63
 8005bc0:	701a      	strb	r2, [r3, #0]
      break;
 8005bc2:	e181      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 9: // BL
      curTask = TASK_BL;
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	; (8005df0 <runCmdTask+0x5e4>)
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005bca:	4b86      	ldr	r3, [pc, #536]	; (8005de4 <runCmdTask+0x5d8>)
 8005bcc:	2263      	movs	r2, #99	; 0x63
 8005bce:	701a      	strb	r2, [r3, #0]
      break;
 8005bd0:	e17a      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 10: // BR
      curTask = TASK_BR;
 8005bd2:	4b87      	ldr	r3, [pc, #540]	; (8005df0 <runCmdTask+0x5e4>)
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005bd8:	4b82      	ldr	r3, [pc, #520]	; (8005de4 <runCmdTask+0x5d8>)
 8005bda:	2263      	movs	r2, #99	; 0x63
 8005bdc:	701a      	strb	r2, [r3, #0]
      break;
 8005bde:	e173      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 11: // TL
    case 12: // TR
      __SET_SERVO_TURN_MAX(&htim1, curCmd.index - 11 ? 1 : 0);
 8005be0:	4b80      	ldr	r3, [pc, #512]	; (8005de4 <runCmdTask+0x5d8>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b0b      	cmp	r3, #11
 8005be6:	d005      	beq.n	8005bf4 <runCmdTask+0x3e8>
 8005be8:	4b82      	ldr	r3, [pc, #520]	; (8005df4 <runCmdTask+0x5e8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f240 1209 	movw	r2, #265	; 0x109
 8005bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8005bf2:	e003      	b.n	8005bfc <runCmdTask+0x3f0>
 8005bf4:	4b7f      	ldr	r3, [pc, #508]	; (8005df4 <runCmdTask+0x5e8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2246      	movs	r2, #70	; 0x46
 8005bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8005bfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c00:	f001 f9b0 	bl	8006f64 <HAL_Delay>
      __CLEAR_CURCMD(curCmd);
 8005c04:	4b77      	ldr	r3, [pc, #476]	; (8005de4 <runCmdTask+0x5d8>)
 8005c06:	2264      	movs	r2, #100	; 0x64
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	4b76      	ldr	r3, [pc, #472]	; (8005de4 <runCmdTask+0x5d8>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005c10:	4a79      	ldr	r2, [pc, #484]	; (8005df8 <runCmdTask+0x5ec>)
 8005c12:	210f      	movs	r1, #15
 8005c14:	4875      	ldr	r0, [pc, #468]	; (8005dec <runCmdTask+0x5e0>)
 8005c16:	f009 fd85 	bl	800f724 <sniprintf>
 8005c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c1e:	2206      	movs	r2, #6
 8005c20:	4976      	ldr	r1, [pc, #472]	; (8005dfc <runCmdTask+0x5f0>)
 8005c22:	4877      	ldr	r0, [pc, #476]	; (8005e00 <runCmdTask+0x5f4>)
 8005c24:	f005 fc05 	bl	800b432 <HAL_UART_Transmit>
      break;
 8005c28:	e14e      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 13: // debug IR sensor
      // curTask = TASK_ADC;
      break;
    case 14: // DT move until specified distance from obstacle
      curTask = TASK_MOVE_OBS;
 8005c2a:	4b71      	ldr	r3, [pc, #452]	; (8005df0 <runCmdTask+0x5e4>)
 8005c2c:	2209      	movs	r2, #9
 8005c2e:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005c30:	4b6c      	ldr	r3, [pc, #432]	; (8005de4 <runCmdTask+0x5d8>)
 8005c32:	2263      	movs	r2, #99	; 0x63
 8005c34:	701a      	strb	r2, [r3, #0]
      break;
 8005c36:	e147      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 15: // TD move until specified distance from obstacle, record the distance
      curTask = TASK_MOVE_OBS_MEM;
 8005c38:	4b6d      	ldr	r3, [pc, #436]	; (8005df0 <runCmdTask+0x5e4>)
 8005c3a:	220a      	movs	r2, #10
 8005c3c:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005c3e:	4b69      	ldr	r3, [pc, #420]	; (8005de4 <runCmdTask+0x5d8>)
 8005c40:	2263      	movs	r2, #99	; 0x63
 8005c42:	701a      	strb	r2, [r3, #0]
      break;
 8005c44:	e140      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 88: // FAxxx, forward rotate left by xxx degree
    case 89: // FCxxx, forward rotate right by xxx degree
      __SET_MOTOR_DIRECTION(DIR_FORWARD);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2104      	movs	r1, #4
 8005c4a:	486e      	ldr	r0, [pc, #440]	; (8005e04 <runCmdTask+0x5f8>)
 8005c4c:	f002 f8be 	bl	8007dcc <HAL_GPIO_WritePin>
 8005c50:	2201      	movs	r2, #1
 8005c52:	2108      	movs	r1, #8
 8005c54:	486b      	ldr	r0, [pc, #428]	; (8005e04 <runCmdTask+0x5f8>)
 8005c56:	f002 f8b9 	bl	8007dcc <HAL_GPIO_WritePin>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2120      	movs	r1, #32
 8005c5e:	4869      	ldr	r0, [pc, #420]	; (8005e04 <runCmdTask+0x5f8>)
 8005c60:	f002 f8b4 	bl	8007dcc <HAL_GPIO_WritePin>
 8005c64:	2201      	movs	r2, #1
 8005c66:	2110      	movs	r1, #16
 8005c68:	4866      	ldr	r0, [pc, #408]	; (8005e04 <runCmdTask+0x5f8>)
 8005c6a:	f002 f8af 	bl	8007dcc <HAL_GPIO_WritePin>
      if (curCmd.index == 88)
 8005c6e:	4b5d      	ldr	r3, [pc, #372]	; (8005de4 <runCmdTask+0x5d8>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b58      	cmp	r3, #88	; 0x58
 8005c74:	d12d      	bne.n	8005cd2 <runCmdTask+0x4c6>
      {
        __SET_SERVO_TURN(&htim1, 90);
 8005c76:	4b5f      	ldr	r3, [pc, #380]	; (8005df4 <runCmdTask+0x5e8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	225a      	movs	r2, #90	; 0x5a
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c82:	f001 f96f 	bl	8006f64 <HAL_Delay>
        if (curCmd.val >= 10)
 8005c86:	4b57      	ldr	r3, [pc, #348]	; (8005de4 <runCmdTask+0x5d8>)
 8005c88:	885b      	ldrh	r3, [r3, #2]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d90d      	bls.n	8005caa <runCmdTask+0x49e>
          targetAngle = (curCmd.val - FAOFFSET);
 8005c8e:	4b55      	ldr	r3, [pc, #340]	; (8005de4 <runCmdTask+0x5d8>)
 8005c90:	885b      	ldrh	r3, [r3, #2]
 8005c92:	461a      	mov	r2, r3
 8005c94:	4b5c      	ldr	r3, [pc, #368]	; (8005e08 <runCmdTask+0x5fc>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca2:	4b5a      	ldr	r3, [pc, #360]	; (8005e0c <runCmdTask+0x600>)
 8005ca4:	edc3 7a00 	vstr	s15, [r3]
 8005ca8:	e008      	b.n	8005cbc <runCmdTask+0x4b0>
        else
          targetAngle = curCmd.val;
 8005caa:	4b4e      	ldr	r3, [pc, #312]	; (8005de4 <runCmdTask+0x5d8>)
 8005cac:	885b      	ldrh	r3, [r3, #2]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb6:	4b55      	ldr	r3, [pc, #340]	; (8005e0c <runCmdTask+0x600>)
 8005cb8:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8005cbc:	4b54      	ldr	r3, [pc, #336]	; (8005e10 <runCmdTask+0x604>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f240 5235 	movw	r2, #1333	; 0x535
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8005cc6:	4b52      	ldr	r3, [pc, #328]	; (8005e10 <runCmdTask+0x604>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
 8005cd0:	e02e      	b.n	8005d30 <runCmdTask+0x524>
      }
      else
      {
        __SET_SERVO_TURN(&htim1, 265);
 8005cd2:	4b48      	ldr	r3, [pc, #288]	; (8005df4 <runCmdTask+0x5e8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f240 1209 	movw	r2, #265	; 0x109
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
 8005cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005ce0:	f001 f940 	bl	8006f64 <HAL_Delay>
        if (curCmd.val >= 10)
 8005ce4:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <runCmdTask+0x5d8>)
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d90d      	bls.n	8005d08 <runCmdTask+0x4fc>
          targetAngle = -(curCmd.val - FCOFFSET);
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <runCmdTask+0x608>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b3c      	ldr	r3, [pc, #240]	; (8005de4 <runCmdTask+0x5d8>)
 8005cf4:	885b      	ldrh	r3, [r3, #2]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	ee07 3a90 	vmov	s15, r3
 8005cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d00:	4b42      	ldr	r3, [pc, #264]	; (8005e0c <runCmdTask+0x600>)
 8005d02:	edc3 7a00 	vstr	s15, [r3]
 8005d06:	e009      	b.n	8005d1c <runCmdTask+0x510>
        else
          targetAngle = -curCmd.val;
 8005d08:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <runCmdTask+0x5d8>)
 8005d0a:	885b      	ldrh	r3, [r3, #2]
 8005d0c:	425b      	negs	r3, r3
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d16:	4b3d      	ldr	r3, [pc, #244]	; (8005e0c <runCmdTask+0x600>)
 8005d18:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8005d1c:	4b3c      	ldr	r3, [pc, #240]	; (8005e10 <runCmdTask+0x604>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
 8005d26:	4b3a      	ldr	r3, [pc, #232]	; (8005e10 <runCmdTask+0x604>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f240 5235 	movw	r2, #1333	; 0x535
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8005d30:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <runCmdTask+0x5d8>)
 8005d32:	2263      	movs	r2, #99	; 0x63
 8005d34:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8005d36:	4835      	ldr	r0, [pc, #212]	; (8005e0c <runCmdTask+0x600>)
 8005d38:	f7fd fa8e 	bl	8003258 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8005d3c:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <runCmdTask+0x5d8>)
 8005d3e:	2264      	movs	r2, #100	; 0x64
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <runCmdTask+0x5d8>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005d48:	4a2b      	ldr	r2, [pc, #172]	; (8005df8 <runCmdTask+0x5ec>)
 8005d4a:	210f      	movs	r1, #15
 8005d4c:	4827      	ldr	r0, [pc, #156]	; (8005dec <runCmdTask+0x5e0>)
 8005d4e:	f009 fce9 	bl	800f724 <sniprintf>
 8005d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d56:	2206      	movs	r2, #6
 8005d58:	4928      	ldr	r1, [pc, #160]	; (8005dfc <runCmdTask+0x5f0>)
 8005d5a:	4829      	ldr	r0, [pc, #164]	; (8005e00 <runCmdTask+0x5f4>)
 8005d5c:	f005 fb69 	bl	800b432 <HAL_UART_Transmit>
      break;
 8005d60:	e0b2      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 90: // BAxxx, backward rotate right by xxx degree
    case 91: // BCxxx, backward rotate left by xxx degree
      __SET_SERVO_TURN_MAX(&htim1, (int)(!(curCmd.index - 90)));
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <runCmdTask+0x5d8>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b5a      	cmp	r3, #90	; 0x5a
 8005d68:	d105      	bne.n	8005d76 <runCmdTask+0x56a>
 8005d6a:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <runCmdTask+0x5e8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f240 1209 	movw	r2, #265	; 0x109
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40
 8005d74:	e003      	b.n	8005d7e <runCmdTask+0x572>
 8005d76:	4b1f      	ldr	r3, [pc, #124]	; (8005df4 <runCmdTask+0x5e8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2246      	movs	r2, #70	; 0x46
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8005d7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d82:	f001 f8ef 	bl	8006f64 <HAL_Delay>
      __SET_MOTOR_DIRECTION(DIR_BACKWARD);
 8005d86:	2201      	movs	r2, #1
 8005d88:	2104      	movs	r1, #4
 8005d8a:	481e      	ldr	r0, [pc, #120]	; (8005e04 <runCmdTask+0x5f8>)
 8005d8c:	f002 f81e 	bl	8007dcc <HAL_GPIO_WritePin>
 8005d90:	2200      	movs	r2, #0
 8005d92:	2108      	movs	r1, #8
 8005d94:	481b      	ldr	r0, [pc, #108]	; (8005e04 <runCmdTask+0x5f8>)
 8005d96:	f002 f819 	bl	8007dcc <HAL_GPIO_WritePin>
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	4819      	ldr	r0, [pc, #100]	; (8005e04 <runCmdTask+0x5f8>)
 8005da0:	f002 f814 	bl	8007dcc <HAL_GPIO_WritePin>
 8005da4:	2200      	movs	r2, #0
 8005da6:	2110      	movs	r1, #16
 8005da8:	4816      	ldr	r0, [pc, #88]	; (8005e04 <runCmdTask+0x5f8>)
 8005daa:	f002 f80f 	bl	8007dcc <HAL_GPIO_WritePin>
      if (curCmd.index == 90)
 8005dae:	4b0d      	ldr	r3, [pc, #52]	; (8005de4 <runCmdTask+0x5d8>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b5a      	cmp	r3, #90	; 0x5a
 8005db4:	d130      	bne.n	8005e18 <runCmdTask+0x60c>
      {

        targetAngle = curCmd.val;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <runCmdTask+0x5d8>)
 8005db8:	885b      	ldrh	r3, [r3, #2]
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <runCmdTask+0x600>)
 8005dc4:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 2000, 1333);
 8005dc8:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <runCmdTask+0x604>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <runCmdTask+0x604>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f240 5235 	movw	r2, #1333	; 0x535
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
 8005ddc:	e030      	b.n	8005e40 <runCmdTask+0x634>
 8005dde:	bf00      	nop
 8005de0:	20000498 	.word	0x20000498
 8005de4:	200004cc 	.word	0x200004cc
 8005de8:	0801014c 	.word	0x0801014c
 8005dec:	200004d0 	.word	0x200004d0
 8005df0:	20000134 	.word	0x20000134
 8005df4:	200002a4 	.word	0x200002a4
 8005df8:	0801013c 	.word	0x0801013c
 8005dfc:	08010144 	.word	0x08010144
 8005e00:	2000040c 	.word	0x2000040c
 8005e04:	40020000 	.word	0x40020000
 8005e08:	20000003 	.word	0x20000003
 8005e0c:	200004e4 	.word	0x200004e4
 8005e10:	200003c4 	.word	0x200003c4
 8005e14:	20000002 	.word	0x20000002
      }
      else
      {
        targetAngle = -curCmd.val;
 8005e18:	4b2d      	ldr	r3, [pc, #180]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e1a:	885b      	ldrh	r3, [r3, #2]
 8005e1c:	425b      	negs	r3, r3
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <runCmdTask+0x6c8>)
 8005e28:	edc3 7a00 	vstr	s15, [r3]
        __SET_MOTOR_DUTY(&htim8, 1333, 2000);
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <runCmdTask+0x6cc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f240 5235 	movw	r2, #1333	; 0x535
 8005e34:	635a      	str	r2, [r3, #52]	; 0x34
 8005e36:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <runCmdTask+0x6cc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
      }
      __PEND_CURCMD(curCmd);
 8005e40:	4b23      	ldr	r3, [pc, #140]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e42:	2263      	movs	r2, #99	; 0x63
 8005e44:	701a      	strb	r2, [r3, #0]
      RobotTurn(&targetAngle);
 8005e46:	4823      	ldr	r0, [pc, #140]	; (8005ed4 <runCmdTask+0x6c8>)
 8005e48:	f7fd fa06 	bl	8003258 <RobotTurn>
      __CLEAR_CURCMD(curCmd);
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e4e:	2264      	movs	r2, #100	; 0x64
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	805a      	strh	r2, [r3, #2]
      __ACK_TASK_DONE(&huart3, rxMsg);
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <runCmdTask+0x6d0>)
 8005e5a:	210f      	movs	r1, #15
 8005e5c:	4820      	ldr	r0, [pc, #128]	; (8005ee0 <runCmdTask+0x6d4>)
 8005e5e:	f009 fc61 	bl	800f724 <sniprintf>
 8005e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e66:	2206      	movs	r2, #6
 8005e68:	491e      	ldr	r1, [pc, #120]	; (8005ee4 <runCmdTask+0x6d8>)
 8005e6a:	481f      	ldr	r0, [pc, #124]	; (8005ee8 <runCmdTask+0x6dc>)
 8005e6c:	f005 fae1 	bl	800b432 <HAL_UART_Transmit>
      break;
 8005e70:	e02a      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 92: // TAxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_A;
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <runCmdTask+0x6e0>)
 8005e74:	220b      	movs	r2, #11
 8005e76:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005e78:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e7a:	2263      	movs	r2, #99	; 0x63
 8005e7c:	701a      	strb	r2, [r3, #0]
      break;
 8005e7e:	e023      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 93: // IR move until overshoot
      curTask = TASK_TURN_IR;
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <runCmdTask+0x6e0>)
 8005e82:	220d      	movs	r2, #13
 8005e84:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e88:	2263      	movs	r2, #99	; 0x63
 8005e8a:	701a      	strb	r2, [r3, #0]
      break;
 8005e8c:	e01c      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 94: // IR move until close to obstacle
      curTask = TASK_TURN_IR_CLOSE;
 8005e8e:	4b17      	ldr	r3, [pc, #92]	; (8005eec <runCmdTask+0x6e0>)
 8005e90:	220e      	movs	r2, #14
 8005e92:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <runCmdTask+0x6c4>)
 8005e96:	2263      	movs	r2, #99	; 0x63
 8005e98:	701a      	strb	r2, [r3, #0]
      break;
 8005e9a:	e015      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 95: // TBxx, 01 turn right, 02 turn left --TASK 2
      curTask = TASK_TURN_B;
 8005e9c:	4b13      	ldr	r3, [pc, #76]	; (8005eec <runCmdTask+0x6e0>)
 8005e9e:	220c      	movs	r2, #12
 8005ea0:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <runCmdTask+0x6c4>)
 8005ea4:	2263      	movs	r2, #99	; 0x63
 8005ea6:	701a      	strb	r2, [r3, #0]
      break;
 8005ea8:	e00e      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 96: // GHxx, 01 from left (after TB01), 02 from right (after TB02),  --TASK 2
      curTask = TASK_GO_HOME;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <runCmdTask+0x6e0>)
 8005eac:	220f      	movs	r2, #15
 8005eae:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <runCmdTask+0x6c4>)
 8005eb2:	2263      	movs	r2, #99	; 0x63
 8005eb4:	701a      	strb	r2, [r3, #0]
      break;
 8005eb6:	e007      	b.n	8005ec8 <runCmdTask+0x6bc>
    case 97: // AMxx, 01 from left (after TA01), 02 from right (after TA02),  --TASK 2
      curTask = TASK_AM;
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <runCmdTask+0x6e0>)
 8005eba:	2210      	movs	r2, #16
 8005ebc:	701a      	strb	r2, [r3, #0]
      __PEND_CURCMD(curCmd);
 8005ebe:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <runCmdTask+0x6c4>)
 8005ec0:	2263      	movs	r2, #99	; 0x63
 8005ec2:	701a      	strb	r2, [r3, #0]
      break;
 8005ec4:	e000      	b.n	8005ec8 <runCmdTask+0x6bc>
      break;
    case 100:
      break;
    default:
      //		 curCmd.index = 99;
      break;
 8005ec6:	bf00      	nop
    }
    osDelay(1);
 8005ec8:	2001      	movs	r0, #1
 8005eca:	f006 fbfd 	bl	800c6c8 <osDelay>
    switch (curCmd.index)
 8005ece:	e4a1      	b.n	8005814 <runCmdTask+0x8>
 8005ed0:	200004cc 	.word	0x200004cc
 8005ed4:	200004e4 	.word	0x200004e4
 8005ed8:	200003c4 	.word	0x200003c4
 8005edc:	0801013c 	.word	0x0801013c
 8005ee0:	200004d0 	.word	0x200004d0
 8005ee4:	08010144 	.word	0x08010144
 8005ee8:	2000040c 	.word	0x2000040c
 8005eec:	20000134 	.word	0x20000134

08005ef0 <runMoveDistObsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runMoveDistObsTask */
void runMoveDistObsTask(void *argument)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runMoveDistObsTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS)
 8005ef8:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <runMoveDistObsTask+0xc8>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d004      	beq.n	8005f0a <runMoveDistObsTask+0x1a>
      osDelay(1000);
 8005f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f04:	f006 fbe0 	bl	800c6c8 <osDelay>
 8005f08:	e051      	b.n	8005fae <runMoveDistObsTask+0xbe>
    else
    {
      targetDist = (float)curCmd.val;
 8005f0a:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <runMoveDistObsTask+0xcc>)
 8005f0c:	885b      	ldrh	r3, [r3, #2]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <runMoveDistObsTask+0xd0>)
 8005f18:	edc3 7a00 	vstr	s15, [r3]
      RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8005f1c:	2102      	movs	r1, #2
 8005f1e:	4828      	ldr	r0, [pc, #160]	; (8005fc0 <runMoveDistObsTask+0xd0>)
 8005f20:	f7fd fa46 	bl	80033b0 <RobotMoveDistObstacle>

      __ON_TASK_END(&htim8, prevTask, curTask);
 8005f24:	4b27      	ldr	r3, [pc, #156]	; (8005fc4 <runMoveDistObsTask+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8005f2c:	4b25      	ldr	r3, [pc, #148]	; (8005fc4 <runMoveDistObsTask+0xd4>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2200      	movs	r2, #0
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
 8005f34:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <runMoveDistObsTask+0xc8>)
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <runMoveDistObsTask+0xd8>)
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <runMoveDistObsTask+0xc8>)
 8005f3e:	2211      	movs	r2, #17
 8005f40:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 8005f42:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <runMoveDistObsTask+0xdc>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8005f48:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d112      	bne.n	8005f7a <runMoveDistObsTask+0x8a>
      {
        __CLEAR_CURCMD(curCmd);
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <runMoveDistObsTask+0xcc>)
 8005f56:	2264      	movs	r2, #100	; 0x64
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <runMoveDistObsTask+0xcc>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <runMoveDistObsTask+0xe4>)
 8005f62:	210f      	movs	r1, #15
 8005f64:	481c      	ldr	r0, [pc, #112]	; (8005fd8 <runMoveDistObsTask+0xe8>)
 8005f66:	f009 fbdd 	bl	800f724 <sniprintf>
 8005f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f6e:	2206      	movs	r2, #6
 8005f70:	491a      	ldr	r1, [pc, #104]	; (8005fdc <runMoveDistObsTask+0xec>)
 8005f72:	481b      	ldr	r0, [pc, #108]	; (8005fe0 <runMoveDistObsTask+0xf0>)
 8005f74:	f005 fa5d 	bl	800b432 <HAL_UART_Transmit>
 8005f78:	e019      	b.n	8005fae <runMoveDistObsTask+0xbe>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	4a0f      	ldr	r2, [pc, #60]	; (8005fbc <runMoveDistObsTask+0xcc>)
 8005f80:	4913      	ldr	r1, [pc, #76]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	4a0f      	ldr	r2, [pc, #60]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005f92:	7892      	ldrb	r2, [r2, #2]
 8005f94:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f98:	fb01 f202 	mul.w	r2, r1, r2
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <runMoveDistObsTask+0xe0>)
 8005fa2:	705a      	strb	r2, [r3, #1]
 8005fa4:	4a0f      	ldr	r2, [pc, #60]	; (8005fe4 <runMoveDistObsTask+0xf4>)
 8005fa6:	210f      	movs	r1, #15
 8005fa8:	480b      	ldr	r0, [pc, #44]	; (8005fd8 <runMoveDistObsTask+0xe8>)
 8005faa:	f009 fbbb 	bl	800f724 <sniprintf>
    }
    osDelay(1);
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f006 fb8a 	bl	800c6c8 <osDelay>
    if (curTask != TASK_MOVE_OBS)
 8005fb4:	e7a0      	b.n	8005ef8 <runMoveDistObsTask+0x8>
 8005fb6:	bf00      	nop
 8005fb8:	20000134 	.word	0x20000134
 8005fbc:	200004cc 	.word	0x200004cc
 8005fc0:	200004f8 	.word	0x200004f8
 8005fc4:	200003c4 	.word	0x200003c4
 8005fc8:	20000135 	.word	0x20000135
 8005fcc:	20000564 	.word	0x20000564
 8005fd0:	20000498 	.word	0x20000498
 8005fd4:	0801013c 	.word	0x0801013c
 8005fd8:	200004d0 	.word	0x200004d0
 8005fdc:	08010144 	.word	0x08010144
 8005fe0:	2000040c 	.word	0x2000040c
 8005fe4:	0801014c 	.word	0x0801014c

08005fe8 <runTurnATask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnATask */
void runTurnATask(void *argument)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnATask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_A)
 8005ff0:	4b42      	ldr	r3, [pc, #264]	; (80060fc <runTurnATask+0x114>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b0b      	cmp	r3, #11
 8005ff6:	d004      	beq.n	8006002 <runTurnATask+0x1a>
      osDelay(1000);
 8005ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ffc:	f006 fb64 	bl	800c6c8 <osDelay>
 8006000:	e077      	b.n	80060f2 <runTurnATask+0x10a>
    else
    {

      switch (curCmd.val)
 8006002:	4b3f      	ldr	r3, [pc, #252]	; (8006100 <runTurnATask+0x118>)
 8006004:	885b      	ldrh	r3, [r3, #2]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d002      	beq.n	8006010 <runTurnATask+0x28>
 800600a:	2b02      	cmp	r3, #2
 800600c:	d01a      	beq.n	8006044 <runTurnATask+0x5c>
 800600e:	e033      	b.n	8006078 <runTurnATask+0x90>
      {
      case 01: // Turn A right:
        // DT25
        targetDist = 25;
 8006010:	4b3c      	ldr	r3, [pc, #240]	; (8006104 <runTurnATask+0x11c>)
 8006012:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <runTurnATask+0x120>)
 8006014:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8006016:	2102      	movs	r1, #2
 8006018:	483a      	ldr	r0, [pc, #232]	; (8006104 <runTurnATask+0x11c>)
 800601a:	f7fd f9c9 	bl	80033b0 <RobotMoveDistObstacle>
        // FC45
        RobotTurnFC45();
 800601e:	f7fd ff95 	bl	8003f4c <RobotTurnFC45>
        osDelay(100);
 8006022:	2064      	movs	r0, #100	; 0x64
 8006024:	f006 fb50 	bl	800c6c8 <osDelay>
        // FA45
        RobotTurnFA45();
 8006028:	f7fd ffd6 	bl	8003fd8 <RobotTurnFA45>
        osDelay(100);
 800602c:	2064      	movs	r0, #100	; 0x64
 800602e:	f006 fb4b 	bl	800c6c8 <osDelay>
        // BW05
        targetDist = 05;
 8006032:	4b34      	ldr	r3, [pc, #208]	; (8006104 <runTurnATask+0x11c>)
 8006034:	4a35      	ldr	r2, [pc, #212]	; (800610c <runTurnATask+0x124>)
 8006036:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	4831      	ldr	r0, [pc, #196]	; (8006104 <runTurnATask+0x11c>)
 800603e:	f7fc fccf 	bl	80029e0 <RobotMoveDist>
        // osDelay(100);
        break;
 8006042:	e019      	b.n	8006078 <runTurnATask+0x90>

      case 02: // Turn A left:
        // DT25
        targetDist = 25;
 8006044:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <runTurnATask+0x11c>)
 8006046:	4a30      	ldr	r2, [pc, #192]	; (8006108 <runTurnATask+0x120>)
 8006048:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 800604a:	2102      	movs	r1, #2
 800604c:	482d      	ldr	r0, [pc, #180]	; (8006104 <runTurnATask+0x11c>)
 800604e:	f7fd f9af 	bl	80033b0 <RobotMoveDistObstacle>
        // FA45
        RobotTurnFA45();
 8006052:	f7fd ffc1 	bl	8003fd8 <RobotTurnFA45>
        osDelay(100);
 8006056:	2064      	movs	r0, #100	; 0x64
 8006058:	f006 fb36 	bl	800c6c8 <osDelay>
        // FC45
        RobotTurnFC45();
 800605c:	f7fd ff76 	bl	8003f4c <RobotTurnFC45>
        osDelay(100);
 8006060:	2064      	movs	r0, #100	; 0x64
 8006062:	f006 fb31 	bl	800c6c8 <osDelay>
        // BW05
        targetDist = 5;
 8006066:	4b27      	ldr	r3, [pc, #156]	; (8006104 <runTurnATask+0x11c>)
 8006068:	4a28      	ldr	r2, [pc, #160]	; (800610c <runTurnATask+0x124>)
 800606a:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	4824      	ldr	r0, [pc, #144]	; (8006104 <runTurnATask+0x11c>)
 8006072:	f7fc fcb5 	bl	80029e0 <RobotMoveDist>
        // osDelay(100);
        break;
 8006076:	bf00      	nop
      }
      clickOnce = 0;
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <runTurnATask+0x128>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 800607e:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <runTurnATask+0x114>)
 8006080:	781a      	ldrb	r2, [r3, #0]
 8006082:	4b24      	ldr	r3, [pc, #144]	; (8006114 <runTurnATask+0x12c>)
 8006084:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 8006086:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <runTurnATask+0x114>)
 8006088:	2211      	movs	r2, #17
 800608a:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 800608c:	4b22      	ldr	r3, [pc, #136]	; (8006118 <runTurnATask+0x130>)
 800608e:	781a      	ldrb	r2, [r3, #0]
 8006090:	4b21      	ldr	r3, [pc, #132]	; (8006118 <runTurnATask+0x130>)
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	429a      	cmp	r2, r3
 8006096:	d112      	bne.n	80060be <runTurnATask+0xd6>
      {
        __CLEAR_CURCMD(curCmd);
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <runTurnATask+0x118>)
 800609a:	2264      	movs	r2, #100	; 0x64
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	4b18      	ldr	r3, [pc, #96]	; (8006100 <runTurnATask+0x118>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80060a4:	4a1d      	ldr	r2, [pc, #116]	; (800611c <runTurnATask+0x134>)
 80060a6:	210f      	movs	r1, #15
 80060a8:	481d      	ldr	r0, [pc, #116]	; (8006120 <runTurnATask+0x138>)
 80060aa:	f009 fb3b 	bl	800f724 <sniprintf>
 80060ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060b2:	2206      	movs	r2, #6
 80060b4:	491b      	ldr	r1, [pc, #108]	; (8006124 <runTurnATask+0x13c>)
 80060b6:	481c      	ldr	r0, [pc, #112]	; (8006128 <runTurnATask+0x140>)
 80060b8:	f005 f9bb 	bl	800b432 <HAL_UART_Transmit>
 80060bc:	e019      	b.n	80060f2 <runTurnATask+0x10a>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <runTurnATask+0x130>)
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	4a0f      	ldr	r2, [pc, #60]	; (8006100 <runTurnATask+0x118>)
 80060c4:	4914      	ldr	r1, [pc, #80]	; (8006118 <runTurnATask+0x130>)
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <runTurnATask+0x130>)
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a10      	ldr	r2, [pc, #64]	; (8006118 <runTurnATask+0x130>)
 80060d6:	7892      	ldrb	r2, [r2, #2]
 80060d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80060dc:	fb01 f202 	mul.w	r2, r1, r2
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <runTurnATask+0x130>)
 80060e6:	705a      	strb	r2, [r3, #1]
 80060e8:	4a10      	ldr	r2, [pc, #64]	; (800612c <runTurnATask+0x144>)
 80060ea:	210f      	movs	r1, #15
 80060ec:	480c      	ldr	r0, [pc, #48]	; (8006120 <runTurnATask+0x138>)
 80060ee:	f009 fb19 	bl	800f724 <sniprintf>
    }
    osDelay(1);
 80060f2:	2001      	movs	r0, #1
 80060f4:	f006 fae8 	bl	800c6c8 <osDelay>
    if (curTask != TASK_TURN_A)
 80060f8:	e77a      	b.n	8005ff0 <runTurnATask+0x8>
 80060fa:	bf00      	nop
 80060fc:	20000134 	.word	0x20000134
 8006100:	200004cc 	.word	0x200004cc
 8006104:	200004f8 	.word	0x200004f8
 8006108:	41c80000 	.word	0x41c80000
 800610c:	40a00000 	.word	0x40a00000
 8006110:	20000564 	.word	0x20000564
 8006114:	20000135 	.word	0x20000135
 8006118:	20000498 	.word	0x20000498
 800611c:	0801013c 	.word	0x0801013c
 8006120:	200004d0 	.word	0x200004d0
 8006124:	08010144 	.word	0x08010144
 8006128:	2000040c 	.word	0x2000040c
 800612c:	0801014c 	.word	0x0801014c

08006130 <runTDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTDTask */
void runTDTask(void *argument)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTDTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_MOVE_OBS_MEM)
 8006138:	4b35      	ldr	r3, [pc, #212]	; (8006210 <runTDTask+0xe0>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b0a      	cmp	r3, #10
 800613e:	d004      	beq.n	800614a <runTDTask+0x1a>
      osDelay(1000);
 8006140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006144:	f006 fac0 	bl	800c6c8 <osDelay>
 8006148:	e05d      	b.n	8006206 <runTDTask+0xd6>
    else
    {
      // for debugging TD task only: save dist tick when travelling until stop given distance from obstacle
      uint16_t savedDistTick_TD = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	81fb      	strh	r3, [r7, #14]
      targetDist = (float)curCmd.val;
 800614e:	4b31      	ldr	r3, [pc, #196]	; (8006214 <runTDTask+0xe4>)
 8006150:	885b      	ldrh	r3, [r3, #2]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <runTDTask+0xe8>)
 800615c:	edc3 7a00 	vstr	s15, [r3]

      RobotMoveDistObstacleMem(&savedDistTick_TD, &targetDist, SPEED_MODE_2);
 8006160:	f107 030e 	add.w	r3, r7, #14
 8006164:	2202      	movs	r2, #2
 8006166:	492c      	ldr	r1, [pc, #176]	; (8006218 <runTDTask+0xe8>)
 8006168:	4618      	mov	r0, r3
 800616a:	f7fd fa81 	bl	8003670 <RobotMoveDistObstacleMem>
      RobotMoveTick(&savedDistTick_TD, DIR_BACKWARD, SPEED_MODE_2);
 800616e:	f107 030e 	add.w	r3, r7, #14
 8006172:	2202      	movs	r2, #2
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f7fc fdc6 	bl	8002d08 <RobotMoveTick>

      __ON_TASK_END(&htim8, prevTask, curTask);
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <runTDTask+0xec>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2200      	movs	r2, #0
 8006182:	635a      	str	r2, [r3, #52]	; 0x34
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <runTDTask+0xec>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2200      	movs	r2, #0
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
 800618c:	4b20      	ldr	r3, [pc, #128]	; (8006210 <runTDTask+0xe0>)
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	4b23      	ldr	r3, [pc, #140]	; (8006220 <runTDTask+0xf0>)
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <runTDTask+0xe0>)
 8006196:	2211      	movs	r2, #17
 8006198:	701a      	strb	r2, [r3, #0]
      clickOnce = 0;
 800619a:	4b22      	ldr	r3, [pc, #136]	; (8006224 <runTDTask+0xf4>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80061a0:	4b21      	ldr	r3, [pc, #132]	; (8006228 <runTDTask+0xf8>)
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	4b20      	ldr	r3, [pc, #128]	; (8006228 <runTDTask+0xf8>)
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d112      	bne.n	80061d2 <runTDTask+0xa2>
      {
        __CLEAR_CURCMD(curCmd);
 80061ac:	4b19      	ldr	r3, [pc, #100]	; (8006214 <runTDTask+0xe4>)
 80061ae:	2264      	movs	r2, #100	; 0x64
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	4b18      	ldr	r3, [pc, #96]	; (8006214 <runTDTask+0xe4>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80061b8:	4a1c      	ldr	r2, [pc, #112]	; (800622c <runTDTask+0xfc>)
 80061ba:	210f      	movs	r1, #15
 80061bc:	481c      	ldr	r0, [pc, #112]	; (8006230 <runTDTask+0x100>)
 80061be:	f009 fab1 	bl	800f724 <sniprintf>
 80061c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061c6:	2206      	movs	r2, #6
 80061c8:	491a      	ldr	r1, [pc, #104]	; (8006234 <runTDTask+0x104>)
 80061ca:	481b      	ldr	r0, [pc, #108]	; (8006238 <runTDTask+0x108>)
 80061cc:	f005 f931 	bl	800b432 <HAL_UART_Transmit>
 80061d0:	e019      	b.n	8006206 <runTDTask+0xd6>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <runTDTask+0xf8>)
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	4a0f      	ldr	r2, [pc, #60]	; (8006214 <runTDTask+0xe4>)
 80061d8:	4913      	ldr	r1, [pc, #76]	; (8006228 <runTDTask+0xf8>)
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	4b11      	ldr	r3, [pc, #68]	; (8006228 <runTDTask+0xf8>)
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	3301      	adds	r3, #1
 80061e8:	4a0f      	ldr	r2, [pc, #60]	; (8006228 <runTDTask+0xf8>)
 80061ea:	7892      	ldrb	r2, [r2, #2]
 80061ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80061f0:	fb01 f202 	mul.w	r2, r1, r2
 80061f4:	1a9b      	subs	r3, r3, r2
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <runTDTask+0xf8>)
 80061fa:	705a      	strb	r2, [r3, #1]
 80061fc:	4a0f      	ldr	r2, [pc, #60]	; (800623c <runTDTask+0x10c>)
 80061fe:	210f      	movs	r1, #15
 8006200:	480b      	ldr	r0, [pc, #44]	; (8006230 <runTDTask+0x100>)
 8006202:	f009 fa8f 	bl	800f724 <sniprintf>
    }
    osDelay(1);
 8006206:	2001      	movs	r0, #1
 8006208:	f006 fa5e 	bl	800c6c8 <osDelay>
    if (curTask != TASK_MOVE_OBS_MEM)
 800620c:	e794      	b.n	8006138 <runTDTask+0x8>
 800620e:	bf00      	nop
 8006210:	20000134 	.word	0x20000134
 8006214:	200004cc 	.word	0x200004cc
 8006218:	200004f8 	.word	0x200004f8
 800621c:	200003c4 	.word	0x200003c4
 8006220:	20000135 	.word	0x20000135
 8006224:	20000564 	.word	0x20000564
 8006228:	20000498 	.word	0x20000498
 800622c:	0801013c 	.word	0x0801013c
 8006230:	200004d0 	.word	0x200004d0
 8006234:	08010144 	.word	0x08010144
 8006238:	2000040c 	.word	0x2000040c
 800623c:	0801014c 	.word	0x0801014c

08006240 <runTurnBTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runTurnBTask */
void runTurnBTask(void *argument)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runTurnBTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_TURN_B)
 8006248:	4b75      	ldr	r3, [pc, #468]	; (8006420 <runTurnBTask+0x1e0>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b0c      	cmp	r3, #12
 800624e:	d004      	beq.n	800625a <runTurnBTask+0x1a>
      osDelay(1000);
 8006250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006254:	f006 fa38 	bl	800c6c8 <osDelay>
 8006258:	e0dd      	b.n	8006416 <runTurnBTask+0x1d6>
    else
    {
      switch (curCmd.val)
 800625a:	4b72      	ldr	r3, [pc, #456]	; (8006424 <runTurnBTask+0x1e4>)
 800625c:	885b      	ldrh	r3, [r3, #2]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d002      	beq.n	8006268 <runTurnBTask+0x28>
 8006262:	2b02      	cmp	r3, #2
 8006264:	d04d      	beq.n	8006302 <runTurnBTask+0xc2>
 8006266:	e099      	b.n	800639c <runTurnBTask+0x15c>
      {
      case 01: // Turn B right:
        // DT30
        targetDist = 27;
 8006268:	4b6f      	ldr	r3, [pc, #444]	; (8006428 <runTurnBTask+0x1e8>)
 800626a:	4a70      	ldr	r2, [pc, #448]	; (800642c <runTurnBTask+0x1ec>)
 800626c:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 800626e:	2102      	movs	r1, #2
 8006270:	486d      	ldr	r0, [pc, #436]	; (8006428 <runTurnBTask+0x1e8>)
 8006272:	f7fd f89d 	bl	80033b0 <RobotMoveDistObstacle>
        osDelay(100);
 8006276:	2064      	movs	r0, #100	; 0x64
 8006278:	f006 fa26 	bl	800c6c8 <osDelay>
        // FR30
        RobotTurnFR30();
 800627c:	f7fd fef2 	bl	8004064 <RobotTurnFR30>
        osDelay(50);
 8006280:	2032      	movs	r0, #50	; 0x32
 8006282:	f006 fa21 	bl	800c6c8 <osDelay>
        // IR01 (left IR, follow wall 1st)
        RobotMoveUntilIROvershoot(0);
 8006286:	2000      	movs	r0, #0
 8006288:	f7fd fb5a 	bl	8003940 <RobotMoveUntilIROvershoot>
        osDelay(50);
 800628c:	2032      	movs	r0, #50	; 0x32
 800628e:	f006 fa1b 	bl	800c6c8 <osDelay>
        // FL30
        RobotTurnFL30();
 8006292:	f7fd ff7d 	bl	8004190 <RobotTurnFL30>
        osDelay(50);
 8006296:	2032      	movs	r0, #50	; 0x32
 8006298:	f006 fa16 	bl	800c6c8 <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 800629c:	4b62      	ldr	r3, [pc, #392]	; (8006428 <runTurnBTask+0x1e8>)
 800629e:	4a64      	ldr	r2, [pc, #400]	; (8006430 <runTurnBTask+0x1f0>)
 80062a0:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80062a2:	2200      	movs	r2, #0
 80062a4:	2101      	movs	r1, #1
 80062a6:	4860      	ldr	r0, [pc, #384]	; (8006428 <runTurnBTask+0x1e8>)
 80062a8:	f7fc fb9a 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 80062ac:	2032      	movs	r0, #50	; 0x32
 80062ae:	f006 fa0b 	bl	800c6c8 <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(0);
 80062b2:	2000      	movs	r0, #0
 80062b4:	f7fd fb44 	bl	8003940 <RobotMoveUntilIROvershoot>
        osDelay(50);
 80062b8:	2032      	movs	r0, #50	; 0x32
 80062ba:	f006 fa05 	bl	800c6c8 <osDelay>
        // FL30
        RobotTurnFL30();
 80062be:	f7fd ff67 	bl	8004190 <RobotTurnFL30>
        osDelay(50);
 80062c2:	2032      	movs	r0, #50	; 0x32
 80062c4:	f006 fa00 	bl	800c6c8 <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(0);
 80062c8:	2000      	movs	r0, #0
 80062ca:	f7fd fcc1 	bl	8003c50 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 80062ce:	2032      	movs	r0, #50	; 0x32
 80062d0:	f006 f9fa 	bl	800c6c8 <osDelay>
        // IR01 (left IR)
        RobotMoveUntilIROvershoot(0);
 80062d4:	2000      	movs	r0, #0
 80062d6:	f7fd fb33 	bl	8003940 <RobotMoveUntilIROvershoot>
        osDelay(50);
 80062da:	2032      	movs	r0, #50	; 0x32
 80062dc:	f006 f9f4 	bl	800c6c8 <osDelay>
        // FW15
        targetDist = 15;
 80062e0:	4b51      	ldr	r3, [pc, #324]	; (8006428 <runTurnBTask+0x1e8>)
 80062e2:	4a54      	ldr	r2, [pc, #336]	; (8006434 <runTurnBTask+0x1f4>)
 80062e4:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 80062e6:	2201      	movs	r2, #1
 80062e8:	2101      	movs	r1, #1
 80062ea:	484f      	ldr	r0, [pc, #316]	; (8006428 <runTurnBTask+0x1e8>)
 80062ec:	f7fc fb78 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 80062f0:	2032      	movs	r0, #50	; 0x32
 80062f2:	f006 f9e9 	bl	800c6c8 <osDelay>
        // FL30
        RobotTurnFL30();
 80062f6:	f7fd ff4b 	bl	8004190 <RobotTurnFL30>
        osDelay(50);
 80062fa:	2032      	movs	r0, #50	; 0x32
 80062fc:	f006 f9e4 	bl	800c6c8 <osDelay>
        break;
 8006300:	e04c      	b.n	800639c <runTurnBTask+0x15c>
      case 02: // Turn B left:
        // DT30
        targetDist = 27;
 8006302:	4b49      	ldr	r3, [pc, #292]	; (8006428 <runTurnBTask+0x1e8>)
 8006304:	4a49      	ldr	r2, [pc, #292]	; (800642c <runTurnBTask+0x1ec>)
 8006306:	601a      	str	r2, [r3, #0]
        RobotMoveDistObstacle(&targetDist, SPEED_MODE_2);
 8006308:	2102      	movs	r1, #2
 800630a:	4847      	ldr	r0, [pc, #284]	; (8006428 <runTurnBTask+0x1e8>)
 800630c:	f7fd f850 	bl	80033b0 <RobotMoveDistObstacle>
        osDelay(100);
 8006310:	2064      	movs	r0, #100	; 0x64
 8006312:	f006 f9d9 	bl	800c6c8 <osDelay>
        // FL30
        RobotTurnFL30();
 8006316:	f7fd ff3b 	bl	8004190 <RobotTurnFL30>
        osDelay(50);
 800631a:	2032      	movs	r0, #50	; 0x32
 800631c:	f006 f9d4 	bl	800c6c8 <osDelay>
        // IR02 (right IR, follow wall 1st)
        RobotMoveUntilIROvershoot(1);
 8006320:	2001      	movs	r0, #1
 8006322:	f7fd fb0d 	bl	8003940 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006326:	2032      	movs	r0, #50	; 0x32
 8006328:	f006 f9ce 	bl	800c6c8 <osDelay>
        // FR30
        RobotTurnFR30();
 800632c:	f7fd fe9a 	bl	8004064 <RobotTurnFR30>
        osDelay(50);
 8006330:	2032      	movs	r0, #50	; 0x32
 8006332:	f006 f9c9 	bl	800c6c8 <osDelay>
        // 1st turn after sideway of obstacle
        // FW07 - avoidance of obstacle
        targetDist = 7;
 8006336:	4b3c      	ldr	r3, [pc, #240]	; (8006428 <runTurnBTask+0x1e8>)
 8006338:	4a3d      	ldr	r2, [pc, #244]	; (8006430 <runTurnBTask+0x1f0>)
 800633a:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 800633c:	2200      	movs	r2, #0
 800633e:	2101      	movs	r1, #1
 8006340:	4839      	ldr	r0, [pc, #228]	; (8006428 <runTurnBTask+0x1e8>)
 8006342:	f7fc fb4d 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 8006346:	2032      	movs	r0, #50	; 0x32
 8006348:	f006 f9be 	bl	800c6c8 <osDelay>
        // out of obstacle zone
        // move until obstacle detected
        RobotMoveUntilIROvershoot(1);
 800634c:	2001      	movs	r0, #1
 800634e:	f7fd faf7 	bl	8003940 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006352:	2032      	movs	r0, #50	; 0x32
 8006354:	f006 f9b8 	bl	800c6c8 <osDelay>
        // FR30
        RobotTurnFR30();
 8006358:	f7fd fe84 	bl	8004064 <RobotTurnFR30>
        osDelay(50);
 800635c:	2032      	movs	r0, #50	; 0x32
 800635e:	f006 f9b3 	bl	800c6c8 <osDelay>
        // move until obstacle detected
        RobotMoveUntilIRCloseDist(1);
 8006362:	2001      	movs	r0, #1
 8006364:	f7fd fc74 	bl	8003c50 <RobotMoveUntilIRCloseDist>
        osDelay(50);
 8006368:	2032      	movs	r0, #50	; 0x32
 800636a:	f006 f9ad 	bl	800c6c8 <osDelay>
        // IR02 (right IR)
        RobotMoveUntilIROvershoot(1);
 800636e:	2001      	movs	r0, #1
 8006370:	f7fd fae6 	bl	8003940 <RobotMoveUntilIROvershoot>
        osDelay(50);
 8006374:	2032      	movs	r0, #50	; 0x32
 8006376:	f006 f9a7 	bl	800c6c8 <osDelay>
        // FW15
        targetDist = 15;
 800637a:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <runTurnBTask+0x1e8>)
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <runTurnBTask+0x1f4>)
 800637e:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_1);
 8006380:	2201      	movs	r2, #1
 8006382:	2101      	movs	r1, #1
 8006384:	4828      	ldr	r0, [pc, #160]	; (8006428 <runTurnBTask+0x1e8>)
 8006386:	f7fc fb2b 	bl	80029e0 <RobotMoveDist>
        osDelay(50);
 800638a:	2032      	movs	r0, #50	; 0x32
 800638c:	f006 f99c 	bl	800c6c8 <osDelay>
        // FR30
        RobotTurnFR30();
 8006390:	f7fd fe68 	bl	8004064 <RobotTurnFR30>
        osDelay(50);
 8006394:	2032      	movs	r0, #50	; 0x32
 8006396:	f006 f997 	bl	800c6c8 <osDelay>
        break;
 800639a:	bf00      	nop
      }
      clickOnce = 0;
 800639c:	4b26      	ldr	r3, [pc, #152]	; (8006438 <runTurnBTask+0x1f8>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80063a2:	4b1f      	ldr	r3, [pc, #124]	; (8006420 <runTurnBTask+0x1e0>)
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	4b25      	ldr	r3, [pc, #148]	; (800643c <runTurnBTask+0x1fc>)
 80063a8:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <runTurnBTask+0x1e0>)
 80063ac:	2211      	movs	r2, #17
 80063ae:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80063b0:	4b23      	ldr	r3, [pc, #140]	; (8006440 <runTurnBTask+0x200>)
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	4b22      	ldr	r3, [pc, #136]	; (8006440 <runTurnBTask+0x200>)
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d112      	bne.n	80063e2 <runTurnBTask+0x1a2>
      {
        __CLEAR_CURCMD(curCmd);
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <runTurnBTask+0x1e4>)
 80063be:	2264      	movs	r2, #100	; 0x64
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	4b18      	ldr	r3, [pc, #96]	; (8006424 <runTurnBTask+0x1e4>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80063c8:	4a1e      	ldr	r2, [pc, #120]	; (8006444 <runTurnBTask+0x204>)
 80063ca:	210f      	movs	r1, #15
 80063cc:	481e      	ldr	r0, [pc, #120]	; (8006448 <runTurnBTask+0x208>)
 80063ce:	f009 f9a9 	bl	800f724 <sniprintf>
 80063d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063d6:	2206      	movs	r2, #6
 80063d8:	491c      	ldr	r1, [pc, #112]	; (800644c <runTurnBTask+0x20c>)
 80063da:	481d      	ldr	r0, [pc, #116]	; (8006450 <runTurnBTask+0x210>)
 80063dc:	f005 f829 	bl	800b432 <HAL_UART_Transmit>
 80063e0:	e019      	b.n	8006416 <runTurnBTask+0x1d6>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <runTurnBTask+0x200>)
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	4a0f      	ldr	r2, [pc, #60]	; (8006424 <runTurnBTask+0x1e4>)
 80063e8:	4915      	ldr	r1, [pc, #84]	; (8006440 <runTurnBTask+0x200>)
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <runTurnBTask+0x200>)
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	3301      	adds	r3, #1
 80063f8:	4a11      	ldr	r2, [pc, #68]	; (8006440 <runTurnBTask+0x200>)
 80063fa:	7892      	ldrb	r2, [r2, #2]
 80063fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8006400:	fb01 f202 	mul.w	r2, r1, r2
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	b2da      	uxtb	r2, r3
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <runTurnBTask+0x200>)
 800640a:	705a      	strb	r2, [r3, #1]
 800640c:	4a11      	ldr	r2, [pc, #68]	; (8006454 <runTurnBTask+0x214>)
 800640e:	210f      	movs	r1, #15
 8006410:	480d      	ldr	r0, [pc, #52]	; (8006448 <runTurnBTask+0x208>)
 8006412:	f009 f987 	bl	800f724 <sniprintf>
    }
    osDelay(1);
 8006416:	2001      	movs	r0, #1
 8006418:	f006 f956 	bl	800c6c8 <osDelay>
    if (curTask != TASK_TURN_B)
 800641c:	e714      	b.n	8006248 <runTurnBTask+0x8>
 800641e:	bf00      	nop
 8006420:	20000134 	.word	0x20000134
 8006424:	200004cc 	.word	0x200004cc
 8006428:	200004f8 	.word	0x200004f8
 800642c:	41d80000 	.word	0x41d80000
 8006430:	40e00000 	.word	0x40e00000
 8006434:	41700000 	.word	0x41700000
 8006438:	20000564 	.word	0x20000564
 800643c:	20000135 	.word	0x20000135
 8006440:	20000498 	.word	0x20000498
 8006444:	0801013c 	.word	0x0801013c
 8006448:	200004d0 	.word	0x200004d0
 800644c:	08010144 	.word	0x08010144
 8006450:	2000040c 	.word	0x2000040c
 8006454:	0801014c 	.word	0x0801014c

08006458 <runGHTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runGHTask */
void runGHTask(void *argument)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runGHTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_GO_HOME)
 8006460:	4b47      	ldr	r3, [pc, #284]	; (8006580 <runGHTask+0x128>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d004      	beq.n	8006472 <runGHTask+0x1a>
      osDelay(1000);
 8006468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800646c:	f006 f92c 	bl	800c6c8 <osDelay>
 8006470:	e081      	b.n	8006576 <runGHTask+0x11e>
    else
    {
      obsDist_B += 75;
 8006472:	4b44      	ldr	r3, [pc, #272]	; (8006584 <runGHTask+0x12c>)
 8006474:	edd3 7a00 	vldr	s15, [r3]
 8006478:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006588 <runGHTask+0x130>
 800647c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006480:	4b40      	ldr	r3, [pc, #256]	; (8006584 <runGHTask+0x12c>)
 8006482:	edc3 7a00 	vstr	s15, [r3]
      if (obsDist_B < 1000)
 8006486:	4b3f      	ldr	r3, [pc, #252]	; (8006584 <runGHTask+0x12c>)
 8006488:	edd3 7a00 	vldr	s15, [r3]
 800648c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800658c <runGHTask+0x134>
 8006490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006498:	d530      	bpl.n	80064fc <runGHTask+0xa4>
      {
        switch (curCmd.val)
 800649a:	4b3d      	ldr	r3, [pc, #244]	; (8006590 <runGHTask+0x138>)
 800649c:	885b      	ldrh	r3, [r3, #2]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d002      	beq.n	80064a8 <runGHTask+0x50>
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d015      	beq.n	80064d2 <runGHTask+0x7a>
 80064a6:	e029      	b.n	80064fc <runGHTask+0xa4>
        {
        case 01:
          // move to obs A location +40 cm (tentative)
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 80064a8:	2202      	movs	r2, #2
 80064aa:	2101      	movs	r1, #1
 80064ac:	4835      	ldr	r0, [pc, #212]	; (8006584 <runGHTask+0x12c>)
 80064ae:	f7fc fa97 	bl	80029e0 <RobotMoveDist>
          // FL30
          RobotTurnFL30();
 80064b2:	f7fd fe6d 	bl	8004190 <RobotTurnFL30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(0);
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7fd fbca 	bl	8003c50 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 80064bc:	4b35      	ldr	r3, [pc, #212]	; (8006594 <runGHTask+0x13c>)
 80064be:	4a36      	ldr	r2, [pc, #216]	; (8006598 <runGHTask+0x140>)
 80064c0:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	4833      	ldr	r0, [pc, #204]	; (8006594 <runGHTask+0x13c>)
 80064c8:	f7fc fa8a 	bl	80029e0 <RobotMoveDist>
          // FR30
          RobotTurnFR30();
 80064cc:	f7fd fdca 	bl	8004064 <RobotTurnFR30>
          break;
 80064d0:	e014      	b.n	80064fc <runGHTask+0xa4>
        case 02:
          // move to obs A location +40 cm (tentative)
          RobotMoveDist(&obsDist_B, DIR_FORWARD, SPEED_MODE_2);
 80064d2:	2202      	movs	r2, #2
 80064d4:	2101      	movs	r1, #1
 80064d6:	482b      	ldr	r0, [pc, #172]	; (8006584 <runGHTask+0x12c>)
 80064d8:	f7fc fa82 	bl	80029e0 <RobotMoveDist>
          // FR30
          RobotTurnFR30();
 80064dc:	f7fd fdc2 	bl	8004064 <RobotTurnFR30>
          // stop when IR detects obs
          RobotMoveUntilIRCloseDist(1);
 80064e0:	2001      	movs	r0, #1
 80064e2:	f7fd fbb5 	bl	8003c50 <RobotMoveUntilIRCloseDist>
          // BW15
          targetDist = 15;
 80064e6:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <runGHTask+0x13c>)
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <runGHTask+0x140>)
 80064ea:	601a      	str	r2, [r3, #0]
          RobotMoveDist(&targetDist, DIR_BACKWARD, SPEED_MODE_T);
 80064ec:	2200      	movs	r2, #0
 80064ee:	2100      	movs	r1, #0
 80064f0:	4828      	ldr	r0, [pc, #160]	; (8006594 <runGHTask+0x13c>)
 80064f2:	f7fc fa75 	bl	80029e0 <RobotMoveDist>
          // FL30
          RobotTurnFL30();
 80064f6:	f7fd fe4b 	bl	8004190 <RobotTurnFL30>
          break;
 80064fa:	bf00      	nop
        }
      }
      clickOnce = 0;
 80064fc:	4b27      	ldr	r3, [pc, #156]	; (800659c <runGHTask+0x144>)
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 8006502:	4b1f      	ldr	r3, [pc, #124]	; (8006580 <runGHTask+0x128>)
 8006504:	781a      	ldrb	r2, [r3, #0]
 8006506:	4b26      	ldr	r3, [pc, #152]	; (80065a0 <runGHTask+0x148>)
 8006508:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <runGHTask+0x128>)
 800650c:	2211      	movs	r2, #17
 800650e:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 8006510:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <runGHTask+0x14c>)
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <runGHTask+0x14c>)
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	429a      	cmp	r2, r3
 800651a:	d112      	bne.n	8006542 <runGHTask+0xea>
      {
        __CLEAR_CURCMD(curCmd);
 800651c:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <runGHTask+0x138>)
 800651e:	2264      	movs	r2, #100	; 0x64
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	4b1b      	ldr	r3, [pc, #108]	; (8006590 <runGHTask+0x138>)
 8006524:	2200      	movs	r2, #0
 8006526:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 8006528:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <runGHTask+0x150>)
 800652a:	210f      	movs	r1, #15
 800652c:	481f      	ldr	r0, [pc, #124]	; (80065ac <runGHTask+0x154>)
 800652e:	f009 f8f9 	bl	800f724 <sniprintf>
 8006532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006536:	2206      	movs	r2, #6
 8006538:	491d      	ldr	r1, [pc, #116]	; (80065b0 <runGHTask+0x158>)
 800653a:	481e      	ldr	r0, [pc, #120]	; (80065b4 <runGHTask+0x15c>)
 800653c:	f004 ff79 	bl	800b432 <HAL_UART_Transmit>
 8006540:	e019      	b.n	8006576 <runGHTask+0x11e>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <runGHTask+0x14c>)
 8006544:	785b      	ldrb	r3, [r3, #1]
 8006546:	4a12      	ldr	r2, [pc, #72]	; (8006590 <runGHTask+0x138>)
 8006548:	4916      	ldr	r1, [pc, #88]	; (80065a4 <runGHTask+0x14c>)
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <runGHTask+0x14c>)
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	3301      	adds	r3, #1
 8006558:	4a12      	ldr	r2, [pc, #72]	; (80065a4 <runGHTask+0x14c>)
 800655a:	7892      	ldrb	r2, [r2, #2]
 800655c:	fb93 f1f2 	sdiv	r1, r3, r2
 8006560:	fb01 f202 	mul.w	r2, r1, r2
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	b2da      	uxtb	r2, r3
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <runGHTask+0x14c>)
 800656a:	705a      	strb	r2, [r3, #1]
 800656c:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <runGHTask+0x160>)
 800656e:	210f      	movs	r1, #15
 8006570:	480e      	ldr	r0, [pc, #56]	; (80065ac <runGHTask+0x154>)
 8006572:	f009 f8d7 	bl	800f724 <sniprintf>
    }
    osDelay(1);
 8006576:	2001      	movs	r0, #1
 8006578:	f006 f8a6 	bl	800c6c8 <osDelay>
    if (curTask != TASK_GO_HOME)
 800657c:	e770      	b.n	8006460 <runGHTask+0x8>
 800657e:	bf00      	nop
 8006580:	20000134 	.word	0x20000134
 8006584:	2000013c 	.word	0x2000013c
 8006588:	42960000 	.word	0x42960000
 800658c:	447a0000 	.word	0x447a0000
 8006590:	200004cc 	.word	0x200004cc
 8006594:	200004f8 	.word	0x200004f8
 8006598:	41700000 	.word	0x41700000
 800659c:	20000564 	.word	0x20000564
 80065a0:	20000135 	.word	0x20000135
 80065a4:	20000498 	.word	0x20000498
 80065a8:	0801013c 	.word	0x0801013c
 80065ac:	200004d0 	.word	0x200004d0
 80065b0:	08010144 	.word	0x08010144
 80065b4:	2000040c 	.word	0x2000040c
 80065b8:	0801014c 	.word	0x0801014c

080065bc <runAMTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_runAMTask */
void runAMTask(void *argument)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN runAMTask */
  /* Infinite loop */
  for (;;)
  {
    if (curTask != TASK_AM)
 80065c4:	4b5d      	ldr	r3, [pc, #372]	; (800673c <runAMTask+0x180>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d004      	beq.n	80065d6 <runAMTask+0x1a>
      osDelay(1000);
 80065cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065d0:	f006 f87a 	bl	800c6c8 <osDelay>
 80065d4:	e0ad      	b.n	8006732 <runAMTask+0x176>
    else
    {

      switch (curCmd.val)
 80065d6:	4b5a      	ldr	r3, [pc, #360]	; (8006740 <runAMTask+0x184>)
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d002      	beq.n	80065e4 <runAMTask+0x28>
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d035      	beq.n	800664e <runAMTask+0x92>
 80065e2:	e069      	b.n	80066b8 <runAMTask+0xfc>
      {
      case 01: // AM right:
        // FW5
        targetDist = 5;
 80065e4:	4b57      	ldr	r3, [pc, #348]	; (8006744 <runAMTask+0x188>)
 80065e6:	4a58      	ldr	r2, [pc, #352]	; (8006748 <runAMTask+0x18c>)
 80065e8:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 80065ea:	2200      	movs	r2, #0
 80065ec:	2101      	movs	r1, #1
 80065ee:	4855      	ldr	r0, [pc, #340]	; (8006744 <runAMTask+0x188>)
 80065f0:	f7fc f9f6 	bl	80029e0 <RobotMoveDist>
        //  FA45
        RobotTurnFA45();
 80065f4:	f7fd fcf0 	bl	8003fd8 <RobotTurnFA45>
        osDelay(100);
 80065f8:	2064      	movs	r0, #100	; 0x64
 80065fa:	f006 f865 	bl	800c6c8 <osDelay>
        // FC45
        RobotTurnFC45();
 80065fe:	f7fd fca5 	bl	8003f4c <RobotTurnFC45>
        osDelay(100);
 8006602:	2064      	movs	r0, #100	; 0x64
 8006604:	f006 f860 	bl	800c6c8 <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 8006608:	4b50      	ldr	r3, [pc, #320]	; (800674c <runAMTask+0x190>)
 800660a:	4a51      	ldr	r2, [pc, #324]	; (8006750 <runAMTask+0x194>)
 800660c:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800660e:	2104      	movs	r1, #4
 8006610:	4850      	ldr	r0, [pc, #320]	; (8006754 <runAMTask+0x198>)
 8006612:	f003 fb0b 	bl	8009c2c <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006616:	f7fb ffeb 	bl	80025f0 <HCSR04_Read>
        osDelay(100);
 800661a:	2064      	movs	r0, #100	; 0x64
 800661c:	f006 f854 	bl	800c6c8 <osDelay>
        obsDist_B = obsDist_US;
 8006620:	4b4a      	ldr	r3, [pc, #296]	; (800674c <runAMTask+0x190>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4c      	ldr	r2, [pc, #304]	; (8006758 <runAMTask+0x19c>)
 8006626:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 8006628:	4b48      	ldr	r3, [pc, #288]	; (800674c <runAMTask+0x190>)
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006632:	230c      	movs	r3, #12
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2305      	movs	r3, #5
 8006638:	ee17 2a90 	vmov	r2, s15
 800663c:	2132      	movs	r1, #50	; 0x32
 800663e:	2000      	movs	r0, #0
 8006640:	f008 ff44 	bl	800f4cc <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8006644:	2104      	movs	r1, #4
 8006646:	4843      	ldr	r0, [pc, #268]	; (8006754 <runAMTask+0x198>)
 8006648:	f003 fc18 	bl	8009e7c <HAL_TIM_IC_Stop_IT>
        break;
 800664c:	e034      	b.n	80066b8 <runAMTask+0xfc>

      case 02: // AM left:
        // FW5
        targetDist = 5;
 800664e:	4b3d      	ldr	r3, [pc, #244]	; (8006744 <runAMTask+0x188>)
 8006650:	4a3d      	ldr	r2, [pc, #244]	; (8006748 <runAMTask+0x18c>)
 8006652:	601a      	str	r2, [r3, #0]
        RobotMoveDist(&targetDist, DIR_FORWARD, SPEED_MODE_T);
 8006654:	2200      	movs	r2, #0
 8006656:	2101      	movs	r1, #1
 8006658:	483a      	ldr	r0, [pc, #232]	; (8006744 <runAMTask+0x188>)
 800665a:	f7fc f9c1 	bl	80029e0 <RobotMoveDist>
        // FC45
        RobotTurnFC45();
 800665e:	f7fd fc75 	bl	8003f4c <RobotTurnFC45>
        osDelay(100);
 8006662:	2064      	movs	r0, #100	; 0x64
 8006664:	f006 f830 	bl	800c6c8 <osDelay>
        // FA45
        RobotTurnFA45();
 8006668:	f7fd fcb6 	bl	8003fd8 <RobotTurnFA45>
        osDelay(100);
 800666c:	2064      	movs	r0, #100	; 0x64
 800666e:	f006 f82b 	bl	800c6c8 <osDelay>
        // save obstacle B distance for go home (GH) command
        obsDist_US = 1000;
 8006672:	4b36      	ldr	r3, [pc, #216]	; (800674c <runAMTask+0x190>)
 8006674:	4a36      	ldr	r2, [pc, #216]	; (8006750 <runAMTask+0x194>)
 8006676:	601a      	str	r2, [r3, #0]
        HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8006678:	2104      	movs	r1, #4
 800667a:	4836      	ldr	r0, [pc, #216]	; (8006754 <runAMTask+0x198>)
 800667c:	f003 fad6 	bl	8009c2c <HAL_TIM_IC_Start_IT>
        HCSR04_Read();
 8006680:	f7fb ffb6 	bl	80025f0 <HCSR04_Read>
        osDelay(100);
 8006684:	2064      	movs	r0, #100	; 0x64
 8006686:	f006 f81f 	bl	800c6c8 <osDelay>
        obsDist_B = obsDist_US;
 800668a:	4b30      	ldr	r3, [pc, #192]	; (800674c <runAMTask+0x190>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a32      	ldr	r2, [pc, #200]	; (8006758 <runAMTask+0x19c>)
 8006690:	6013      	str	r3, [r2, #0]
        OLED_ShowNumber(0, 50, obsDist_US, 5, 12);
 8006692:	4b2e      	ldr	r3, [pc, #184]	; (800674c <runAMTask+0x190>)
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669c:	230c      	movs	r3, #12
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2305      	movs	r3, #5
 80066a2:	ee17 2a90 	vmov	r2, s15
 80066a6:	2132      	movs	r1, #50	; 0x32
 80066a8:	2000      	movs	r0, #0
 80066aa:	f008 ff0f 	bl	800f4cc <OLED_ShowNumber>
        HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80066ae:	2104      	movs	r1, #4
 80066b0:	4828      	ldr	r0, [pc, #160]	; (8006754 <runAMTask+0x198>)
 80066b2:	f003 fbe3 	bl	8009e7c <HAL_TIM_IC_Stop_IT>
        break;
 80066b6:	bf00      	nop
      }
      clickOnce = 0;
 80066b8:	4b28      	ldr	r3, [pc, #160]	; (800675c <runAMTask+0x1a0>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
      prevTask = curTask;
 80066be:	4b1f      	ldr	r3, [pc, #124]	; (800673c <runAMTask+0x180>)
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	4b27      	ldr	r3, [pc, #156]	; (8006760 <runAMTask+0x1a4>)
 80066c4:	701a      	strb	r2, [r3, #0]
      curTask = TASK_NONE;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <runAMTask+0x180>)
 80066c8:	2211      	movs	r2, #17
 80066ca:	701a      	strb	r2, [r3, #0]
      if (__COMMAND_QUEUE_IS_EMPTY(cQueue))
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <runAMTask+0x1a8>)
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	4b24      	ldr	r3, [pc, #144]	; (8006764 <runAMTask+0x1a8>)
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d112      	bne.n	80066fe <runAMTask+0x142>
      {
        __CLEAR_CURCMD(curCmd);
 80066d8:	4b19      	ldr	r3, [pc, #100]	; (8006740 <runAMTask+0x184>)
 80066da:	2264      	movs	r2, #100	; 0x64
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <runAMTask+0x184>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	805a      	strh	r2, [r3, #2]
        __ACK_TASK_DONE(&huart3, rxMsg);
 80066e4:	4a20      	ldr	r2, [pc, #128]	; (8006768 <runAMTask+0x1ac>)
 80066e6:	210f      	movs	r1, #15
 80066e8:	4820      	ldr	r0, [pc, #128]	; (800676c <runAMTask+0x1b0>)
 80066ea:	f009 f81b 	bl	800f724 <sniprintf>
 80066ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066f2:	2206      	movs	r2, #6
 80066f4:	491e      	ldr	r1, [pc, #120]	; (8006770 <runAMTask+0x1b4>)
 80066f6:	481f      	ldr	r0, [pc, #124]	; (8006774 <runAMTask+0x1b8>)
 80066f8:	f004 fe9b 	bl	800b432 <HAL_UART_Transmit>
 80066fc:	e019      	b.n	8006732 <runAMTask+0x176>
      }
      else
        __READ_COMMAND(cQueue, curCmd, rxMsg);
 80066fe:	4b19      	ldr	r3, [pc, #100]	; (8006764 <runAMTask+0x1a8>)
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	4a0f      	ldr	r2, [pc, #60]	; (8006740 <runAMTask+0x184>)
 8006704:	4917      	ldr	r1, [pc, #92]	; (8006764 <runAMTask+0x1a8>)
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <runAMTask+0x1a8>)
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	3301      	adds	r3, #1
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <runAMTask+0x1a8>)
 8006716:	7892      	ldrb	r2, [r2, #2]
 8006718:	fb93 f1f2 	sdiv	r1, r3, r2
 800671c:	fb01 f202 	mul.w	r2, r1, r2
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	b2da      	uxtb	r2, r3
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <runAMTask+0x1a8>)
 8006726:	705a      	strb	r2, [r3, #1]
 8006728:	4a13      	ldr	r2, [pc, #76]	; (8006778 <runAMTask+0x1bc>)
 800672a:	210f      	movs	r1, #15
 800672c:	480f      	ldr	r0, [pc, #60]	; (800676c <runAMTask+0x1b0>)
 800672e:	f008 fff9 	bl	800f724 <sniprintf>
    }
    osDelay(1);
 8006732:	2001      	movs	r0, #1
 8006734:	f005 ffc8 	bl	800c6c8 <osDelay>
    if (curTask != TASK_AM)
 8006738:	e744      	b.n	80065c4 <runAMTask+0x8>
 800673a:	bf00      	nop
 800673c:	20000134 	.word	0x20000134
 8006740:	200004cc 	.word	0x200004cc
 8006744:	200004f8 	.word	0x200004f8
 8006748:	40a00000 	.word	0x40a00000
 800674c:	20000554 	.word	0x20000554
 8006750:	447a0000 	.word	0x447a0000
 8006754:	20000334 	.word	0x20000334
 8006758:	2000013c 	.word	0x2000013c
 800675c:	20000564 	.word	0x20000564
 8006760:	20000135 	.word	0x20000135
 8006764:	20000498 	.word	0x20000498
 8006768:	0801013c 	.word	0x0801013c
 800676c:	200004d0 	.word	0x200004d0
 8006770:	08010144 	.word	0x08010144
 8006774:	2000040c 	.word	0x2000040c
 8006778:	0801014c 	.word	0x0801014c

0800677c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a04      	ldr	r2, [pc, #16]	; (800679c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d101      	bne.n	8006792 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800678e:	f000 fbc9 	bl	8006f24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40000800 	.word	0x40000800

080067a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80067a4:	b672      	cpsid	i
}
 80067a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80067a8:	e7fe      	b.n	80067a8 <Error_Handler+0x8>
	...

080067ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_MspInit+0x54>)
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	4a11      	ldr	r2, [pc, #68]	; (8006800 <HAL_MspInit+0x54>)
 80067bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067c0:	6453      	str	r3, [r2, #68]	; 0x44
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <HAL_MspInit+0x54>)
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_MspInit+0x54>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <HAL_MspInit+0x54>)
 80067d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067dc:	6413      	str	r3, [r2, #64]	; 0x40
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_MspInit+0x54>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80067ea:	2200      	movs	r2, #0
 80067ec:	210f      	movs	r1, #15
 80067ee:	f06f 0001 	mvn.w	r0, #1
 80067f2:	f001 f893 	bl	800791c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	40023800 	.word	0x40023800

08006804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08c      	sub	sp, #48	; 0x30
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800680c:	f107 031c 	add.w	r3, r7, #28
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	60da      	str	r2, [r3, #12]
 800681a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <HAL_ADC_MspInit+0xd8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d128      	bne.n	8006878 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	4b2d      	ldr	r3, [pc, #180]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 8006830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006834:	6453      	str	r3, [r2, #68]	; 0x44
 8006836:	4b2a      	ldr	r3, [pc, #168]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	4a25      	ldr	r2, [pc, #148]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 800684c:	f043 0304 	orr.w	r3, r3, #4
 8006850:	6313      	str	r3, [r2, #48]	; 0x30
 8006852:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800685e:	2302      	movs	r3, #2
 8006860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006862:	2303      	movs	r3, #3
 8006864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800686a:	f107 031c 	add.w	r3, r7, #28
 800686e:	4619      	mov	r1, r3
 8006870:	481c      	ldr	r0, [pc, #112]	; (80068e4 <HAL_ADC_MspInit+0xe0>)
 8006872:	f001 f90f 	bl	8007a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006876:	e02c      	b.n	80068d2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1a      	ldr	r2, [pc, #104]	; (80068e8 <HAL_ADC_MspInit+0xe4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d127      	bne.n	80068d2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006882:	2300      	movs	r3, #0
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 800688c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006890:	6453      	str	r3, [r2, #68]	; 0x44
 8006892:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	4a0e      	ldr	r2, [pc, #56]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 80068a8:	f043 0304 	orr.w	r3, r3, #4
 80068ac:	6313      	str	r3, [r2, #48]	; 0x30
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <HAL_ADC_MspInit+0xdc>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068ba:	2304      	movs	r3, #4
 80068bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068be:	2303      	movs	r3, #3
 80068c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068c6:	f107 031c 	add.w	r3, r7, #28
 80068ca:	4619      	mov	r1, r3
 80068cc:	4805      	ldr	r0, [pc, #20]	; (80068e4 <HAL_ADC_MspInit+0xe0>)
 80068ce:	f001 f8e1 	bl	8007a94 <HAL_GPIO_Init>
}
 80068d2:	bf00      	nop
 80068d4:	3730      	adds	r7, #48	; 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40012000 	.word	0x40012000
 80068e0:	40023800 	.word	0x40023800
 80068e4:	40020800 	.word	0x40020800
 80068e8:	40012100 	.word	0x40012100

080068ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08a      	sub	sp, #40	; 0x28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f4:	f107 0314 	add.w	r3, r7, #20
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	609a      	str	r2, [r3, #8]
 8006900:	60da      	str	r2, [r3, #12]
 8006902:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a19      	ldr	r2, [pc, #100]	; (8006970 <HAL_I2C_MspInit+0x84>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d12c      	bne.n	8006968 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800690e:	2300      	movs	r3, #0
 8006910:	613b      	str	r3, [r7, #16]
 8006912:	4b18      	ldr	r3, [pc, #96]	; (8006974 <HAL_I2C_MspInit+0x88>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	4a17      	ldr	r2, [pc, #92]	; (8006974 <HAL_I2C_MspInit+0x88>)
 8006918:	f043 0302 	orr.w	r3, r3, #2
 800691c:	6313      	str	r3, [r2, #48]	; 0x30
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <HAL_I2C_MspInit+0x88>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800692a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800692e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006930:	2312      	movs	r3, #18
 8006932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006938:	2303      	movs	r3, #3
 800693a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800693c:	2304      	movs	r3, #4
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006940:	f107 0314 	add.w	r3, r7, #20
 8006944:	4619      	mov	r1, r3
 8006946:	480c      	ldr	r0, [pc, #48]	; (8006978 <HAL_I2C_MspInit+0x8c>)
 8006948:	f001 f8a4 	bl	8007a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	4b08      	ldr	r3, [pc, #32]	; (8006974 <HAL_I2C_MspInit+0x88>)
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	4a07      	ldr	r2, [pc, #28]	; (8006974 <HAL_I2C_MspInit+0x88>)
 8006956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800695a:	6413      	str	r3, [r2, #64]	; 0x40
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <HAL_I2C_MspInit+0x88>)
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006968:	bf00      	nop
 800696a:	3728      	adds	r7, #40	; 0x28
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40005400 	.word	0x40005400
 8006974:	40023800 	.word	0x40023800
 8006978:	40020400 	.word	0x40020400

0800697c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	; 0x38
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a4e      	ldr	r2, [pc, #312]	; (8006ad4 <HAL_TIM_Base_MspInit+0x158>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d116      	bne.n	80069cc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	623b      	str	r3, [r7, #32]
 80069a2:	4b4d      	ldr	r3, [pc, #308]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	4a4c      	ldr	r2, [pc, #304]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	6453      	str	r3, [r2, #68]	; 0x44
 80069ae:	4b4a      	ldr	r3, [pc, #296]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	623b      	str	r3, [r7, #32]
 80069b8:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2105      	movs	r1, #5
 80069be:	201b      	movs	r0, #27
 80069c0:	f000 ffac 	bl	800791c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80069c4:	201b      	movs	r0, #27
 80069c6:	f000 ffc5 	bl	8007954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80069ca:	e07e      	b.n	8006aca <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a42      	ldr	r2, [pc, #264]	; (8006adc <HAL_TIM_Base_MspInit+0x160>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d134      	bne.n	8006a40 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	4b3f      	ldr	r3, [pc, #252]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	4a3e      	ldr	r2, [pc, #248]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069e0:	f043 0302 	orr.w	r3, r3, #2
 80069e4:	6413      	str	r3, [r2, #64]	; 0x40
 80069e6:	4b3c      	ldr	r3, [pc, #240]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069f2:	2300      	movs	r3, #0
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	4b38      	ldr	r3, [pc, #224]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	4a37      	ldr	r2, [pc, #220]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	6313      	str	r3, [r2, #48]	; 0x30
 8006a02:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = US_Echo_Pin;
 8006a0e:	2320      	movs	r3, #32
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a12:	2302      	movs	r3, #2
 8006a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(US_Echo_GPIO_Port, &GPIO_InitStruct);
 8006a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a26:	4619      	mov	r1, r3
 8006a28:	482d      	ldr	r0, [pc, #180]	; (8006ae0 <HAL_TIM_Base_MspInit+0x164>)
 8006a2a:	f001 f833 	bl	8007a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2105      	movs	r1, #5
 8006a32:	201d      	movs	r0, #29
 8006a34:	f000 ff72 	bl	800791c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a38:	201d      	movs	r0, #29
 8006a3a:	f000 ff8b 	bl	8007954 <HAL_NVIC_EnableIRQ>
}
 8006a3e:	e044      	b.n	8006aca <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM6)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a27      	ldr	r2, [pc, #156]	; (8006ae4 <HAL_TIM_Base_MspInit+0x168>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10e      	bne.n	8006a68 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	4b22      	ldr	r3, [pc, #136]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	4a21      	ldr	r2, [pc, #132]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a54:	f043 0310 	orr.w	r3, r3, #16
 8006a58:	6413      	str	r3, [r2, #64]	; 0x40
 8006a5a:	4b1f      	ldr	r3, [pc, #124]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]
}
 8006a66:	e030      	b.n	8006aca <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM8)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ae8 <HAL_TIM_Base_MspInit+0x16c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d12b      	bne.n	8006aca <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6453      	str	r3, [r2, #68]	; 0x44
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	4a10      	ldr	r2, [pc, #64]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <HAL_TIM_Base_MspInit+0x15c>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8006aaa:	23c0      	movs	r3, #192	; 0xc0
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006aba:	2303      	movs	r3, #3
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4809      	ldr	r0, [pc, #36]	; (8006aec <HAL_TIM_Base_MspInit+0x170>)
 8006ac6:	f000 ffe5 	bl	8007a94 <HAL_GPIO_Init>
}
 8006aca:	bf00      	nop
 8006acc:	3738      	adds	r7, #56	; 0x38
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40020400 	.word	0x40020400
 8006ae4:	40001000 	.word	0x40001000
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40020800 	.word	0x40020800

08006af0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08a      	sub	sp, #40	; 0x28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af8:	f107 0314 	add.w	r3, r7, #20
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	605a      	str	r2, [r3, #4]
 8006b02:	609a      	str	r2, [r3, #8]
 8006b04:	60da      	str	r2, [r3, #12]
 8006b06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d14a      	bne.n	8006ba8 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	6413      	str	r3, [r2, #64]	; 0x40
 8006b22:	4b23      	ldr	r3, [pc, #140]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3e:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60bb      	str	r3, [r7, #8]
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b52:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b54:	f043 0302 	orr.w	r3, r3, #2
 8006b58:	6313      	str	r3, [r2, #48]	; 0x30
 8006b5a:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <HAL_TIM_Encoder_MspInit+0xc0>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	60bb      	str	r3, [r7, #8]
 8006b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b74:	2300      	movs	r3, #0
 8006b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b7c:	f107 0314 	add.w	r3, r7, #20
 8006b80:	4619      	mov	r1, r3
 8006b82:	480c      	ldr	r0, [pc, #48]	; (8006bb4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8006b84:	f000 ff86 	bl	8007a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006b88:	2308      	movs	r3, #8
 8006b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4805      	ldr	r0, [pc, #20]	; (8006bb8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8006ba4:	f000 ff76 	bl	8007a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006ba8:	bf00      	nop
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40020000 	.word	0x40020000
 8006bb8:	40020400 	.word	0x40020400

08006bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	609a      	str	r2, [r3, #8]
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <HAL_TIM_MspPostInit+0x68>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d11e      	bne.n	8006c1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <HAL_TIM_MspPostInit+0x6c>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <HAL_TIM_MspPostInit+0x6c>)
 8006be8:	f043 0310 	orr.w	r3, r3, #16
 8006bec:	6313      	str	r3, [r2, #48]	; 0x30
 8006bee:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <HAL_TIM_MspPostInit+0x6c>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006bfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c00:	2302      	movs	r3, #2
 8006c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c10:	f107 030c 	add.w	r3, r7, #12
 8006c14:	4619      	mov	r1, r3
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <HAL_TIM_MspPostInit+0x70>)
 8006c18:	f000 ff3c 	bl	8007a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006c1c:	bf00      	nop
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	40021000 	.word	0x40021000

08006c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c38:	f107 0314 	add.w	r3, r7, #20
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	609a      	str	r2, [r3, #8]
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1d      	ldr	r2, [pc, #116]	; (8006cc4 <HAL_UART_MspInit+0x94>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d134      	bne.n	8006cbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <HAL_UART_MspInit+0x98>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <HAL_UART_MspInit+0x98>)
 8006c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c60:	6413      	str	r3, [r2, #64]	; 0x40
 8006c62:	4b19      	ldr	r3, [pc, #100]	; (8006cc8 <HAL_UART_MspInit+0x98>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <HAL_UART_MspInit+0x98>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <HAL_UART_MspInit+0x98>)
 8006c78:	f043 0304 	orr.w	r3, r3, #4
 8006c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c7e:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <HAL_UART_MspInit+0x98>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006c8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c90:	2302      	movs	r3, #2
 8006c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006c9c:	2307      	movs	r3, #7
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4809      	ldr	r0, [pc, #36]	; (8006ccc <HAL_UART_MspInit+0x9c>)
 8006ca8:	f000 fef4 	bl	8007a94 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006cac:	2200      	movs	r2, #0
 8006cae:	2105      	movs	r1, #5
 8006cb0:	2027      	movs	r0, #39	; 0x27
 8006cb2:	f000 fe33 	bl	800791c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006cb6:	2027      	movs	r0, #39	; 0x27
 8006cb8:	f000 fe4c 	bl	8007954 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006cbc:	bf00      	nop
 8006cbe:	3728      	adds	r7, #40	; 0x28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40004800 	.word	0x40004800
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40020800 	.word	0x40020800

08006cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	201e      	movs	r0, #30
 8006ce6:	f000 fe19 	bl	800791c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006cea:	201e      	movs	r0, #30
 8006cec:	f000 fe32 	bl	8007954 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_InitTick+0xa0>)
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_InitTick+0xa0>)
 8006cfa:	f043 0304 	orr.w	r3, r3, #4
 8006cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8006d00:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <HAL_InitTick+0xa0>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006d0c:	f107 0210 	add.w	r2, r7, #16
 8006d10:	f107 0314 	add.w	r3, r7, #20
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 fcb2 	bl	8009680 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f002 fc88 	bl	8009630 <HAL_RCC_GetPCLK1Freq>
 8006d20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	4a13      	ldr	r2, [pc, #76]	; (8006d74 <HAL_InitTick+0xa4>)
 8006d26:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2a:	0c9b      	lsrs	r3, r3, #18
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8006d30:	4b11      	ldr	r3, [pc, #68]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d32:	4a12      	ldr	r2, [pc, #72]	; (8006d7c <HAL_InitTick+0xac>)
 8006d34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8006d36:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006d3c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8006d3e:	4a0e      	ldr	r2, [pc, #56]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8006d50:	4809      	ldr	r0, [pc, #36]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d52:	f002 fcc7 	bl	80096e4 <HAL_TIM_Base_Init>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8006d5c:	4806      	ldr	r0, [pc, #24]	; (8006d78 <HAL_InitTick+0xa8>)
 8006d5e:	f002 fd79 	bl	8009854 <HAL_TIM_Base_Start_IT>
 8006d62:	4603      	mov	r3, r0
 8006d64:	e000      	b.n	8006d68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3730      	adds	r7, #48	; 0x30
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40023800 	.word	0x40023800
 8006d74:	431bde83 	.word	0x431bde83
 8006d78:	2000056c 	.word	0x2000056c
 8006d7c:	40000800 	.word	0x40000800

08006d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d84:	e7fe      	b.n	8006d84 <NMI_Handler+0x4>

08006d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d86:	b480      	push	{r7}
 8006d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d8a:	e7fe      	b.n	8006d8a <HardFault_Handler+0x4>

08006d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d90:	e7fe      	b.n	8006d90 <MemManage_Handler+0x4>

08006d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d92:	b480      	push	{r7}
 8006d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d96:	e7fe      	b.n	8006d96 <BusFault_Handler+0x4>

08006d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d9c:	e7fe      	b.n	8006d9c <UsageFault_Handler+0x4>

08006d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006da2:	bf00      	nop
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006db0:	4802      	ldr	r0, [pc, #8]	; (8006dbc <TIM1_CC_IRQHandler+0x10>)
 8006db2:	f003 fa45 	bl	800a240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200002a4 	.word	0x200002a4

08006dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006dc4:	4802      	ldr	r0, [pc, #8]	; (8006dd0 <TIM3_IRQHandler+0x10>)
 8006dc6:	f003 fa3b 	bl	800a240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000334 	.word	0x20000334

08006dd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006dd8:	4802      	ldr	r0, [pc, #8]	; (8006de4 <TIM4_IRQHandler+0x10>)
 8006dda:	f003 fa31 	bl	800a240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006dde:	bf00      	nop
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2000056c 	.word	0x2000056c

08006de8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006dec:	4802      	ldr	r0, [pc, #8]	; (8006df8 <USART3_IRQHandler+0x10>)
 8006dee:	f004 fbe3 	bl	800b5b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000040c 	.word	0x2000040c

08006dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e04:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <_sbrk+0x5c>)
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <_sbrk+0x60>)
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e10:	4b13      	ldr	r3, [pc, #76]	; (8006e60 <_sbrk+0x64>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d102      	bne.n	8006e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e18:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <_sbrk+0x64>)
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <_sbrk+0x68>)
 8006e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <_sbrk+0x64>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4413      	add	r3, r2
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d207      	bcs.n	8006e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e2c:	f008 fcb6 	bl	800f79c <__errno>
 8006e30:	4603      	mov	r3, r0
 8006e32:	220c      	movs	r2, #12
 8006e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e3a:	e009      	b.n	8006e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <_sbrk+0x64>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <_sbrk+0x64>)
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4413      	add	r3, r2
 8006e4a:	4a05      	ldr	r2, [pc, #20]	; (8006e60 <_sbrk+0x64>)
 8006e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20020000 	.word	0x20020000
 8006e5c:	00000400 	.word	0x00000400
 8006e60:	200005b4 	.word	0x200005b4
 8006e64:	20005458 	.word	0x20005458

08006e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <SystemInit+0x20>)
 8006e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e72:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <SystemInit+0x20>)
 8006e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e7c:	bf00      	nop
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e90:	480d      	ldr	r0, [pc, #52]	; (8006ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006e92:	490e      	ldr	r1, [pc, #56]	; (8006ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006e94:	4a0e      	ldr	r2, [pc, #56]	; (8006ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e98:	e002      	b.n	8006ea0 <LoopCopyDataInit>

08006e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e9e:	3304      	adds	r3, #4

08006ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ea4:	d3f9      	bcc.n	8006e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ea6:	4a0b      	ldr	r2, [pc, #44]	; (8006ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ea8:	4c0b      	ldr	r4, [pc, #44]	; (8006ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006eac:	e001      	b.n	8006eb2 <LoopFillZerobss>

08006eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006eb0:	3204      	adds	r2, #4

08006eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006eb4:	d3fb      	bcc.n	8006eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006eb6:	f7ff ffd7 	bl	8006e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006eba:	f008 fc75 	bl	800f7a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ebe:	f7fa f81b 	bl	8000ef8 <main>
  bx  lr    
 8006ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ecc:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8006ed0:	08010e48 	.word	0x08010e48
  ldr r2, =_sbss
 8006ed4:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8006ed8:	20005454 	.word	0x20005454

08006edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006edc:	e7fe      	b.n	8006edc <ADC_IRQHandler>
	...

08006ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <HAL_Init+0x40>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <HAL_Init+0x40>)
 8006eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <HAL_Init+0x40>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <HAL_Init+0x40>)
 8006ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <HAL_Init+0x40>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <HAL_Init+0x40>)
 8006f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f08:	2003      	movs	r0, #3
 8006f0a:	f000 fcfc 	bl	8007906 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f0e:	200f      	movs	r0, #15
 8006f10:	f7ff fede 	bl	8006cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f14:	f7ff fc4a 	bl	80067ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40023c00 	.word	0x40023c00

08006f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f28:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <HAL_IncTick+0x20>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_IncTick+0x24>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4413      	add	r3, r2
 8006f34:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <HAL_IncTick+0x24>)
 8006f36:	6013      	str	r3, [r2, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2000014c 	.word	0x2000014c
 8006f48:	200005b8 	.word	0x200005b8

08006f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f50:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <HAL_GetTick+0x14>)
 8006f52:	681b      	ldr	r3, [r3, #0]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	200005b8 	.word	0x200005b8

08006f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f6c:	f7ff ffee 	bl	8006f4c <HAL_GetTick>
 8006f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f7c:	d005      	beq.n	8006f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <HAL_Delay+0x44>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f8a:	bf00      	nop
 8006f8c:	f7ff ffde 	bl	8006f4c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d8f7      	bhi.n	8006f8c <HAL_Delay+0x28>
  {
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	2000014c 	.word	0x2000014c

08006fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e033      	b.n	800702a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fc1a 	bl	8006804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d118      	bne.n	800701c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ff2:	f023 0302 	bic.w	r3, r3, #2
 8006ff6:	f043 0202 	orr.w	r2, r3, #2
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fad8 	bl	80075b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	f043 0201 	orr.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	641a      	str	r2, [r3, #64]	; 0x40
 800701a:	e001      	b.n	8007020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_ADC_Start+0x1a>
 800704a:	2302      	movs	r3, #2
 800704c:	e0b2      	b.n	80071b4 <HAL_ADC_Start+0x180>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	d018      	beq.n	8007096 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007074:	4b52      	ldr	r3, [pc, #328]	; (80071c0 <HAL_ADC_Start+0x18c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a52      	ldr	r2, [pc, #328]	; (80071c4 <HAL_ADC_Start+0x190>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	0c9a      	lsrs	r2, r3, #18
 8007080:	4613      	mov	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	4413      	add	r3, r2
 8007086:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007088:	e002      	b.n	8007090 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3b01      	subs	r3, #1
 800708e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f9      	bne.n	800708a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d17a      	bne.n	800719a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e2:	d106      	bne.n	80070f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e8:	f023 0206 	bic.w	r2, r3, #6
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	645a      	str	r2, [r3, #68]	; 0x44
 80070f0:	e002      	b.n	80070f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <HAL_ADC_Start+0x194>)
 8007102:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800710c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2b00      	cmp	r3, #0
 8007118:	d12a      	bne.n	8007170 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <HAL_ADC_Start+0x198>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d015      	beq.n	8007150 <HAL_ADC_Start+0x11c>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a29      	ldr	r2, [pc, #164]	; (80071d0 <HAL_ADC_Start+0x19c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d105      	bne.n	800713a <HAL_ADC_Start+0x106>
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <HAL_ADC_Start+0x194>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <HAL_ADC_Start+0x1a0>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d136      	bne.n	80071b2 <HAL_ADC_Start+0x17e>
 8007144:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <HAL_ADC_Start+0x194>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d130      	bne.n	80071b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d129      	bne.n	80071b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800716c:	609a      	str	r2, [r3, #8]
 800716e:	e020      	b.n	80071b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <HAL_ADC_Start+0x198>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d11b      	bne.n	80071b2 <HAL_ADC_Start+0x17e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d114      	bne.n	80071b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	e00b      	b.n	80071b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f043 0210 	orr.w	r2, r3, #16
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071aa:	f043 0201 	orr.w	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000144 	.word	0x20000144
 80071c4:	431bde83 	.word	0x431bde83
 80071c8:	40012300 	.word	0x40012300
 80071cc:	40012000 	.word	0x40012000
 80071d0:	40012100 	.word	0x40012100
 80071d4:	40012200 	.word	0x40012200

080071d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_ADC_Stop+0x16>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e021      	b.n	8007232 <HAL_ADC_Stop+0x5a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f043 0201 	orr.w	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725a:	d113      	bne.n	8007284 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726a:	d10b      	bne.n	8007284 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	f043 0220 	orr.w	r2, r3, #32
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e063      	b.n	800734c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007284:	f7ff fe62 	bl	8006f4c <HAL_GetTick>
 8007288:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800728a:	e021      	b.n	80072d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007292:	d01d      	beq.n	80072d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <HAL_ADC_PollForConversion+0x6c>
 800729a:	f7ff fe57 	bl	8006f4c <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d212      	bcs.n	80072d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d00b      	beq.n	80072d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f043 0204 	orr.w	r2, r3, #4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e03d      	b.n	800734c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d1d6      	bne.n	800728c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f06f 0212 	mvn.w	r2, #18
 80072e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d123      	bne.n	800734a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11f      	bne.n	800734a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007322:	2b00      	cmp	r3, #0
 8007324:	d111      	bne.n	800734a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f043 0201 	orr.w	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007384:	2b01      	cmp	r3, #1
 8007386:	d101      	bne.n	800738c <HAL_ADC_ConfigChannel+0x1c>
 8007388:	2302      	movs	r3, #2
 800738a:	e105      	b.n	8007598 <HAL_ADC_ConfigChannel+0x228>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b09      	cmp	r3, #9
 800739a:	d925      	bls.n	80073e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68d9      	ldr	r1, [r3, #12]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	4613      	mov	r3, r2
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4413      	add	r3, r2
 80073b0:	3b1e      	subs	r3, #30
 80073b2:	2207      	movs	r2, #7
 80073b4:	fa02 f303 	lsl.w	r3, r2, r3
 80073b8:	43da      	mvns	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	400a      	ands	r2, r1
 80073c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68d9      	ldr	r1, [r3, #12]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	4618      	mov	r0, r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4403      	add	r3, r0
 80073da:	3b1e      	subs	r3, #30
 80073dc:	409a      	lsls	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	e022      	b.n	800742e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6919      	ldr	r1, [r3, #16]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	2207      	movs	r2, #7
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	43da      	mvns	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	400a      	ands	r2, r1
 800740a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6919      	ldr	r1, [r3, #16]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	689a      	ldr	r2, [r3, #8]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	4618      	mov	r0, r3
 800741e:	4603      	mov	r3, r0
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	4403      	add	r3, r0
 8007424:	409a      	lsls	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b06      	cmp	r3, #6
 8007434:	d824      	bhi.n	8007480 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	3b05      	subs	r3, #5
 8007448:	221f      	movs	r2, #31
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	43da      	mvns	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	400a      	ands	r2, r1
 8007456:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	4618      	mov	r0, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	3b05      	subs	r3, #5
 8007472:	fa00 f203 	lsl.w	r2, r0, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	635a      	str	r2, [r3, #52]	; 0x34
 800747e:	e04c      	b.n	800751a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b0c      	cmp	r3, #12
 8007486:	d824      	bhi.n	80074d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	3b23      	subs	r3, #35	; 0x23
 800749a:	221f      	movs	r2, #31
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	43da      	mvns	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	400a      	ands	r2, r1
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4618      	mov	r0, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	3b23      	subs	r3, #35	; 0x23
 80074c4:	fa00 f203 	lsl.w	r2, r0, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
 80074d0:	e023      	b.n	800751a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	3b41      	subs	r3, #65	; 0x41
 80074e4:	221f      	movs	r2, #31
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43da      	mvns	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	400a      	ands	r2, r1
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	4618      	mov	r0, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	3b41      	subs	r3, #65	; 0x41
 800750e:	fa00 f203 	lsl.w	r2, r0, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800751a:	4b22      	ldr	r3, [pc, #136]	; (80075a4 <HAL_ADC_ConfigChannel+0x234>)
 800751c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <HAL_ADC_ConfigChannel+0x238>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d109      	bne.n	800753c <HAL_ADC_ConfigChannel+0x1cc>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b12      	cmp	r3, #18
 800752e:	d105      	bne.n	800753c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a19      	ldr	r2, [pc, #100]	; (80075a8 <HAL_ADC_ConfigChannel+0x238>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d123      	bne.n	800758e <HAL_ADC_ConfigChannel+0x21e>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b10      	cmp	r3, #16
 800754c:	d003      	beq.n	8007556 <HAL_ADC_ConfigChannel+0x1e6>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b11      	cmp	r3, #17
 8007554:	d11b      	bne.n	800758e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b10      	cmp	r3, #16
 8007568:	d111      	bne.n	800758e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <HAL_ADC_ConfigChannel+0x23c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a10      	ldr	r2, [pc, #64]	; (80075b0 <HAL_ADC_ConfigChannel+0x240>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	0c9a      	lsrs	r2, r3, #18
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007580:	e002      	b.n	8007588 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3b01      	subs	r3, #1
 8007586:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f9      	bne.n	8007582 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	40012300 	.word	0x40012300
 80075a8:	40012000 	.word	0x40012000
 80075ac:	20000144 	.word	0x20000144
 80075b0:	431bde83 	.word	0x431bde83

080075b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80075bc:	4b79      	ldr	r3, [pc, #484]	; (80077a4 <ADC_Init+0x1f0>)
 80075be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6859      	ldr	r1, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	021a      	lsls	r2, r3, #8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800760c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6859      	ldr	r1, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800762e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6899      	ldr	r1, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007646:	4a58      	ldr	r2, [pc, #352]	; (80077a8 <ADC_Init+0x1f4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d022      	beq.n	8007692 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800765a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6899      	ldr	r1, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800767c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6899      	ldr	r1, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	609a      	str	r2, [r3, #8]
 8007690:	e00f      	b.n	80076b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80076a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80076b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0202 	bic.w	r2, r2, #2
 80076c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6899      	ldr	r1, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	7e1b      	ldrb	r3, [r3, #24]
 80076cc:	005a      	lsls	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80076fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6859      	ldr	r1, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	3b01      	subs	r3, #1
 800770c:	035a      	lsls	r2, r3, #13
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	e007      	b.n	8007728 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	3b01      	subs	r3, #1
 8007744:	051a      	lsls	r2, r3, #20
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800775c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6899      	ldr	r1, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800776a:	025a      	lsls	r2, r3, #9
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	6899      	ldr	r1, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	029a      	lsls	r2, r3, #10
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	40012300 	.word	0x40012300
 80077a8:	0f000001 	.word	0x0f000001

080077ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077bc:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <__NVIC_SetPriorityGrouping+0x44>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077c8:	4013      	ands	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80077d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077de:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <__NVIC_SetPriorityGrouping+0x44>)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	60d3      	str	r3, [r2, #12]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077f8:	4b04      	ldr	r3, [pc, #16]	; (800780c <__NVIC_GetPriorityGrouping+0x18>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	f003 0307 	and.w	r3, r3, #7
}
 8007802:	4618      	mov	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	e000ed00 	.word	0xe000ed00

08007810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800781a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781e:	2b00      	cmp	r3, #0
 8007820:	db0b      	blt.n	800783a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	f003 021f 	and.w	r2, r3, #31
 8007828:	4907      	ldr	r1, [pc, #28]	; (8007848 <__NVIC_EnableIRQ+0x38>)
 800782a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	2001      	movs	r0, #1
 8007832:	fa00 f202 	lsl.w	r2, r0, r2
 8007836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	e000e100 	.word	0xe000e100

0800784c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800785c:	2b00      	cmp	r3, #0
 800785e:	db0a      	blt.n	8007876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	490c      	ldr	r1, [pc, #48]	; (8007898 <__NVIC_SetPriority+0x4c>)
 8007866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800786a:	0112      	lsls	r2, r2, #4
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	440b      	add	r3, r1
 8007870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007874:	e00a      	b.n	800788c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	b2da      	uxtb	r2, r3
 800787a:	4908      	ldr	r1, [pc, #32]	; (800789c <__NVIC_SetPriority+0x50>)
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	3b04      	subs	r3, #4
 8007884:	0112      	lsls	r2, r2, #4
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	440b      	add	r3, r1
 800788a:	761a      	strb	r2, [r3, #24]
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	e000e100 	.word	0xe000e100
 800789c:	e000ed00 	.word	0xe000ed00

080078a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b089      	sub	sp, #36	; 0x24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f1c3 0307 	rsb	r3, r3, #7
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	bf28      	it	cs
 80078be:	2304      	movcs	r3, #4
 80078c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	3304      	adds	r3, #4
 80078c6:	2b06      	cmp	r3, #6
 80078c8:	d902      	bls.n	80078d0 <NVIC_EncodePriority+0x30>
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3b03      	subs	r3, #3
 80078ce:	e000      	b.n	80078d2 <NVIC_EncodePriority+0x32>
 80078d0:	2300      	movs	r3, #0
 80078d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	43da      	mvns	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	401a      	ands	r2, r3
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	fa01 f303 	lsl.w	r3, r1, r3
 80078f2:	43d9      	mvns	r1, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078f8:	4313      	orrs	r3, r2
         );
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3724      	adds	r7, #36	; 0x24
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff ff4c 	bl	80077ac <__NVIC_SetPriorityGrouping>
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800792a:	2300      	movs	r3, #0
 800792c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800792e:	f7ff ff61 	bl	80077f4 <__NVIC_GetPriorityGrouping>
 8007932:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	6978      	ldr	r0, [r7, #20]
 800793a:	f7ff ffb1 	bl	80078a0 <NVIC_EncodePriority>
 800793e:	4602      	mov	r2, r0
 8007940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff ff80 	bl	800784c <__NVIC_SetPriority>
}
 800794c:	bf00      	nop
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800795e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff ff54 	bl	8007810 <__NVIC_EnableIRQ>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800797e:	f7ff fae5 	bl	8006f4c <HAL_GetTick>
 8007982:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d008      	beq.n	80079a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2280      	movs	r2, #128	; 0x80
 8007994:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e052      	b.n	8007a48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0216 	bic.w	r2, r2, #22
 80079b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <HAL_DMA_Abort+0x62>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0208 	bic.w	r2, r2, #8
 80079e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0201 	bic.w	r2, r2, #1
 80079f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079f2:	e013      	b.n	8007a1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079f4:	f7ff faaa 	bl	8006f4c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	d90c      	bls.n	8007a1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e015      	b.n	8007a48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e4      	bne.n	80079f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2e:	223f      	movs	r2, #63	; 0x3f
 8007a30:	409a      	lsls	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d004      	beq.n	8007a6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2280      	movs	r2, #128	; 0x80
 8007a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e00c      	b.n	8007a88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2205      	movs	r2, #5
 8007a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b089      	sub	sp, #36	; 0x24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	e16b      	b.n	8007d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	f040 815a 	bne.w	8007d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d005      	beq.n	8007ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d130      	bne.n	8007b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	2203      	movs	r2, #3
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	43db      	mvns	r3, r3
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	4013      	ands	r3, r2
 8007afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	43db      	mvns	r3, r3
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	091b      	lsrs	r3, r3, #4
 8007b32:	f003 0201 	and.w	r2, r3, #1
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f003 0303 	and.w	r3, r3, #3
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d017      	beq.n	8007b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	2203      	movs	r2, #3
 8007b60:	fa02 f303 	lsl.w	r3, r2, r3
 8007b64:	43db      	mvns	r3, r3
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d123      	bne.n	8007bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	08da      	lsrs	r2, r3, #3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3208      	adds	r2, #8
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	220f      	movs	r2, #15
 8007ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bac:	43db      	mvns	r3, r3
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	691a      	ldr	r2, [r3, #16]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	08da      	lsrs	r2, r3, #3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3208      	adds	r2, #8
 8007bd2:	69b9      	ldr	r1, [r7, #24]
 8007bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	2203      	movs	r2, #3
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	43db      	mvns	r3, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	4013      	ands	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f003 0203 	and.w	r2, r3, #3
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80b4 	beq.w	8007d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	4b60      	ldr	r3, [pc, #384]	; (8007da0 <HAL_GPIO_Init+0x30c>)
 8007c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c22:	4a5f      	ldr	r2, [pc, #380]	; (8007da0 <HAL_GPIO_Init+0x30c>)
 8007c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c28:	6453      	str	r3, [r2, #68]	; 0x44
 8007c2a:	4b5d      	ldr	r3, [pc, #372]	; (8007da0 <HAL_GPIO_Init+0x30c>)
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c36:	4a5b      	ldr	r2, [pc, #364]	; (8007da4 <HAL_GPIO_Init+0x310>)
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	089b      	lsrs	r3, r3, #2
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	220f      	movs	r2, #15
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43db      	mvns	r3, r3
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	4013      	ands	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a52      	ldr	r2, [pc, #328]	; (8007da8 <HAL_GPIO_Init+0x314>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d02b      	beq.n	8007cba <HAL_GPIO_Init+0x226>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a51      	ldr	r2, [pc, #324]	; (8007dac <HAL_GPIO_Init+0x318>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d025      	beq.n	8007cb6 <HAL_GPIO_Init+0x222>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a50      	ldr	r2, [pc, #320]	; (8007db0 <HAL_GPIO_Init+0x31c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d01f      	beq.n	8007cb2 <HAL_GPIO_Init+0x21e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a4f      	ldr	r2, [pc, #316]	; (8007db4 <HAL_GPIO_Init+0x320>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d019      	beq.n	8007cae <HAL_GPIO_Init+0x21a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a4e      	ldr	r2, [pc, #312]	; (8007db8 <HAL_GPIO_Init+0x324>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d013      	beq.n	8007caa <HAL_GPIO_Init+0x216>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a4d      	ldr	r2, [pc, #308]	; (8007dbc <HAL_GPIO_Init+0x328>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00d      	beq.n	8007ca6 <HAL_GPIO_Init+0x212>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a4c      	ldr	r2, [pc, #304]	; (8007dc0 <HAL_GPIO_Init+0x32c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d007      	beq.n	8007ca2 <HAL_GPIO_Init+0x20e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a4b      	ldr	r2, [pc, #300]	; (8007dc4 <HAL_GPIO_Init+0x330>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d101      	bne.n	8007c9e <HAL_GPIO_Init+0x20a>
 8007c9a:	2307      	movs	r3, #7
 8007c9c:	e00e      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007c9e:	2308      	movs	r3, #8
 8007ca0:	e00c      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007ca2:	2306      	movs	r3, #6
 8007ca4:	e00a      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007ca6:	2305      	movs	r3, #5
 8007ca8:	e008      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007caa:	2304      	movs	r3, #4
 8007cac:	e006      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e004      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e002      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <HAL_GPIO_Init+0x228>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	f002 0203 	and.w	r2, r2, #3
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	4093      	lsls	r3, r2
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ccc:	4935      	ldr	r1, [pc, #212]	; (8007da4 <HAL_GPIO_Init+0x310>)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	089b      	lsrs	r3, r3, #2
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cda:	4b3b      	ldr	r3, [pc, #236]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007cfe:	4a32      	ldr	r2, [pc, #200]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d04:	4b30      	ldr	r3, [pc, #192]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4013      	ands	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d28:	4a27      	ldr	r2, [pc, #156]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007d2e:	4b26      	ldr	r3, [pc, #152]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	43db      	mvns	r3, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d52:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	43db      	mvns	r3, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4013      	ands	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d7c:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <HAL_GPIO_Init+0x334>)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3301      	adds	r3, #1
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	f67f ae90 	bls.w	8007ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	3724      	adds	r7, #36	; 0x24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40023800 	.word	0x40023800
 8007da4:	40013800 	.word	0x40013800
 8007da8:	40020000 	.word	0x40020000
 8007dac:	40020400 	.word	0x40020400
 8007db0:	40020800 	.word	0x40020800
 8007db4:	40020c00 	.word	0x40020c00
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40021400 	.word	0x40021400
 8007dc0:	40021800 	.word	0x40021800
 8007dc4:	40021c00 	.word	0x40021c00
 8007dc8:	40013c00 	.word	0x40013c00

08007dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ddc:	787b      	ldrb	r3, [r7, #1]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007de2:	887a      	ldrh	r2, [r7, #2]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007de8:	e003      	b.n	8007df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007dea:	887b      	ldrh	r3, [r7, #2]
 8007dec:	041a      	lsls	r2, r3, #16
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	619a      	str	r2, [r3, #24]
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e12b      	b.n	800806a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d106      	bne.n	8007e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7fe fd60 	bl	80068ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2224      	movs	r2, #36	; 0x24
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0201 	bic.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007e64:	f001 fbe4 	bl	8009630 <HAL_RCC_GetPCLK1Freq>
 8007e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4a81      	ldr	r2, [pc, #516]	; (8008074 <HAL_I2C_Init+0x274>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d807      	bhi.n	8007e84 <HAL_I2C_Init+0x84>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a80      	ldr	r2, [pc, #512]	; (8008078 <HAL_I2C_Init+0x278>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	bf94      	ite	ls
 8007e7c:	2301      	movls	r3, #1
 8007e7e:	2300      	movhi	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	e006      	b.n	8007e92 <HAL_I2C_Init+0x92>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a7d      	ldr	r2, [pc, #500]	; (800807c <HAL_I2C_Init+0x27c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	bf94      	ite	ls
 8007e8c:	2301      	movls	r3, #1
 8007e8e:	2300      	movhi	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e0e7      	b.n	800806a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4a78      	ldr	r2, [pc, #480]	; (8008080 <HAL_I2C_Init+0x280>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	0c9b      	lsrs	r3, r3, #18
 8007ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	4a6a      	ldr	r2, [pc, #424]	; (8008074 <HAL_I2C_Init+0x274>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d802      	bhi.n	8007ed4 <HAL_I2C_Init+0xd4>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	e009      	b.n	8007ee8 <HAL_I2C_Init+0xe8>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007eda:	fb02 f303 	mul.w	r3, r2, r3
 8007ede:	4a69      	ldr	r2, [pc, #420]	; (8008084 <HAL_I2C_Init+0x284>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	099b      	lsrs	r3, r3, #6
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6812      	ldr	r2, [r2, #0]
 8007eec:	430b      	orrs	r3, r1
 8007eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	495c      	ldr	r1, [pc, #368]	; (8008074 <HAL_I2C_Init+0x274>)
 8007f04:	428b      	cmp	r3, r1
 8007f06:	d819      	bhi.n	8007f3c <HAL_I2C_Init+0x13c>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	1e59      	subs	r1, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f16:	1c59      	adds	r1, r3, #1
 8007f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f1c:	400b      	ands	r3, r1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <HAL_I2C_Init+0x138>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	1e59      	subs	r1, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f30:	3301      	adds	r3, #1
 8007f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f36:	e051      	b.n	8007fdc <HAL_I2C_Init+0x1dc>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	e04f      	b.n	8007fdc <HAL_I2C_Init+0x1dc>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d111      	bne.n	8007f68 <HAL_I2C_Init+0x168>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	1e58      	subs	r0, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6859      	ldr	r1, [r3, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	440b      	add	r3, r1
 8007f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f56:	3301      	adds	r3, #1
 8007f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bf0c      	ite	eq
 8007f60:	2301      	moveq	r3, #1
 8007f62:	2300      	movne	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	e012      	b.n	8007f8e <HAL_I2C_Init+0x18e>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	1e58      	subs	r0, r3, #1
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6859      	ldr	r1, [r3, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	0099      	lsls	r1, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007f7e:	3301      	adds	r3, #1
 8007f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_I2C_Init+0x196>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e022      	b.n	8007fdc <HAL_I2C_Init+0x1dc>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10e      	bne.n	8007fbc <HAL_I2C_Init+0x1bc>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	1e58      	subs	r0, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6859      	ldr	r1, [r3, #4]
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	440b      	add	r3, r1
 8007fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fba:	e00f      	b.n	8007fdc <HAL_I2C_Init+0x1dc>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1e58      	subs	r0, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6859      	ldr	r1, [r3, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	440b      	add	r3, r1
 8007fca:	0099      	lsls	r1, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	6809      	ldr	r1, [r1, #0]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69da      	ldr	r2, [r3, #28]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800800a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6911      	ldr	r1, [r2, #16]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	68d2      	ldr	r2, [r2, #12]
 8008016:	4311      	orrs	r1, r2
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6812      	ldr	r2, [r2, #0]
 800801c:	430b      	orrs	r3, r1
 800801e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695a      	ldr	r2, [r3, #20]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	000186a0 	.word	0x000186a0
 8008078:	001e847f 	.word	0x001e847f
 800807c:	003d08ff 	.word	0x003d08ff
 8008080:	431bde83 	.word	0x431bde83
 8008084:	10624dd3 	.word	0x10624dd3

08008088 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4603      	mov	r3, r0
 8008098:	817b      	strh	r3, [r7, #10]
 800809a:	460b      	mov	r3, r1
 800809c:	813b      	strh	r3, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080a2:	f7fe ff53 	bl	8006f4c <HAL_GetTick>
 80080a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	f040 80d9 	bne.w	8008268 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	2319      	movs	r3, #25
 80080bc:	2201      	movs	r2, #1
 80080be:	496d      	ldr	r1, [pc, #436]	; (8008274 <HAL_I2C_Mem_Write+0x1ec>)
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fc7f 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
 80080ce:	e0cc      	b.n	800826a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d101      	bne.n	80080de <HAL_I2C_Mem_Write+0x56>
 80080da:	2302      	movs	r3, #2
 80080dc:	e0c5      	b.n	800826a <HAL_I2C_Mem_Write+0x1e2>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d007      	beq.n	8008104 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008112:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2221      	movs	r2, #33	; 0x21
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2240      	movs	r2, #64	; 0x40
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a3a      	ldr	r2, [r7, #32]
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4a4d      	ldr	r2, [pc, #308]	; (8008278 <HAL_I2C_Mem_Write+0x1f0>)
 8008144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008146:	88f8      	ldrh	r0, [r7, #6]
 8008148:	893a      	ldrh	r2, [r7, #8]
 800814a:	8979      	ldrh	r1, [r7, #10]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4603      	mov	r3, r0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fab6 	bl	80086c8 <I2C_RequestMemoryWrite>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d052      	beq.n	8008208 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e081      	b.n	800826a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fd00 	bl	8008b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00d      	beq.n	8008192 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	2b04      	cmp	r3, #4
 800817c:	d107      	bne.n	800818e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800818c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e06b      	b.n	800826a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d11b      	bne.n	8008208 <HAL_I2C_Mem_Write+0x180>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d017      	beq.n	8008208 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1aa      	bne.n	8008166 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fcec 	bl	8008bf2 <I2C_WaitOnBTFFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00d      	beq.n	800823c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	2b04      	cmp	r3, #4
 8008226:	d107      	bne.n	8008238 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008236:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e016      	b.n	800826a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800824a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	e000      	b.n	800826a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008268:	2302      	movs	r3, #2
  }
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	00100002 	.word	0x00100002
 8008278:	ffff0000 	.word	0xffff0000

0800827c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08c      	sub	sp, #48	; 0x30
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	4608      	mov	r0, r1
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	4603      	mov	r3, r0
 800828c:	817b      	strh	r3, [r7, #10]
 800828e:	460b      	mov	r3, r1
 8008290:	813b      	strh	r3, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008296:	f7fe fe59 	bl	8006f4c <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	f040 8208 	bne.w	80086ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	2319      	movs	r3, #25
 80082b0:	2201      	movs	r2, #1
 80082b2:	497b      	ldr	r1, [pc, #492]	; (80084a0 <HAL_I2C_Mem_Read+0x224>)
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fb85 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
 80082c2:	e1fb      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_I2C_Mem_Read+0x56>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e1f4      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d007      	beq.n	80082f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2222      	movs	r2, #34	; 0x22
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2240      	movs	r2, #64	; 0x40
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4a5b      	ldr	r2, [pc, #364]	; (80084a4 <HAL_I2C_Mem_Read+0x228>)
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800833a:	88f8      	ldrh	r0, [r7, #6]
 800833c:	893a      	ldrh	r2, [r7, #8]
 800833e:	8979      	ldrh	r1, [r7, #10]
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	4603      	mov	r3, r0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 fa52 	bl	80087f4 <I2C_RequestMemoryRead>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e1b0      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d113      	bne.n	800838a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008362:	2300      	movs	r3, #0
 8008364:	623b      	str	r3, [r7, #32]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	623b      	str	r3, [r7, #32]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	623b      	str	r3, [r7, #32]
 8008376:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e184      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838e:	2b01      	cmp	r3, #1
 8008390:	d11b      	bne.n	80083ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	61fb      	str	r3, [r7, #28]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	e164      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d11b      	bne.n	800840a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083f2:	2300      	movs	r3, #0
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	61bb      	str	r3, [r7, #24]
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	e144      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008420:	e138      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008426:	2b03      	cmp	r3, #3
 8008428:	f200 80f1 	bhi.w	800860e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008430:	2b01      	cmp	r3, #1
 8008432:	d123      	bne.n	800847c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fc1b 	bl	8008c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e139      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	855a      	strh	r2, [r3, #42]	; 0x2a
 800847a:	e10b      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008480:	2b02      	cmp	r3, #2
 8008482:	d14e      	bne.n	8008522 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	2200      	movs	r2, #0
 800848c:	4906      	ldr	r1, [pc, #24]	; (80084a8 <HAL_I2C_Mem_Read+0x22c>)
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fa98 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e10e      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
 800849e:	bf00      	nop
 80084a0:	00100002 	.word	0x00100002
 80084a4:	ffff0000 	.word	0xffff0000
 80084a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008516:	b29b      	uxth	r3, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008520:	e0b8      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	2200      	movs	r2, #0
 800852a:	4966      	ldr	r1, [pc, #408]	; (80086c4 <HAL_I2C_Mem_Read+0x448>)
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 fa49 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e0bf      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800854a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691a      	ldr	r2, [r3, #16]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	2200      	movs	r2, #0
 8008586:	494f      	ldr	r1, [pc, #316]	; (80086c4 <HAL_I2C_Mem_Read+0x448>)
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fa1b 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e091      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800860c:	e042      	b.n	8008694 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fb2e 	bl	8008c74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e04c      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863e:	3b01      	subs	r3, #1
 8008640:	b29a      	uxth	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b04      	cmp	r3, #4
 8008660:	d118      	bne.n	8008694 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008698:	2b00      	cmp	r3, #0
 800869a:	f47f aec2 	bne.w	8008422 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e000      	b.n	80086bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80086ba:	2302      	movs	r3, #2
  }
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3728      	adds	r7, #40	; 0x28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	00010004 	.word	0x00010004

080086c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	817b      	strh	r3, [r7, #10]
 80086da:	460b      	mov	r3, r1
 80086dc:	813b      	strh	r3, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f960 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00d      	beq.n	8008726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008718:	d103      	bne.n	8008722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e05f      	b.n	80087e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008726:	897b      	ldrh	r3, [r7, #10]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	6a3a      	ldr	r2, [r7, #32]
 800873a:	492d      	ldr	r1, [pc, #180]	; (80087f0 <I2C_RequestMemoryWrite+0x128>)
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f998 	bl	8008a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e04c      	b.n	80087e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008764:	6a39      	ldr	r1, [r7, #32]
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fa02 	bl	8008b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00d      	beq.n	800878e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	2b04      	cmp	r3, #4
 8008778:	d107      	bne.n	800878a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e02b      	b.n	80087e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d105      	bne.n	80087a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008794:	893b      	ldrh	r3, [r7, #8]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	611a      	str	r2, [r3, #16]
 800879e:	e021      	b.n	80087e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087a0:	893b      	ldrh	r3, [r7, #8]
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	6a39      	ldr	r1, [r7, #32]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f9dc 	bl	8008b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00d      	beq.n	80087da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d107      	bne.n	80087d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e005      	b.n	80087e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087da:	893b      	ldrh	r3, [r7, #8]
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	00010002 	.word	0x00010002

080087f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	461a      	mov	r2, r3
 8008802:	4603      	mov	r3, r0
 8008804:	817b      	strh	r3, [r7, #10]
 8008806:	460b      	mov	r3, r1
 8008808:	813b      	strh	r3, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800881c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800882c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	2200      	movs	r2, #0
 8008836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 f8c2 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00d      	beq.n	8008862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008854:	d103      	bne.n	800885e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800885c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e0aa      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008862:	897b      	ldrh	r3, [r7, #10]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	461a      	mov	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	6a3a      	ldr	r2, [r7, #32]
 8008876:	4952      	ldr	r1, [pc, #328]	; (80089c0 <I2C_RequestMemoryRead+0x1cc>)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f8fa 	bl	8008a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e097      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800889e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a0:	6a39      	ldr	r1, [r7, #32]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f964 	bl	8008b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00d      	beq.n	80088ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d107      	bne.n	80088c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e076      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d105      	bne.n	80088dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80088d0:	893b      	ldrh	r3, [r7, #8]
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	611a      	str	r2, [r3, #16]
 80088da:	e021      	b.n	8008920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80088dc:	893b      	ldrh	r3, [r7, #8]
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ec:	6a39      	ldr	r1, [r7, #32]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f93e 	bl	8008b70 <I2C_WaitOnTXEFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00d      	beq.n	8008916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d107      	bne.n	8008912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e050      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008916:	893b      	ldrh	r3, [r7, #8]
 8008918:	b2da      	uxtb	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008922:	6a39      	ldr	r1, [r7, #32]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f923 	bl	8008b70 <I2C_WaitOnTXEFlagUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00d      	beq.n	800894c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	2b04      	cmp	r3, #4
 8008936:	d107      	bne.n	8008948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e035      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800895a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	2200      	movs	r2, #0
 8008964:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f000 f82b 	bl	80089c4 <I2C_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00d      	beq.n	8008990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008982:	d103      	bne.n	800898c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800898a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e013      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008990:	897b      	ldrh	r3, [r7, #10]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f043 0301 	orr.w	r3, r3, #1
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	6a3a      	ldr	r2, [r7, #32]
 80089a4:	4906      	ldr	r1, [pc, #24]	; (80089c0 <I2C_RequestMemoryRead+0x1cc>)
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f863 	bl	8008a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	00010002 	.word	0x00010002

080089c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4613      	mov	r3, r2
 80089d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089d4:	e025      	b.n	8008a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089dc:	d021      	beq.n	8008a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089de:	f7fe fab5 	bl	8006f4c <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d302      	bcc.n	80089f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d116      	bne.n	8008a22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2220      	movs	r2, #32
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f043 0220 	orr.w	r2, r3, #32
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e023      	b.n	8008a6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	0c1b      	lsrs	r3, r3, #16
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d10d      	bne.n	8008a48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	43da      	mvns	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	4013      	ands	r3, r2
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2301      	moveq	r3, #1
 8008a40:	2300      	movne	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	e00c      	b.n	8008a62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	43da      	mvns	r2, r3
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	bf0c      	ite	eq
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d0b6      	beq.n	80089d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a80:	e051      	b.n	8008b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a90:	d123      	bne.n	8008ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008aaa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f043 0204 	orr.w	r2, r3, #4
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e046      	b.n	8008b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae0:	d021      	beq.n	8008b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae2:	f7fe fa33 	bl	8006f4c <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d302      	bcc.n	8008af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d116      	bne.n	8008b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2220      	movs	r2, #32
 8008b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f043 0220 	orr.w	r2, r3, #32
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e020      	b.n	8008b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	0c1b      	lsrs	r3, r3, #16
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d10c      	bne.n	8008b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	43da      	mvns	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bf14      	ite	ne
 8008b42:	2301      	movne	r3, #1
 8008b44:	2300      	moveq	r3, #0
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	e00b      	b.n	8008b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	43da      	mvns	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4013      	ands	r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d18d      	bne.n	8008a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b7c:	e02d      	b.n	8008bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f8ce 	bl	8008d20 <I2C_IsAcknowledgeFailed>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e02d      	b.n	8008bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b94:	d021      	beq.n	8008bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b96:	f7fe f9d9 	bl	8006f4c <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d302      	bcc.n	8008bac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d116      	bne.n	8008bda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc6:	f043 0220 	orr.w	r2, r3, #32
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e007      	b.n	8008bea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be4:	2b80      	cmp	r3, #128	; 0x80
 8008be6:	d1ca      	bne.n	8008b7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008bfe:	e02d      	b.n	8008c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 f88d 	bl	8008d20 <I2C_IsAcknowledgeFailed>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e02d      	b.n	8008c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c16:	d021      	beq.n	8008c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c18:	f7fe f998 	bl	8006f4c <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d116      	bne.n	8008c5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	f043 0220 	orr.w	r2, r3, #32
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e007      	b.n	8008c6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d1ca      	bne.n	8008c00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c80:	e042      	b.n	8008d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	d119      	bne.n	8008cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0210 	mvn.w	r2, #16
 8008c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e029      	b.n	8008d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc4:	f7fe f942 	bl	8006f4c <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d302      	bcc.n	8008cda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d116      	bne.n	8008d08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf4:	f043 0220 	orr.w	r2, r3, #32
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e007      	b.n	8008d18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d1b5      	bne.n	8008c82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d36:	d11b      	bne.n	8008d70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5c:	f043 0204 	orr.w	r2, r3, #4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e000      	b.n	8008d72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
	...

08008d80 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008d92:	687b      	ldr	r3, [r7, #4]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	420e0020 	.word	0x420e0020
 8008da4:	40007000 	.word	0x40007000

08008da8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8008dae:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_PWR_DisableBkUpAccess+0x24>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8008dba:	687b      	ldr	r3, [r7, #4]
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	420e0020 	.word	0x420e0020
 8008dcc:	40007000 	.word	0x40007000

08008dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e267      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d075      	beq.n	8008eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008dee:	4b88      	ldr	r3, [pc, #544]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f003 030c 	and.w	r3, r3, #12
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d00c      	beq.n	8008e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dfa:	4b85      	ldr	r3, [pc, #532]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d112      	bne.n	8008e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e06:	4b82      	ldr	r3, [pc, #520]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e12:	d10b      	bne.n	8008e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e14:	4b7e      	ldr	r3, [pc, #504]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d05b      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x108>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d157      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e242      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e34:	d106      	bne.n	8008e44 <HAL_RCC_OscConfig+0x74>
 8008e36:	4b76      	ldr	r3, [pc, #472]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a75      	ldr	r2, [pc, #468]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e01d      	b.n	8008e80 <HAL_RCC_OscConfig+0xb0>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e4c:	d10c      	bne.n	8008e68 <HAL_RCC_OscConfig+0x98>
 8008e4e:	4b70      	ldr	r3, [pc, #448]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a6f      	ldr	r2, [pc, #444]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	4b6d      	ldr	r3, [pc, #436]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a6c      	ldr	r2, [pc, #432]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e00b      	b.n	8008e80 <HAL_RCC_OscConfig+0xb0>
 8008e68:	4b69      	ldr	r3, [pc, #420]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a68      	ldr	r2, [pc, #416]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	4b66      	ldr	r3, [pc, #408]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a65      	ldr	r2, [pc, #404]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d013      	beq.n	8008eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e88:	f7fe f860 	bl	8006f4c <HAL_GetTick>
 8008e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e8e:	e008      	b.n	8008ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e90:	f7fe f85c 	bl	8006f4c <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	2b64      	cmp	r3, #100	; 0x64
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e207      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ea2:	4b5b      	ldr	r3, [pc, #364]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0f0      	beq.n	8008e90 <HAL_RCC_OscConfig+0xc0>
 8008eae:	e014      	b.n	8008eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eb0:	f7fe f84c 	bl	8006f4c <HAL_GetTick>
 8008eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eb6:	e008      	b.n	8008eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eb8:	f7fe f848 	bl	8006f4c <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b64      	cmp	r3, #100	; 0x64
 8008ec4:	d901      	bls.n	8008eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e1f3      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eca:	4b51      	ldr	r3, [pc, #324]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <HAL_RCC_OscConfig+0xe8>
 8008ed6:	e000      	b.n	8008eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d063      	beq.n	8008fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008ee6:	4b4a      	ldr	r3, [pc, #296]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 030c 	and.w	r3, r3, #12
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ef2:	4b47      	ldr	r3, [pc, #284]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008efa:	2b08      	cmp	r3, #8
 8008efc:	d11c      	bne.n	8008f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008efe:	4b44      	ldr	r3, [pc, #272]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f0a:	4b41      	ldr	r3, [pc, #260]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <HAL_RCC_OscConfig+0x152>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d001      	beq.n	8008f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e1c7      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f22:	4b3b      	ldr	r3, [pc, #236]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	00db      	lsls	r3, r3, #3
 8008f30:	4937      	ldr	r1, [pc, #220]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f36:	e03a      	b.n	8008fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d020      	beq.n	8008f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f40:	4b34      	ldr	r3, [pc, #208]	; (8009014 <HAL_RCC_OscConfig+0x244>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f46:	f7fe f801 	bl	8006f4c <HAL_GetTick>
 8008f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f4c:	e008      	b.n	8008f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f4e:	f7fd fffd 	bl	8006f4c <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e1a8      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f60:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0f0      	beq.n	8008f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f6c:	4b28      	ldr	r3, [pc, #160]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4925      	ldr	r1, [pc, #148]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	600b      	str	r3, [r1, #0]
 8008f80:	e015      	b.n	8008fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f82:	4b24      	ldr	r3, [pc, #144]	; (8009014 <HAL_RCC_OscConfig+0x244>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7fd ffe0 	bl	8006f4c <HAL_GetTick>
 8008f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f90:	f7fd ffdc 	bl	8006f4c <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e187      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fa2:	4b1b      	ldr	r3, [pc, #108]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f0      	bne.n	8008f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d036      	beq.n	8009028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d016      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fc2:	4b15      	ldr	r3, [pc, #84]	; (8009018 <HAL_RCC_OscConfig+0x248>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc8:	f7fd ffc0 	bl	8006f4c <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fd0:	f7fd ffbc 	bl	8006f4c <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e167      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f0      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x200>
 8008fee:	e01b      	b.n	8009028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ff0:	4b09      	ldr	r3, [pc, #36]	; (8009018 <HAL_RCC_OscConfig+0x248>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ff6:	f7fd ffa9 	bl	8006f4c <HAL_GetTick>
 8008ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ffc:	e00e      	b.n	800901c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ffe:	f7fd ffa5 	bl	8006f4c <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d907      	bls.n	800901c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e150      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
 8009010:	40023800 	.word	0x40023800
 8009014:	42470000 	.word	0x42470000
 8009018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800901c:	4b88      	ldr	r3, [pc, #544]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 800901e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1ea      	bne.n	8008ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 8097 	beq.w	8009164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800903a:	4b81      	ldr	r3, [pc, #516]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10f      	bne.n	8009066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	4b7d      	ldr	r3, [pc, #500]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	4a7c      	ldr	r2, [pc, #496]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 8009050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009054:	6413      	str	r3, [r2, #64]	; 0x40
 8009056:	4b7a      	ldr	r3, [pc, #488]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905e:	60bb      	str	r3, [r7, #8]
 8009060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009062:	2301      	movs	r3, #1
 8009064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009066:	4b77      	ldr	r3, [pc, #476]	; (8009244 <HAL_RCC_OscConfig+0x474>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906e:	2b00      	cmp	r3, #0
 8009070:	d118      	bne.n	80090a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009072:	4b74      	ldr	r3, [pc, #464]	; (8009244 <HAL_RCC_OscConfig+0x474>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a73      	ldr	r2, [pc, #460]	; (8009244 <HAL_RCC_OscConfig+0x474>)
 8009078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800907c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800907e:	f7fd ff65 	bl	8006f4c <HAL_GetTick>
 8009082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009084:	e008      	b.n	8009098 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009086:	f7fd ff61 	bl	8006f4c <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e10c      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009098:	4b6a      	ldr	r3, [pc, #424]	; (8009244 <HAL_RCC_OscConfig+0x474>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0f0      	beq.n	8009086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d106      	bne.n	80090ba <HAL_RCC_OscConfig+0x2ea>
 80090ac:	4b64      	ldr	r3, [pc, #400]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b0:	4a63      	ldr	r2, [pc, #396]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	6713      	str	r3, [r2, #112]	; 0x70
 80090b8:	e01c      	b.n	80090f4 <HAL_RCC_OscConfig+0x324>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b05      	cmp	r3, #5
 80090c0:	d10c      	bne.n	80090dc <HAL_RCC_OscConfig+0x30c>
 80090c2:	4b5f      	ldr	r3, [pc, #380]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c6:	4a5e      	ldr	r2, [pc, #376]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090c8:	f043 0304 	orr.w	r3, r3, #4
 80090cc:	6713      	str	r3, [r2, #112]	; 0x70
 80090ce:	4b5c      	ldr	r3, [pc, #368]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d2:	4a5b      	ldr	r2, [pc, #364]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090d4:	f043 0301 	orr.w	r3, r3, #1
 80090d8:	6713      	str	r3, [r2, #112]	; 0x70
 80090da:	e00b      	b.n	80090f4 <HAL_RCC_OscConfig+0x324>
 80090dc:	4b58      	ldr	r3, [pc, #352]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e0:	4a57      	ldr	r2, [pc, #348]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090e2:	f023 0301 	bic.w	r3, r3, #1
 80090e6:	6713      	str	r3, [r2, #112]	; 0x70
 80090e8:	4b55      	ldr	r3, [pc, #340]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ec:	4a54      	ldr	r2, [pc, #336]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80090ee:	f023 0304 	bic.w	r3, r3, #4
 80090f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d015      	beq.n	8009128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090fc:	f7fd ff26 	bl	8006f4c <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009102:	e00a      	b.n	800911a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009104:	f7fd ff22 	bl	8006f4c <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009112:	4293      	cmp	r3, r2
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e0cb      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800911a:	4b49      	ldr	r3, [pc, #292]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0ee      	beq.n	8009104 <HAL_RCC_OscConfig+0x334>
 8009126:	e014      	b.n	8009152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009128:	f7fd ff10 	bl	8006f4c <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800912e:	e00a      	b.n	8009146 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009130:	f7fd ff0c 	bl	8006f4c <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f241 3288 	movw	r2, #5000	; 0x1388
 800913e:	4293      	cmp	r3, r2
 8009140:	d901      	bls.n	8009146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e0b5      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009146:	4b3e      	ldr	r3, [pc, #248]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1ee      	bne.n	8009130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d105      	bne.n	8009164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009158:	4b39      	ldr	r3, [pc, #228]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	4a38      	ldr	r2, [pc, #224]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 800915e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80a1 	beq.w	80092b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800916e:	4b34      	ldr	r3, [pc, #208]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 030c 	and.w	r3, r3, #12
 8009176:	2b08      	cmp	r3, #8
 8009178:	d05c      	beq.n	8009234 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	2b02      	cmp	r3, #2
 8009180:	d141      	bne.n	8009206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009182:	4b31      	ldr	r3, [pc, #196]	; (8009248 <HAL_RCC_OscConfig+0x478>)
 8009184:	2200      	movs	r2, #0
 8009186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009188:	f7fd fee0 	bl	8006f4c <HAL_GetTick>
 800918c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009190:	f7fd fedc 	bl	8006f4c <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e087      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091a2:	4b27      	ldr	r3, [pc, #156]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f0      	bne.n	8009190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	019b      	lsls	r3, r3, #6
 80091be:	431a      	orrs	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	3b01      	subs	r3, #1
 80091c8:	041b      	lsls	r3, r3, #16
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	061b      	lsls	r3, r3, #24
 80091d2:	491b      	ldr	r1, [pc, #108]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091d8:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <HAL_RCC_OscConfig+0x478>)
 80091da:	2201      	movs	r2, #1
 80091dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091de:	f7fd feb5 	bl	8006f4c <HAL_GetTick>
 80091e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091e4:	e008      	b.n	80091f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091e6:	f7fd feb1 	bl	8006f4c <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e05c      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091f8:	4b11      	ldr	r3, [pc, #68]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0f0      	beq.n	80091e6 <HAL_RCC_OscConfig+0x416>
 8009204:	e054      	b.n	80092b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <HAL_RCC_OscConfig+0x478>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800920c:	f7fd fe9e 	bl	8006f4c <HAL_GetTick>
 8009210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009214:	f7fd fe9a 	bl	8006f4c <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e045      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <HAL_RCC_OscConfig+0x470>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1f0      	bne.n	8009214 <HAL_RCC_OscConfig+0x444>
 8009232:	e03d      	b.n	80092b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d107      	bne.n	800924c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e038      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
 8009240:	40023800 	.word	0x40023800
 8009244:	40007000 	.word	0x40007000
 8009248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800924c:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <HAL_RCC_OscConfig+0x4ec>)
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d028      	beq.n	80092ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009264:	429a      	cmp	r2, r3
 8009266:	d121      	bne.n	80092ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009272:	429a      	cmp	r2, r3
 8009274:	d11a      	bne.n	80092ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800927c:	4013      	ands	r3, r2
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009284:	4293      	cmp	r3, r2
 8009286:	d111      	bne.n	80092ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	3b01      	subs	r3, #1
 8009296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009298:	429a      	cmp	r2, r3
 800929a:	d107      	bne.n	80092ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d001      	beq.n	80092b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e000      	b.n	80092b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	40023800 	.word	0x40023800

080092c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0cc      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80092d4:	4b68      	ldr	r3, [pc, #416]	; (8009478 <HAL_RCC_ClockConfig+0x1b8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d90c      	bls.n	80092fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092e2:	4b65      	ldr	r3, [pc, #404]	; (8009478 <HAL_RCC_ClockConfig+0x1b8>)
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ea:	4b63      	ldr	r3, [pc, #396]	; (8009478 <HAL_RCC_ClockConfig+0x1b8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d001      	beq.n	80092fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0b8      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d020      	beq.n	800934a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009314:	4b59      	ldr	r3, [pc, #356]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	4a58      	ldr	r2, [pc, #352]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 800931a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800931e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0308 	and.w	r3, r3, #8
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800932c:	4b53      	ldr	r3, [pc, #332]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	4a52      	ldr	r2, [pc, #328]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009338:	4b50      	ldr	r3, [pc, #320]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	494d      	ldr	r1, [pc, #308]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009346:	4313      	orrs	r3, r2
 8009348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d044      	beq.n	80093e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d107      	bne.n	800936e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800935e:	4b47      	ldr	r3, [pc, #284]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d119      	bne.n	800939e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e07f      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d003      	beq.n	800937e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800937a:	2b03      	cmp	r3, #3
 800937c:	d107      	bne.n	800938e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800937e:	4b3f      	ldr	r3, [pc, #252]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e06f      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800938e:	4b3b      	ldr	r3, [pc, #236]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e067      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800939e:	4b37      	ldr	r3, [pc, #220]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f023 0203 	bic.w	r2, r3, #3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	4934      	ldr	r1, [pc, #208]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093b0:	f7fd fdcc 	bl	8006f4c <HAL_GetTick>
 80093b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093b6:	e00a      	b.n	80093ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b8:	f7fd fdc8 	bl	8006f4c <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d901      	bls.n	80093ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e04f      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ce:	4b2b      	ldr	r3, [pc, #172]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 020c 	and.w	r2, r3, #12
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	429a      	cmp	r2, r3
 80093de:	d1eb      	bne.n	80093b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093e0:	4b25      	ldr	r3, [pc, #148]	; (8009478 <HAL_RCC_ClockConfig+0x1b8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0307 	and.w	r3, r3, #7
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d20c      	bcs.n	8009408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ee:	4b22      	ldr	r3, [pc, #136]	; (8009478 <HAL_RCC_ClockConfig+0x1b8>)
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f6:	4b20      	ldr	r3, [pc, #128]	; (8009478 <HAL_RCC_ClockConfig+0x1b8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d001      	beq.n	8009408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e032      	b.n	800946e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009414:	4b19      	ldr	r3, [pc, #100]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	4916      	ldr	r1, [pc, #88]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009422:	4313      	orrs	r3, r2
 8009424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009432:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	490e      	ldr	r1, [pc, #56]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 8009442:	4313      	orrs	r3, r2
 8009444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009446:	f000 f821 	bl	800948c <HAL_RCC_GetSysClockFreq>
 800944a:	4602      	mov	r2, r0
 800944c:	4b0b      	ldr	r3, [pc, #44]	; (800947c <HAL_RCC_ClockConfig+0x1bc>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	091b      	lsrs	r3, r3, #4
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	490a      	ldr	r1, [pc, #40]	; (8009480 <HAL_RCC_ClockConfig+0x1c0>)
 8009458:	5ccb      	ldrb	r3, [r1, r3]
 800945a:	fa22 f303 	lsr.w	r3, r2, r3
 800945e:	4a09      	ldr	r2, [pc, #36]	; (8009484 <HAL_RCC_ClockConfig+0x1c4>)
 8009460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009462:	4b09      	ldr	r3, [pc, #36]	; (8009488 <HAL_RCC_ClockConfig+0x1c8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f7fd fc32 	bl	8006cd0 <HAL_InitTick>

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40023c00 	.word	0x40023c00
 800947c:	40023800 	.word	0x40023800
 8009480:	08010388 	.word	0x08010388
 8009484:	20000144 	.word	0x20000144
 8009488:	20000148 	.word	0x20000148

0800948c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800948c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009490:	b090      	sub	sp, #64	; 0x40
 8009492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
 8009498:	2300      	movs	r3, #0
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800949c:	2300      	movs	r3, #0
 800949e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094a4:	4b59      	ldr	r3, [pc, #356]	; (800960c <HAL_RCC_GetSysClockFreq+0x180>)
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f003 030c 	and.w	r3, r3, #12
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d00d      	beq.n	80094cc <HAL_RCC_GetSysClockFreq+0x40>
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	f200 80a1 	bhi.w	80095f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_RCC_GetSysClockFreq+0x34>
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d003      	beq.n	80094c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80094be:	e09b      	b.n	80095f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094c0:	4b53      	ldr	r3, [pc, #332]	; (8009610 <HAL_RCC_GetSysClockFreq+0x184>)
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80094c4:	e09b      	b.n	80095fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094c6:	4b53      	ldr	r3, [pc, #332]	; (8009614 <HAL_RCC_GetSysClockFreq+0x188>)
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80094ca:	e098      	b.n	80095fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80094cc:	4b4f      	ldr	r3, [pc, #316]	; (800960c <HAL_RCC_GetSysClockFreq+0x180>)
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80094d6:	4b4d      	ldr	r3, [pc, #308]	; (800960c <HAL_RCC_GetSysClockFreq+0x180>)
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d028      	beq.n	8009534 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094e2:	4b4a      	ldr	r3, [pc, #296]	; (800960c <HAL_RCC_GetSysClockFreq+0x180>)
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	099b      	lsrs	r3, r3, #6
 80094e8:	2200      	movs	r2, #0
 80094ea:	623b      	str	r3, [r7, #32]
 80094ec:	627a      	str	r2, [r7, #36]	; 0x24
 80094ee:	6a3b      	ldr	r3, [r7, #32]
 80094f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80094f4:	2100      	movs	r1, #0
 80094f6:	4b47      	ldr	r3, [pc, #284]	; (8009614 <HAL_RCC_GetSysClockFreq+0x188>)
 80094f8:	fb03 f201 	mul.w	r2, r3, r1
 80094fc:	2300      	movs	r3, #0
 80094fe:	fb00 f303 	mul.w	r3, r0, r3
 8009502:	4413      	add	r3, r2
 8009504:	4a43      	ldr	r2, [pc, #268]	; (8009614 <HAL_RCC_GetSysClockFreq+0x188>)
 8009506:	fba0 1202 	umull	r1, r2, r0, r2
 800950a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800950c:	460a      	mov	r2, r1
 800950e:	62ba      	str	r2, [r7, #40]	; 0x28
 8009510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009512:	4413      	add	r3, r2
 8009514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009518:	2200      	movs	r2, #0
 800951a:	61bb      	str	r3, [r7, #24]
 800951c:	61fa      	str	r2, [r7, #28]
 800951e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009522:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009526:	f7f7 fb69 	bl	8000bfc <__aeabi_uldivmod>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	4613      	mov	r3, r2
 8009530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009532:	e053      	b.n	80095dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009534:	4b35      	ldr	r3, [pc, #212]	; (800960c <HAL_RCC_GetSysClockFreq+0x180>)
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	099b      	lsrs	r3, r3, #6
 800953a:	2200      	movs	r2, #0
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	617a      	str	r2, [r7, #20]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009546:	f04f 0b00 	mov.w	fp, #0
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	f04f 0000 	mov.w	r0, #0
 8009552:	f04f 0100 	mov.w	r1, #0
 8009556:	0159      	lsls	r1, r3, #5
 8009558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800955c:	0150      	lsls	r0, r2, #5
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	ebb2 080a 	subs.w	r8, r2, sl
 8009566:	eb63 090b 	sbc.w	r9, r3, fp
 800956a:	f04f 0200 	mov.w	r2, #0
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009576:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800957a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800957e:	ebb2 0408 	subs.w	r4, r2, r8
 8009582:	eb63 0509 	sbc.w	r5, r3, r9
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	f04f 0300 	mov.w	r3, #0
 800958e:	00eb      	lsls	r3, r5, #3
 8009590:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009594:	00e2      	lsls	r2, r4, #3
 8009596:	4614      	mov	r4, r2
 8009598:	461d      	mov	r5, r3
 800959a:	eb14 030a 	adds.w	r3, r4, sl
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	eb45 030b 	adc.w	r3, r5, fp
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	f04f 0200 	mov.w	r2, #0
 80095aa:	f04f 0300 	mov.w	r3, #0
 80095ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80095b2:	4629      	mov	r1, r5
 80095b4:	028b      	lsls	r3, r1, #10
 80095b6:	4621      	mov	r1, r4
 80095b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095bc:	4621      	mov	r1, r4
 80095be:	028a      	lsls	r2, r1, #10
 80095c0:	4610      	mov	r0, r2
 80095c2:	4619      	mov	r1, r3
 80095c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c6:	2200      	movs	r2, #0
 80095c8:	60bb      	str	r3, [r7, #8]
 80095ca:	60fa      	str	r2, [r7, #12]
 80095cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095d0:	f7f7 fb14 	bl	8000bfc <__aeabi_uldivmod>
 80095d4:	4602      	mov	r2, r0
 80095d6:	460b      	mov	r3, r1
 80095d8:	4613      	mov	r3, r2
 80095da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095dc:	4b0b      	ldr	r3, [pc, #44]	; (800960c <HAL_RCC_GetSysClockFreq+0x180>)
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	0c1b      	lsrs	r3, r3, #16
 80095e2:	f003 0303 	and.w	r3, r3, #3
 80095e6:	3301      	adds	r3, #1
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80095ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80095f6:	e002      	b.n	80095fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <HAL_RCC_GetSysClockFreq+0x184>)
 80095fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80095fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009600:	4618      	mov	r0, r3
 8009602:	3740      	adds	r7, #64	; 0x40
 8009604:	46bd      	mov	sp, r7
 8009606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800960a:	bf00      	nop
 800960c:	40023800 	.word	0x40023800
 8009610:	00f42400 	.word	0x00f42400
 8009614:	017d7840 	.word	0x017d7840

08009618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009618:	b480      	push	{r7}
 800961a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800961c:	4b03      	ldr	r3, [pc, #12]	; (800962c <HAL_RCC_GetHCLKFreq+0x14>)
 800961e:	681b      	ldr	r3, [r3, #0]
}
 8009620:	4618      	mov	r0, r3
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20000144 	.word	0x20000144

08009630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009634:	f7ff fff0 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 8009638:	4602      	mov	r2, r0
 800963a:	4b05      	ldr	r3, [pc, #20]	; (8009650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	0a9b      	lsrs	r3, r3, #10
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	4903      	ldr	r1, [pc, #12]	; (8009654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009646:	5ccb      	ldrb	r3, [r1, r3]
 8009648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800964c:	4618      	mov	r0, r3
 800964e:	bd80      	pop	{r7, pc}
 8009650:	40023800 	.word	0x40023800
 8009654:	08010398 	.word	0x08010398

08009658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800965c:	f7ff ffdc 	bl	8009618 <HAL_RCC_GetHCLKFreq>
 8009660:	4602      	mov	r2, r0
 8009662:	4b05      	ldr	r3, [pc, #20]	; (8009678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	0b5b      	lsrs	r3, r3, #13
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	4903      	ldr	r1, [pc, #12]	; (800967c <HAL_RCC_GetPCLK2Freq+0x24>)
 800966e:	5ccb      	ldrb	r3, [r1, r3]
 8009670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009674:	4618      	mov	r0, r3
 8009676:	bd80      	pop	{r7, pc}
 8009678:	40023800 	.word	0x40023800
 800967c:	08010398 	.word	0x08010398

08009680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	220f      	movs	r2, #15
 800968e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009690:	4b12      	ldr	r3, [pc, #72]	; (80096dc <HAL_RCC_GetClockConfig+0x5c>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f003 0203 	and.w	r2, r3, #3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <HAL_RCC_GetClockConfig+0x5c>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <HAL_RCC_GetClockConfig+0x5c>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <HAL_RCC_GetClockConfig+0x5c>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	08db      	lsrs	r3, r3, #3
 80096ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <HAL_RCC_GetClockConfig+0x60>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0207 	and.w	r2, r3, #7
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	601a      	str	r2, [r3, #0]
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40023800 	.word	0x40023800
 80096e0:	40023c00 	.word	0x40023c00

080096e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e041      	b.n	800977a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7fd f936 	bl	800697c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f001 f91c 	bl	800a960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b01      	cmp	r3, #1
 8009796:	d001      	beq.n	800979c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e046      	b.n	800982a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a23      	ldr	r2, [pc, #140]	; (8009838 <HAL_TIM_Base_Start+0xb4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d022      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b6:	d01d      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1f      	ldr	r2, [pc, #124]	; (800983c <HAL_TIM_Base_Start+0xb8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d018      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <HAL_TIM_Base_Start+0xbc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d013      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1c      	ldr	r2, [pc, #112]	; (8009844 <HAL_TIM_Base_Start+0xc0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00e      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <HAL_TIM_Base_Start+0xc4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d009      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a19      	ldr	r2, [pc, #100]	; (800984c <HAL_TIM_Base_Start+0xc8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d004      	beq.n	80097f4 <HAL_TIM_Base_Start+0x70>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a18      	ldr	r2, [pc, #96]	; (8009850 <HAL_TIM_Base_Start+0xcc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d111      	bne.n	8009818 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d010      	beq.n	8009828 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0201 	orr.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009816:	e007      	b.n	8009828 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40010400 	.word	0x40010400
 800984c:	40014000 	.word	0x40014000
 8009850:	40001800 	.word	0x40001800

08009854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	d001      	beq.n	800986c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e04e      	b.n	800990a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a23      	ldr	r2, [pc, #140]	; (8009918 <HAL_TIM_Base_Start_IT+0xc4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d022      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009896:	d01d      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1f      	ldr	r2, [pc, #124]	; (800991c <HAL_TIM_Base_Start_IT+0xc8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d018      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <HAL_TIM_Base_Start_IT+0xcc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d013      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a1c      	ldr	r2, [pc, #112]	; (8009924 <HAL_TIM_Base_Start_IT+0xd0>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00e      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <HAL_TIM_Base_Start_IT+0xd4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d009      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a19      	ldr	r2, [pc, #100]	; (800992c <HAL_TIM_Base_Start_IT+0xd8>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d004      	beq.n	80098d4 <HAL_TIM_Base_Start_IT+0x80>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a18      	ldr	r2, [pc, #96]	; (8009930 <HAL_TIM_Base_Start_IT+0xdc>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d111      	bne.n	80098f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b06      	cmp	r3, #6
 80098e4:	d010      	beq.n	8009908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f042 0201 	orr.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f6:	e007      	b.n	8009908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0201 	orr.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	40010000 	.word	0x40010000
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800
 8009924:	40000c00 	.word	0x40000c00
 8009928:	40010400 	.word	0x40010400
 800992c:	40014000 	.word	0x40014000
 8009930:	40001800 	.word	0x40001800

08009934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e041      	b.n	80099ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f839 	bl	80099d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3304      	adds	r3, #4
 8009970:	4619      	mov	r1, r3
 8009972:	4610      	mov	r0, r2
 8009974:	f000 fff4 	bl	800a960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b083      	sub	sp, #12
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d109      	bne.n	8009a0c <HAL_TIM_PWM_Start+0x24>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	bf14      	ite	ne
 8009a04:	2301      	movne	r3, #1
 8009a06:	2300      	moveq	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e022      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d109      	bne.n	8009a26 <HAL_TIM_PWM_Start+0x3e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	bf14      	ite	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	2300      	moveq	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	e015      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d109      	bne.n	8009a40 <HAL_TIM_PWM_Start+0x58>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	bf14      	ite	ne
 8009a38:	2301      	movne	r3, #1
 8009a3a:	2300      	moveq	r3, #0
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	e008      	b.n	8009a52 <HAL_TIM_PWM_Start+0x6a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e07c      	b.n	8009b54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_PWM_Start+0x82>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a68:	e013      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_PWM_Start+0x92>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a78:	e00b      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b08      	cmp	r3, #8
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_PWM_Start+0xa2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a88:	e003      	b.n	8009a92 <HAL_TIM_PWM_Start+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2201      	movs	r2, #1
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 fb74 	bl	800b188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a2d      	ldr	r2, [pc, #180]	; (8009b5c <HAL_TIM_PWM_Start+0x174>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d004      	beq.n	8009ab4 <HAL_TIM_PWM_Start+0xcc>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a2c      	ldr	r2, [pc, #176]	; (8009b60 <HAL_TIM_PWM_Start+0x178>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d101      	bne.n	8009ab8 <HAL_TIM_PWM_Start+0xd0>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e000      	b.n	8009aba <HAL_TIM_PWM_Start+0xd2>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d007      	beq.n	8009ace <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a22      	ldr	r2, [pc, #136]	; (8009b5c <HAL_TIM_PWM_Start+0x174>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d022      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae0:	d01d      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <HAL_TIM_PWM_Start+0x17c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d018      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1d      	ldr	r2, [pc, #116]	; (8009b68 <HAL_TIM_PWM_Start+0x180>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d013      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1c      	ldr	r2, [pc, #112]	; (8009b6c <HAL_TIM_PWM_Start+0x184>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00e      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <HAL_TIM_PWM_Start+0x178>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d009      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a18      	ldr	r2, [pc, #96]	; (8009b70 <HAL_TIM_PWM_Start+0x188>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d004      	beq.n	8009b1e <HAL_TIM_PWM_Start+0x136>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a16      	ldr	r2, [pc, #88]	; (8009b74 <HAL_TIM_PWM_Start+0x18c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d111      	bne.n	8009b42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0307 	and.w	r3, r3, #7
 8009b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b06      	cmp	r3, #6
 8009b2e:	d010      	beq.n	8009b52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b40:	e007      	b.n	8009b52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	40010000 	.word	0x40010000
 8009b60:	40010400 	.word	0x40010400
 8009b64:	40000400 	.word	0x40000400
 8009b68:	40000800 	.word	0x40000800
 8009b6c:	40000c00 	.word	0x40000c00
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40001800 	.word	0x40001800

08009b78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e041      	b.n	8009c0e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f839 	bl	8009c16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f000 fed2 	bl	800a960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
	...

08009c2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <HAL_TIM_IC_Start_IT+0x1e>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	e013      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x46>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d104      	bne.n	8009c5a <HAL_TIM_IC_Start_IT+0x2e>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	e00b      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x46>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d104      	bne.n	8009c6a <HAL_TIM_IC_Start_IT+0x3e>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	e003      	b.n	8009c72 <HAL_TIM_IC_Start_IT+0x46>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d104      	bne.n	8009c84 <HAL_TIM_IC_Start_IT+0x58>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	e013      	b.n	8009cac <HAL_TIM_IC_Start_IT+0x80>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b04      	cmp	r3, #4
 8009c88:	d104      	bne.n	8009c94 <HAL_TIM_IC_Start_IT+0x68>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	e00b      	b.n	8009cac <HAL_TIM_IC_Start_IT+0x80>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d104      	bne.n	8009ca4 <HAL_TIM_IC_Start_IT+0x78>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	e003      	b.n	8009cac <HAL_TIM_IC_Start_IT+0x80>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d102      	bne.n	8009cba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009cb4:	7b7b      	ldrb	r3, [r7, #13]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d001      	beq.n	8009cbe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e0cc      	b.n	8009e58 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <HAL_TIM_IC_Start_IT+0xa2>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ccc:	e013      	b.n	8009cf6 <HAL_TIM_IC_Start_IT+0xca>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d104      	bne.n	8009cde <HAL_TIM_IC_Start_IT+0xb2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cdc:	e00b      	b.n	8009cf6 <HAL_TIM_IC_Start_IT+0xca>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d104      	bne.n	8009cee <HAL_TIM_IC_Start_IT+0xc2>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cec:	e003      	b.n	8009cf6 <HAL_TIM_IC_Start_IT+0xca>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <HAL_TIM_IC_Start_IT+0xda>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d04:	e013      	b.n	8009d2e <HAL_TIM_IC_Start_IT+0x102>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d104      	bne.n	8009d16 <HAL_TIM_IC_Start_IT+0xea>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d14:	e00b      	b.n	8009d2e <HAL_TIM_IC_Start_IT+0x102>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b08      	cmp	r3, #8
 8009d1a:	d104      	bne.n	8009d26 <HAL_TIM_IC_Start_IT+0xfa>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d24:	e003      	b.n	8009d2e <HAL_TIM_IC_Start_IT+0x102>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b0c      	cmp	r3, #12
 8009d32:	d841      	bhi.n	8009db8 <HAL_TIM_IC_Start_IT+0x18c>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <HAL_TIM_IC_Start_IT+0x110>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d71 	.word	0x08009d71
 8009d40:	08009db9 	.word	0x08009db9
 8009d44:	08009db9 	.word	0x08009db9
 8009d48:	08009db9 	.word	0x08009db9
 8009d4c:	08009d83 	.word	0x08009d83
 8009d50:	08009db9 	.word	0x08009db9
 8009d54:	08009db9 	.word	0x08009db9
 8009d58:	08009db9 	.word	0x08009db9
 8009d5c:	08009d95 	.word	0x08009d95
 8009d60:	08009db9 	.word	0x08009db9
 8009d64:	08009db9 	.word	0x08009db9
 8009d68:	08009db9 	.word	0x08009db9
 8009d6c:	08009da7 	.word	0x08009da7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68da      	ldr	r2, [r3, #12]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0202 	orr.w	r2, r2, #2
 8009d7e:	60da      	str	r2, [r3, #12]
      break;
 8009d80:	e01d      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f042 0204 	orr.w	r2, r2, #4
 8009d90:	60da      	str	r2, [r3, #12]
      break;
 8009d92:	e014      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0208 	orr.w	r2, r2, #8
 8009da2:	60da      	str	r2, [r3, #12]
      break;
 8009da4:	e00b      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0210 	orr.w	r2, r2, #16
 8009db4:	60da      	str	r2, [r3, #12]
      break;
 8009db6:	e002      	b.n	8009dbe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	73fb      	strb	r3, [r7, #15]
      break;
 8009dbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d148      	bne.n	8009e56 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f001 f9db 	bl	800b188 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a22      	ldr	r2, [pc, #136]	; (8009e60 <HAL_TIM_IC_Start_IT+0x234>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d022      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de4:	d01d      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1e      	ldr	r2, [pc, #120]	; (8009e64 <HAL_TIM_IC_Start_IT+0x238>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d018      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <HAL_TIM_IC_Start_IT+0x23c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d013      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a1b      	ldr	r2, [pc, #108]	; (8009e6c <HAL_TIM_IC_Start_IT+0x240>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d00e      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a19      	ldr	r2, [pc, #100]	; (8009e70 <HAL_TIM_IC_Start_IT+0x244>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d009      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a18      	ldr	r2, [pc, #96]	; (8009e74 <HAL_TIM_IC_Start_IT+0x248>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d004      	beq.n	8009e22 <HAL_TIM_IC_Start_IT+0x1f6>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a16      	ldr	r2, [pc, #88]	; (8009e78 <HAL_TIM_IC_Start_IT+0x24c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d111      	bne.n	8009e46 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b06      	cmp	r3, #6
 8009e32:	d010      	beq.n	8009e56 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f042 0201 	orr.w	r2, r2, #1
 8009e42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e44:	e007      	b.n	8009e56 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f042 0201 	orr.w	r2, r2, #1
 8009e54:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	40010000 	.word	0x40010000
 8009e64:	40000400 	.word	0x40000400
 8009e68:	40000800 	.word	0x40000800
 8009e6c:	40000c00 	.word	0x40000c00
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40001800 	.word	0x40001800

08009e7c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b0c      	cmp	r3, #12
 8009e8e:	d841      	bhi.n	8009f14 <HAL_TIM_IC_Stop_IT+0x98>
 8009e90:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <HAL_TIM_IC_Stop_IT+0x1c>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009ecd 	.word	0x08009ecd
 8009e9c:	08009f15 	.word	0x08009f15
 8009ea0:	08009f15 	.word	0x08009f15
 8009ea4:	08009f15 	.word	0x08009f15
 8009ea8:	08009edf 	.word	0x08009edf
 8009eac:	08009f15 	.word	0x08009f15
 8009eb0:	08009f15 	.word	0x08009f15
 8009eb4:	08009f15 	.word	0x08009f15
 8009eb8:	08009ef1 	.word	0x08009ef1
 8009ebc:	08009f15 	.word	0x08009f15
 8009ec0:	08009f15 	.word	0x08009f15
 8009ec4:	08009f15 	.word	0x08009f15
 8009ec8:	08009f03 	.word	0x08009f03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0202 	bic.w	r2, r2, #2
 8009eda:	60da      	str	r2, [r3, #12]
      break;
 8009edc:	e01d      	b.n	8009f1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0204 	bic.w	r2, r2, #4
 8009eec:	60da      	str	r2, [r3, #12]
      break;
 8009eee:	e014      	b.n	8009f1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0208 	bic.w	r2, r2, #8
 8009efe:	60da      	str	r2, [r3, #12]
      break;
 8009f00:	e00b      	b.n	8009f1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 0210 	bic.w	r2, r2, #16
 8009f10:	60da      	str	r2, [r3, #12]
      break;
 8009f12:	e002      	b.n	8009f1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]
      break;
 8009f18:	bf00      	nop
  }

  if (status == HAL_OK)
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d156      	bne.n	8009fce <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2200      	movs	r2, #0
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 f92d 	bl	800b188 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a1a      	ldr	r2, [r3, #32]
 8009f34:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f38:	4013      	ands	r3, r2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10f      	bne.n	8009f5e <HAL_TIM_IC_Stop_IT+0xe2>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6a1a      	ldr	r2, [r3, #32]
 8009f44:	f240 4344 	movw	r3, #1092	; 0x444
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d107      	bne.n	8009f5e <HAL_TIM_IC_Stop_IT+0xe2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0201 	bic.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <HAL_TIM_IC_Stop_IT+0xf2>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f6c:	e013      	b.n	8009f96 <HAL_TIM_IC_Stop_IT+0x11a>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d104      	bne.n	8009f7e <HAL_TIM_IC_Stop_IT+0x102>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f7c:	e00b      	b.n	8009f96 <HAL_TIM_IC_Stop_IT+0x11a>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d104      	bne.n	8009f8e <HAL_TIM_IC_Stop_IT+0x112>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f8c:	e003      	b.n	8009f96 <HAL_TIM_IC_Stop_IT+0x11a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d104      	bne.n	8009fa6 <HAL_TIM_IC_Stop_IT+0x12a>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fa4:	e013      	b.n	8009fce <HAL_TIM_IC_Stop_IT+0x152>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b04      	cmp	r3, #4
 8009faa:	d104      	bne.n	8009fb6 <HAL_TIM_IC_Stop_IT+0x13a>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fb4:	e00b      	b.n	8009fce <HAL_TIM_IC_Stop_IT+0x152>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b08      	cmp	r3, #8
 8009fba:	d104      	bne.n	8009fc6 <HAL_TIM_IC_Stop_IT+0x14a>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc4:	e003      	b.n	8009fce <HAL_TIM_IC_Stop_IT+0x152>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e097      	b.n	800a11c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d106      	bne.n	800a006 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7fc fd75 	bl	8006af0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a01c:	f023 0307 	bic.w	r3, r3, #7
 800a020:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3304      	adds	r3, #4
 800a02a:	4619      	mov	r1, r3
 800a02c:	4610      	mov	r0, r2
 800a02e:	f000 fc97 	bl	800a960 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6a1b      	ldr	r3, [r3, #32]
 800a048:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	4313      	orrs	r3, r2
 800a052:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a05a:	f023 0303 	bic.w	r3, r3, #3
 800a05e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	4313      	orrs	r3, r2
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	4313      	orrs	r3, r2
 800a070:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a078:	f023 030c 	bic.w	r3, r3, #12
 800a07c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a084:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	4313      	orrs	r3, r2
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	011a      	lsls	r2, r3, #4
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	031b      	lsls	r3, r3, #12
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a0b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a0be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a134:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a13c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a144:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a14c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d110      	bne.n	800a176 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a154:	7bfb      	ldrb	r3, [r7, #15]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d102      	bne.n	800a160 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a15a:	7b7b      	ldrb	r3, [r7, #13]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d001      	beq.n	800a164 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e069      	b.n	800a238 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a174:	e031      	b.n	800a1da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b04      	cmp	r3, #4
 800a17a:	d110      	bne.n	800a19e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d102      	bne.n	800a188 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a182:	7b3b      	ldrb	r3, [r7, #12]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d001      	beq.n	800a18c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e055      	b.n	800a238 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2202      	movs	r2, #2
 800a198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a19c:	e01d      	b.n	800a1da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d108      	bne.n	800a1b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d105      	bne.n	800a1b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1aa:	7b7b      	ldrb	r3, [r7, #13]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d102      	bne.n	800a1b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a1b0:	7b3b      	ldrb	r3, [r7, #12]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d001      	beq.n	800a1ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e03e      	b.n	800a238 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <HAL_TIM_Encoder_Start+0xc4>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b04      	cmp	r3, #4
 800a1e4:	d008      	beq.n	800a1f8 <HAL_TIM_Encoder_Start+0xd4>
 800a1e6:	e00f      	b.n	800a208 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 ffc9 	bl	800b188 <TIM_CCxChannelCmd>
      break;
 800a1f6:	e016      	b.n	800a226 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	2104      	movs	r1, #4
 800a200:	4618      	mov	r0, r3
 800a202:	f000 ffc1 	bl	800b188 <TIM_CCxChannelCmd>
      break;
 800a206:	e00e      	b.n	800a226 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2201      	movs	r2, #1
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f000 ffb9 	bl	800b188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2201      	movs	r2, #1
 800a21c:	2104      	movs	r1, #4
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 ffb2 	bl	800b188 <TIM_CCxChannelCmd>
      break;
 800a224:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b02      	cmp	r3, #2
 800a254:	d122      	bne.n	800a29c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b02      	cmp	r3, #2
 800a262:	d11b      	bne.n	800a29c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f06f 0202 	mvn.w	r2, #2
 800a26c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f7 fbf4 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a288:	e005      	b.n	800a296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fb4a 	bl	800a924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fb51 	bl	800a938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b04      	cmp	r3, #4
 800a2a8:	d122      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d11b      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f06f 0204 	mvn.w	r2, #4
 800a2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f7 fbca 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a2dc:	e005      	b.n	800a2ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fb20 	bl	800a924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fb27 	bl	800a938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0308 	and.w	r3, r3, #8
 800a2fa:	2b08      	cmp	r3, #8
 800a2fc:	d122      	bne.n	800a344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d11b      	bne.n	800a344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0208 	mvn.w	r2, #8
 800a314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2204      	movs	r2, #4
 800a31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7f7 fba0 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 faf6 	bl	800a924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fafd 	bl	800a938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f003 0310 	and.w	r3, r3, #16
 800a34e:	2b10      	cmp	r3, #16
 800a350:	d122      	bne.n	800a398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f003 0310 	and.w	r3, r3, #16
 800a35c:	2b10      	cmp	r3, #16
 800a35e:	d11b      	bne.n	800a398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0210 	mvn.w	r2, #16
 800a368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2208      	movs	r2, #8
 800a36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f7 fb76 	bl	8001a70 <HAL_TIM_IC_CaptureCallback>
 800a384:	e005      	b.n	800a392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 facc 	bl	800a924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fad3 	bl	800a938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d10e      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d107      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0201 	mvn.w	r2, #1
 800a3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7fc f9dc 	bl	800677c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ce:	2b80      	cmp	r3, #128	; 0x80
 800a3d0:	d10e      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3dc:	2b80      	cmp	r3, #128	; 0x80
 800a3de:	d107      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 ffca 	bl	800b384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fa:	2b40      	cmp	r3, #64	; 0x40
 800a3fc:	d10e      	bne.n	800a41c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a408:	2b40      	cmp	r3, #64	; 0x40
 800a40a:	d107      	bne.n	800a41c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fa98 	bl	800a94c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	2b20      	cmp	r3, #32
 800a428:	d10e      	bne.n	800a448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b20      	cmp	r3, #32
 800a436:	d107      	bne.n	800a448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0220 	mvn.w	r2, #32
 800a440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 ff94 	bl	800b370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a466:	2b01      	cmp	r3, #1
 800a468:	d101      	bne.n	800a46e <HAL_TIM_IC_ConfigChannel+0x1e>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e088      	b.n	800a580 <HAL_TIM_IC_ConfigChannel+0x130>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d11b      	bne.n	800a4b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f000 fcb8 	bl	800ae00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	699a      	ldr	r2, [r3, #24]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 020c 	bic.w	r2, r2, #12
 800a49e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6999      	ldr	r1, [r3, #24]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	619a      	str	r2, [r3, #24]
 800a4b2:	e060      	b.n	800a576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d11c      	bne.n	800a4f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6818      	ldr	r0, [r3, #0]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	6819      	ldr	r1, [r3, #0]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f000 fd3c 	bl	800af46 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	699a      	ldr	r2, [r3, #24]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a4dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6999      	ldr	r1, [r3, #24]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	021a      	lsls	r2, r3, #8
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	619a      	str	r2, [r3, #24]
 800a4f2:	e040      	b.n	800a576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b08      	cmp	r3, #8
 800a4f8:	d11b      	bne.n	800a532 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	6819      	ldr	r1, [r3, #0]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f000 fd89 	bl	800b020 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	69da      	ldr	r2, [r3, #28]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 020c 	bic.w	r2, r2, #12
 800a51c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69d9      	ldr	r1, [r3, #28]
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	61da      	str	r2, [r3, #28]
 800a530:	e021      	b.n	800a576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b0c      	cmp	r3, #12
 800a536:	d11c      	bne.n	800a572 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f000 fda6 	bl	800b098 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69da      	ldr	r2, [r3, #28]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a55a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	69d9      	ldr	r1, [r3, #28]
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	021a      	lsls	r2, r3, #8
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	61da      	str	r2, [r3, #28]
 800a570:	e001      	b.n	800a576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d101      	bne.n	800a5a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e0ae      	b.n	800a704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b0c      	cmp	r3, #12
 800a5b2:	f200 809f 	bhi.w	800a6f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5b6:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a6f5 	.word	0x0800a6f5
 800a5c4:	0800a6f5 	.word	0x0800a6f5
 800a5c8:	0800a6f5 	.word	0x0800a6f5
 800a5cc:	0800a631 	.word	0x0800a631
 800a5d0:	0800a6f5 	.word	0x0800a6f5
 800a5d4:	0800a6f5 	.word	0x0800a6f5
 800a5d8:	0800a6f5 	.word	0x0800a6f5
 800a5dc:	0800a673 	.word	0x0800a673
 800a5e0:	0800a6f5 	.word	0x0800a6f5
 800a5e4:	0800a6f5 	.word	0x0800a6f5
 800a5e8:	0800a6f5 	.word	0x0800a6f5
 800a5ec:	0800a6b3 	.word	0x0800a6b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fa52 	bl	800aaa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0208 	orr.w	r2, r2, #8
 800a60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f022 0204 	bic.w	r2, r2, #4
 800a61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6999      	ldr	r1, [r3, #24]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	691a      	ldr	r2, [r3, #16]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	619a      	str	r2, [r3, #24]
      break;
 800a62e:	e064      	b.n	800a6fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	4618      	mov	r0, r3
 800a638:	f000 faa2 	bl	800ab80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	699a      	ldr	r2, [r3, #24]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a64a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699a      	ldr	r2, [r3, #24]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a65a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6999      	ldr	r1, [r3, #24]
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	021a      	lsls	r2, r3, #8
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	619a      	str	r2, [r3, #24]
      break;
 800a670:	e043      	b.n	800a6fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68b9      	ldr	r1, [r7, #8]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 faf7 	bl	800ac6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69da      	ldr	r2, [r3, #28]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0208 	orr.w	r2, r2, #8
 800a68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f022 0204 	bic.w	r2, r2, #4
 800a69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69d9      	ldr	r1, [r3, #28]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	691a      	ldr	r2, [r3, #16]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	61da      	str	r2, [r3, #28]
      break;
 800a6b0:	e023      	b.n	800a6fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fb4b 	bl	800ad54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69da      	ldr	r2, [r3, #28]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69da      	ldr	r2, [r3, #28]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69d9      	ldr	r1, [r3, #28]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	021a      	lsls	r2, r3, #8
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	61da      	str	r2, [r3, #28]
      break;
 800a6f2:	e002      	b.n	800a6fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_TIM_ConfigClockSource+0x1c>
 800a724:	2302      	movs	r3, #2
 800a726:	e0b4      	b.n	800a892 <HAL_TIM_ConfigClockSource+0x186>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a74e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a760:	d03e      	beq.n	800a7e0 <HAL_TIM_ConfigClockSource+0xd4>
 800a762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a766:	f200 8087 	bhi.w	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	f000 8086 	beq.w	800a87e <HAL_TIM_ConfigClockSource+0x172>
 800a772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a776:	d87f      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a778:	2b70      	cmp	r3, #112	; 0x70
 800a77a:	d01a      	beq.n	800a7b2 <HAL_TIM_ConfigClockSource+0xa6>
 800a77c:	2b70      	cmp	r3, #112	; 0x70
 800a77e:	d87b      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a780:	2b60      	cmp	r3, #96	; 0x60
 800a782:	d050      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0x11a>
 800a784:	2b60      	cmp	r3, #96	; 0x60
 800a786:	d877      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a788:	2b50      	cmp	r3, #80	; 0x50
 800a78a:	d03c      	beq.n	800a806 <HAL_TIM_ConfigClockSource+0xfa>
 800a78c:	2b50      	cmp	r3, #80	; 0x50
 800a78e:	d873      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a790:	2b40      	cmp	r3, #64	; 0x40
 800a792:	d058      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x13a>
 800a794:	2b40      	cmp	r3, #64	; 0x40
 800a796:	d86f      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a798:	2b30      	cmp	r3, #48	; 0x30
 800a79a:	d064      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x15a>
 800a79c:	2b30      	cmp	r3, #48	; 0x30
 800a79e:	d86b      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a0:	2b20      	cmp	r3, #32
 800a7a2:	d060      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x15a>
 800a7a4:	2b20      	cmp	r3, #32
 800a7a6:	d867      	bhi.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d05c      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x15a>
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d05a      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x15a>
 800a7b0:	e062      	b.n	800a878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6899      	ldr	r1, [r3, #8]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	685a      	ldr	r2, [r3, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f000 fcc1 	bl	800b148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	609a      	str	r2, [r3, #8]
      break;
 800a7de:	e04f      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	6899      	ldr	r1, [r3, #8]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f000 fcaa 	bl	800b148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a802:	609a      	str	r2, [r3, #8]
      break;
 800a804:	e03c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6859      	ldr	r1, [r3, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	461a      	mov	r2, r3
 800a814:	f000 fb68 	bl	800aee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2150      	movs	r1, #80	; 0x50
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fc77 	bl	800b112 <TIM_ITRx_SetConfig>
      break;
 800a824:	e02c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6818      	ldr	r0, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	6859      	ldr	r1, [r3, #4]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	461a      	mov	r2, r3
 800a834:	f000 fbc4 	bl	800afc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2160      	movs	r1, #96	; 0x60
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fc67 	bl	800b112 <TIM_ITRx_SetConfig>
      break;
 800a844:	e01c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	6859      	ldr	r1, [r3, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	461a      	mov	r2, r3
 800a854:	f000 fb48 	bl	800aee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2140      	movs	r1, #64	; 0x40
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fc57 	bl	800b112 <TIM_ITRx_SetConfig>
      break;
 800a864:	e00c      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4619      	mov	r1, r3
 800a870:	4610      	mov	r0, r2
 800a872:	f000 fc4e 	bl	800b112 <TIM_ITRx_SetConfig>
      break;
 800a876:	e003      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	73fb      	strb	r3, [r7, #15]
      break;
 800a87c:	e000      	b.n	800a880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a87e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a890:	7bfb      	ldrb	r3, [r7, #15]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2b0c      	cmp	r3, #12
 800a8ae:	d831      	bhi.n	800a914 <HAL_TIM_ReadCapturedValue+0x78>
 800a8b0:	a201      	add	r2, pc, #4	; (adr r2, 800a8b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b6:	bf00      	nop
 800a8b8:	0800a8ed 	.word	0x0800a8ed
 800a8bc:	0800a915 	.word	0x0800a915
 800a8c0:	0800a915 	.word	0x0800a915
 800a8c4:	0800a915 	.word	0x0800a915
 800a8c8:	0800a8f7 	.word	0x0800a8f7
 800a8cc:	0800a915 	.word	0x0800a915
 800a8d0:	0800a915 	.word	0x0800a915
 800a8d4:	0800a915 	.word	0x0800a915
 800a8d8:	0800a901 	.word	0x0800a901
 800a8dc:	0800a915 	.word	0x0800a915
 800a8e0:	0800a915 	.word	0x0800a915
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a90b 	.word	0x0800a90b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f2:	60fb      	str	r3, [r7, #12]

      break;
 800a8f4:	e00f      	b.n	800a916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fc:	60fb      	str	r3, [r7, #12]

      break;
 800a8fe:	e00a      	b.n	800a916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	60fb      	str	r3, [r7, #12]

      break;
 800a908:	e005      	b.n	800a916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a910:	60fb      	str	r3, [r7, #12]

      break;
 800a912:	e000      	b.n	800a916 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a914:	bf00      	nop
  }

  return tmpreg;
 800a916:	68fb      	ldr	r3, [r7, #12]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a40      	ldr	r2, [pc, #256]	; (800aa74 <TIM_Base_SetConfig+0x114>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d013      	beq.n	800a9a0 <TIM_Base_SetConfig+0x40>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97e:	d00f      	beq.n	800a9a0 <TIM_Base_SetConfig+0x40>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a3d      	ldr	r2, [pc, #244]	; (800aa78 <TIM_Base_SetConfig+0x118>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d00b      	beq.n	800a9a0 <TIM_Base_SetConfig+0x40>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a3c      	ldr	r2, [pc, #240]	; (800aa7c <TIM_Base_SetConfig+0x11c>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d007      	beq.n	800a9a0 <TIM_Base_SetConfig+0x40>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a3b      	ldr	r2, [pc, #236]	; (800aa80 <TIM_Base_SetConfig+0x120>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d003      	beq.n	800a9a0 <TIM_Base_SetConfig+0x40>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a3a      	ldr	r2, [pc, #232]	; (800aa84 <TIM_Base_SetConfig+0x124>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d108      	bne.n	800a9b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a2f      	ldr	r2, [pc, #188]	; (800aa74 <TIM_Base_SetConfig+0x114>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d02b      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c0:	d027      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a2c      	ldr	r2, [pc, #176]	; (800aa78 <TIM_Base_SetConfig+0x118>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d023      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a2b      	ldr	r2, [pc, #172]	; (800aa7c <TIM_Base_SetConfig+0x11c>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d01f      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a2a      	ldr	r2, [pc, #168]	; (800aa80 <TIM_Base_SetConfig+0x120>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d01b      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a29      	ldr	r2, [pc, #164]	; (800aa84 <TIM_Base_SetConfig+0x124>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d017      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a28      	ldr	r2, [pc, #160]	; (800aa88 <TIM_Base_SetConfig+0x128>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d013      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a27      	ldr	r2, [pc, #156]	; (800aa8c <TIM_Base_SetConfig+0x12c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00f      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a26      	ldr	r2, [pc, #152]	; (800aa90 <TIM_Base_SetConfig+0x130>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a25      	ldr	r2, [pc, #148]	; (800aa94 <TIM_Base_SetConfig+0x134>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d007      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a24      	ldr	r2, [pc, #144]	; (800aa98 <TIM_Base_SetConfig+0x138>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_Base_SetConfig+0xb2>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a23      	ldr	r2, [pc, #140]	; (800aa9c <TIM_Base_SetConfig+0x13c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d108      	bne.n	800aa24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	689a      	ldr	r2, [r3, #8]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a0a      	ldr	r2, [pc, #40]	; (800aa74 <TIM_Base_SetConfig+0x114>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_Base_SetConfig+0xf8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a0c      	ldr	r2, [pc, #48]	; (800aa84 <TIM_Base_SetConfig+0x124>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d103      	bne.n	800aa60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	615a      	str	r2, [r3, #20]
}
 800aa66:	bf00      	nop
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40010000 	.word	0x40010000
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40010400 	.word	0x40010400
 800aa88:	40014000 	.word	0x40014000
 800aa8c:	40014400 	.word	0x40014400
 800aa90:	40014800 	.word	0x40014800
 800aa94:	40001800 	.word	0x40001800
 800aa98:	40001c00 	.word	0x40001c00
 800aa9c:	40002000 	.word	0x40002000

0800aaa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	f023 0201 	bic.w	r2, r3, #1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	699b      	ldr	r3, [r3, #24]
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	68fa      	ldr	r2, [r7, #12]
 800aade:	4313      	orrs	r3, r2
 800aae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f023 0302 	bic.w	r3, r3, #2
 800aae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a20      	ldr	r2, [pc, #128]	; (800ab78 <TIM_OC1_SetConfig+0xd8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d003      	beq.n	800ab04 <TIM_OC1_SetConfig+0x64>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a1f      	ldr	r2, [pc, #124]	; (800ab7c <TIM_OC1_SetConfig+0xdc>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d10c      	bne.n	800ab1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f023 0308 	bic.w	r3, r3, #8
 800ab0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f023 0304 	bic.w	r3, r3, #4
 800ab1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <TIM_OC1_SetConfig+0xd8>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d003      	beq.n	800ab2e <TIM_OC1_SetConfig+0x8e>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a14      	ldr	r2, [pc, #80]	; (800ab7c <TIM_OC1_SetConfig+0xdc>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d111      	bne.n	800ab52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68fa      	ldr	r2, [r7, #12]
 800ab5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	697a      	ldr	r2, [r7, #20]
 800ab6a:	621a      	str	r2, [r3, #32]
}
 800ab6c:	bf00      	nop
 800ab6e:	371c      	adds	r7, #28
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	40010000 	.word	0x40010000
 800ab7c:	40010400 	.word	0x40010400

0800ab80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 0210 	bic.w	r2, r3, #16
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f023 0320 	bic.w	r3, r3, #32
 800abca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a22      	ldr	r2, [pc, #136]	; (800ac64 <TIM_OC2_SetConfig+0xe4>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d003      	beq.n	800abe8 <TIM_OC2_SetConfig+0x68>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a21      	ldr	r2, [pc, #132]	; (800ac68 <TIM_OC2_SetConfig+0xe8>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d10d      	bne.n	800ac04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a17      	ldr	r2, [pc, #92]	; (800ac64 <TIM_OC2_SetConfig+0xe4>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_OC2_SetConfig+0x94>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a16      	ldr	r2, [pc, #88]	; (800ac68 <TIM_OC2_SetConfig+0xe8>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d113      	bne.n	800ac3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	621a      	str	r2, [r3, #32]
}
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40010000 	.word	0x40010000
 800ac68:	40010400 	.word	0x40010400

0800ac6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b087      	sub	sp, #28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0303 	bic.w	r3, r3, #3
 800aca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	697a      	ldr	r2, [r7, #20]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a21      	ldr	r2, [pc, #132]	; (800ad4c <TIM_OC3_SetConfig+0xe0>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d003      	beq.n	800acd2 <TIM_OC3_SetConfig+0x66>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a20      	ldr	r2, [pc, #128]	; (800ad50 <TIM_OC3_SetConfig+0xe4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d10d      	bne.n	800acee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a16      	ldr	r2, [pc, #88]	; (800ad4c <TIM_OC3_SetConfig+0xe0>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d003      	beq.n	800acfe <TIM_OC3_SetConfig+0x92>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a15      	ldr	r2, [pc, #84]	; (800ad50 <TIM_OC3_SetConfig+0xe4>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d113      	bne.n	800ad26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	011b      	lsls	r3, r3, #4
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	621a      	str	r2, [r3, #32]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	40010000 	.word	0x40010000
 800ad50:	40010400 	.word	0x40010400

0800ad54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b087      	sub	sp, #28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	031b      	lsls	r3, r3, #12
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <TIM_OC4_SetConfig+0xa4>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d003      	beq.n	800adbc <TIM_OC4_SetConfig+0x68>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a11      	ldr	r2, [pc, #68]	; (800adfc <TIM_OC4_SetConfig+0xa8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d109      	bne.n	800add0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	019b      	lsls	r3, r3, #6
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	621a      	str	r2, [r3, #32]
}
 800adea:	bf00      	nop
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40010000 	.word	0x40010000
 800adfc:	40010400 	.word	0x40010400

0800ae00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f023 0201 	bic.w	r2, r3, #1
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4a28      	ldr	r2, [pc, #160]	; (800aecc <TIM_TI1_SetConfig+0xcc>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d01b      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae34:	d017      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4a25      	ldr	r2, [pc, #148]	; (800aed0 <TIM_TI1_SetConfig+0xd0>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d013      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4a24      	ldr	r2, [pc, #144]	; (800aed4 <TIM_TI1_SetConfig+0xd4>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d00f      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4a23      	ldr	r2, [pc, #140]	; (800aed8 <TIM_TI1_SetConfig+0xd8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d00b      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	4a22      	ldr	r2, [pc, #136]	; (800aedc <TIM_TI1_SetConfig+0xdc>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d007      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4a21      	ldr	r2, [pc, #132]	; (800aee0 <TIM_TI1_SetConfig+0xe0>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d003      	beq.n	800ae66 <TIM_TI1_SetConfig+0x66>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4a20      	ldr	r2, [pc, #128]	; (800aee4 <TIM_TI1_SetConfig+0xe4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d101      	bne.n	800ae6a <TIM_TI1_SetConfig+0x6a>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <TIM_TI1_SetConfig+0x6c>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d008      	beq.n	800ae82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f023 0303 	bic.w	r3, r3, #3
 800ae76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	617b      	str	r3, [r7, #20]
 800ae80:	e003      	b.n	800ae8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f043 0301 	orr.w	r3, r3, #1
 800ae88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	011b      	lsls	r3, r3, #4
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f023 030a 	bic.w	r3, r3, #10
 800aea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f003 030a 	and.w	r3, r3, #10
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	621a      	str	r2, [r3, #32]
}
 800aebe:	bf00      	nop
 800aec0:	371c      	adds	r7, #28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	40010000 	.word	0x40010000
 800aed0:	40000400 	.word	0x40000400
 800aed4:	40000800 	.word	0x40000800
 800aed8:	40000c00 	.word	0x40000c00
 800aedc:	40010400 	.word	0x40010400
 800aee0:	40014000 	.word	0x40014000
 800aee4:	40001800 	.word	0x40001800

0800aee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f023 030a 	bic.w	r3, r3, #10
 800af24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	621a      	str	r2, [r3, #32]
}
 800af3a:	bf00      	nop
 800af3c:	371c      	adds	r7, #28
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af46:	b480      	push	{r7}
 800af48:	b087      	sub	sp, #28
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
 800af52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	f023 0210 	bic.w	r2, r3, #16
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	031b      	lsls	r3, r3, #12
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	011b      	lsls	r3, r3, #4
 800af9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	621a      	str	r2, [r3, #32]
}
 800afb4:	bf00      	nop
 800afb6:	371c      	adds	r7, #28
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b087      	sub	sp, #28
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a1b      	ldr	r3, [r3, #32]
 800afd0:	f023 0210 	bic.w	r2, r3, #16
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	031b      	lsls	r3, r3, #12
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800affc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	011b      	lsls	r3, r3, #4
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	4313      	orrs	r3, r2
 800b006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	621a      	str	r2, [r3, #32]
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f023 0303 	bic.w	r3, r3, #3
 800b04c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4313      	orrs	r3, r2
 800b054:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b05c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	b2db      	uxtb	r3, r3
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	4313      	orrs	r3, r2
 800b068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b070:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	621a      	str	r2, [r3, #32]
}
 800b08c:	bf00      	nop
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	031b      	lsls	r3, r3, #12
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b0ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	031b      	lsls	r3, r3, #12
 800b0f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	621a      	str	r2, [r3, #32]
}
 800b106:	bf00      	nop
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b112:	b480      	push	{r7}
 800b114:	b085      	sub	sp, #20
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4313      	orrs	r3, r2
 800b130:	f043 0307 	orr.w	r3, r3, #7
 800b134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	609a      	str	r2, [r3, #8]
}
 800b13c:	bf00      	nop
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	021a      	lsls	r2, r3, #8
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	431a      	orrs	r2, r3
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	4313      	orrs	r3, r2
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	4313      	orrs	r3, r2
 800b174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	609a      	str	r2, [r3, #8]
}
 800b17c:	bf00      	nop
 800b17e:	371c      	adds	r7, #28
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b188:	b480      	push	{r7}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f003 031f 	and.w	r3, r3, #31
 800b19a:	2201      	movs	r2, #1
 800b19c:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6a1a      	ldr	r2, [r3, #32]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	43db      	mvns	r3, r3
 800b1aa:	401a      	ands	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6a1a      	ldr	r2, [r3, #32]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	f003 031f 	and.w	r3, r3, #31
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e05a      	b.n	800b2a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a21      	ldr	r2, [pc, #132]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d022      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b238:	d01d      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a1d      	ldr	r2, [pc, #116]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d018      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a1b      	ldr	r2, [pc, #108]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d013      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a1a      	ldr	r2, [pc, #104]	; (800b2bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d00e      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a18      	ldr	r2, [pc, #96]	; (800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d009      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a17      	ldr	r2, [pc, #92]	; (800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d004      	beq.n	800b276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a15      	ldr	r2, [pc, #84]	; (800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d10c      	bne.n	800b290 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b27c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	4313      	orrs	r3, r2
 800b286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40010000 	.word	0x40010000
 800b2b4:	40000400 	.word	0x40000400
 800b2b8:	40000800 	.word	0x40000800
 800b2bc:	40000c00 	.word	0x40000c00
 800b2c0:	40010400 	.word	0x40010400
 800b2c4:	40014000 	.word	0x40014000
 800b2c8:	40001800 	.word	0x40001800

0800b2cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d101      	bne.n	800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	e03d      	b.n	800b364 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	4313      	orrs	r3, r2
 800b30a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	4313      	orrs	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4313      	orrs	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	695b      	ldr	r3, [r3, #20]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3714      	adds	r7, #20
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e03f      	b.n	800b42a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fb fc36 	bl	8006c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2224      	movs	r2, #36	; 0x24
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fddf 	bl	800bfa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691a      	ldr	r2, [r3, #16]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	695a      	ldr	r2, [r3, #20]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68da      	ldr	r2, [r3, #12]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2220      	movs	r2, #32
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2220      	movs	r2, #32
 800b424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b08a      	sub	sp, #40	; 0x28
 800b436:	af02      	add	r7, sp, #8
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	603b      	str	r3, [r7, #0]
 800b43e:	4613      	mov	r3, r2
 800b440:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b20      	cmp	r3, #32
 800b450:	d17c      	bne.n	800b54c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <HAL_UART_Transmit+0x2c>
 800b458:	88fb      	ldrh	r3, [r7, #6]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e075      	b.n	800b54e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d101      	bne.n	800b470 <HAL_UART_Transmit+0x3e>
 800b46c:	2302      	movs	r3, #2
 800b46e:	e06e      	b.n	800b54e <HAL_UART_Transmit+0x11c>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2221      	movs	r2, #33	; 0x21
 800b482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b486:	f7fb fd61 	bl	8006f4c <HAL_GetTick>
 800b48a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	88fa      	ldrh	r2, [r7, #6]
 800b490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	88fa      	ldrh	r2, [r7, #6]
 800b496:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a0:	d108      	bne.n	800b4b4 <HAL_UART_Transmit+0x82>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d104      	bne.n	800b4b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	61bb      	str	r3, [r7, #24]
 800b4b2:	e003      	b.n	800b4bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b4c4:	e02a      	b.n	800b51c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2180      	movs	r1, #128	; 0x80
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 fb1f 	bl	800bb14 <UART_WaitOnFlagUntilTimeout>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e036      	b.n	800b54e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	61bb      	str	r3, [r7, #24]
 800b4fc:	e007      	b.n	800b50e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	781a      	ldrb	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	3301      	adds	r3, #1
 800b50c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b520:	b29b      	uxth	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1cf      	bne.n	800b4c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2200      	movs	r2, #0
 800b52e:	2140      	movs	r1, #64	; 0x40
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 faef 	bl	800bb14 <UART_WaitOnFlagUntilTimeout>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e006      	b.n	800b54e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2220      	movs	r2, #32
 800b544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	e000      	b.n	800b54e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b54c:	2302      	movs	r3, #2
  }
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	4613      	mov	r3, r2
 800b562:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	d11d      	bne.n	800b5ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <HAL_UART_Receive_IT+0x26>
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e016      	b.n	800b5ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b586:	2b01      	cmp	r3, #1
 800b588:	d101      	bne.n	800b58e <HAL_UART_Receive_IT+0x38>
 800b58a:	2302      	movs	r3, #2
 800b58c:	e00f      	b.n	800b5ae <HAL_UART_Receive_IT+0x58>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2201      	movs	r2, #1
 800b592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f000 fb24 	bl	800bbf0 <UART_Start_Receive_IT>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	e000      	b.n	800b5ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b5ac:	2302      	movs	r3, #2
  }
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b0ba      	sub	sp, #232	; 0xe8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	695b      	ldr	r3, [r3, #20]
 800b5da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ee:	f003 030f 	and.w	r3, r3, #15
 800b5f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b5f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10f      	bne.n	800b61e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b602:	f003 0320 	and.w	r3, r3, #32
 800b606:	2b00      	cmp	r3, #0
 800b608:	d009      	beq.n	800b61e <HAL_UART_IRQHandler+0x66>
 800b60a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b60e:	f003 0320 	and.w	r3, r3, #32
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fc07 	bl	800be2a <UART_Receive_IT>
      return;
 800b61c:	e256      	b.n	800bacc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b61e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b622:	2b00      	cmp	r3, #0
 800b624:	f000 80de 	beq.w	800b7e4 <HAL_UART_IRQHandler+0x22c>
 800b628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d106      	bne.n	800b642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b638:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f000 80d1 	beq.w	800b7e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <HAL_UART_IRQHandler+0xae>
 800b64e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b656:	2b00      	cmp	r3, #0
 800b658:	d005      	beq.n	800b666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65e:	f043 0201 	orr.w	r2, r3, #1
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66a:	f003 0304 	and.w	r3, r3, #4
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <HAL_UART_IRQHandler+0xd2>
 800b672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b682:	f043 0202 	orr.w	r2, r3, #2
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b68a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00b      	beq.n	800b6ae <HAL_UART_IRQHandler+0xf6>
 800b696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d005      	beq.n	800b6ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	f043 0204 	orr.w	r2, r3, #4
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b2:	f003 0308 	and.w	r3, r3, #8
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d011      	beq.n	800b6de <HAL_UART_IRQHandler+0x126>
 800b6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6be:	f003 0320 	and.w	r3, r3, #32
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b6c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d005      	beq.n	800b6de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d6:	f043 0208 	orr.w	r2, r3, #8
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 81ed 	beq.w	800bac2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ec:	f003 0320 	and.w	r3, r3, #32
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d008      	beq.n	800b706 <HAL_UART_IRQHandler+0x14e>
 800b6f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6f8:	f003 0320 	and.w	r3, r3, #32
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fb92 	bl	800be2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b710:	2b40      	cmp	r3, #64	; 0x40
 800b712:	bf0c      	ite	eq
 800b714:	2301      	moveq	r3, #1
 800b716:	2300      	movne	r3, #0
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b722:	f003 0308 	and.w	r3, r3, #8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d103      	bne.n	800b732 <HAL_UART_IRQHandler+0x17a>
 800b72a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d04f      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fa9a 	bl	800bc6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b742:	2b40      	cmp	r3, #64	; 0x40
 800b744:	d141      	bne.n	800b7ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3314      	adds	r3, #20
 800b74c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b75c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3314      	adds	r3, #20
 800b76e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b77e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b782:	e841 2300 	strex	r3, r2, [r1]
 800b786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b78a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1d9      	bne.n	800b746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	2b00      	cmp	r3, #0
 800b798:	d013      	beq.n	800b7c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79e:	4a7d      	ldr	r2, [pc, #500]	; (800b994 <HAL_UART_IRQHandler+0x3dc>)
 800b7a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fc f952 	bl	8007a50 <HAL_DMA_Abort_IT>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d016      	beq.n	800b7e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c0:	e00e      	b.n	800b7e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f990 	bl	800bae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7c8:	e00a      	b.n	800b7e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f98c 	bl	800bae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d0:	e006      	b.n	800b7e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f988 	bl	800bae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b7de:	e170      	b.n	800bac2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7e0:	bf00      	nop
    return;
 800b7e2:	e16e      	b.n	800bac2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	f040 814a 	bne.w	800ba82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f2:	f003 0310 	and.w	r3, r3, #16
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	f000 8143 	beq.w	800ba82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b7fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b800:	f003 0310 	and.w	r3, r3, #16
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 813c 	beq.w	800ba82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b80a:	2300      	movs	r3, #0
 800b80c:	60bb      	str	r3, [r7, #8]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60bb      	str	r3, [r7, #8]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	60bb      	str	r3, [r7, #8]
 800b81e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82a:	2b40      	cmp	r3, #64	; 0x40
 800b82c:	f040 80b4 	bne.w	800b998 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b83c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 8140 	beq.w	800bac6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b84a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b84e:	429a      	cmp	r2, r3
 800b850:	f080 8139 	bcs.w	800bac6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b85a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b866:	f000 8088 	beq.w	800b97a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	330c      	adds	r3, #12
 800b870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	330c      	adds	r3, #12
 800b892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b89a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b8a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b8a6:	e841 2300 	strex	r3, r2, [r1]
 800b8aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b8ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1d9      	bne.n	800b86a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3314      	adds	r3, #20
 800b8bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8c8:	f023 0301 	bic.w	r3, r3, #1
 800b8cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3314      	adds	r3, #20
 800b8d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b8da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b8de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8e6:	e841 2300 	strex	r3, r2, [r1]
 800b8ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1e1      	bne.n	800b8b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3314      	adds	r3, #20
 800b8f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3314      	adds	r3, #20
 800b912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b916:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b91c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b91e:	e841 2300 	strex	r3, r2, [r1]
 800b922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1e3      	bne.n	800b8f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2220      	movs	r2, #32
 800b92e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	330c      	adds	r3, #12
 800b93e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b942:	e853 3f00 	ldrex	r3, [r3]
 800b946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b94a:	f023 0310 	bic.w	r3, r3, #16
 800b94e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	330c      	adds	r3, #12
 800b958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b95c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b95e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e3      	bne.n	800b938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b974:	4618      	mov	r0, r3
 800b976:	f7fb fffb 	bl	8007970 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b982:	b29b      	uxth	r3, r3
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	b29b      	uxth	r3, r3
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f8b6 	bl	800bafc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b990:	e099      	b.n	800bac6 <HAL_UART_IRQHandler+0x50e>
 800b992:	bf00      	nop
 800b994:	0800bd33 	.word	0x0800bd33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 808b 	beq.w	800baca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b9b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 8086 	beq.w	800baca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	330c      	adds	r3, #12
 800b9c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	330c      	adds	r3, #12
 800b9de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b9e2:	647a      	str	r2, [r7, #68]	; 0x44
 800b9e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e3      	bne.n	800b9be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	e853 3f00 	ldrex	r3, [r3]
 800ba04:	623b      	str	r3, [r7, #32]
   return(result);
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	f023 0301 	bic.w	r3, r3, #1
 800ba0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3314      	adds	r3, #20
 800ba16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba1a:	633a      	str	r2, [r7, #48]	; 0x30
 800ba1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba22:	e841 2300 	strex	r3, r2, [r1]
 800ba26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1e3      	bne.n	800b9f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2220      	movs	r2, #32
 800ba32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	330c      	adds	r3, #12
 800ba42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	e853 3f00 	ldrex	r3, [r3]
 800ba4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0310 	bic.w	r3, r3, #16
 800ba52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	330c      	adds	r3, #12
 800ba5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba60:	61fa      	str	r2, [r7, #28]
 800ba62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	69b9      	ldr	r1, [r7, #24]
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e3      	bne.n	800ba3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f83e 	bl	800bafc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba80:	e023      	b.n	800baca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <HAL_UART_IRQHandler+0x4ea>
 800ba8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f95d 	bl	800bd5a <UART_Transmit_IT>
    return;
 800baa0:	e014      	b.n	800bacc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800baa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00e      	beq.n	800bacc <HAL_UART_IRQHandler+0x514>
 800baae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d008      	beq.n	800bacc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f99d 	bl	800bdfa <UART_EndTransmit_IT>
    return;
 800bac0:	e004      	b.n	800bacc <HAL_UART_IRQHandler+0x514>
    return;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <HAL_UART_IRQHandler+0x514>
      return;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <HAL_UART_IRQHandler+0x514>
      return;
 800baca:	bf00      	nop
  }
}
 800bacc:	37e8      	adds	r7, #232	; 0xe8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop

0800bad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b090      	sub	sp, #64	; 0x40
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	4613      	mov	r3, r2
 800bb22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb24:	e050      	b.n	800bbc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb2c:	d04c      	beq.n	800bbc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bb2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d007      	beq.n	800bb44 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb34:	f7fb fa0a 	bl	8006f4c <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d241      	bcs.n	800bbc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	330c      	adds	r3, #12
 800bb4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	330c      	adds	r3, #12
 800bb62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb64:	637a      	str	r2, [r7, #52]	; 0x34
 800bb66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e5      	bne.n	800bb44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3314      	adds	r3, #20
 800bb7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	613b      	str	r3, [r7, #16]
   return(result);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f023 0301 	bic.w	r3, r3, #1
 800bb8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	3314      	adds	r3, #20
 800bb96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb98:	623a      	str	r2, [r7, #32]
 800bb9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	69f9      	ldr	r1, [r7, #28]
 800bb9e:	6a3a      	ldr	r2, [r7, #32]
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e5      	bne.n	800bb78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	e00f      	b.n	800bbe8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	bf0c      	ite	eq
 800bbd8:	2301      	moveq	r3, #1
 800bbda:	2300      	movne	r3, #0
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	461a      	mov	r2, r3
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d09f      	beq.n	800bb26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3740      	adds	r7, #64	; 0x40
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	88fa      	ldrh	r2, [r7, #6]
 800bc0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2222      	movs	r2, #34	; 0x22
 800bc1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	695a      	ldr	r2, [r3, #20]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f042 0201 	orr.w	r2, r2, #1
 800bc4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f042 0220 	orr.w	r2, r2, #32
 800bc5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b095      	sub	sp, #84	; 0x54
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	330c      	adds	r3, #12
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc94:	643a      	str	r2, [r7, #64]	; 0x40
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc9c:	e841 2300 	strex	r3, r2, [r1]
 800bca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1e5      	bne.n	800bc74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3314      	adds	r3, #20
 800bcae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	f023 0301 	bic.w	r3, r3, #1
 800bcbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e5      	bne.n	800bca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d119      	bne.n	800bd18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	330c      	adds	r3, #12
 800bcea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	e853 3f00 	ldrex	r3, [r3]
 800bcf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	f023 0310 	bic.w	r3, r3, #16
 800bcfa:	647b      	str	r3, [r7, #68]	; 0x44
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	330c      	adds	r3, #12
 800bd02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd04:	61ba      	str	r2, [r7, #24]
 800bd06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd08:	6979      	ldr	r1, [r7, #20]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	e841 2300 	strex	r3, r2, [r1]
 800bd10:	613b      	str	r3, [r7, #16]
   return(result);
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1e5      	bne.n	800bce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd26:	bf00      	nop
 800bd28:	3754      	adds	r7, #84	; 0x54
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7ff fecb 	bl	800bae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b21      	cmp	r3, #33	; 0x21
 800bd6c:	d13e      	bne.n	800bdec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd76:	d114      	bne.n	800bda2 <UART_Transmit_IT+0x48>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d110      	bne.n	800bda2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	881b      	ldrh	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	1c9a      	adds	r2, r3, #2
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	621a      	str	r2, [r3, #32]
 800bda0:	e008      	b.n	800bdb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a1b      	ldr	r3, [r3, #32]
 800bda6:	1c59      	adds	r1, r3, #1
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	6211      	str	r1, [r2, #32]
 800bdac:	781a      	ldrb	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10f      	bne.n	800bde8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68da      	ldr	r2, [r3, #12]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bdd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bde6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bde8:	2300      	movs	r3, #0
 800bdea:	e000      	b.n	800bdee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bdec:	2302      	movs	r3, #2
  }
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68da      	ldr	r2, [r3, #12]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2220      	movs	r2, #32
 800be16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7ff fe5a 	bl	800bad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b08c      	sub	sp, #48	; 0x30
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b22      	cmp	r3, #34	; 0x22
 800be3c:	f040 80ab 	bne.w	800bf96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be48:	d117      	bne.n	800be7a <UART_Receive_IT+0x50>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d113      	bne.n	800be7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	b29b      	uxth	r3, r3
 800be64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be68:	b29a      	uxth	r2, r3
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	1c9a      	adds	r2, r3, #2
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	629a      	str	r2, [r3, #40]	; 0x28
 800be78:	e026      	b.n	800bec8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800be80:	2300      	movs	r3, #0
 800be82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be8c:	d007      	beq.n	800be9e <UART_Receive_IT+0x74>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <UART_Receive_IT+0x82>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d106      	bne.n	800beac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	e008      	b.n	800bebe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800becc:	b29b      	uxth	r3, r3
 800bece:	3b01      	subs	r3, #1
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	4619      	mov	r1, r3
 800bed6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d15a      	bne.n	800bf92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68da      	ldr	r2, [r3, #12]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f022 0220 	bic.w	r2, r2, #32
 800beea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68da      	ldr	r2, [r3, #12]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800befa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	695a      	ldr	r2, [r3, #20]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f022 0201 	bic.w	r2, r2, #1
 800bf0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d135      	bne.n	800bf88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	330c      	adds	r3, #12
 800bf28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	e853 3f00 	ldrex	r3, [r3]
 800bf30:	613b      	str	r3, [r7, #16]
   return(result);
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f023 0310 	bic.w	r3, r3, #16
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	330c      	adds	r3, #12
 800bf40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf42:	623a      	str	r2, [r7, #32]
 800bf44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf46:	69f9      	ldr	r1, [r7, #28]
 800bf48:	6a3a      	ldr	r2, [r7, #32]
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e5      	bne.n	800bf22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f003 0310 	and.w	r3, r3, #16
 800bf60:	2b10      	cmp	r3, #16
 800bf62:	d10a      	bne.n	800bf7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf7e:	4619      	mov	r1, r3
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff fdbb 	bl	800bafc <HAL_UARTEx_RxEventCallback>
 800bf86:	e002      	b.n	800bf8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7f5 fe1b 	bl	8001bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e002      	b.n	800bf98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	e000      	b.n	800bf98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bf96:	2302      	movs	r3, #2
  }
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3730      	adds	r7, #48	; 0x30
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfa4:	b0c0      	sub	sp, #256	; 0x100
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bfb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfbc:	68d9      	ldr	r1, [r3, #12]
 800bfbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	ea40 0301 	orr.w	r3, r0, r1
 800bfc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bfca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	431a      	orrs	r2, r3
 800bfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bff8:	f021 010c 	bic.w	r1, r1, #12
 800bffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c006:	430b      	orrs	r3, r1
 800c008:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c01a:	6999      	ldr	r1, [r3, #24]
 800c01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	ea40 0301 	orr.w	r3, r0, r1
 800c026:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	4b8f      	ldr	r3, [pc, #572]	; (800c26c <UART_SetConfig+0x2cc>)
 800c030:	429a      	cmp	r2, r3
 800c032:	d005      	beq.n	800c040 <UART_SetConfig+0xa0>
 800c034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	4b8d      	ldr	r3, [pc, #564]	; (800c270 <UART_SetConfig+0x2d0>)
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d104      	bne.n	800c04a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c040:	f7fd fb0a 	bl	8009658 <HAL_RCC_GetPCLK2Freq>
 800c044:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c048:	e003      	b.n	800c052 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c04a:	f7fd faf1 	bl	8009630 <HAL_RCC_GetPCLK1Freq>
 800c04e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c05c:	f040 810c 	bne.w	800c278 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c064:	2200      	movs	r2, #0
 800c066:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c06a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c06e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c072:	4622      	mov	r2, r4
 800c074:	462b      	mov	r3, r5
 800c076:	1891      	adds	r1, r2, r2
 800c078:	65b9      	str	r1, [r7, #88]	; 0x58
 800c07a:	415b      	adcs	r3, r3
 800c07c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c07e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c082:	4621      	mov	r1, r4
 800c084:	eb12 0801 	adds.w	r8, r2, r1
 800c088:	4629      	mov	r1, r5
 800c08a:	eb43 0901 	adc.w	r9, r3, r1
 800c08e:	f04f 0200 	mov.w	r2, #0
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c09a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c09e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c0a2:	4690      	mov	r8, r2
 800c0a4:	4699      	mov	r9, r3
 800c0a6:	4623      	mov	r3, r4
 800c0a8:	eb18 0303 	adds.w	r3, r8, r3
 800c0ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0b0:	462b      	mov	r3, r5
 800c0b2:	eb49 0303 	adc.w	r3, r9, r3
 800c0b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c0c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c0ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	18db      	adds	r3, r3, r3
 800c0d2:	653b      	str	r3, [r7, #80]	; 0x50
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	eb42 0303 	adc.w	r3, r2, r3
 800c0da:	657b      	str	r3, [r7, #84]	; 0x54
 800c0dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c0e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c0e4:	f7f4 fd8a 	bl	8000bfc <__aeabi_uldivmod>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4b61      	ldr	r3, [pc, #388]	; (800c274 <UART_SetConfig+0x2d4>)
 800c0ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c0f2:	095b      	lsrs	r3, r3, #5
 800c0f4:	011c      	lsls	r4, r3, #4
 800c0f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c100:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c104:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c108:	4642      	mov	r2, r8
 800c10a:	464b      	mov	r3, r9
 800c10c:	1891      	adds	r1, r2, r2
 800c10e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c110:	415b      	adcs	r3, r3
 800c112:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c114:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c118:	4641      	mov	r1, r8
 800c11a:	eb12 0a01 	adds.w	sl, r2, r1
 800c11e:	4649      	mov	r1, r9
 800c120:	eb43 0b01 	adc.w	fp, r3, r1
 800c124:	f04f 0200 	mov.w	r2, #0
 800c128:	f04f 0300 	mov.w	r3, #0
 800c12c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c130:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c138:	4692      	mov	sl, r2
 800c13a:	469b      	mov	fp, r3
 800c13c:	4643      	mov	r3, r8
 800c13e:	eb1a 0303 	adds.w	r3, sl, r3
 800c142:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c146:	464b      	mov	r3, r9
 800c148:	eb4b 0303 	adc.w	r3, fp, r3
 800c14c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c15c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c160:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c164:	460b      	mov	r3, r1
 800c166:	18db      	adds	r3, r3, r3
 800c168:	643b      	str	r3, [r7, #64]	; 0x40
 800c16a:	4613      	mov	r3, r2
 800c16c:	eb42 0303 	adc.w	r3, r2, r3
 800c170:	647b      	str	r3, [r7, #68]	; 0x44
 800c172:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c176:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c17a:	f7f4 fd3f 	bl	8000bfc <__aeabi_uldivmod>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4611      	mov	r1, r2
 800c184:	4b3b      	ldr	r3, [pc, #236]	; (800c274 <UART_SetConfig+0x2d4>)
 800c186:	fba3 2301 	umull	r2, r3, r3, r1
 800c18a:	095b      	lsrs	r3, r3, #5
 800c18c:	2264      	movs	r2, #100	; 0x64
 800c18e:	fb02 f303 	mul.w	r3, r2, r3
 800c192:	1acb      	subs	r3, r1, r3
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c19a:	4b36      	ldr	r3, [pc, #216]	; (800c274 <UART_SetConfig+0x2d4>)
 800c19c:	fba3 2302 	umull	r2, r3, r3, r2
 800c1a0:	095b      	lsrs	r3, r3, #5
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c1a8:	441c      	add	r4, r3
 800c1aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c1b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c1bc:	4642      	mov	r2, r8
 800c1be:	464b      	mov	r3, r9
 800c1c0:	1891      	adds	r1, r2, r2
 800c1c2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c1c4:	415b      	adcs	r3, r3
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c1cc:	4641      	mov	r1, r8
 800c1ce:	1851      	adds	r1, r2, r1
 800c1d0:	6339      	str	r1, [r7, #48]	; 0x30
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	414b      	adcs	r3, r1
 800c1d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d8:	f04f 0200 	mov.w	r2, #0
 800c1dc:	f04f 0300 	mov.w	r3, #0
 800c1e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c1e4:	4659      	mov	r1, fp
 800c1e6:	00cb      	lsls	r3, r1, #3
 800c1e8:	4651      	mov	r1, sl
 800c1ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1ee:	4651      	mov	r1, sl
 800c1f0:	00ca      	lsls	r2, r1, #3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	189b      	adds	r3, r3, r2
 800c1fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c200:	464b      	mov	r3, r9
 800c202:	460a      	mov	r2, r1
 800c204:	eb42 0303 	adc.w	r3, r2, r3
 800c208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c20c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c218:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c21c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c220:	460b      	mov	r3, r1
 800c222:	18db      	adds	r3, r3, r3
 800c224:	62bb      	str	r3, [r7, #40]	; 0x28
 800c226:	4613      	mov	r3, r2
 800c228:	eb42 0303 	adc.w	r3, r2, r3
 800c22c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c22e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c232:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c236:	f7f4 fce1 	bl	8000bfc <__aeabi_uldivmod>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <UART_SetConfig+0x2d4>)
 800c240:	fba3 1302 	umull	r1, r3, r3, r2
 800c244:	095b      	lsrs	r3, r3, #5
 800c246:	2164      	movs	r1, #100	; 0x64
 800c248:	fb01 f303 	mul.w	r3, r1, r3
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	3332      	adds	r3, #50	; 0x32
 800c252:	4a08      	ldr	r2, [pc, #32]	; (800c274 <UART_SetConfig+0x2d4>)
 800c254:	fba2 2303 	umull	r2, r3, r2, r3
 800c258:	095b      	lsrs	r3, r3, #5
 800c25a:	f003 0207 	and.w	r2, r3, #7
 800c25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4422      	add	r2, r4
 800c266:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c268:	e106      	b.n	800c478 <UART_SetConfig+0x4d8>
 800c26a:	bf00      	nop
 800c26c:	40011000 	.word	0x40011000
 800c270:	40011400 	.word	0x40011400
 800c274:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c27c:	2200      	movs	r2, #0
 800c27e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c282:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c286:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c28a:	4642      	mov	r2, r8
 800c28c:	464b      	mov	r3, r9
 800c28e:	1891      	adds	r1, r2, r2
 800c290:	6239      	str	r1, [r7, #32]
 800c292:	415b      	adcs	r3, r3
 800c294:	627b      	str	r3, [r7, #36]	; 0x24
 800c296:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c29a:	4641      	mov	r1, r8
 800c29c:	1854      	adds	r4, r2, r1
 800c29e:	4649      	mov	r1, r9
 800c2a0:	eb43 0501 	adc.w	r5, r3, r1
 800c2a4:	f04f 0200 	mov.w	r2, #0
 800c2a8:	f04f 0300 	mov.w	r3, #0
 800c2ac:	00eb      	lsls	r3, r5, #3
 800c2ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2b2:	00e2      	lsls	r2, r4, #3
 800c2b4:	4614      	mov	r4, r2
 800c2b6:	461d      	mov	r5, r3
 800c2b8:	4643      	mov	r3, r8
 800c2ba:	18e3      	adds	r3, r4, r3
 800c2bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	eb45 0303 	adc.w	r3, r5, r3
 800c2c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c2ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c2da:	f04f 0200 	mov.w	r2, #0
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	008b      	lsls	r3, r1, #2
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	008a      	lsls	r2, r1, #2
 800c2f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c2f8:	f7f4 fc80 	bl	8000bfc <__aeabi_uldivmod>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4b60      	ldr	r3, [pc, #384]	; (800c484 <UART_SetConfig+0x4e4>)
 800c302:	fba3 2302 	umull	r2, r3, r3, r2
 800c306:	095b      	lsrs	r3, r3, #5
 800c308:	011c      	lsls	r4, r3, #4
 800c30a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c30e:	2200      	movs	r2, #0
 800c310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c314:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c318:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c31c:	4642      	mov	r2, r8
 800c31e:	464b      	mov	r3, r9
 800c320:	1891      	adds	r1, r2, r2
 800c322:	61b9      	str	r1, [r7, #24]
 800c324:	415b      	adcs	r3, r3
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c32c:	4641      	mov	r1, r8
 800c32e:	1851      	adds	r1, r2, r1
 800c330:	6139      	str	r1, [r7, #16]
 800c332:	4649      	mov	r1, r9
 800c334:	414b      	adcs	r3, r1
 800c336:	617b      	str	r3, [r7, #20]
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	f04f 0300 	mov.w	r3, #0
 800c340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c344:	4659      	mov	r1, fp
 800c346:	00cb      	lsls	r3, r1, #3
 800c348:	4651      	mov	r1, sl
 800c34a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c34e:	4651      	mov	r1, sl
 800c350:	00ca      	lsls	r2, r1, #3
 800c352:	4610      	mov	r0, r2
 800c354:	4619      	mov	r1, r3
 800c356:	4603      	mov	r3, r0
 800c358:	4642      	mov	r2, r8
 800c35a:	189b      	adds	r3, r3, r2
 800c35c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c360:	464b      	mov	r3, r9
 800c362:	460a      	mov	r2, r1
 800c364:	eb42 0303 	adc.w	r3, r2, r3
 800c368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	67bb      	str	r3, [r7, #120]	; 0x78
 800c376:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c378:	f04f 0200 	mov.w	r2, #0
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c384:	4649      	mov	r1, r9
 800c386:	008b      	lsls	r3, r1, #2
 800c388:	4641      	mov	r1, r8
 800c38a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c38e:	4641      	mov	r1, r8
 800c390:	008a      	lsls	r2, r1, #2
 800c392:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c396:	f7f4 fc31 	bl	8000bfc <__aeabi_uldivmod>
 800c39a:	4602      	mov	r2, r0
 800c39c:	460b      	mov	r3, r1
 800c39e:	4611      	mov	r1, r2
 800c3a0:	4b38      	ldr	r3, [pc, #224]	; (800c484 <UART_SetConfig+0x4e4>)
 800c3a2:	fba3 2301 	umull	r2, r3, r3, r1
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	2264      	movs	r2, #100	; 0x64
 800c3aa:	fb02 f303 	mul.w	r3, r2, r3
 800c3ae:	1acb      	subs	r3, r1, r3
 800c3b0:	011b      	lsls	r3, r3, #4
 800c3b2:	3332      	adds	r3, #50	; 0x32
 800c3b4:	4a33      	ldr	r2, [pc, #204]	; (800c484 <UART_SetConfig+0x4e4>)
 800c3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3c0:	441c      	add	r4, r3
 800c3c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	673b      	str	r3, [r7, #112]	; 0x70
 800c3ca:	677a      	str	r2, [r7, #116]	; 0x74
 800c3cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c3d0:	4642      	mov	r2, r8
 800c3d2:	464b      	mov	r3, r9
 800c3d4:	1891      	adds	r1, r2, r2
 800c3d6:	60b9      	str	r1, [r7, #8]
 800c3d8:	415b      	adcs	r3, r3
 800c3da:	60fb      	str	r3, [r7, #12]
 800c3dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3e0:	4641      	mov	r1, r8
 800c3e2:	1851      	adds	r1, r2, r1
 800c3e4:	6039      	str	r1, [r7, #0]
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	414b      	adcs	r3, r1
 800c3ea:	607b      	str	r3, [r7, #4]
 800c3ec:	f04f 0200 	mov.w	r2, #0
 800c3f0:	f04f 0300 	mov.w	r3, #0
 800c3f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c3f8:	4659      	mov	r1, fp
 800c3fa:	00cb      	lsls	r3, r1, #3
 800c3fc:	4651      	mov	r1, sl
 800c3fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c402:	4651      	mov	r1, sl
 800c404:	00ca      	lsls	r2, r1, #3
 800c406:	4610      	mov	r0, r2
 800c408:	4619      	mov	r1, r3
 800c40a:	4603      	mov	r3, r0
 800c40c:	4642      	mov	r2, r8
 800c40e:	189b      	adds	r3, r3, r2
 800c410:	66bb      	str	r3, [r7, #104]	; 0x68
 800c412:	464b      	mov	r3, r9
 800c414:	460a      	mov	r2, r1
 800c416:	eb42 0303 	adc.w	r3, r2, r3
 800c41a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	663b      	str	r3, [r7, #96]	; 0x60
 800c426:	667a      	str	r2, [r7, #100]	; 0x64
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c434:	4649      	mov	r1, r9
 800c436:	008b      	lsls	r3, r1, #2
 800c438:	4641      	mov	r1, r8
 800c43a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c43e:	4641      	mov	r1, r8
 800c440:	008a      	lsls	r2, r1, #2
 800c442:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c446:	f7f4 fbd9 	bl	8000bfc <__aeabi_uldivmod>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4b0d      	ldr	r3, [pc, #52]	; (800c484 <UART_SetConfig+0x4e4>)
 800c450:	fba3 1302 	umull	r1, r3, r3, r2
 800c454:	095b      	lsrs	r3, r3, #5
 800c456:	2164      	movs	r1, #100	; 0x64
 800c458:	fb01 f303 	mul.w	r3, r1, r3
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	011b      	lsls	r3, r3, #4
 800c460:	3332      	adds	r3, #50	; 0x32
 800c462:	4a08      	ldr	r2, [pc, #32]	; (800c484 <UART_SetConfig+0x4e4>)
 800c464:	fba2 2303 	umull	r2, r3, r2, r3
 800c468:	095b      	lsrs	r3, r3, #5
 800c46a:	f003 020f 	and.w	r2, r3, #15
 800c46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4422      	add	r2, r4
 800c476:	609a      	str	r2, [r3, #8]
}
 800c478:	bf00      	nop
 800c47a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c47e:	46bd      	mov	sp, r7
 800c480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c484:	51eb851f 	.word	0x51eb851f

0800c488 <__NVIC_SetPriority>:
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	6039      	str	r1, [r7, #0]
 800c492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	db0a      	blt.n	800c4b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	b2da      	uxtb	r2, r3
 800c4a0:	490c      	ldr	r1, [pc, #48]	; (800c4d4 <__NVIC_SetPriority+0x4c>)
 800c4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4a6:	0112      	lsls	r2, r2, #4
 800c4a8:	b2d2      	uxtb	r2, r2
 800c4aa:	440b      	add	r3, r1
 800c4ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c4b0:	e00a      	b.n	800c4c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	4908      	ldr	r1, [pc, #32]	; (800c4d8 <__NVIC_SetPriority+0x50>)
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	f003 030f 	and.w	r3, r3, #15
 800c4be:	3b04      	subs	r3, #4
 800c4c0:	0112      	lsls	r2, r2, #4
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	440b      	add	r3, r1
 800c4c6:	761a      	strb	r2, [r3, #24]
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	e000e100 	.word	0xe000e100
 800c4d8:	e000ed00 	.word	0xe000ed00

0800c4dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c4e0:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <SysTick_Handler+0x1c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c4e4:	f001 fcfe 	bl	800dee4 <xTaskGetSchedulerState>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d001      	beq.n	800c4f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c4ee:	f002 fae3 	bl	800eab8 <xPortSysTickHandler>
  }
}
 800c4f2:	bf00      	nop
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	e000e010 	.word	0xe000e010

0800c4fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c500:	2100      	movs	r1, #0
 800c502:	f06f 0004 	mvn.w	r0, #4
 800c506:	f7ff ffbf 	bl	800c488 <__NVIC_SetPriority>
#endif
}
 800c50a:	bf00      	nop
 800c50c:	bd80      	pop	{r7, pc}
	...

0800c510 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c516:	f3ef 8305 	mrs	r3, IPSR
 800c51a:	603b      	str	r3, [r7, #0]
  return(result);
 800c51c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c522:	f06f 0305 	mvn.w	r3, #5
 800c526:	607b      	str	r3, [r7, #4]
 800c528:	e00c      	b.n	800c544 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c52a:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <osKernelInitialize+0x44>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d105      	bne.n	800c53e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c532:	4b08      	ldr	r3, [pc, #32]	; (800c554 <osKernelInitialize+0x44>)
 800c534:	2201      	movs	r2, #1
 800c536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c538:	2300      	movs	r3, #0
 800c53a:	607b      	str	r3, [r7, #4]
 800c53c:	e002      	b.n	800c544 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c53e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c544:	687b      	ldr	r3, [r7, #4]
}
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	200005bc 	.word	0x200005bc

0800c558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c55e:	f3ef 8305 	mrs	r3, IPSR
 800c562:	603b      	str	r3, [r7, #0]
  return(result);
 800c564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c56a:	f06f 0305 	mvn.w	r3, #5
 800c56e:	607b      	str	r3, [r7, #4]
 800c570:	e010      	b.n	800c594 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c572:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <osKernelStart+0x48>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d109      	bne.n	800c58e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c57a:	f7ff ffbf 	bl	800c4fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c57e:	4b08      	ldr	r3, [pc, #32]	; (800c5a0 <osKernelStart+0x48>)
 800c580:	2202      	movs	r2, #2
 800c582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c584:	f001 f866 	bl	800d654 <vTaskStartScheduler>
      stat = osOK;
 800c588:	2300      	movs	r3, #0
 800c58a:	607b      	str	r3, [r7, #4]
 800c58c:	e002      	b.n	800c594 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c58e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c594:	687b      	ldr	r3, [r7, #4]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	200005bc 	.word	0x200005bc

0800c5a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08e      	sub	sp, #56	; 0x38
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b4:	f3ef 8305 	mrs	r3, IPSR
 800c5b8:	617b      	str	r3, [r7, #20]
  return(result);
 800c5ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d17e      	bne.n	800c6be <osThreadNew+0x11a>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d07b      	beq.n	800c6be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c5c6:	2380      	movs	r3, #128	; 0x80
 800c5c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c5ca:	2318      	movs	r3, #24
 800c5cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d045      	beq.n	800c66a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <osThreadNew+0x48>
        name = attr->name;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d002      	beq.n	800c5fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d008      	beq.n	800c612 <osThreadNew+0x6e>
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	2b38      	cmp	r3, #56	; 0x38
 800c604:	d805      	bhi.n	800c612 <osThreadNew+0x6e>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	f003 0301 	and.w	r3, r3, #1
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <osThreadNew+0x72>
        return (NULL);
 800c612:	2300      	movs	r3, #0
 800c614:	e054      	b.n	800c6c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d003      	beq.n	800c626 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	089b      	lsrs	r3, r3, #2
 800c624:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00e      	beq.n	800c64c <osThreadNew+0xa8>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2b5b      	cmp	r3, #91	; 0x5b
 800c634:	d90a      	bls.n	800c64c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d002      	beq.n	800c64c <osThreadNew+0xa8>
        mem = 1;
 800c646:	2301      	movs	r3, #1
 800c648:	61bb      	str	r3, [r7, #24]
 800c64a:	e010      	b.n	800c66e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10c      	bne.n	800c66e <osThreadNew+0xca>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d108      	bne.n	800c66e <osThreadNew+0xca>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d104      	bne.n	800c66e <osThreadNew+0xca>
          mem = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	61bb      	str	r3, [r7, #24]
 800c668:	e001      	b.n	800c66e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d110      	bne.n	800c696 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c67c:	9202      	str	r2, [sp, #8]
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	6a3a      	ldr	r2, [r7, #32]
 800c688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 fe0c 	bl	800d2a8 <xTaskCreateStatic>
 800c690:	4603      	mov	r3, r0
 800c692:	613b      	str	r3, [r7, #16]
 800c694:	e013      	b.n	800c6be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d110      	bne.n	800c6be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	f107 0310 	add.w	r3, r7, #16
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 fe57 	bl	800d362 <xTaskCreate>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d001      	beq.n	800c6be <osThreadNew+0x11a>
            hTask = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c6be:	693b      	ldr	r3, [r7, #16]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3728      	adds	r7, #40	; 0x28
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6d0:	f3ef 8305 	mrs	r3, IPSR
 800c6d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d003      	beq.n	800c6e4 <osDelay+0x1c>
    stat = osErrorISR;
 800c6dc:	f06f 0305 	mvn.w	r3, #5
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	e007      	b.n	800c6f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 ff7c 	bl	800d5ec <vTaskDelay>
    }
  }

  return (stat);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
	...

0800c700 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4a07      	ldr	r2, [pc, #28]	; (800c72c <vApplicationGetIdleTaskMemory+0x2c>)
 800c710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	4a06      	ldr	r2, [pc, #24]	; (800c730 <vApplicationGetIdleTaskMemory+0x30>)
 800c716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2280      	movs	r2, #128	; 0x80
 800c71c:	601a      	str	r2, [r3, #0]
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	200005c0 	.word	0x200005c0
 800c730:	2000061c 	.word	0x2000061c

0800c734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4a07      	ldr	r2, [pc, #28]	; (800c760 <vApplicationGetTimerTaskMemory+0x2c>)
 800c744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	4a06      	ldr	r2, [pc, #24]	; (800c764 <vApplicationGetTimerTaskMemory+0x30>)
 800c74a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c752:	601a      	str	r2, [r3, #0]
}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	2000081c 	.word	0x2000081c
 800c764:	20000878 	.word	0x20000878

0800c768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f103 0208 	add.w	r2, r3, #8
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f103 0208 	add.w	r2, r3, #8
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f103 0208 	add.w	r2, r3, #8
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c7b6:	bf00      	nop
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	1c5a      	adds	r2, r3, #1
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	601a      	str	r2, [r3, #0]
}
 800c7fe:	bf00      	nop
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c80a:	b480      	push	{r7}
 800c80c:	b085      	sub	sp, #20
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c820:	d103      	bne.n	800c82a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	e00c      	b.n	800c844 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3308      	adds	r3, #8
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e002      	b.n	800c838 <vListInsert+0x2e>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	429a      	cmp	r2, r3
 800c842:	d2f6      	bcs.n	800c832 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	1c5a      	adds	r2, r3, #1
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	601a      	str	r2, [r3, #0]
}
 800c870:	bf00      	nop
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	6892      	ldr	r2, [r2, #8]
 800c892:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	6852      	ldr	r2, [r2, #4]
 800c89c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d103      	bne.n	800c8b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	1e5a      	subs	r2, r3, #1
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10a      	bne.n	800c8fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8fa:	f002 f84b 	bl	800e994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c906:	68f9      	ldr	r1, [r7, #12]
 800c908:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c90a:	fb01 f303 	mul.w	r3, r1, r3
 800c90e:	441a      	add	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92a:	3b01      	subs	r3, #1
 800c92c:	68f9      	ldr	r1, [r7, #12]
 800c92e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c930:	fb01 f303 	mul.w	r3, r1, r3
 800c934:	441a      	add	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	22ff      	movs	r2, #255	; 0xff
 800c93e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	22ff      	movs	r2, #255	; 0xff
 800c946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d114      	bne.n	800c97a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d01a      	beq.n	800c98e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	3310      	adds	r3, #16
 800c95c:	4618      	mov	r0, r3
 800c95e:	f001 f903 	bl	800db68 <xTaskRemoveFromEventList>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d012      	beq.n	800c98e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c968:	4b0c      	ldr	r3, [pc, #48]	; (800c99c <xQueueGenericReset+0xcc>)
 800c96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96e:	601a      	str	r2, [r3, #0]
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	e009      	b.n	800c98e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3310      	adds	r3, #16
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff fef2 	bl	800c768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3324      	adds	r3, #36	; 0x24
 800c988:	4618      	mov	r0, r3
 800c98a:	f7ff feed 	bl	800c768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c98e:	f002 f831 	bl	800e9f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c992:	2301      	movs	r3, #1
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	e000ed04 	.word	0xe000ed04

0800c9a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08e      	sub	sp, #56	; 0x38
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10a      	bne.n	800c9e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9e2:	bf00      	nop
 800c9e4:	e7fe      	b.n	800c9e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <xQueueGenericCreateStatic+0x52>
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <xQueueGenericCreateStatic+0x56>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e000      	b.n	800c9f8 <xQueueGenericCreateStatic+0x58>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	623b      	str	r3, [r7, #32]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <xQueueGenericCreateStatic+0x7e>
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <xQueueGenericCreateStatic+0x82>
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e000      	b.n	800ca24 <xQueueGenericCreateStatic+0x84>
 800ca22:	2300      	movs	r3, #0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	61fb      	str	r3, [r7, #28]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca3e:	2350      	movs	r3, #80	; 0x50
 800ca40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	2b50      	cmp	r3, #80	; 0x50
 800ca46:	d00a      	beq.n	800ca5e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	61bb      	str	r3, [r7, #24]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca5e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00d      	beq.n	800ca86 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	68b9      	ldr	r1, [r7, #8]
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 f805 	bl	800ca90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3730      	adds	r7, #48	; 0x30
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d103      	bne.n	800caac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	69ba      	ldr	r2, [r7, #24]
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	e002      	b.n	800cab2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cabe:	2101      	movs	r1, #1
 800cac0:	69b8      	ldr	r0, [r7, #24]
 800cac2:	f7ff ff05 	bl	800c8d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	78fa      	ldrb	r2, [r7, #3]
 800caca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cace:	bf00      	nop
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
	...

0800cad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08e      	sub	sp, #56	; 0x38
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cae6:	2300      	movs	r3, #0
 800cae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10a      	bne.n	800cb0a <xQueueGenericSend+0x32>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb06:	bf00      	nop
 800cb08:	e7fe      	b.n	800cb08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d103      	bne.n	800cb18 <xQueueGenericSend+0x40>
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d101      	bne.n	800cb1c <xQueueGenericSend+0x44>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e000      	b.n	800cb1e <xQueueGenericSend+0x46>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10a      	bne.n	800cb38 <xQueueGenericSend+0x60>
	__asm volatile
 800cb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb26:	f383 8811 	msr	BASEPRI, r3
 800cb2a:	f3bf 8f6f 	isb	sy
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb34:	bf00      	nop
 800cb36:	e7fe      	b.n	800cb36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d103      	bne.n	800cb46 <xQueueGenericSend+0x6e>
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d101      	bne.n	800cb4a <xQueueGenericSend+0x72>
 800cb46:	2301      	movs	r3, #1
 800cb48:	e000      	b.n	800cb4c <xQueueGenericSend+0x74>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <xQueueGenericSend+0x8e>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	623b      	str	r3, [r7, #32]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb66:	f001 f9bd 	bl	800dee4 <xTaskGetSchedulerState>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d102      	bne.n	800cb76 <xQueueGenericSend+0x9e>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <xQueueGenericSend+0xa2>
 800cb76:	2301      	movs	r3, #1
 800cb78:	e000      	b.n	800cb7c <xQueueGenericSend+0xa4>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <xQueueGenericSend+0xbe>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	61fb      	str	r3, [r7, #28]
}
 800cb92:	bf00      	nop
 800cb94:	e7fe      	b.n	800cb94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb96:	f001 fefd 	bl	800e994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d302      	bcc.n	800cbac <xQueueGenericSend+0xd4>
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d129      	bne.n	800cc00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	68b9      	ldr	r1, [r7, #8]
 800cbb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbb2:	f000 fa0b 	bl	800cfcc <prvCopyDataToQueue>
 800cbb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d010      	beq.n	800cbe2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc2:	3324      	adds	r3, #36	; 0x24
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 ffcf 	bl	800db68 <xTaskRemoveFromEventList>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d013      	beq.n	800cbf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cbd0:	4b3f      	ldr	r3, [pc, #252]	; (800ccd0 <xQueueGenericSend+0x1f8>)
 800cbd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	e00a      	b.n	800cbf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cbe8:	4b39      	ldr	r3, [pc, #228]	; (800ccd0 <xQueueGenericSend+0x1f8>)
 800cbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbee:	601a      	str	r2, [r3, #0]
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cbf8:	f001 fefc 	bl	800e9f4 <vPortExitCritical>
				return pdPASS;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e063      	b.n	800ccc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d103      	bne.n	800cc0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc06:	f001 fef5 	bl	800e9f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	e05c      	b.n	800ccc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d106      	bne.n	800cc22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc14:	f107 0314 	add.w	r3, r7, #20
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f001 f809 	bl	800dc30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc22:	f001 fee7 	bl	800e9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc26:	f000 fd7b 	bl	800d720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc2a:	f001 feb3 	bl	800e994 <vPortEnterCritical>
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc34:	b25b      	sxtb	r3, r3
 800cc36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc3a:	d103      	bne.n	800cc44 <xQueueGenericSend+0x16c>
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc4a:	b25b      	sxtb	r3, r3
 800cc4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc50:	d103      	bne.n	800cc5a <xQueueGenericSend+0x182>
 800cc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cc5a:	f001 fecb 	bl	800e9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc5e:	1d3a      	adds	r2, r7, #4
 800cc60:	f107 0314 	add.w	r3, r7, #20
 800cc64:	4611      	mov	r1, r2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 fff8 	bl	800dc5c <xTaskCheckForTimeOut>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d124      	bne.n	800ccbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cc72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc74:	f000 faa2 	bl	800d1bc <prvIsQueueFull>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d018      	beq.n	800ccb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	3310      	adds	r3, #16
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 ff1e 	bl	800dac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cc8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc8e:	f000 fa2d 	bl	800d0ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cc92:	f000 fd53 	bl	800d73c <xTaskResumeAll>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f47f af7c 	bne.w	800cb96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cc9e:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <xQueueGenericSend+0x1f8>)
 800cca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	e772      	b.n	800cb96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ccb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccb2:	f000 fa1b 	bl	800d0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccb6:	f000 fd41 	bl	800d73c <xTaskResumeAll>
 800ccba:	e76c      	b.n	800cb96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ccbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccbe:	f000 fa15 	bl	800d0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccc2:	f000 fd3b 	bl	800d73c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ccc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3738      	adds	r7, #56	; 0x38
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	e000ed04 	.word	0xe000ed04

0800ccd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b090      	sub	sp, #64	; 0x40
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10a      	bne.n	800cd02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ccec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccfe:	bf00      	nop
 800cd00:	e7fe      	b.n	800cd00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d103      	bne.n	800cd10 <xQueueGenericSendFromISR+0x3c>
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <xQueueGenericSendFromISR+0x40>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e000      	b.n	800cd16 <xQueueGenericSendFromISR+0x42>
 800cd14:	2300      	movs	r3, #0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10a      	bne.n	800cd30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd2c:	bf00      	nop
 800cd2e:	e7fe      	b.n	800cd2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d103      	bne.n	800cd3e <xQueueGenericSendFromISR+0x6a>
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d101      	bne.n	800cd42 <xQueueGenericSendFromISR+0x6e>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e000      	b.n	800cd44 <xQueueGenericSendFromISR+0x70>
 800cd42:	2300      	movs	r3, #0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	623b      	str	r3, [r7, #32]
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd5e:	f001 fefb 	bl	800eb58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cd62:	f3ef 8211 	mrs	r2, BASEPRI
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	61fa      	str	r2, [r7, #28]
 800cd78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cd7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d302      	bcc.n	800cd90 <xQueueGenericSendFromISR+0xbc>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d12f      	bne.n	800cdf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cda6:	f000 f911 	bl	800cfcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cdae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdb2:	d112      	bne.n	800cdda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d016      	beq.n	800cdea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbe:	3324      	adds	r3, #36	; 0x24
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fed1 	bl	800db68 <xTaskRemoveFromEventList>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00e      	beq.n	800cdea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	e007      	b.n	800cdea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	b25a      	sxtb	r2, r3
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cdea:	2301      	movs	r3, #1
 800cdec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cdee:	e001      	b.n	800cdf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cdfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3740      	adds	r7, #64	; 0x40
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
	...

0800ce0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b08c      	sub	sp, #48	; 0x30
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d10a      	bne.n	800ce3c <xQueueReceive+0x30>
	__asm volatile
 800ce26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2a:	f383 8811 	msr	BASEPRI, r3
 800ce2e:	f3bf 8f6f 	isb	sy
 800ce32:	f3bf 8f4f 	dsb	sy
 800ce36:	623b      	str	r3, [r7, #32]
}
 800ce38:	bf00      	nop
 800ce3a:	e7fe      	b.n	800ce3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d103      	bne.n	800ce4a <xQueueReceive+0x3e>
 800ce42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <xQueueReceive+0x42>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e000      	b.n	800ce50 <xQueueReceive+0x44>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <xQueueReceive+0x5e>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	61fb      	str	r3, [r7, #28]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce6a:	f001 f83b 	bl	800dee4 <xTaskGetSchedulerState>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d102      	bne.n	800ce7a <xQueueReceive+0x6e>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <xQueueReceive+0x72>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e000      	b.n	800ce80 <xQueueReceive+0x74>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <xQueueReceive+0x8e>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	61bb      	str	r3, [r7, #24]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce9a:	f001 fd7b 	bl	800e994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d01f      	beq.n	800ceea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ceaa:	68b9      	ldr	r1, [r7, #8]
 800ceac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceae:	f000 f8f7 	bl	800d0a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	1e5a      	subs	r2, r3, #1
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebc:	691b      	ldr	r3, [r3, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d00f      	beq.n	800cee2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	3310      	adds	r3, #16
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 fe4e 	bl	800db68 <xTaskRemoveFromEventList>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d007      	beq.n	800cee2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ced2:	4b3d      	ldr	r3, [pc, #244]	; (800cfc8 <xQueueReceive+0x1bc>)
 800ced4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cee2:	f001 fd87 	bl	800e9f4 <vPortExitCritical>
				return pdPASS;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e069      	b.n	800cfbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d103      	bne.n	800cef8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cef0:	f001 fd80 	bl	800e9f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cef4:	2300      	movs	r3, #0
 800cef6:	e062      	b.n	800cfbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cefe:	f107 0310 	add.w	r3, r7, #16
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 fe94 	bl	800dc30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf0c:	f001 fd72 	bl	800e9f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf10:	f000 fc06 	bl	800d720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf14:	f001 fd3e 	bl	800e994 <vPortEnterCritical>
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf1e:	b25b      	sxtb	r3, r3
 800cf20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf24:	d103      	bne.n	800cf2e <xQueueReceive+0x122>
 800cf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf34:	b25b      	sxtb	r3, r3
 800cf36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf3a:	d103      	bne.n	800cf44 <xQueueReceive+0x138>
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf44:	f001 fd56 	bl	800e9f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf48:	1d3a      	adds	r2, r7, #4
 800cf4a:	f107 0310 	add.w	r3, r7, #16
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 fe83 	bl	800dc5c <xTaskCheckForTimeOut>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d123      	bne.n	800cfa4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf5e:	f000 f917 	bl	800d190 <prvIsQueueEmpty>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d017      	beq.n	800cf98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6a:	3324      	adds	r3, #36	; 0x24
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	4611      	mov	r1, r2
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fda9 	bl	800dac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf78:	f000 f8b8 	bl	800d0ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf7c:	f000 fbde 	bl	800d73c <xTaskResumeAll>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d189      	bne.n	800ce9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cf86:	4b10      	ldr	r3, [pc, #64]	; (800cfc8 <xQueueReceive+0x1bc>)
 800cf88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	e780      	b.n	800ce9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cf98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf9a:	f000 f8a7 	bl	800d0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf9e:	f000 fbcd 	bl	800d73c <xTaskResumeAll>
 800cfa2:	e77a      	b.n	800ce9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa6:	f000 f8a1 	bl	800d0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfaa:	f000 fbc7 	bl	800d73c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb0:	f000 f8ee 	bl	800d190 <prvIsQueueEmpty>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	f43f af6f 	beq.w	800ce9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3730      	adds	r7, #48	; 0x30
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10d      	bne.n	800d006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d14d      	bne.n	800d08e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 ff92 	bl	800df20 <xTaskPriorityDisinherit>
 800cffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	609a      	str	r2, [r3, #8]
 800d004:	e043      	b.n	800d08e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d119      	bne.n	800d040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6858      	ldr	r0, [r3, #4]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d014:	461a      	mov	r2, r3
 800d016:	68b9      	ldr	r1, [r7, #8]
 800d018:	f002 fbec 	bl	800f7f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d024:	441a      	add	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	429a      	cmp	r2, r3
 800d034:	d32b      	bcc.n	800d08e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	605a      	str	r2, [r3, #4]
 800d03e:	e026      	b.n	800d08e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	68d8      	ldr	r0, [r3, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d048:	461a      	mov	r2, r3
 800d04a:	68b9      	ldr	r1, [r7, #8]
 800d04c:	f002 fbd2 	bl	800f7f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68da      	ldr	r2, [r3, #12]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d058:	425b      	negs	r3, r3
 800d05a:	441a      	add	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	68da      	ldr	r2, [r3, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d207      	bcs.n	800d07c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	689a      	ldr	r2, [r3, #8]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d074:	425b      	negs	r3, r3
 800d076:	441a      	add	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d105      	bne.n	800d08e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d002      	beq.n	800d08e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	3b01      	subs	r3, #1
 800d08c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1c5a      	adds	r2, r3, #1
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d096:	697b      	ldr	r3, [r7, #20]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d018      	beq.n	800d0e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68da      	ldr	r2, [r3, #12]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ba:	441a      	add	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68da      	ldr	r2, [r3, #12]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d303      	bcc.n	800d0d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	68d9      	ldr	r1, [r3, #12]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6838      	ldr	r0, [r7, #0]
 800d0e0:	f002 fb88 	bl	800f7f4 <memcpy>
	}
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d0f4:	f001 fc4e 	bl	800e994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d100:	e011      	b.n	800d126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	2b00      	cmp	r3, #0
 800d108:	d012      	beq.n	800d130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	3324      	adds	r3, #36	; 0x24
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fd2a 	bl	800db68 <xTaskRemoveFromEventList>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d11a:	f000 fe01 	bl	800dd20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
 800d120:	3b01      	subs	r3, #1
 800d122:	b2db      	uxtb	r3, r3
 800d124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	dce9      	bgt.n	800d102 <prvUnlockQueue+0x16>
 800d12e:	e000      	b.n	800d132 <prvUnlockQueue+0x46>
					break;
 800d130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	22ff      	movs	r2, #255	; 0xff
 800d136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d13a:	f001 fc5b 	bl	800e9f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d13e:	f001 fc29 	bl	800e994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d14a:	e011      	b.n	800d170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d012      	beq.n	800d17a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3310      	adds	r3, #16
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fd05 	bl	800db68 <xTaskRemoveFromEventList>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d164:	f000 fddc 	bl	800dd20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d168:	7bbb      	ldrb	r3, [r7, #14]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d174:	2b00      	cmp	r3, #0
 800d176:	dce9      	bgt.n	800d14c <prvUnlockQueue+0x60>
 800d178:	e000      	b.n	800d17c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d17a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	22ff      	movs	r2, #255	; 0xff
 800d180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d184:	f001 fc36 	bl	800e9f4 <vPortExitCritical>
}
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d198:	f001 fbfc 	bl	800e994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	60fb      	str	r3, [r7, #12]
 800d1a8:	e001      	b.n	800d1ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1ae:	f001 fc21 	bl	800e9f4 <vPortExitCritical>

	return xReturn;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1c4:	f001 fbe6 	bl	800e994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d102      	bne.n	800d1da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	e001      	b.n	800d1de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1de:	f001 fc09 	bl	800e9f4 <vPortExitCritical>

	return xReturn;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	e014      	b.n	800d226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d1fc:	4a0f      	ldr	r2, [pc, #60]	; (800d23c <vQueueAddToRegistry+0x50>)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d10b      	bne.n	800d220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d208:	490c      	ldr	r1, [pc, #48]	; (800d23c <vQueueAddToRegistry+0x50>)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d212:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <vQueueAddToRegistry+0x50>)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	4413      	add	r3, r2
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d21e:	e006      	b.n	800d22e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3301      	adds	r3, #1
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b07      	cmp	r3, #7
 800d22a:	d9e7      	bls.n	800d1fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d22c:	bf00      	nop
 800d22e:	bf00      	nop
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	20000c78 	.word	0x20000c78

0800d240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d250:	f001 fba0 	bl	800e994 <vPortEnterCritical>
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d25a:	b25b      	sxtb	r3, r3
 800d25c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d260:	d103      	bne.n	800d26a <vQueueWaitForMessageRestricted+0x2a>
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	2200      	movs	r2, #0
 800d266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d270:	b25b      	sxtb	r3, r3
 800d272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d276:	d103      	bne.n	800d280 <vQueueWaitForMessageRestricted+0x40>
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d280:	f001 fbb8 	bl	800e9f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	3324      	adds	r3, #36	; 0x24
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	4618      	mov	r0, r3
 800d296:	f000 fc3b 	bl	800db10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d29a:	6978      	ldr	r0, [r7, #20]
 800d29c:	f7ff ff26 	bl	800d0ec <prvUnlockQueue>
	}
 800d2a0:	bf00      	nop
 800d2a2:	3718      	adds	r7, #24
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b08e      	sub	sp, #56	; 0x38
 800d2ac:	af04      	add	r7, sp, #16
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	623b      	str	r3, [r7, #32]
}
 800d2ce:	bf00      	nop
 800d2d0:	e7fe      	b.n	800d2d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <xTaskCreateStatic+0x46>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	61fb      	str	r3, [r7, #28]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d2ee:	235c      	movs	r3, #92	; 0x5c
 800d2f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	2b5c      	cmp	r3, #92	; 0x5c
 800d2f6:	d00a      	beq.n	800d30e <xTaskCreateStatic+0x66>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	61bb      	str	r3, [r7, #24]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d30e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	2b00      	cmp	r3, #0
 800d314:	d01e      	beq.n	800d354 <xTaskCreateStatic+0xac>
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01b      	beq.n	800d354 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d324:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d328:	2202      	movs	r2, #2
 800d32a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d32e:	2300      	movs	r3, #0
 800d330:	9303      	str	r3, [sp, #12]
 800d332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d334:	9302      	str	r3, [sp, #8]
 800d336:	f107 0314 	add.w	r3, r7, #20
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	68b9      	ldr	r1, [r7, #8]
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f000 f850 	bl	800d3ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d34e:	f000 f8dd 	bl	800d50c <prvAddNewTaskToReadyList>
 800d352:	e001      	b.n	800d358 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d354:	2300      	movs	r3, #0
 800d356:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d358:	697b      	ldr	r3, [r7, #20]
	}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3728      	adds	r7, #40	; 0x28
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d362:	b580      	push	{r7, lr}
 800d364:	b08c      	sub	sp, #48	; 0x30
 800d366:	af04      	add	r7, sp, #16
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	603b      	str	r3, [r7, #0]
 800d36e:	4613      	mov	r3, r2
 800d370:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d372:	88fb      	ldrh	r3, [r7, #6]
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4618      	mov	r0, r3
 800d378:	f001 fc2e 	bl	800ebd8 <pvPortMalloc>
 800d37c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00e      	beq.n	800d3a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d384:	205c      	movs	r0, #92	; 0x5c
 800d386:	f001 fc27 	bl	800ebd8 <pvPortMalloc>
 800d38a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d003      	beq.n	800d39a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	631a      	str	r2, [r3, #48]	; 0x30
 800d398:	e005      	b.n	800d3a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d39a:	6978      	ldr	r0, [r7, #20]
 800d39c:	f001 fce8 	bl	800ed70 <vPortFree>
 800d3a0:	e001      	b.n	800d3a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d017      	beq.n	800d3dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3b4:	88fa      	ldrh	r2, [r7, #6]
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	9303      	str	r3, [sp, #12]
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	9302      	str	r3, [sp, #8]
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	68b9      	ldr	r1, [r7, #8]
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f000 f80e 	bl	800d3ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3d0:	69f8      	ldr	r0, [r7, #28]
 800d3d2:	f000 f89b 	bl	800d50c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	61bb      	str	r3, [r7, #24]
 800d3da:	e002      	b.n	800d3e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3e2:	69bb      	ldr	r3, [r7, #24]
	}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3720      	adds	r7, #32
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b088      	sub	sp, #32
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
 800d3f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	461a      	mov	r2, r3
 800d404:	21a5      	movs	r1, #165	; 0xa5
 800d406:	f002 f9c1 	bl	800f78c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d414:	3b01      	subs	r3, #1
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	f023 0307 	bic.w	r3, r3, #7
 800d422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	f003 0307 	and.w	r3, r3, #7
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00a      	beq.n	800d444 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	617b      	str	r3, [r7, #20]
}
 800d440:	bf00      	nop
 800d442:	e7fe      	b.n	800d442 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01f      	beq.n	800d48a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d44a:	2300      	movs	r3, #0
 800d44c:	61fb      	str	r3, [r7, #28]
 800d44e:	e012      	b.n	800d476 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	4413      	add	r3, r2
 800d456:	7819      	ldrb	r1, [r3, #0]
 800d458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	4413      	add	r3, r2
 800d45e:	3334      	adds	r3, #52	; 0x34
 800d460:	460a      	mov	r2, r1
 800d462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	4413      	add	r3, r2
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	3301      	adds	r3, #1
 800d474:	61fb      	str	r3, [r7, #28]
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	2b0f      	cmp	r3, #15
 800d47a:	d9e9      	bls.n	800d450 <prvInitialiseNewTask+0x64>
 800d47c:	e000      	b.n	800d480 <prvInitialiseNewTask+0x94>
			{
				break;
 800d47e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	2200      	movs	r2, #0
 800d484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d488:	e003      	b.n	800d492 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	2200      	movs	r2, #0
 800d48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	2b37      	cmp	r3, #55	; 0x37
 800d496:	d901      	bls.n	800d49c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d498:	2337      	movs	r3, #55	; 0x37
 800d49a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff f978 	bl	800c7a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	3318      	adds	r3, #24
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7ff f973 	bl	800c7a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	2200      	movs	r2, #0
 800d4dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	68f9      	ldr	r1, [r7, #12]
 800d4ea:	69b8      	ldr	r0, [r7, #24]
 800d4ec:	f001 f928 	bl	800e740 <pxPortInitialiseStack>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d502:	bf00      	nop
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
	...

0800d50c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d514:	f001 fa3e 	bl	800e994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d518:	4b2d      	ldr	r3, [pc, #180]	; (800d5d0 <prvAddNewTaskToReadyList+0xc4>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3301      	adds	r3, #1
 800d51e:	4a2c      	ldr	r2, [pc, #176]	; (800d5d0 <prvAddNewTaskToReadyList+0xc4>)
 800d520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d522:	4b2c      	ldr	r3, [pc, #176]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d109      	bne.n	800d53e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d52a:	4a2a      	ldr	r2, [pc, #168]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d530:	4b27      	ldr	r3, [pc, #156]	; (800d5d0 <prvAddNewTaskToReadyList+0xc4>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d110      	bne.n	800d55a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d538:	f000 fc16 	bl	800dd68 <prvInitialiseTaskLists>
 800d53c:	e00d      	b.n	800d55a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d53e:	4b26      	ldr	r3, [pc, #152]	; (800d5d8 <prvAddNewTaskToReadyList+0xcc>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d109      	bne.n	800d55a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d546:	4b23      	ldr	r3, [pc, #140]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	429a      	cmp	r2, r3
 800d552:	d802      	bhi.n	800d55a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d554:	4a1f      	ldr	r2, [pc, #124]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d55a:	4b20      	ldr	r3, [pc, #128]	; (800d5dc <prvAddNewTaskToReadyList+0xd0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3301      	adds	r3, #1
 800d560:	4a1e      	ldr	r2, [pc, #120]	; (800d5dc <prvAddNewTaskToReadyList+0xd0>)
 800d562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d564:	4b1d      	ldr	r3, [pc, #116]	; (800d5dc <prvAddNewTaskToReadyList+0xd0>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d570:	4b1b      	ldr	r3, [pc, #108]	; (800d5e0 <prvAddNewTaskToReadyList+0xd4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d903      	bls.n	800d580 <prvAddNewTaskToReadyList+0x74>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57c:	4a18      	ldr	r2, [pc, #96]	; (800d5e0 <prvAddNewTaskToReadyList+0xd4>)
 800d57e:	6013      	str	r3, [r2, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d584:	4613      	mov	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4a15      	ldr	r2, [pc, #84]	; (800d5e4 <prvAddNewTaskToReadyList+0xd8>)
 800d58e:	441a      	add	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3304      	adds	r3, #4
 800d594:	4619      	mov	r1, r3
 800d596:	4610      	mov	r0, r2
 800d598:	f7ff f913 	bl	800c7c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d59c:	f001 fa2a 	bl	800e9f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d5a0:	4b0d      	ldr	r3, [pc, #52]	; (800d5d8 <prvAddNewTaskToReadyList+0xcc>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00e      	beq.n	800d5c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d5a8:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d207      	bcs.n	800d5c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d5b6:	4b0c      	ldr	r3, [pc, #48]	; (800d5e8 <prvAddNewTaskToReadyList+0xdc>)
 800d5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	2000118c 	.word	0x2000118c
 800d5d4:	20000cb8 	.word	0x20000cb8
 800d5d8:	20001198 	.word	0x20001198
 800d5dc:	200011a8 	.word	0x200011a8
 800d5e0:	20001194 	.word	0x20001194
 800d5e4:	20000cbc 	.word	0x20000cbc
 800d5e8:	e000ed04 	.word	0xe000ed04

0800d5ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d017      	beq.n	800d62e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5fe:	4b13      	ldr	r3, [pc, #76]	; (800d64c <vTaskDelay+0x60>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00a      	beq.n	800d61c <vTaskDelay+0x30>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	60bb      	str	r3, [r7, #8]
}
 800d618:	bf00      	nop
 800d61a:	e7fe      	b.n	800d61a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d61c:	f000 f880 	bl	800d720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d620:	2100      	movs	r1, #0
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 fcea 	bl	800dffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d628:	f000 f888 	bl	800d73c <xTaskResumeAll>
 800d62c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d107      	bne.n	800d644 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d634:	4b06      	ldr	r3, [pc, #24]	; (800d650 <vTaskDelay+0x64>)
 800d636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d644:	bf00      	nop
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	200011b4 	.word	0x200011b4
 800d650:	e000ed04 	.word	0xe000ed04

0800d654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b08a      	sub	sp, #40	; 0x28
 800d658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d65a:	2300      	movs	r3, #0
 800d65c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d65e:	2300      	movs	r3, #0
 800d660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d662:	463a      	mov	r2, r7
 800d664:	1d39      	adds	r1, r7, #4
 800d666:	f107 0308 	add.w	r3, r7, #8
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7ff f848 	bl	800c700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	9202      	str	r2, [sp, #8]
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	2300      	movs	r3, #0
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	2300      	movs	r3, #0
 800d680:	460a      	mov	r2, r1
 800d682:	4921      	ldr	r1, [pc, #132]	; (800d708 <vTaskStartScheduler+0xb4>)
 800d684:	4821      	ldr	r0, [pc, #132]	; (800d70c <vTaskStartScheduler+0xb8>)
 800d686:	f7ff fe0f 	bl	800d2a8 <xTaskCreateStatic>
 800d68a:	4603      	mov	r3, r0
 800d68c:	4a20      	ldr	r2, [pc, #128]	; (800d710 <vTaskStartScheduler+0xbc>)
 800d68e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d690:	4b1f      	ldr	r3, [pc, #124]	; (800d710 <vTaskStartScheduler+0xbc>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d698:	2301      	movs	r3, #1
 800d69a:	617b      	str	r3, [r7, #20]
 800d69c:	e001      	b.n	800d6a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d102      	bne.n	800d6ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d6a8:	f000 fcfc 	bl	800e0a4 <xTimerCreateTimerTask>
 800d6ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d116      	bne.n	800d6e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	613b      	str	r3, [r7, #16]
}
 800d6c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d6c8:	4b12      	ldr	r3, [pc, #72]	; (800d714 <vTaskStartScheduler+0xc0>)
 800d6ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d6d0:	4b11      	ldr	r3, [pc, #68]	; (800d718 <vTaskStartScheduler+0xc4>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6d6:	4b11      	ldr	r3, [pc, #68]	; (800d71c <vTaskStartScheduler+0xc8>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d6dc:	f001 f8b8 	bl	800e850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d6e0:	e00e      	b.n	800d700 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6e8:	d10a      	bne.n	800d700 <vTaskStartScheduler+0xac>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	60fb      	str	r3, [r7, #12]
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <vTaskStartScheduler+0xaa>
}
 800d700:	bf00      	nop
 800d702:	3718      	adds	r7, #24
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	08010154 	.word	0x08010154
 800d70c:	0800dd39 	.word	0x0800dd39
 800d710:	200011b0 	.word	0x200011b0
 800d714:	200011ac 	.word	0x200011ac
 800d718:	20001198 	.word	0x20001198
 800d71c:	20001190 	.word	0x20001190

0800d720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d720:	b480      	push	{r7}
 800d722:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d724:	4b04      	ldr	r3, [pc, #16]	; (800d738 <vTaskSuspendAll+0x18>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3301      	adds	r3, #1
 800d72a:	4a03      	ldr	r2, [pc, #12]	; (800d738 <vTaskSuspendAll+0x18>)
 800d72c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d72e:	bf00      	nop
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	200011b4 	.word	0x200011b4

0800d73c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d742:	2300      	movs	r3, #0
 800d744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d746:	2300      	movs	r3, #0
 800d748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d74a:	4b42      	ldr	r3, [pc, #264]	; (800d854 <xTaskResumeAll+0x118>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <xTaskResumeAll+0x2c>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	603b      	str	r3, [r7, #0]
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d768:	f001 f914 	bl	800e994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d76c:	4b39      	ldr	r3, [pc, #228]	; (800d854 <xTaskResumeAll+0x118>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3b01      	subs	r3, #1
 800d772:	4a38      	ldr	r2, [pc, #224]	; (800d854 <xTaskResumeAll+0x118>)
 800d774:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d776:	4b37      	ldr	r3, [pc, #220]	; (800d854 <xTaskResumeAll+0x118>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d162      	bne.n	800d844 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d77e:	4b36      	ldr	r3, [pc, #216]	; (800d858 <xTaskResumeAll+0x11c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d05e      	beq.n	800d844 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d786:	e02f      	b.n	800d7e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d788:	4b34      	ldr	r3, [pc, #208]	; (800d85c <xTaskResumeAll+0x120>)
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3318      	adds	r3, #24
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff f871 	bl	800c87c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	3304      	adds	r3, #4
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff f86c 	bl	800c87c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a8:	4b2d      	ldr	r3, [pc, #180]	; (800d860 <xTaskResumeAll+0x124>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d903      	bls.n	800d7b8 <xTaskResumeAll+0x7c>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	4a2a      	ldr	r2, [pc, #168]	; (800d860 <xTaskResumeAll+0x124>)
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4a27      	ldr	r2, [pc, #156]	; (800d864 <xTaskResumeAll+0x128>)
 800d7c6:	441a      	add	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	f7fe fff7 	bl	800c7c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d8:	4b23      	ldr	r3, [pc, #140]	; (800d868 <xTaskResumeAll+0x12c>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d302      	bcc.n	800d7e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d7e2:	4b22      	ldr	r3, [pc, #136]	; (800d86c <xTaskResumeAll+0x130>)
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7e8:	4b1c      	ldr	r3, [pc, #112]	; (800d85c <xTaskResumeAll+0x120>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1cb      	bne.n	800d788 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d001      	beq.n	800d7fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7f6:	f000 fb55 	bl	800dea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d7fa:	4b1d      	ldr	r3, [pc, #116]	; (800d870 <xTaskResumeAll+0x134>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d010      	beq.n	800d828 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d806:	f000 f847 	bl	800d898 <xTaskIncrementTick>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d810:	4b16      	ldr	r3, [pc, #88]	; (800d86c <xTaskResumeAll+0x130>)
 800d812:	2201      	movs	r2, #1
 800d814:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	3b01      	subs	r3, #1
 800d81a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1f1      	bne.n	800d806 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d822:	4b13      	ldr	r3, [pc, #76]	; (800d870 <xTaskResumeAll+0x134>)
 800d824:	2200      	movs	r2, #0
 800d826:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d828:	4b10      	ldr	r3, [pc, #64]	; (800d86c <xTaskResumeAll+0x130>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d830:	2301      	movs	r3, #1
 800d832:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d834:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <xTaskResumeAll+0x138>)
 800d836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d844:	f001 f8d6 	bl	800e9f4 <vPortExitCritical>

	return xAlreadyYielded;
 800d848:	68bb      	ldr	r3, [r7, #8]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	200011b4 	.word	0x200011b4
 800d858:	2000118c 	.word	0x2000118c
 800d85c:	2000114c 	.word	0x2000114c
 800d860:	20001194 	.word	0x20001194
 800d864:	20000cbc 	.word	0x20000cbc
 800d868:	20000cb8 	.word	0x20000cb8
 800d86c:	200011a0 	.word	0x200011a0
 800d870:	2000119c 	.word	0x2000119c
 800d874:	e000ed04 	.word	0xe000ed04

0800d878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d87e:	4b05      	ldr	r3, [pc, #20]	; (800d894 <xTaskGetTickCount+0x1c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d884:	687b      	ldr	r3, [r7, #4]
}
 800d886:	4618      	mov	r0, r3
 800d888:	370c      	adds	r7, #12
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20001190 	.word	0x20001190

0800d898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a2:	4b4f      	ldr	r3, [pc, #316]	; (800d9e0 <xTaskIncrementTick+0x148>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f040 808f 	bne.w	800d9ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d8ac:	4b4d      	ldr	r3, [pc, #308]	; (800d9e4 <xTaskIncrementTick+0x14c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d8b4:	4a4b      	ldr	r2, [pc, #300]	; (800d9e4 <xTaskIncrementTick+0x14c>)
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d120      	bne.n	800d902 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d8c0:	4b49      	ldr	r3, [pc, #292]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	603b      	str	r3, [r7, #0]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <xTaskIncrementTick+0x46>
 800d8e0:	4b41      	ldr	r3, [pc, #260]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60fb      	str	r3, [r7, #12]
 800d8e6:	4b41      	ldr	r3, [pc, #260]	; (800d9ec <xTaskIncrementTick+0x154>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a3f      	ldr	r2, [pc, #252]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d8ec:	6013      	str	r3, [r2, #0]
 800d8ee:	4a3f      	ldr	r2, [pc, #252]	; (800d9ec <xTaskIncrementTick+0x154>)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6013      	str	r3, [r2, #0]
 800d8f4:	4b3e      	ldr	r3, [pc, #248]	; (800d9f0 <xTaskIncrementTick+0x158>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	4a3d      	ldr	r2, [pc, #244]	; (800d9f0 <xTaskIncrementTick+0x158>)
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	f000 fad1 	bl	800dea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d902:	4b3c      	ldr	r3, [pc, #240]	; (800d9f4 <xTaskIncrementTick+0x15c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d349      	bcc.n	800d9a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d90c:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d104      	bne.n	800d920 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d916:	4b37      	ldr	r3, [pc, #220]	; (800d9f4 <xTaskIncrementTick+0x15c>)
 800d918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d91c:	601a      	str	r2, [r3, #0]
					break;
 800d91e:	e03f      	b.n	800d9a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d920:	4b31      	ldr	r3, [pc, #196]	; (800d9e8 <xTaskIncrementTick+0x150>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d930:	693a      	ldr	r2, [r7, #16]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	d203      	bcs.n	800d940 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d938:	4a2e      	ldr	r2, [pc, #184]	; (800d9f4 <xTaskIncrementTick+0x15c>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d93e:	e02f      	b.n	800d9a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3304      	adds	r3, #4
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe ff99 	bl	800c87c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d004      	beq.n	800d95c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	3318      	adds	r3, #24
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe ff90 	bl	800c87c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4b25      	ldr	r3, [pc, #148]	; (800d9f8 <xTaskIncrementTick+0x160>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d903      	bls.n	800d970 <xTaskIncrementTick+0xd8>
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	4a22      	ldr	r2, [pc, #136]	; (800d9f8 <xTaskIncrementTick+0x160>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a1f      	ldr	r2, [pc, #124]	; (800d9fc <xTaskIncrementTick+0x164>)
 800d97e:	441a      	add	r2, r3
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe ff1b 	bl	800c7c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d990:	4b1b      	ldr	r3, [pc, #108]	; (800da00 <xTaskIncrementTick+0x168>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	429a      	cmp	r2, r3
 800d998:	d3b8      	bcc.n	800d90c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d99a:	2301      	movs	r3, #1
 800d99c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d99e:	e7b5      	b.n	800d90c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9a0:	4b17      	ldr	r3, [pc, #92]	; (800da00 <xTaskIncrementTick+0x168>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a6:	4915      	ldr	r1, [pc, #84]	; (800d9fc <xTaskIncrementTick+0x164>)
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	440b      	add	r3, r1
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d901      	bls.n	800d9bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d9bc:	4b11      	ldr	r3, [pc, #68]	; (800da04 <xTaskIncrementTick+0x16c>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	617b      	str	r3, [r7, #20]
 800d9c8:	e004      	b.n	800d9d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskIncrementTick+0x170>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	4a0d      	ldr	r2, [pc, #52]	; (800da08 <xTaskIncrementTick+0x170>)
 800d9d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d9d4:	697b      	ldr	r3, [r7, #20]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	200011b4 	.word	0x200011b4
 800d9e4:	20001190 	.word	0x20001190
 800d9e8:	20001144 	.word	0x20001144
 800d9ec:	20001148 	.word	0x20001148
 800d9f0:	200011a4 	.word	0x200011a4
 800d9f4:	200011ac 	.word	0x200011ac
 800d9f8:	20001194 	.word	0x20001194
 800d9fc:	20000cbc 	.word	0x20000cbc
 800da00:	20000cb8 	.word	0x20000cb8
 800da04:	200011a0 	.word	0x200011a0
 800da08:	2000119c 	.word	0x2000119c

0800da0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da12:	4b28      	ldr	r3, [pc, #160]	; (800dab4 <vTaskSwitchContext+0xa8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da1a:	4b27      	ldr	r3, [pc, #156]	; (800dab8 <vTaskSwitchContext+0xac>)
 800da1c:	2201      	movs	r2, #1
 800da1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da20:	e041      	b.n	800daa6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800da22:	4b25      	ldr	r3, [pc, #148]	; (800dab8 <vTaskSwitchContext+0xac>)
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <vTaskSwitchContext+0xb0>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	60fb      	str	r3, [r7, #12]
 800da2e:	e010      	b.n	800da52 <vTaskSwitchContext+0x46>
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10a      	bne.n	800da4c <vTaskSwitchContext+0x40>
	__asm volatile
 800da36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	607b      	str	r3, [r7, #4]
}
 800da48:	bf00      	nop
 800da4a:	e7fe      	b.n	800da4a <vTaskSwitchContext+0x3e>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3b01      	subs	r3, #1
 800da50:	60fb      	str	r3, [r7, #12]
 800da52:	491b      	ldr	r1, [pc, #108]	; (800dac0 <vTaskSwitchContext+0xb4>)
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	4613      	mov	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	440b      	add	r3, r1
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d0e4      	beq.n	800da30 <vTaskSwitchContext+0x24>
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	4613      	mov	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4a13      	ldr	r2, [pc, #76]	; (800dac0 <vTaskSwitchContext+0xb4>)
 800da72:	4413      	add	r3, r2
 800da74:	60bb      	str	r3, [r7, #8]
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	605a      	str	r2, [r3, #4]
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	3308      	adds	r3, #8
 800da88:	429a      	cmp	r2, r3
 800da8a:	d104      	bne.n	800da96 <vTaskSwitchContext+0x8a>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	605a      	str	r2, [r3, #4]
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	4a09      	ldr	r2, [pc, #36]	; (800dac4 <vTaskSwitchContext+0xb8>)
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	4a06      	ldr	r2, [pc, #24]	; (800dabc <vTaskSwitchContext+0xb0>)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6013      	str	r3, [r2, #0]
}
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	200011b4 	.word	0x200011b4
 800dab8:	200011a0 	.word	0x200011a0
 800dabc:	20001194 	.word	0x20001194
 800dac0:	20000cbc 	.word	0x20000cbc
 800dac4:	20000cb8 	.word	0x20000cb8

0800dac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	60fb      	str	r3, [r7, #12]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800daee:	4b07      	ldr	r3, [pc, #28]	; (800db0c <vTaskPlaceOnEventList+0x44>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3318      	adds	r3, #24
 800daf4:	4619      	mov	r1, r3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7fe fe87 	bl	800c80a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dafc:	2101      	movs	r1, #1
 800dafe:	6838      	ldr	r0, [r7, #0]
 800db00:	f000 fa7c 	bl	800dffc <prvAddCurrentTaskToDelayedList>
}
 800db04:	bf00      	nop
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20000cb8 	.word	0x20000cb8

0800db10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d10a      	bne.n	800db38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	617b      	str	r3, [r7, #20]
}
 800db34:	bf00      	nop
 800db36:	e7fe      	b.n	800db36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db38:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <vTaskPlaceOnEventListRestricted+0x54>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3318      	adds	r3, #24
 800db3e:	4619      	mov	r1, r3
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7fe fe3e 	bl	800c7c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800db4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800db52:	6879      	ldr	r1, [r7, #4]
 800db54:	68b8      	ldr	r0, [r7, #8]
 800db56:	f000 fa51 	bl	800dffc <prvAddCurrentTaskToDelayedList>
	}
 800db5a:	bf00      	nop
 800db5c:	3718      	adds	r7, #24
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	20000cb8 	.word	0x20000cb8

0800db68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d10a      	bne.n	800db94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800db7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db82:	f383 8811 	msr	BASEPRI, r3
 800db86:	f3bf 8f6f 	isb	sy
 800db8a:	f3bf 8f4f 	dsb	sy
 800db8e:	60fb      	str	r3, [r7, #12]
}
 800db90:	bf00      	nop
 800db92:	e7fe      	b.n	800db92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	3318      	adds	r3, #24
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe fe6f 	bl	800c87c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db9e:	4b1e      	ldr	r3, [pc, #120]	; (800dc18 <xTaskRemoveFromEventList+0xb0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d11d      	bne.n	800dbe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe fe66 	bl	800c87c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb4:	4b19      	ldr	r3, [pc, #100]	; (800dc1c <xTaskRemoveFromEventList+0xb4>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d903      	bls.n	800dbc4 <xTaskRemoveFromEventList+0x5c>
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc0:	4a16      	ldr	r2, [pc, #88]	; (800dc1c <xTaskRemoveFromEventList+0xb4>)
 800dbc2:	6013      	str	r3, [r2, #0]
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc8:	4613      	mov	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4a13      	ldr	r2, [pc, #76]	; (800dc20 <xTaskRemoveFromEventList+0xb8>)
 800dbd2:	441a      	add	r2, r3
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	4619      	mov	r1, r3
 800dbda:	4610      	mov	r0, r2
 800dbdc:	f7fe fdf1 	bl	800c7c2 <vListInsertEnd>
 800dbe0:	e005      	b.n	800dbee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	3318      	adds	r3, #24
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	480e      	ldr	r0, [pc, #56]	; (800dc24 <xTaskRemoveFromEventList+0xbc>)
 800dbea:	f7fe fdea 	bl	800c7c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf2:	4b0d      	ldr	r3, [pc, #52]	; (800dc28 <xTaskRemoveFromEventList+0xc0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d905      	bls.n	800dc08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc00:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <xTaskRemoveFromEventList+0xc4>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	e001      	b.n	800dc0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc0c:	697b      	ldr	r3, [r7, #20]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	200011b4 	.word	0x200011b4
 800dc1c:	20001194 	.word	0x20001194
 800dc20:	20000cbc 	.word	0x20000cbc
 800dc24:	2000114c 	.word	0x2000114c
 800dc28:	20000cb8 	.word	0x20000cb8
 800dc2c:	200011a0 	.word	0x200011a0

0800dc30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc38:	4b06      	ldr	r3, [pc, #24]	; (800dc54 <vTaskInternalSetTimeOutState+0x24>)
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc40:	4b05      	ldr	r3, [pc, #20]	; (800dc58 <vTaskInternalSetTimeOutState+0x28>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	605a      	str	r2, [r3, #4]
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	200011a4 	.word	0x200011a4
 800dc58:	20001190 	.word	0x20001190

0800dc5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b088      	sub	sp, #32
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	613b      	str	r3, [r7, #16]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10a      	bne.n	800dc9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	60fb      	str	r3, [r7, #12]
}
 800dc9a:	bf00      	nop
 800dc9c:	e7fe      	b.n	800dc9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dc9e:	f000 fe79 	bl	800e994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dca2:	4b1d      	ldr	r3, [pc, #116]	; (800dd18 <xTaskCheckForTimeOut+0xbc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	69ba      	ldr	r2, [r7, #24]
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcba:	d102      	bne.n	800dcc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	e023      	b.n	800dd0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <xTaskCheckForTimeOut+0xc0>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d007      	beq.n	800dcde <xTaskCheckForTimeOut+0x82>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	69ba      	ldr	r2, [r7, #24]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d302      	bcc.n	800dcde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	61fb      	str	r3, [r7, #28]
 800dcdc:	e015      	b.n	800dd0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d20b      	bcs.n	800dd00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	1ad2      	subs	r2, r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ff9b 	bl	800dc30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	61fb      	str	r3, [r7, #28]
 800dcfe:	e004      	b.n	800dd0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd06:	2301      	movs	r3, #1
 800dd08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dd0a:	f000 fe73 	bl	800e9f4 <vPortExitCritical>

	return xReturn;
 800dd0e:	69fb      	ldr	r3, [r7, #28]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3720      	adds	r7, #32
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20001190 	.word	0x20001190
 800dd1c:	200011a4 	.word	0x200011a4

0800dd20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd20:	b480      	push	{r7}
 800dd22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd24:	4b03      	ldr	r3, [pc, #12]	; (800dd34 <vTaskMissedYield+0x14>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	601a      	str	r2, [r3, #0]
}
 800dd2a:	bf00      	nop
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	200011a0 	.word	0x200011a0

0800dd38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd40:	f000 f852 	bl	800dde8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd44:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <prvIdleTask+0x28>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d9f9      	bls.n	800dd40 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd4c:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <prvIdleTask+0x2c>)
 800dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd5c:	e7f0      	b.n	800dd40 <prvIdleTask+0x8>
 800dd5e:	bf00      	nop
 800dd60:	20000cbc 	.word	0x20000cbc
 800dd64:	e000ed04 	.word	0xe000ed04

0800dd68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd6e:	2300      	movs	r3, #0
 800dd70:	607b      	str	r3, [r7, #4]
 800dd72:	e00c      	b.n	800dd8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	4613      	mov	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4413      	add	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4a12      	ldr	r2, [pc, #72]	; (800ddc8 <prvInitialiseTaskLists+0x60>)
 800dd80:	4413      	add	r3, r2
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fcf0 	bl	800c768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	607b      	str	r3, [r7, #4]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b37      	cmp	r3, #55	; 0x37
 800dd92:	d9ef      	bls.n	800dd74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd94:	480d      	ldr	r0, [pc, #52]	; (800ddcc <prvInitialiseTaskLists+0x64>)
 800dd96:	f7fe fce7 	bl	800c768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd9a:	480d      	ldr	r0, [pc, #52]	; (800ddd0 <prvInitialiseTaskLists+0x68>)
 800dd9c:	f7fe fce4 	bl	800c768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dda0:	480c      	ldr	r0, [pc, #48]	; (800ddd4 <prvInitialiseTaskLists+0x6c>)
 800dda2:	f7fe fce1 	bl	800c768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dda6:	480c      	ldr	r0, [pc, #48]	; (800ddd8 <prvInitialiseTaskLists+0x70>)
 800dda8:	f7fe fcde 	bl	800c768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ddac:	480b      	ldr	r0, [pc, #44]	; (800dddc <prvInitialiseTaskLists+0x74>)
 800ddae:	f7fe fcdb 	bl	800c768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ddb2:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <prvInitialiseTaskLists+0x78>)
 800ddb4:	4a05      	ldr	r2, [pc, #20]	; (800ddcc <prvInitialiseTaskLists+0x64>)
 800ddb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ddb8:	4b0a      	ldr	r3, [pc, #40]	; (800dde4 <prvInitialiseTaskLists+0x7c>)
 800ddba:	4a05      	ldr	r2, [pc, #20]	; (800ddd0 <prvInitialiseTaskLists+0x68>)
 800ddbc:	601a      	str	r2, [r3, #0]
}
 800ddbe:	bf00      	nop
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000cbc 	.word	0x20000cbc
 800ddcc:	2000111c 	.word	0x2000111c
 800ddd0:	20001130 	.word	0x20001130
 800ddd4:	2000114c 	.word	0x2000114c
 800ddd8:	20001160 	.word	0x20001160
 800dddc:	20001178 	.word	0x20001178
 800dde0:	20001144 	.word	0x20001144
 800dde4:	20001148 	.word	0x20001148

0800dde8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddee:	e019      	b.n	800de24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ddf0:	f000 fdd0 	bl	800e994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddf4:	4b10      	ldr	r3, [pc, #64]	; (800de38 <prvCheckTasksWaitingTermination+0x50>)
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	3304      	adds	r3, #4
 800de00:	4618      	mov	r0, r3
 800de02:	f7fe fd3b 	bl	800c87c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de06:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <prvCheckTasksWaitingTermination+0x54>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	4a0b      	ldr	r2, [pc, #44]	; (800de3c <prvCheckTasksWaitingTermination+0x54>)
 800de0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de10:	4b0b      	ldr	r3, [pc, #44]	; (800de40 <prvCheckTasksWaitingTermination+0x58>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	3b01      	subs	r3, #1
 800de16:	4a0a      	ldr	r2, [pc, #40]	; (800de40 <prvCheckTasksWaitingTermination+0x58>)
 800de18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de1a:	f000 fdeb 	bl	800e9f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f810 	bl	800de44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de24:	4b06      	ldr	r3, [pc, #24]	; (800de40 <prvCheckTasksWaitingTermination+0x58>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1e1      	bne.n	800ddf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de2c:	bf00      	nop
 800de2e:	bf00      	nop
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20001160 	.word	0x20001160
 800de3c:	2000118c 	.word	0x2000118c
 800de40:	20001174 	.word	0x20001174

0800de44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de52:	2b00      	cmp	r3, #0
 800de54:	d108      	bne.n	800de68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 ff88 	bl	800ed70 <vPortFree>
				vPortFree( pxTCB );
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 ff85 	bl	800ed70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de66:	e018      	b.n	800de9a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d103      	bne.n	800de7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 ff7c 	bl	800ed70 <vPortFree>
	}
 800de78:	e00f      	b.n	800de9a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800de80:	2b02      	cmp	r3, #2
 800de82:	d00a      	beq.n	800de9a <prvDeleteTCB+0x56>
	__asm volatile
 800de84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de88:	f383 8811 	msr	BASEPRI, r3
 800de8c:	f3bf 8f6f 	isb	sy
 800de90:	f3bf 8f4f 	dsb	sy
 800de94:	60fb      	str	r3, [r7, #12]
}
 800de96:	bf00      	nop
 800de98:	e7fe      	b.n	800de98 <prvDeleteTCB+0x54>
	}
 800de9a:	bf00      	nop
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
	...

0800dea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800deaa:	4b0c      	ldr	r3, [pc, #48]	; (800dedc <prvResetNextTaskUnblockTime+0x38>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d104      	bne.n	800debe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800deb4:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <prvResetNextTaskUnblockTime+0x3c>)
 800deb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800debc:	e008      	b.n	800ded0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800debe:	4b07      	ldr	r3, [pc, #28]	; (800dedc <prvResetNextTaskUnblockTime+0x38>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	4a04      	ldr	r2, [pc, #16]	; (800dee0 <prvResetNextTaskUnblockTime+0x3c>)
 800dece:	6013      	str	r3, [r2, #0]
}
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	20001144 	.word	0x20001144
 800dee0:	200011ac 	.word	0x200011ac

0800dee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dee4:	b480      	push	{r7}
 800dee6:	b083      	sub	sp, #12
 800dee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800deea:	4b0b      	ldr	r3, [pc, #44]	; (800df18 <xTaskGetSchedulerState+0x34>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d102      	bne.n	800def8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800def2:	2301      	movs	r3, #1
 800def4:	607b      	str	r3, [r7, #4]
 800def6:	e008      	b.n	800df0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def8:	4b08      	ldr	r3, [pc, #32]	; (800df1c <xTaskGetSchedulerState+0x38>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df00:	2302      	movs	r3, #2
 800df02:	607b      	str	r3, [r7, #4]
 800df04:	e001      	b.n	800df0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df06:	2300      	movs	r3, #0
 800df08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df0a:	687b      	ldr	r3, [r7, #4]
	}
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	20001198 	.word	0x20001198
 800df1c:	200011b4 	.word	0x200011b4

0800df20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df2c:	2300      	movs	r3, #0
 800df2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d056      	beq.n	800dfe4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df36:	4b2e      	ldr	r3, [pc, #184]	; (800dff0 <xTaskPriorityDisinherit+0xd0>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	693a      	ldr	r2, [r7, #16]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d00a      	beq.n	800df56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	60fb      	str	r3, [r7, #12]
}
 800df52:	bf00      	nop
 800df54:	e7fe      	b.n	800df54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10a      	bne.n	800df74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	60bb      	str	r3, [r7, #8]
}
 800df70:	bf00      	nop
 800df72:	e7fe      	b.n	800df72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df78:	1e5a      	subs	r2, r3, #1
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df86:	429a      	cmp	r2, r3
 800df88:	d02c      	beq.n	800dfe4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d128      	bne.n	800dfe4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	3304      	adds	r3, #4
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fc70 	bl	800c87c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb4:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <xTaskPriorityDisinherit+0xd4>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d903      	bls.n	800dfc4 <xTaskPriorityDisinherit+0xa4>
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc0:	4a0c      	ldr	r2, [pc, #48]	; (800dff4 <xTaskPriorityDisinherit+0xd4>)
 800dfc2:	6013      	str	r3, [r2, #0]
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc8:	4613      	mov	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4a09      	ldr	r2, [pc, #36]	; (800dff8 <xTaskPriorityDisinherit+0xd8>)
 800dfd2:	441a      	add	r2, r3
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	4619      	mov	r1, r3
 800dfda:	4610      	mov	r0, r2
 800dfdc:	f7fe fbf1 	bl	800c7c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfe4:	697b      	ldr	r3, [r7, #20]
	}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3718      	adds	r7, #24
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	20000cb8 	.word	0x20000cb8
 800dff4:	20001194 	.word	0x20001194
 800dff8:	20000cbc 	.word	0x20000cbc

0800dffc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e006:	4b21      	ldr	r3, [pc, #132]	; (800e08c <prvAddCurrentTaskToDelayedList+0x90>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e00c:	4b20      	ldr	r3, [pc, #128]	; (800e090 <prvAddCurrentTaskToDelayedList+0x94>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	3304      	adds	r3, #4
 800e012:	4618      	mov	r0, r3
 800e014:	f7fe fc32 	bl	800c87c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e01e:	d10a      	bne.n	800e036 <prvAddCurrentTaskToDelayedList+0x3a>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d007      	beq.n	800e036 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e026:	4b1a      	ldr	r3, [pc, #104]	; (800e090 <prvAddCurrentTaskToDelayedList+0x94>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	3304      	adds	r3, #4
 800e02c:	4619      	mov	r1, r3
 800e02e:	4819      	ldr	r0, [pc, #100]	; (800e094 <prvAddCurrentTaskToDelayedList+0x98>)
 800e030:	f7fe fbc7 	bl	800c7c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e034:	e026      	b.n	800e084 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4413      	add	r3, r2
 800e03c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e03e:	4b14      	ldr	r3, [pc, #80]	; (800e090 <prvAddCurrentTaskToDelayedList+0x94>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68ba      	ldr	r2, [r7, #8]
 800e044:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d209      	bcs.n	800e062 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e04e:	4b12      	ldr	r3, [pc, #72]	; (800e098 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	4b0f      	ldr	r3, [pc, #60]	; (800e090 <prvAddCurrentTaskToDelayedList+0x94>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	3304      	adds	r3, #4
 800e058:	4619      	mov	r1, r3
 800e05a:	4610      	mov	r0, r2
 800e05c:	f7fe fbd5 	bl	800c80a <vListInsert>
}
 800e060:	e010      	b.n	800e084 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e062:	4b0e      	ldr	r3, [pc, #56]	; (800e09c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <prvAddCurrentTaskToDelayedList+0x94>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	3304      	adds	r3, #4
 800e06c:	4619      	mov	r1, r3
 800e06e:	4610      	mov	r0, r2
 800e070:	f7fe fbcb 	bl	800c80a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e074:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d202      	bcs.n	800e084 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e07e:	4a08      	ldr	r2, [pc, #32]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	6013      	str	r3, [r2, #0]
}
 800e084:	bf00      	nop
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20001190 	.word	0x20001190
 800e090:	20000cb8 	.word	0x20000cb8
 800e094:	20001178 	.word	0x20001178
 800e098:	20001148 	.word	0x20001148
 800e09c:	20001144 	.word	0x20001144
 800e0a0:	200011ac 	.word	0x200011ac

0800e0a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08a      	sub	sp, #40	; 0x28
 800e0a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e0ae:	f000 fb07 	bl	800e6c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e0b2:	4b1c      	ldr	r3, [pc, #112]	; (800e124 <xTimerCreateTimerTask+0x80>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d021      	beq.n	800e0fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e0c2:	1d3a      	adds	r2, r7, #4
 800e0c4:	f107 0108 	add.w	r1, r7, #8
 800e0c8:	f107 030c 	add.w	r3, r7, #12
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fe fb31 	bl	800c734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	9202      	str	r2, [sp, #8]
 800e0da:	9301      	str	r3, [sp, #4]
 800e0dc:	2302      	movs	r3, #2
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	460a      	mov	r2, r1
 800e0e4:	4910      	ldr	r1, [pc, #64]	; (800e128 <xTimerCreateTimerTask+0x84>)
 800e0e6:	4811      	ldr	r0, [pc, #68]	; (800e12c <xTimerCreateTimerTask+0x88>)
 800e0e8:	f7ff f8de 	bl	800d2a8 <xTaskCreateStatic>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	4a10      	ldr	r2, [pc, #64]	; (800e130 <xTimerCreateTimerTask+0x8c>)
 800e0f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e0f2:	4b0f      	ldr	r3, [pc, #60]	; (800e130 <xTimerCreateTimerTask+0x8c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10a      	bne.n	800e11a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	613b      	str	r3, [r7, #16]
}
 800e116:	bf00      	nop
 800e118:	e7fe      	b.n	800e118 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e11a:	697b      	ldr	r3, [r7, #20]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	200011e8 	.word	0x200011e8
 800e128:	0801015c 	.word	0x0801015c
 800e12c:	0800e269 	.word	0x0800e269
 800e130:	200011ec 	.word	0x200011ec

0800e134 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b08a      	sub	sp, #40	; 0x28
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e142:	2300      	movs	r3, #0
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10a      	bne.n	800e162 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e150:	f383 8811 	msr	BASEPRI, r3
 800e154:	f3bf 8f6f 	isb	sy
 800e158:	f3bf 8f4f 	dsb	sy
 800e15c:	623b      	str	r3, [r7, #32]
}
 800e15e:	bf00      	nop
 800e160:	e7fe      	b.n	800e160 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e162:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <xTimerGenericCommand+0x98>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d02a      	beq.n	800e1c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	2b05      	cmp	r3, #5
 800e17a:	dc18      	bgt.n	800e1ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e17c:	f7ff feb2 	bl	800dee4 <xTaskGetSchedulerState>
 800e180:	4603      	mov	r3, r0
 800e182:	2b02      	cmp	r3, #2
 800e184:	d109      	bne.n	800e19a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e186:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <xTimerGenericCommand+0x98>)
 800e188:	6818      	ldr	r0, [r3, #0]
 800e18a:	f107 0110 	add.w	r1, r7, #16
 800e18e:	2300      	movs	r3, #0
 800e190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e192:	f7fe fca1 	bl	800cad8 <xQueueGenericSend>
 800e196:	6278      	str	r0, [r7, #36]	; 0x24
 800e198:	e012      	b.n	800e1c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e19a:	4b0c      	ldr	r3, [pc, #48]	; (800e1cc <xTimerGenericCommand+0x98>)
 800e19c:	6818      	ldr	r0, [r3, #0]
 800e19e:	f107 0110 	add.w	r1, r7, #16
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f7fe fc97 	bl	800cad8 <xQueueGenericSend>
 800e1aa:	6278      	str	r0, [r7, #36]	; 0x24
 800e1ac:	e008      	b.n	800e1c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e1ae:	4b07      	ldr	r3, [pc, #28]	; (800e1cc <xTimerGenericCommand+0x98>)
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	f107 0110 	add.w	r1, r7, #16
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	f7fe fd8b 	bl	800ccd4 <xQueueGenericSendFromISR>
 800e1be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3728      	adds	r7, #40	; 0x28
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200011e8 	.word	0x200011e8

0800e1d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af02      	add	r7, sp, #8
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1da:	4b22      	ldr	r3, [pc, #136]	; (800e264 <prvProcessExpiredTimer+0x94>)
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	3304      	adds	r3, #4
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fe fb47 	bl	800c87c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1f4:	f003 0304 	and.w	r3, r3, #4
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d022      	beq.n	800e242 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	699a      	ldr	r2, [r3, #24]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	18d1      	adds	r1, r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	6978      	ldr	r0, [r7, #20]
 800e20a:	f000 f8d1 	bl	800e3b0 <prvInsertTimerInActiveList>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d01f      	beq.n	800e254 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e214:	2300      	movs	r3, #0
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	2300      	movs	r3, #0
 800e21a:	687a      	ldr	r2, [r7, #4]
 800e21c:	2100      	movs	r1, #0
 800e21e:	6978      	ldr	r0, [r7, #20]
 800e220:	f7ff ff88 	bl	800e134 <xTimerGenericCommand>
 800e224:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d113      	bne.n	800e254 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	60fb      	str	r3, [r7, #12]
}
 800e23e:	bf00      	nop
 800e240:	e7fe      	b.n	800e240 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e248:	f023 0301 	bic.w	r3, r3, #1
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	6978      	ldr	r0, [r7, #20]
 800e25a:	4798      	blx	r3
}
 800e25c:	bf00      	nop
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	200011e0 	.word	0x200011e0

0800e268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e270:	f107 0308 	add.w	r3, r7, #8
 800e274:	4618      	mov	r0, r3
 800e276:	f000 f857 	bl	800e328 <prvGetNextExpireTime>
 800e27a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	4619      	mov	r1, r3
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 f803 	bl	800e28c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e286:	f000 f8d5 	bl	800e434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e28a:	e7f1      	b.n	800e270 <prvTimerTask+0x8>

0800e28c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e296:	f7ff fa43 	bl	800d720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e29a:	f107 0308 	add.w	r3, r7, #8
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 f866 	bl	800e370 <prvSampleTimeNow>
 800e2a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d130      	bne.n	800e30e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10a      	bne.n	800e2c8 <prvProcessTimerOrBlockTask+0x3c>
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d806      	bhi.n	800e2c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e2ba:	f7ff fa3f 	bl	800d73c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e2be:	68f9      	ldr	r1, [r7, #12]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff ff85 	bl	800e1d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e2c6:	e024      	b.n	800e312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d008      	beq.n	800e2e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2ce:	4b13      	ldr	r3, [pc, #76]	; (800e31c <prvProcessTimerOrBlockTask+0x90>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d101      	bne.n	800e2dc <prvProcessTimerOrBlockTask+0x50>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	e000      	b.n	800e2de <prvProcessTimerOrBlockTask+0x52>
 800e2dc:	2300      	movs	r3, #0
 800e2de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e2e0:	4b0f      	ldr	r3, [pc, #60]	; (800e320 <prvProcessTimerOrBlockTask+0x94>)
 800e2e2:	6818      	ldr	r0, [r3, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f7fe ffa7 	bl	800d240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2f2:	f7ff fa23 	bl	800d73c <xTaskResumeAll>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10a      	bne.n	800e312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e2fc:	4b09      	ldr	r3, [pc, #36]	; (800e324 <prvProcessTimerOrBlockTask+0x98>)
 800e2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	f3bf 8f6f 	isb	sy
}
 800e30c:	e001      	b.n	800e312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e30e:	f7ff fa15 	bl	800d73c <xTaskResumeAll>
}
 800e312:	bf00      	nop
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	200011e4 	.word	0x200011e4
 800e320:	200011e8 	.word	0x200011e8
 800e324:	e000ed04 	.word	0xe000ed04

0800e328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e330:	4b0e      	ldr	r3, [pc, #56]	; (800e36c <prvGetNextExpireTime+0x44>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <prvGetNextExpireTime+0x16>
 800e33a:	2201      	movs	r2, #1
 800e33c:	e000      	b.n	800e340 <prvGetNextExpireTime+0x18>
 800e33e:	2200      	movs	r2, #0
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d105      	bne.n	800e358 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e34c:	4b07      	ldr	r3, [pc, #28]	; (800e36c <prvGetNextExpireTime+0x44>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	e001      	b.n	800e35c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e358:	2300      	movs	r3, #0
 800e35a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e35c:	68fb      	ldr	r3, [r7, #12]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	200011e0 	.word	0x200011e0

0800e370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e378:	f7ff fa7e 	bl	800d878 <xTaskGetTickCount>
 800e37c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e37e:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <prvSampleTimeNow+0x3c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	429a      	cmp	r2, r3
 800e386:	d205      	bcs.n	800e394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e388:	f000 f936 	bl	800e5f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	601a      	str	r2, [r3, #0]
 800e392:	e002      	b.n	800e39a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e39a:	4a04      	ldr	r2, [pc, #16]	; (800e3ac <prvSampleTimeNow+0x3c>)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	200011f0 	.word	0x200011f0

0800e3b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d812      	bhi.n	800e3fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	1ad2      	subs	r2, r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d302      	bcc.n	800e3ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	617b      	str	r3, [r7, #20]
 800e3e8:	e01b      	b.n	800e422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3ea:	4b10      	ldr	r3, [pc, #64]	; (800e42c <prvInsertTimerInActiveList+0x7c>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3304      	adds	r3, #4
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	f7fe fa08 	bl	800c80a <vListInsert>
 800e3fa:	e012      	b.n	800e422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d206      	bcs.n	800e412 <prvInsertTimerInActiveList+0x62>
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d302      	bcc.n	800e412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e40c:	2301      	movs	r3, #1
 800e40e:	617b      	str	r3, [r7, #20]
 800e410:	e007      	b.n	800e422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e412:	4b07      	ldr	r3, [pc, #28]	; (800e430 <prvInsertTimerInActiveList+0x80>)
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	3304      	adds	r3, #4
 800e41a:	4619      	mov	r1, r3
 800e41c:	4610      	mov	r0, r2
 800e41e:	f7fe f9f4 	bl	800c80a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e422:	697b      	ldr	r3, [r7, #20]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3718      	adds	r7, #24
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	200011e4 	.word	0x200011e4
 800e430:	200011e0 	.word	0x200011e0

0800e434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08e      	sub	sp, #56	; 0x38
 800e438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e43a:	e0ca      	b.n	800e5d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	da18      	bge.n	800e474 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e442:	1d3b      	adds	r3, r7, #4
 800e444:	3304      	adds	r3, #4
 800e446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d10a      	bne.n	800e464 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	61fb      	str	r3, [r7, #28]
}
 800e460:	bf00      	nop
 800e462:	e7fe      	b.n	800e462 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e46a:	6850      	ldr	r0, [r2, #4]
 800e46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e46e:	6892      	ldr	r2, [r2, #8]
 800e470:	4611      	mov	r1, r2
 800e472:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	f2c0 80ab 	blt.w	800e5d2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d004      	beq.n	800e492 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	3304      	adds	r3, #4
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe f9f5 	bl	800c87c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e492:	463b      	mov	r3, r7
 800e494:	4618      	mov	r0, r3
 800e496:	f7ff ff6b 	bl	800e370 <prvSampleTimeNow>
 800e49a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b09      	cmp	r3, #9
 800e4a0:	f200 8096 	bhi.w	800e5d0 <prvProcessReceivedCommands+0x19c>
 800e4a4:	a201      	add	r2, pc, #4	; (adr r2, 800e4ac <prvProcessReceivedCommands+0x78>)
 800e4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4aa:	bf00      	nop
 800e4ac:	0800e4d5 	.word	0x0800e4d5
 800e4b0:	0800e4d5 	.word	0x0800e4d5
 800e4b4:	0800e4d5 	.word	0x0800e4d5
 800e4b8:	0800e549 	.word	0x0800e549
 800e4bc:	0800e55d 	.word	0x0800e55d
 800e4c0:	0800e5a7 	.word	0x0800e5a7
 800e4c4:	0800e4d5 	.word	0x0800e4d5
 800e4c8:	0800e4d5 	.word	0x0800e4d5
 800e4cc:	0800e549 	.word	0x0800e549
 800e4d0:	0800e55d 	.word	0x0800e55d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4da:	f043 0301 	orr.w	r3, r3, #1
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	699b      	ldr	r3, [r3, #24]
 800e4ec:	18d1      	adds	r1, r2, r3
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f4:	f7ff ff5c 	bl	800e3b0 <prvInsertTimerInActiveList>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d069      	beq.n	800e5d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e504:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e508:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e50c:	f003 0304 	and.w	r3, r3, #4
 800e510:	2b00      	cmp	r3, #0
 800e512:	d05e      	beq.n	800e5d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	441a      	add	r2, r3
 800e51c:	2300      	movs	r3, #0
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	2300      	movs	r3, #0
 800e522:	2100      	movs	r1, #0
 800e524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e526:	f7ff fe05 	bl	800e134 <xTimerGenericCommand>
 800e52a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d14f      	bne.n	800e5d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	61bb      	str	r3, [r7, #24]
}
 800e544:	bf00      	nop
 800e546:	e7fe      	b.n	800e546 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e54e:	f023 0301 	bic.w	r3, r3, #1
 800e552:	b2da      	uxtb	r2, r3
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e55a:	e03a      	b.n	800e5d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e562:	f043 0301 	orr.w	r3, r3, #1
 800e566:	b2da      	uxtb	r2, r3
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e572:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e576:	699b      	ldr	r3, [r3, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10a      	bne.n	800e592 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	617b      	str	r3, [r7, #20]
}
 800e58e:	bf00      	nop
 800e590:	e7fe      	b.n	800e590 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	18d1      	adds	r1, r2, r3
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5a0:	f7ff ff06 	bl	800e3b0 <prvInsertTimerInActiveList>
					break;
 800e5a4:	e015      	b.n	800e5d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ac:	f003 0302 	and.w	r3, r3, #2
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d103      	bne.n	800e5bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5b6:	f000 fbdb 	bl	800ed70 <vPortFree>
 800e5ba:	e00a      	b.n	800e5d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5c2:	f023 0301 	bic.w	r3, r3, #1
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e5ce:	e000      	b.n	800e5d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e5d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5d2:	4b08      	ldr	r3, [pc, #32]	; (800e5f4 <prvProcessReceivedCommands+0x1c0>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	1d39      	adds	r1, r7, #4
 800e5d8:	2200      	movs	r2, #0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fc16 	bl	800ce0c <xQueueReceive>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f47f af2a 	bne.w	800e43c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e5e8:	bf00      	nop
 800e5ea:	bf00      	nop
 800e5ec:	3730      	adds	r7, #48	; 0x30
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200011e8 	.word	0x200011e8

0800e5f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b088      	sub	sp, #32
 800e5fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5fe:	e048      	b.n	800e692 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e600:	4b2d      	ldr	r3, [pc, #180]	; (800e6b8 <prvSwitchTimerLists+0xc0>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e60a:	4b2b      	ldr	r3, [pc, #172]	; (800e6b8 <prvSwitchTimerLists+0xc0>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	3304      	adds	r3, #4
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe f92f 	bl	800c87c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b00      	cmp	r3, #0
 800e632:	d02e      	beq.n	800e692 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	693a      	ldr	r2, [r7, #16]
 800e63a:	4413      	add	r3, r2
 800e63c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	429a      	cmp	r2, r3
 800e644:	d90e      	bls.n	800e664 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	68ba      	ldr	r2, [r7, #8]
 800e64a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e652:	4b19      	ldr	r3, [pc, #100]	; (800e6b8 <prvSwitchTimerLists+0xc0>)
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	3304      	adds	r3, #4
 800e65a:	4619      	mov	r1, r3
 800e65c:	4610      	mov	r0, r2
 800e65e:	f7fe f8d4 	bl	800c80a <vListInsert>
 800e662:	e016      	b.n	800e692 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e664:	2300      	movs	r3, #0
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	2300      	movs	r3, #0
 800e66a:	693a      	ldr	r2, [r7, #16]
 800e66c:	2100      	movs	r1, #0
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff fd60 	bl	800e134 <xTimerGenericCommand>
 800e674:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10a      	bne.n	800e692 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e680:	f383 8811 	msr	BASEPRI, r3
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	f3bf 8f4f 	dsb	sy
 800e68c:	603b      	str	r3, [r7, #0]
}
 800e68e:	bf00      	nop
 800e690:	e7fe      	b.n	800e690 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e692:	4b09      	ldr	r3, [pc, #36]	; (800e6b8 <prvSwitchTimerLists+0xc0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1b1      	bne.n	800e600 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <prvSwitchTimerLists+0xc0>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e6a2:	4b06      	ldr	r3, [pc, #24]	; (800e6bc <prvSwitchTimerLists+0xc4>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a04      	ldr	r2, [pc, #16]	; (800e6b8 <prvSwitchTimerLists+0xc0>)
 800e6a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e6aa:	4a04      	ldr	r2, [pc, #16]	; (800e6bc <prvSwitchTimerLists+0xc4>)
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	6013      	str	r3, [r2, #0]
}
 800e6b0:	bf00      	nop
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200011e0 	.word	0x200011e0
 800e6bc:	200011e4 	.word	0x200011e4

0800e6c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e6c6:	f000 f965 	bl	800e994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e6ca:	4b15      	ldr	r3, [pc, #84]	; (800e720 <prvCheckForValidListAndQueue+0x60>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d120      	bne.n	800e714 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e6d2:	4814      	ldr	r0, [pc, #80]	; (800e724 <prvCheckForValidListAndQueue+0x64>)
 800e6d4:	f7fe f848 	bl	800c768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6d8:	4813      	ldr	r0, [pc, #76]	; (800e728 <prvCheckForValidListAndQueue+0x68>)
 800e6da:	f7fe f845 	bl	800c768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6de:	4b13      	ldr	r3, [pc, #76]	; (800e72c <prvCheckForValidListAndQueue+0x6c>)
 800e6e0:	4a10      	ldr	r2, [pc, #64]	; (800e724 <prvCheckForValidListAndQueue+0x64>)
 800e6e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6e4:	4b12      	ldr	r3, [pc, #72]	; (800e730 <prvCheckForValidListAndQueue+0x70>)
 800e6e6:	4a10      	ldr	r2, [pc, #64]	; (800e728 <prvCheckForValidListAndQueue+0x68>)
 800e6e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	4b11      	ldr	r3, [pc, #68]	; (800e734 <prvCheckForValidListAndQueue+0x74>)
 800e6f0:	4a11      	ldr	r2, [pc, #68]	; (800e738 <prvCheckForValidListAndQueue+0x78>)
 800e6f2:	2110      	movs	r1, #16
 800e6f4:	200a      	movs	r0, #10
 800e6f6:	f7fe f953 	bl	800c9a0 <xQueueGenericCreateStatic>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	4a08      	ldr	r2, [pc, #32]	; (800e720 <prvCheckForValidListAndQueue+0x60>)
 800e6fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e700:	4b07      	ldr	r3, [pc, #28]	; (800e720 <prvCheckForValidListAndQueue+0x60>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d005      	beq.n	800e714 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e708:	4b05      	ldr	r3, [pc, #20]	; (800e720 <prvCheckForValidListAndQueue+0x60>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	490b      	ldr	r1, [pc, #44]	; (800e73c <prvCheckForValidListAndQueue+0x7c>)
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fe fd6c 	bl	800d1ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e714:	f000 f96e 	bl	800e9f4 <vPortExitCritical>
}
 800e718:	bf00      	nop
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	200011e8 	.word	0x200011e8
 800e724:	200011b8 	.word	0x200011b8
 800e728:	200011cc 	.word	0x200011cc
 800e72c:	200011e0 	.word	0x200011e0
 800e730:	200011e4 	.word	0x200011e4
 800e734:	20001294 	.word	0x20001294
 800e738:	200011f4 	.word	0x200011f4
 800e73c:	08010164 	.word	0x08010164

0800e740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3b04      	subs	r3, #4
 800e750:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	3b04      	subs	r3, #4
 800e75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	f023 0201 	bic.w	r2, r3, #1
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3b04      	subs	r3, #4
 800e76e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e770:	4a0c      	ldr	r2, [pc, #48]	; (800e7a4 <pxPortInitialiseStack+0x64>)
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3b14      	subs	r3, #20
 800e77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	3b04      	subs	r3, #4
 800e786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f06f 0202 	mvn.w	r2, #2
 800e78e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	3b20      	subs	r3, #32
 800e794:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e796:	68fb      	ldr	r3, [r7, #12]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3714      	adds	r7, #20
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	0800e7a9 	.word	0x0800e7a9

0800e7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7b2:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <prvTaskExitError+0x54>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7ba:	d00a      	beq.n	800e7d2 <prvTaskExitError+0x2a>
	__asm volatile
 800e7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c0:	f383 8811 	msr	BASEPRI, r3
 800e7c4:	f3bf 8f6f 	isb	sy
 800e7c8:	f3bf 8f4f 	dsb	sy
 800e7cc:	60fb      	str	r3, [r7, #12]
}
 800e7ce:	bf00      	nop
 800e7d0:	e7fe      	b.n	800e7d0 <prvTaskExitError+0x28>
	__asm volatile
 800e7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	60bb      	str	r3, [r7, #8]
}
 800e7e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7e6:	bf00      	nop
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0fc      	beq.n	800e7e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20000150 	.word	0x20000150

0800e800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e800:	4b07      	ldr	r3, [pc, #28]	; (800e820 <pxCurrentTCBConst2>)
 800e802:	6819      	ldr	r1, [r3, #0]
 800e804:	6808      	ldr	r0, [r1, #0]
 800e806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80a:	f380 8809 	msr	PSP, r0
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f04f 0000 	mov.w	r0, #0
 800e816:	f380 8811 	msr	BASEPRI, r0
 800e81a:	4770      	bx	lr
 800e81c:	f3af 8000 	nop.w

0800e820 <pxCurrentTCBConst2>:
 800e820:	20000cb8 	.word	0x20000cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop

0800e828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e828:	4808      	ldr	r0, [pc, #32]	; (800e84c <prvPortStartFirstTask+0x24>)
 800e82a:	6800      	ldr	r0, [r0, #0]
 800e82c:	6800      	ldr	r0, [r0, #0]
 800e82e:	f380 8808 	msr	MSP, r0
 800e832:	f04f 0000 	mov.w	r0, #0
 800e836:	f380 8814 	msr	CONTROL, r0
 800e83a:	b662      	cpsie	i
 800e83c:	b661      	cpsie	f
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	df00      	svc	0
 800e848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e84a:	bf00      	nop
 800e84c:	e000ed08 	.word	0xe000ed08

0800e850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e856:	4b46      	ldr	r3, [pc, #280]	; (800e970 <xPortStartScheduler+0x120>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a46      	ldr	r2, [pc, #280]	; (800e974 <xPortStartScheduler+0x124>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d10a      	bne.n	800e876 <xPortStartScheduler+0x26>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	613b      	str	r3, [r7, #16]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e876:	4b3e      	ldr	r3, [pc, #248]	; (800e970 <xPortStartScheduler+0x120>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a3f      	ldr	r2, [pc, #252]	; (800e978 <xPortStartScheduler+0x128>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d10a      	bne.n	800e896 <xPortStartScheduler+0x46>
	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	60fb      	str	r3, [r7, #12]
}
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e896:	4b39      	ldr	r3, [pc, #228]	; (800e97c <xPortStartScheduler+0x12c>)
 800e898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	22ff      	movs	r2, #255	; 0xff
 800e8a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	4b31      	ldr	r3, [pc, #196]	; (800e980 <xPortStartScheduler+0x130>)
 800e8bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8be:	4b31      	ldr	r3, [pc, #196]	; (800e984 <xPortStartScheduler+0x134>)
 800e8c0:	2207      	movs	r2, #7
 800e8c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8c4:	e009      	b.n	800e8da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e8c6:	4b2f      	ldr	r3, [pc, #188]	; (800e984 <xPortStartScheduler+0x134>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	4a2d      	ldr	r2, [pc, #180]	; (800e984 <xPortStartScheduler+0x134>)
 800e8ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8d0:	78fb      	ldrb	r3, [r7, #3]
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8da:	78fb      	ldrb	r3, [r7, #3]
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8e2:	2b80      	cmp	r3, #128	; 0x80
 800e8e4:	d0ef      	beq.n	800e8c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8e6:	4b27      	ldr	r3, [pc, #156]	; (800e984 <xPortStartScheduler+0x134>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f1c3 0307 	rsb	r3, r3, #7
 800e8ee:	2b04      	cmp	r3, #4
 800e8f0:	d00a      	beq.n	800e908 <xPortStartScheduler+0xb8>
	__asm volatile
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	f383 8811 	msr	BASEPRI, r3
 800e8fa:	f3bf 8f6f 	isb	sy
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	60bb      	str	r3, [r7, #8]
}
 800e904:	bf00      	nop
 800e906:	e7fe      	b.n	800e906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e908:	4b1e      	ldr	r3, [pc, #120]	; (800e984 <xPortStartScheduler+0x134>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	021b      	lsls	r3, r3, #8
 800e90e:	4a1d      	ldr	r2, [pc, #116]	; (800e984 <xPortStartScheduler+0x134>)
 800e910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e912:	4b1c      	ldr	r3, [pc, #112]	; (800e984 <xPortStartScheduler+0x134>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e91a:	4a1a      	ldr	r2, [pc, #104]	; (800e984 <xPortStartScheduler+0x134>)
 800e91c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	b2da      	uxtb	r2, r3
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e926:	4b18      	ldr	r3, [pc, #96]	; (800e988 <xPortStartScheduler+0x138>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4a17      	ldr	r2, [pc, #92]	; (800e988 <xPortStartScheduler+0x138>)
 800e92c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e932:	4b15      	ldr	r3, [pc, #84]	; (800e988 <xPortStartScheduler+0x138>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a14      	ldr	r2, [pc, #80]	; (800e988 <xPortStartScheduler+0x138>)
 800e938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e93c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e93e:	f000 f8dd 	bl	800eafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e942:	4b12      	ldr	r3, [pc, #72]	; (800e98c <xPortStartScheduler+0x13c>)
 800e944:	2200      	movs	r2, #0
 800e946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e948:	f000 f8fc 	bl	800eb44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e94c:	4b10      	ldr	r3, [pc, #64]	; (800e990 <xPortStartScheduler+0x140>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a0f      	ldr	r2, [pc, #60]	; (800e990 <xPortStartScheduler+0x140>)
 800e952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e958:	f7ff ff66 	bl	800e828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e95c:	f7ff f856 	bl	800da0c <vTaskSwitchContext>
	prvTaskExitError();
 800e960:	f7ff ff22 	bl	800e7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3718      	adds	r7, #24
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	e000ed00 	.word	0xe000ed00
 800e974:	410fc271 	.word	0x410fc271
 800e978:	410fc270 	.word	0x410fc270
 800e97c:	e000e400 	.word	0xe000e400
 800e980:	200012e4 	.word	0x200012e4
 800e984:	200012e8 	.word	0x200012e8
 800e988:	e000ed20 	.word	0xe000ed20
 800e98c:	20000150 	.word	0x20000150
 800e990:	e000ef34 	.word	0xe000ef34

0800e994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	607b      	str	r3, [r7, #4]
}
 800e9ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9ae:	4b0f      	ldr	r3, [pc, #60]	; (800e9ec <vPortEnterCritical+0x58>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	4a0d      	ldr	r2, [pc, #52]	; (800e9ec <vPortEnterCritical+0x58>)
 800e9b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9b8:	4b0c      	ldr	r3, [pc, #48]	; (800e9ec <vPortEnterCritical+0x58>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d10f      	bne.n	800e9e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9c0:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <vPortEnterCritical+0x5c>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	f383 8811 	msr	BASEPRI, r3
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	603b      	str	r3, [r7, #0]
}
 800e9dc:	bf00      	nop
 800e9de:	e7fe      	b.n	800e9de <vPortEnterCritical+0x4a>
	}
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr
 800e9ec:	20000150 	.word	0x20000150
 800e9f0:	e000ed04 	.word	0xe000ed04

0800e9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9fa:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <vPortExitCritical+0x50>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10a      	bne.n	800ea18 <vPortExitCritical+0x24>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	607b      	str	r3, [r7, #4]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ea18:	4b0a      	ldr	r3, [pc, #40]	; (800ea44 <vPortExitCritical+0x50>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	4a09      	ldr	r2, [pc, #36]	; (800ea44 <vPortExitCritical+0x50>)
 800ea20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea22:	4b08      	ldr	r3, [pc, #32]	; (800ea44 <vPortExitCritical+0x50>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d105      	bne.n	800ea36 <vPortExitCritical+0x42>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	f383 8811 	msr	BASEPRI, r3
}
 800ea34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea36:	bf00      	nop
 800ea38:	370c      	adds	r7, #12
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	20000150 	.word	0x20000150
	...

0800ea50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea50:	f3ef 8009 	mrs	r0, PSP
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	4b15      	ldr	r3, [pc, #84]	; (800eab0 <pxCurrentTCBConst>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	f01e 0f10 	tst.w	lr, #16
 800ea60:	bf08      	it	eq
 800ea62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6a:	6010      	str	r0, [r2, #0]
 800ea6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea74:	f380 8811 	msr	BASEPRI, r0
 800ea78:	f3bf 8f4f 	dsb	sy
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f7fe ffc4 	bl	800da0c <vTaskSwitchContext>
 800ea84:	f04f 0000 	mov.w	r0, #0
 800ea88:	f380 8811 	msr	BASEPRI, r0
 800ea8c:	bc09      	pop	{r0, r3}
 800ea8e:	6819      	ldr	r1, [r3, #0]
 800ea90:	6808      	ldr	r0, [r1, #0]
 800ea92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea96:	f01e 0f10 	tst.w	lr, #16
 800ea9a:	bf08      	it	eq
 800ea9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eaa0:	f380 8809 	msr	PSP, r0
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop
 800eaac:	f3af 8000 	nop.w

0800eab0 <pxCurrentTCBConst>:
 800eab0:	20000cb8 	.word	0x20000cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop

0800eab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac2:	f383 8811 	msr	BASEPRI, r3
 800eac6:	f3bf 8f6f 	isb	sy
 800eaca:	f3bf 8f4f 	dsb	sy
 800eace:	607b      	str	r3, [r7, #4]
}
 800ead0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ead2:	f7fe fee1 	bl	800d898 <xTaskIncrementTick>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d003      	beq.n	800eae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eadc:	4b06      	ldr	r3, [pc, #24]	; (800eaf8 <xPortSysTickHandler+0x40>)
 800eade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae2:	601a      	str	r2, [r3, #0]
 800eae4:	2300      	movs	r3, #0
 800eae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	f383 8811 	msr	BASEPRI, r3
}
 800eaee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eaf0:	bf00      	nop
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	e000ed04 	.word	0xe000ed04

0800eafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eafc:	b480      	push	{r7}
 800eafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eb00:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <vPortSetupTimerInterrupt+0x34>)
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eb06:	4b0b      	ldr	r3, [pc, #44]	; (800eb34 <vPortSetupTimerInterrupt+0x38>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <vPortSetupTimerInterrupt+0x3c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a0a      	ldr	r2, [pc, #40]	; (800eb3c <vPortSetupTimerInterrupt+0x40>)
 800eb12:	fba2 2303 	umull	r2, r3, r2, r3
 800eb16:	099b      	lsrs	r3, r3, #6
 800eb18:	4a09      	ldr	r2, [pc, #36]	; (800eb40 <vPortSetupTimerInterrupt+0x44>)
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb1e:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <vPortSetupTimerInterrupt+0x34>)
 800eb20:	2207      	movs	r2, #7
 800eb22:	601a      	str	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	e000e010 	.word	0xe000e010
 800eb34:	e000e018 	.word	0xe000e018
 800eb38:	20000144 	.word	0x20000144
 800eb3c:	10624dd3 	.word	0x10624dd3
 800eb40:	e000e014 	.word	0xe000e014

0800eb44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb54 <vPortEnableVFP+0x10>
 800eb48:	6801      	ldr	r1, [r0, #0]
 800eb4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb4e:	6001      	str	r1, [r0, #0]
 800eb50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb52:	bf00      	nop
 800eb54:	e000ed88 	.word	0xe000ed88

0800eb58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb5e:	f3ef 8305 	mrs	r3, IPSR
 800eb62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b0f      	cmp	r3, #15
 800eb68:	d914      	bls.n	800eb94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb6a:	4a17      	ldr	r2, [pc, #92]	; (800ebc8 <vPortValidateInterruptPriority+0x70>)
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4413      	add	r3, r2
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb74:	4b15      	ldr	r3, [pc, #84]	; (800ebcc <vPortValidateInterruptPriority+0x74>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	7afa      	ldrb	r2, [r7, #11]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d20a      	bcs.n	800eb94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb82:	f383 8811 	msr	BASEPRI, r3
 800eb86:	f3bf 8f6f 	isb	sy
 800eb8a:	f3bf 8f4f 	dsb	sy
 800eb8e:	607b      	str	r3, [r7, #4]
}
 800eb90:	bf00      	nop
 800eb92:	e7fe      	b.n	800eb92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <vPortValidateInterruptPriority+0x78>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb9c:	4b0d      	ldr	r3, [pc, #52]	; (800ebd4 <vPortValidateInterruptPriority+0x7c>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d90a      	bls.n	800ebba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	603b      	str	r3, [r7, #0]
}
 800ebb6:	bf00      	nop
 800ebb8:	e7fe      	b.n	800ebb8 <vPortValidateInterruptPriority+0x60>
	}
 800ebba:	bf00      	nop
 800ebbc:	3714      	adds	r7, #20
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	e000e3f0 	.word	0xe000e3f0
 800ebcc:	200012e4 	.word	0x200012e4
 800ebd0:	e000ed0c 	.word	0xe000ed0c
 800ebd4:	200012e8 	.word	0x200012e8

0800ebd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08a      	sub	sp, #40	; 0x28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ebe4:	f7fe fd9c 	bl	800d720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ebe8:	4b5b      	ldr	r3, [pc, #364]	; (800ed58 <pvPortMalloc+0x180>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ebf0:	f000 f920 	bl	800ee34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ebf4:	4b59      	ldr	r3, [pc, #356]	; (800ed5c <pvPortMalloc+0x184>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f040 8093 	bne.w	800ed28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d01d      	beq.n	800ec44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ec08:	2208      	movs	r2, #8
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f003 0307 	and.w	r3, r3, #7
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d014      	beq.n	800ec44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f023 0307 	bic.w	r3, r3, #7
 800ec20:	3308      	adds	r3, #8
 800ec22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f003 0307 	and.w	r3, r3, #7
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00a      	beq.n	800ec44 <pvPortMalloc+0x6c>
	__asm volatile
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	617b      	str	r3, [r7, #20]
}
 800ec40:	bf00      	nop
 800ec42:	e7fe      	b.n	800ec42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d06e      	beq.n	800ed28 <pvPortMalloc+0x150>
 800ec4a:	4b45      	ldr	r3, [pc, #276]	; (800ed60 <pvPortMalloc+0x188>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d869      	bhi.n	800ed28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ec54:	4b43      	ldr	r3, [pc, #268]	; (800ed64 <pvPortMalloc+0x18c>)
 800ec56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ec58:	4b42      	ldr	r3, [pc, #264]	; (800ed64 <pvPortMalloc+0x18c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec5e:	e004      	b.n	800ec6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d903      	bls.n	800ec7c <pvPortMalloc+0xa4>
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1f1      	bne.n	800ec60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec7c:	4b36      	ldr	r3, [pc, #216]	; (800ed58 <pvPortMalloc+0x180>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d050      	beq.n	800ed28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2208      	movs	r2, #8
 800ec8c:	4413      	add	r3, r2
 800ec8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	6a3b      	ldr	r3, [r7, #32]
 800ec96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	1ad2      	subs	r2, r2, r3
 800eca0:	2308      	movs	r3, #8
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d91f      	bls.n	800ece8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4413      	add	r3, r2
 800ecae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	f003 0307 	and.w	r3, r3, #7
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00a      	beq.n	800ecd0 <pvPortMalloc+0xf8>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	613b      	str	r3, [r7, #16]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	1ad2      	subs	r2, r2, r3
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ecdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ece2:	69b8      	ldr	r0, [r7, #24]
 800ece4:	f000 f908 	bl	800eef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ece8:	4b1d      	ldr	r3, [pc, #116]	; (800ed60 <pvPortMalloc+0x188>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	4a1b      	ldr	r2, [pc, #108]	; (800ed60 <pvPortMalloc+0x188>)
 800ecf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ecf6:	4b1a      	ldr	r3, [pc, #104]	; (800ed60 <pvPortMalloc+0x188>)
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <pvPortMalloc+0x190>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d203      	bcs.n	800ed0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ed02:	4b17      	ldr	r3, [pc, #92]	; (800ed60 <pvPortMalloc+0x188>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a18      	ldr	r2, [pc, #96]	; (800ed68 <pvPortMalloc+0x190>)
 800ed08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	685a      	ldr	r2, [r3, #4]
 800ed0e:	4b13      	ldr	r3, [pc, #76]	; (800ed5c <pvPortMalloc+0x184>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	431a      	orrs	r2, r3
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ed1e:	4b13      	ldr	r3, [pc, #76]	; (800ed6c <pvPortMalloc+0x194>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3301      	adds	r3, #1
 800ed24:	4a11      	ldr	r2, [pc, #68]	; (800ed6c <pvPortMalloc+0x194>)
 800ed26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ed28:	f7fe fd08 	bl	800d73c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00a      	beq.n	800ed4c <pvPortMalloc+0x174>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3a:	f383 8811 	msr	BASEPRI, r3
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	f3bf 8f4f 	dsb	sy
 800ed46:	60fb      	str	r3, [r7, #12]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <pvPortMalloc+0x172>
	return pvReturn;
 800ed4c:	69fb      	ldr	r3, [r7, #28]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3728      	adds	r7, #40	; 0x28
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20004ef4 	.word	0x20004ef4
 800ed5c:	20004f08 	.word	0x20004f08
 800ed60:	20004ef8 	.word	0x20004ef8
 800ed64:	20004eec 	.word	0x20004eec
 800ed68:	20004efc 	.word	0x20004efc
 800ed6c:	20004f00 	.word	0x20004f00

0800ed70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d04d      	beq.n	800ee1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed82:	2308      	movs	r3, #8
 800ed84:	425b      	negs	r3, r3
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	4413      	add	r3, r2
 800ed8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	4b24      	ldr	r3, [pc, #144]	; (800ee28 <vPortFree+0xb8>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4013      	ands	r3, r2
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d10a      	bne.n	800edb4 <vPortFree+0x44>
	__asm volatile
 800ed9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	60fb      	str	r3, [r7, #12]
}
 800edb0:	bf00      	nop
 800edb2:	e7fe      	b.n	800edb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <vPortFree+0x62>
	__asm volatile
 800edbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc0:	f383 8811 	msr	BASEPRI, r3
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	60bb      	str	r3, [r7, #8]
}
 800edce:	bf00      	nop
 800edd0:	e7fe      	b.n	800edd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	685a      	ldr	r2, [r3, #4]
 800edd6:	4b14      	ldr	r3, [pc, #80]	; (800ee28 <vPortFree+0xb8>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4013      	ands	r3, r2
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d01e      	beq.n	800ee1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d11a      	bne.n	800ee1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <vPortFree+0xb8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	43db      	mvns	r3, r3
 800edf2:	401a      	ands	r2, r3
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800edf8:	f7fe fc92 	bl	800d720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <vPortFree+0xbc>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4413      	add	r3, r2
 800ee06:	4a09      	ldr	r2, [pc, #36]	; (800ee2c <vPortFree+0xbc>)
 800ee08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ee0a:	6938      	ldr	r0, [r7, #16]
 800ee0c:	f000 f874 	bl	800eef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ee10:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <vPortFree+0xc0>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3301      	adds	r3, #1
 800ee16:	4a06      	ldr	r2, [pc, #24]	; (800ee30 <vPortFree+0xc0>)
 800ee18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ee1a:	f7fe fc8f 	bl	800d73c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ee1e:	bf00      	nop
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20004f08 	.word	0x20004f08
 800ee2c:	20004ef8 	.word	0x20004ef8
 800ee30:	20004f04 	.word	0x20004f04

0800ee34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ee3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ee3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ee40:	4b27      	ldr	r3, [pc, #156]	; (800eee0 <prvHeapInit+0xac>)
 800ee42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00c      	beq.n	800ee68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	3307      	adds	r3, #7
 800ee52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f023 0307 	bic.w	r3, r3, #7
 800ee5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	4a1f      	ldr	r2, [pc, #124]	; (800eee0 <prvHeapInit+0xac>)
 800ee64:	4413      	add	r3, r2
 800ee66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ee6c:	4a1d      	ldr	r2, [pc, #116]	; (800eee4 <prvHeapInit+0xb0>)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee72:	4b1c      	ldr	r3, [pc, #112]	; (800eee4 <prvHeapInit+0xb0>)
 800ee74:	2200      	movs	r2, #0
 800ee76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68ba      	ldr	r2, [r7, #8]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee80:	2208      	movs	r2, #8
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	1a9b      	subs	r3, r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f023 0307 	bic.w	r3, r3, #7
 800ee8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4a15      	ldr	r2, [pc, #84]	; (800eee8 <prvHeapInit+0xb4>)
 800ee94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee96:	4b14      	ldr	r3, [pc, #80]	; (800eee8 <prvHeapInit+0xb4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee9e:	4b12      	ldr	r3, [pc, #72]	; (800eee8 <prvHeapInit+0xb4>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2200      	movs	r2, #0
 800eea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	1ad2      	subs	r2, r2, r3
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eeb4:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <prvHeapInit+0xb4>)
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	4a0a      	ldr	r2, [pc, #40]	; (800eeec <prvHeapInit+0xb8>)
 800eec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	4a09      	ldr	r2, [pc, #36]	; (800eef0 <prvHeapInit+0xbc>)
 800eeca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eecc:	4b09      	ldr	r3, [pc, #36]	; (800eef4 <prvHeapInit+0xc0>)
 800eece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eed2:	601a      	str	r2, [r3, #0]
}
 800eed4:	bf00      	nop
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	200012ec 	.word	0x200012ec
 800eee4:	20004eec 	.word	0x20004eec
 800eee8:	20004ef4 	.word	0x20004ef4
 800eeec:	20004efc 	.word	0x20004efc
 800eef0:	20004ef8 	.word	0x20004ef8
 800eef4:	20004f08 	.word	0x20004f08

0800eef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ef00:	4b28      	ldr	r3, [pc, #160]	; (800efa4 <prvInsertBlockIntoFreeList+0xac>)
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	e002      	b.n	800ef0c <prvInsertBlockIntoFreeList+0x14>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d8f7      	bhi.n	800ef06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	4413      	add	r3, r2
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d108      	bne.n	800ef3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	441a      	add	r2, r3
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	441a      	add	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d118      	bne.n	800ef80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	4b15      	ldr	r3, [pc, #84]	; (800efa8 <prvInsertBlockIntoFreeList+0xb0>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d00d      	beq.n	800ef76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	685a      	ldr	r2, [r3, #4]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	441a      	add	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	e008      	b.n	800ef88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef76:	4b0c      	ldr	r3, [pc, #48]	; (800efa8 <prvInsertBlockIntoFreeList+0xb0>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	e003      	b.n	800ef88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d002      	beq.n	800ef96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef96:	bf00      	nop
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	20004eec 	.word	0x20004eec
 800efa8:	20004ef4 	.word	0x20004ef4

0800efac <_ICM20948_SelectUserBank>:
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, int userBankNum)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b08a      	sub	sp, #40	; 0x28
 800efb0:	af04      	add	r7, sp, #16
 800efb2:	60f8      	str	r0, [r7, #12]
 800efb4:	460b      	mov	r3, r1
 800efb6:	607a      	str	r2, [r7, #4]
 800efb8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800efba:	2300      	movs	r3, #0
 800efbc:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	011b      	lsls	r3, r3, #4
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800efc8:	7afb      	ldrb	r3, [r7, #11]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d101      	bne.n	800efd2 <_ICM20948_SelectUserBank+0x26>
 800efce:	2368      	movs	r3, #104	; 0x68
 800efd0:	e000      	b.n	800efd4 <_ICM20948_SelectUserBank+0x28>
 800efd2:	2369      	movs	r3, #105	; 0x69
 800efd4:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800efd6:	7dbb      	ldrb	r3, [r7, #22]
 800efd8:	b29b      	uxth	r3, r3
 800efda:	005b      	lsls	r3, r3, #1
 800efdc:	b299      	uxth	r1, r3
 800efde:	230a      	movs	r3, #10
 800efe0:	9302      	str	r3, [sp, #8]
 800efe2:	2301      	movs	r3, #1
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	f107 0315 	add.w	r3, r7, #21
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2301      	movs	r3, #1
 800efee:	227f      	movs	r2, #127	; 0x7f
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f7f9 f849 	bl	8008088 <HAL_I2C_Mem_Write>
 800eff6:	4603      	mov	r3, r0
 800eff8:	75fb      	strb	r3, [r7, #23]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800effa:	7dfb      	ldrb	r3, [r7, #23]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af04      	add	r7, sp, #16
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	4608      	mov	r0, r1
 800f00e:	4611      	mov	r1, r2
 800f010:	461a      	mov	r2, r3
 800f012:	4603      	mov	r3, r0
 800f014:	70fb      	strb	r3, [r7, #3]
 800f016:	460b      	mov	r3, r1
 800f018:	70bb      	strb	r3, [r7, #2]
 800f01a:	4613      	mov	r3, r2
 800f01c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800f01e:	2300      	movs	r3, #0
 800f020:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0) ? ICM20948__I2C_SLAVE_ADDRESS_1 : ICM20948__I2C_SLAVE_ADDRESS_2;
 800f022:	78fb      	ldrb	r3, [r7, #3]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <_ICM20948_WriteByte+0x28>
 800f028:	2368      	movs	r3, #104	; 0x68
 800f02a:	e000      	b.n	800f02e <_ICM20948_WriteByte+0x2a>
 800f02c:	2369      	movs	r3, #105	; 0x69
 800f02e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800f030:	7bbb      	ldrb	r3, [r7, #14]
 800f032:	b29b      	uxth	r3, r3
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	b299      	uxth	r1, r3
 800f038:	78bb      	ldrb	r3, [r7, #2]
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	230a      	movs	r3, #10
 800f03e:	9302      	str	r3, [sp, #8]
 800f040:	2301      	movs	r3, #1
 800f042:	9301      	str	r3, [sp, #4]
 800f044:	1c7b      	adds	r3, r7, #1
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	2301      	movs	r3, #1
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f7f9 f81c 	bl	8008088 <HAL_I2C_Mem_Write>
 800f050:	4603      	mov	r3, r0
 800f052:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800f054:	7bfb      	ldrb	r3, [r7, #15]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <ICM20948_init>:

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef *hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b084      	sub	sp, #16
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
 800f066:	4608      	mov	r0, r1
 800f068:	4611      	mov	r1, r2
 800f06a:	461a      	mov	r2, r3
 800f06c:	4603      	mov	r3, r0
 800f06e:	70fb      	strb	r3, [r7, #3]
 800f070:	460b      	mov	r3, r1
 800f072:	70bb      	strb	r3, [r7, #2]
 800f074:	4613      	mov	r3, r2
 800f076:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800f078:	2300      	movs	r3, #0
 800f07a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800f07c:	78fb      	ldrb	r3, [r7, #3]
 800f07e:	2200      	movs	r2, #0
 800f080:	4619      	mov	r1, r3
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7ff ff92 	bl	800efac <_ICM20948_SelectUserBank>
 800f088:	4603      	mov	r3, r0
 800f08a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800f08c:	78f9      	ldrb	r1, [r7, #3]
 800f08e:	2380      	movs	r3, #128	; 0x80
 800f090:	2206      	movs	r2, #6
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f7ff ffb6 	bl	800f004 <_ICM20948_WriteByte>
 800f098:	4603      	mov	r3, r0
 800f09a:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_RESET);

	HAL_Delay(200);
 800f09c:	20c8      	movs	r0, #200	; 0xc8
 800f09e:	f7f7 ff61 	bl	8006f64 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800f0a2:	78f9      	ldrb	r1, [r7, #3]
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	2206      	movs	r2, #6
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7ff ffab 	bl	800f004 <_ICM20948_WriteByte>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
		ICM20948_AUTO_SELECT_CLOCK);

	// enable sensors
	status = _ICM20948_WriteByte(
 800f0b2:	78f9      	ldrb	r1, [r7, #3]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	2207      	movs	r2, #7
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff ffa3 	bl	800f004 <_ICM20948_WriteByte>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	73fb      	strb	r3, [r7, #15]
		selectI2cAddress,
		ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
		ICM20948_ENABLE_SENSORS);
	// For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800f0c2:	78fb      	ldrb	r3, [r7, #3]
 800f0c4:	2202      	movs	r2, #2
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7ff ff6f 	bl	800efac <_ICM20948_SelectUserBank>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
		3 << GYRO_DLPFCFG_BIT | selectGyroSensitivity << BIT_1 | EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800f0d2:	78bb      	ldrb	r3, [r7, #2]
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	b25b      	sxtb	r3, r3
 800f0d8:	f043 0319 	orr.w	r3, r3, #25
 800f0dc:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	78f9      	ldrb	r1, [r7, #3]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ff8d 	bl	800f004 <_ICM20948_WriteByte>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800f0ee:	78f9      	ldrb	r1, [r7, #3]
 800f0f0:	2303      	movs	r3, #3
 800f0f2:	2253      	movs	r2, #83	; 0x53
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f7ff ff85 	bl	800f004 <_ICM20948_WriteByte>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
		0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800f0fe:	78f9      	ldrb	r1, [r7, #3]
 800f100:	2304      	movs	r3, #4
 800f102:	2200      	movs	r2, #0
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff ff7d 	bl	800f004 <_ICM20948_WriteByte>
 800f10a:	4603      	mov	r3, r0
 800f10c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
		0x03 << BIT_3 | selectAccelSensitivity << BIT_1 | 0x01 << BIT_0);
 800f10e:	787b      	ldrb	r3, [r7, #1]
 800f110:	005b      	lsls	r3, r3, #1
 800f112:	b25b      	sxtb	r3, r3
 800f114:	f043 0319 	orr.w	r3, r3, #25
 800f118:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	78f9      	ldrb	r1, [r7, #3]
 800f11e:	2214      	movs	r2, #20
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff ff6f 	bl	800f004 <_ICM20948_WriteByte>
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800f12a:	78f9      	ldrb	r1, [r7, #3]
 800f12c:	2304      	movs	r3, #4
 800f12e:	2211      	movs	r2, #17
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7ff ff67 	bl	800f004 <_ICM20948_WriteByte>
 800f136:	4603      	mov	r3, r0
 800f138:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
		0x04); // Don't understand how this works

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800f13a:	78fb      	ldrb	r3, [r7, #3]
 800f13c:	2200      	movs	r2, #0
 800f13e:	4619      	mov	r1, r3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7ff ff33 	bl	800efac <_ICM20948_SelectUserBank>
 800f146:	4603      	mov	r3, r0
 800f148:	73fb      	strb	r3, [r7, #15]
	//
	status = _ICM20948_WriteByte(
 800f14a:	78f9      	ldrb	r1, [r7, #3]
 800f14c:	2302      	movs	r3, #2
 800f14e:	220f      	movs	r2, #15
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7ff ff57 	bl	800f004 <_ICM20948_WriteByte>
 800f156:	4603      	mov	r3, r0
 800f158:	73fb      	strb	r3, [r7, #15]
		hi2c,
		selectI2cAddress,
		ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
		0x02); // Don't understand how this works

	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
 800f15a:	2208      	movs	r2, #8
 800f15c:	2131      	movs	r1, #49	; 0x31
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f806 	bl	800f170 <_AK09918_WriteByte>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
}
 800f168:	bf00      	nop
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <_AK09918_WriteByte>:

	return status;
}

HAL_StatusTypeDef _AK09918_WriteByte(I2C_HandleTypeDef *hi2c, uint8_t const registerAddress, uint8_t writeData)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af04      	add	r7, sp, #16
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	460b      	mov	r3, r1
 800f17a:	70fb      	strb	r3, [r7, #3]
 800f17c:	4613      	mov	r3, r2
 800f17e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	b29a      	uxth	r2, r3
 800f188:	230a      	movs	r3, #10
 800f18a:	9302      	str	r3, [sp, #8]
 800f18c:	2301      	movs	r3, #1
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	1cbb      	adds	r3, r7, #2
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	2301      	movs	r3, #1
 800f196:	2118      	movs	r1, #24
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f7f8 ff75 	bl	8008088 <HAL_I2C_Mem_Write>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_8BIT,
		&writeData,
		I2C_MEMADD_SIZE_8BIT,
		10);

	return status;
 800f1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	71fb      	strb	r3, [r7, #7]
 800f1b6:	e026      	b.n	800f206 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 800f1b8:	79fb      	ldrb	r3, [r7, #7]
 800f1ba:	3b50      	subs	r3, #80	; 0x50
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	2100      	movs	r1, #0
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 f82b 	bl	800f21c <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	f000 f827 	bl	800f21c <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	2010      	movs	r0, #16
 800f1d2:	f000 f823 	bl	800f21c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	71bb      	strb	r3, [r7, #6]
 800f1da:	e00d      	b.n	800f1f8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 800f1dc:	79ba      	ldrb	r2, [r7, #6]
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	490d      	ldr	r1, [pc, #52]	; (800f218 <OLED_Refresh_Gram+0x6c>)
 800f1e2:	00d2      	lsls	r2, r2, #3
 800f1e4:	440a      	add	r2, r1
 800f1e6:	4413      	add	r3, r2
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f000 f815 	bl	800f21c <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800f1f2:	79bb      	ldrb	r3, [r7, #6]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	71bb      	strb	r3, [r7, #6]
 800f1f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	daed      	bge.n	800f1dc <OLED_Refresh_Gram+0x30>
	for (i = 0; i < 8; i++)
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	3301      	adds	r3, #1
 800f204:	71fb      	strb	r3, [r7, #7]
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	2b07      	cmp	r3, #7
 800f20a:	d9d5      	bls.n	800f1b8 <OLED_Refresh_Gram+0xc>
	}
}
 800f20c:	bf00      	nop
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	20004f0c 	.word	0x20004f0c

0800f21c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	4603      	mov	r3, r0
 800f224:	460a      	mov	r2, r1
 800f226:	71fb      	strb	r3, [r7, #7]
 800f228:	4613      	mov	r3, r2
 800f22a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if (cmd)
 800f22c:	79bb      	ldrb	r3, [r7, #6]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d006      	beq.n	800f240 <OLED_WR_Byte+0x24>
		OLED_RS_Set();
 800f232:	2201      	movs	r2, #1
 800f234:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f238:	481c      	ldr	r0, [pc, #112]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f23a:	f7f8 fdc7 	bl	8007dcc <HAL_GPIO_WritePin>
 800f23e:	e005      	b.n	800f24c <OLED_WR_Byte+0x30>
	else
		OLED_RS_Clr();
 800f240:	2200      	movs	r2, #0
 800f242:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f246:	4819      	ldr	r0, [pc, #100]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f248:	f7f8 fdc0 	bl	8007dcc <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800f24c:	2300      	movs	r3, #0
 800f24e:	73fb      	strb	r3, [r7, #15]
 800f250:	e01e      	b.n	800f290 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800f252:	2200      	movs	r2, #0
 800f254:	2120      	movs	r1, #32
 800f256:	4815      	ldr	r0, [pc, #84]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f258:	f7f8 fdb8 	bl	8007dcc <HAL_GPIO_WritePin>
		if (dat & 0x80)
 800f25c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f260:	2b00      	cmp	r3, #0
 800f262:	da05      	bge.n	800f270 <OLED_WR_Byte+0x54>
			OLED_SDIN_Set();
 800f264:	2201      	movs	r2, #1
 800f266:	2140      	movs	r1, #64	; 0x40
 800f268:	4810      	ldr	r0, [pc, #64]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f26a:	f7f8 fdaf 	bl	8007dcc <HAL_GPIO_WritePin>
 800f26e:	e004      	b.n	800f27a <OLED_WR_Byte+0x5e>
		else
			OLED_SDIN_Clr();
 800f270:	2200      	movs	r2, #0
 800f272:	2140      	movs	r1, #64	; 0x40
 800f274:	480d      	ldr	r0, [pc, #52]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f276:	f7f8 fda9 	bl	8007dcc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800f27a:	2201      	movs	r2, #1
 800f27c:	2120      	movs	r1, #32
 800f27e:	480b      	ldr	r0, [pc, #44]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f280:	f7f8 fda4 	bl	8007dcc <HAL_GPIO_WritePin>
		dat <<= 1;
 800f284:	79fb      	ldrb	r3, [r7, #7]
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 8; i++)
 800f28a:	7bfb      	ldrb	r3, [r7, #15]
 800f28c:	3301      	adds	r3, #1
 800f28e:	73fb      	strb	r3, [r7, #15]
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	2b07      	cmp	r3, #7
 800f294:	d9dd      	bls.n	800f252 <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800f296:	2201      	movs	r2, #1
 800f298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f29c:	4803      	ldr	r0, [pc, #12]	; (800f2ac <OLED_WR_Byte+0x90>)
 800f29e:	f7f8 fd95 	bl	8007dcc <HAL_GPIO_WritePin>
}
 800f2a2:	bf00      	nop
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	40021000 	.word	0x40021000

0800f2b0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for (i = 0; i < 8; i++)
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	71fb      	strb	r3, [r7, #7]
 800f2ba:	e014      	b.n	800f2e6 <OLED_Clear+0x36>
		for (n = 0; n < 128; n++)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	71bb      	strb	r3, [r7, #6]
 800f2c0:	e00a      	b.n	800f2d8 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800f2c2:	79ba      	ldrb	r2, [r7, #6]
 800f2c4:	79fb      	ldrb	r3, [r7, #7]
 800f2c6:	490c      	ldr	r1, [pc, #48]	; (800f2f8 <OLED_Clear+0x48>)
 800f2c8:	00d2      	lsls	r2, r2, #3
 800f2ca:	440a      	add	r2, r1
 800f2cc:	4413      	add	r3, r2
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	701a      	strb	r2, [r3, #0]
		for (n = 0; n < 128; n++)
 800f2d2:	79bb      	ldrb	r3, [r7, #6]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	71bb      	strb	r3, [r7, #6]
 800f2d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	daf0      	bge.n	800f2c2 <OLED_Clear+0x12>
	for (i = 0; i < 8; i++)
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	71fb      	strb	r3, [r7, #7]
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	2b07      	cmp	r3, #7
 800f2ea:	d9e7      	bls.n	800f2bc <OLED_Clear+0xc>
	OLED_Refresh_Gram(); // Refresh
 800f2ec:	f7ff ff5e 	bl	800f1ac <OLED_Refresh_Gram>
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20004f0c 	.word	0x20004f0c

0800f2fc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	4603      	mov	r3, r0
 800f304:	71fb      	strb	r3, [r7, #7]
 800f306:	460b      	mov	r3, r1
 800f308:	71bb      	strb	r3, [r7, #6]
 800f30a:	4613      	mov	r3, r2
 800f30c:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800f30e:	2300      	movs	r3, #0
 800f310:	73fb      	strb	r3, [r7, #15]
	if (x > 127 || y > 63)
 800f312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f316:	2b00      	cmp	r3, #0
 800f318:	db41      	blt.n	800f39e <OLED_DrawPoint+0xa2>
 800f31a:	79bb      	ldrb	r3, [r7, #6]
 800f31c:	2b3f      	cmp	r3, #63	; 0x3f
 800f31e:	d83e      	bhi.n	800f39e <OLED_DrawPoint+0xa2>
		return; // Out of reach
	pos = 7 - y / 8;
 800f320:	79bb      	ldrb	r3, [r7, #6]
 800f322:	08db      	lsrs	r3, r3, #3
 800f324:	b2db      	uxtb	r3, r3
 800f326:	f1c3 0307 	rsb	r3, r3, #7
 800f32a:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 800f32c:	79bb      	ldrb	r3, [r7, #6]
 800f32e:	f003 0307 	and.w	r3, r3, #7
 800f332:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7 - bx);
 800f334:	7b7b      	ldrb	r3, [r7, #13]
 800f336:	f1c3 0307 	rsb	r3, r3, #7
 800f33a:	2201      	movs	r2, #1
 800f33c:	fa02 f303 	lsl.w	r3, r2, r3
 800f340:	73fb      	strb	r3, [r7, #15]
	if (t)
 800f342:	797b      	ldrb	r3, [r7, #5]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d012      	beq.n	800f36e <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800f348:	79fa      	ldrb	r2, [r7, #7]
 800f34a:	7bbb      	ldrb	r3, [r7, #14]
 800f34c:	4917      	ldr	r1, [pc, #92]	; (800f3ac <OLED_DrawPoint+0xb0>)
 800f34e:	00d2      	lsls	r2, r2, #3
 800f350:	440a      	add	r2, r1
 800f352:	4413      	add	r3, r2
 800f354:	7818      	ldrb	r0, [r3, #0]
 800f356:	79fa      	ldrb	r2, [r7, #7]
 800f358:	7bbb      	ldrb	r3, [r7, #14]
 800f35a:	7bf9      	ldrb	r1, [r7, #15]
 800f35c:	4301      	orrs	r1, r0
 800f35e:	b2c8      	uxtb	r0, r1
 800f360:	4912      	ldr	r1, [pc, #72]	; (800f3ac <OLED_DrawPoint+0xb0>)
 800f362:	00d2      	lsls	r2, r2, #3
 800f364:	440a      	add	r2, r1
 800f366:	4413      	add	r3, r2
 800f368:	4602      	mov	r2, r0
 800f36a:	701a      	strb	r2, [r3, #0]
 800f36c:	e018      	b.n	800f3a0 <OLED_DrawPoint+0xa4>
	else
		OLED_GRAM[x][pos] &= ~temp;
 800f36e:	79fa      	ldrb	r2, [r7, #7]
 800f370:	7bbb      	ldrb	r3, [r7, #14]
 800f372:	490e      	ldr	r1, [pc, #56]	; (800f3ac <OLED_DrawPoint+0xb0>)
 800f374:	00d2      	lsls	r2, r2, #3
 800f376:	440a      	add	r2, r1
 800f378:	4413      	add	r3, r2
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	b25a      	sxtb	r2, r3
 800f37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f382:	43db      	mvns	r3, r3
 800f384:	b25b      	sxtb	r3, r3
 800f386:	4013      	ands	r3, r2
 800f388:	b259      	sxtb	r1, r3
 800f38a:	79fa      	ldrb	r2, [r7, #7]
 800f38c:	7bbb      	ldrb	r3, [r7, #14]
 800f38e:	b2c8      	uxtb	r0, r1
 800f390:	4906      	ldr	r1, [pc, #24]	; (800f3ac <OLED_DrawPoint+0xb0>)
 800f392:	00d2      	lsls	r2, r2, #3
 800f394:	440a      	add	r2, r1
 800f396:	4413      	add	r3, r2
 800f398:	4602      	mov	r2, r0
 800f39a:	701a      	strb	r2, [r3, #0]
 800f39c:	e000      	b.n	800f3a0 <OLED_DrawPoint+0xa4>
		return; // Out of reach
 800f39e:	bf00      	nop
}
 800f3a0:	3714      	adds	r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
 800f3aa:	bf00      	nop
 800f3ac:	20004f0c 	.word	0x20004f0c

0800f3b0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode)
{
 800f3b0:	b590      	push	{r4, r7, lr}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	4608      	mov	r0, r1
 800f3ba:	4611      	mov	r1, r2
 800f3bc:	461a      	mov	r2, r3
 800f3be:	4623      	mov	r3, r4
 800f3c0:	71fb      	strb	r3, [r7, #7]
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	71bb      	strb	r3, [r7, #6]
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	717b      	strb	r3, [r7, #5]
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800f3ce:	79bb      	ldrb	r3, [r7, #6]
 800f3d0:	733b      	strb	r3, [r7, #12]
	chr = chr - ' ';
 800f3d2:	797b      	ldrb	r3, [r7, #5]
 800f3d4:	3b20      	subs	r3, #32
 800f3d6:	717b      	strb	r3, [r7, #5]
	for (t = 0; t < size; t++)
 800f3d8:	2300      	movs	r3, #0
 800f3da:	73bb      	strb	r3, [r7, #14]
 800f3dc:	e04d      	b.n	800f47a <OLED_ShowChar+0xca>
	{
		if (size == 12)
 800f3de:	793b      	ldrb	r3, [r7, #4]
 800f3e0:	2b0c      	cmp	r3, #12
 800f3e2:	d10b      	bne.n	800f3fc <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t]; // 1206 Size
 800f3e4:	797a      	ldrb	r2, [r7, #5]
 800f3e6:	7bb9      	ldrb	r1, [r7, #14]
 800f3e8:	4828      	ldr	r0, [pc, #160]	; (800f48c <OLED_ShowChar+0xdc>)
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	005b      	lsls	r3, r3, #1
 800f3ee:	4413      	add	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4403      	add	r3, r0
 800f3f4:	440b      	add	r3, r1
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	73fb      	strb	r3, [r7, #15]
 800f3fa:	e007      	b.n	800f40c <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t]; // 1608 Size
 800f3fc:	797a      	ldrb	r2, [r7, #5]
 800f3fe:	7bbb      	ldrb	r3, [r7, #14]
 800f400:	4923      	ldr	r1, [pc, #140]	; (800f490 <OLED_ShowChar+0xe0>)
 800f402:	0112      	lsls	r2, r2, #4
 800f404:	440a      	add	r2, r1
 800f406:	4413      	add	r3, r2
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	73fb      	strb	r3, [r7, #15]
		for (t1 = 0; t1 < 8; t1++)
 800f40c:	2300      	movs	r3, #0
 800f40e:	737b      	strb	r3, [r7, #13]
 800f410:	e02d      	b.n	800f46e <OLED_ShowChar+0xbe>
		{
			if (temp & 0x80)
 800f412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f416:	2b00      	cmp	r3, #0
 800f418:	da07      	bge.n	800f42a <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800f41a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f41e:	79b9      	ldrb	r1, [r7, #6]
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	4618      	mov	r0, r3
 800f424:	f7ff ff6a 	bl	800f2fc <OLED_DrawPoint>
 800f428:	e00c      	b.n	800f444 <OLED_ShowChar+0x94>
			else
				OLED_DrawPoint(x, y, !mode);
 800f42a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	bf0c      	ite	eq
 800f432:	2301      	moveq	r3, #1
 800f434:	2300      	movne	r3, #0
 800f436:	b2db      	uxtb	r3, r3
 800f438:	461a      	mov	r2, r3
 800f43a:	79b9      	ldrb	r1, [r7, #6]
 800f43c:	79fb      	ldrb	r3, [r7, #7]
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff ff5c 	bl	800f2fc <OLED_DrawPoint>
			temp <<= 1;
 800f444:	7bfb      	ldrb	r3, [r7, #15]
 800f446:	005b      	lsls	r3, r3, #1
 800f448:	73fb      	strb	r3, [r7, #15]
			y++;
 800f44a:	79bb      	ldrb	r3, [r7, #6]
 800f44c:	3301      	adds	r3, #1
 800f44e:	71bb      	strb	r3, [r7, #6]
			if ((y - y0) == size)
 800f450:	79ba      	ldrb	r2, [r7, #6]
 800f452:	7b3b      	ldrb	r3, [r7, #12]
 800f454:	1ad2      	subs	r2, r2, r3
 800f456:	793b      	ldrb	r3, [r7, #4]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d105      	bne.n	800f468 <OLED_ShowChar+0xb8>
			{
				y = y0;
 800f45c:	7b3b      	ldrb	r3, [r7, #12]
 800f45e:	71bb      	strb	r3, [r7, #6]
				x++;
 800f460:	79fb      	ldrb	r3, [r7, #7]
 800f462:	3301      	adds	r3, #1
 800f464:	71fb      	strb	r3, [r7, #7]
				break;
 800f466:	e005      	b.n	800f474 <OLED_ShowChar+0xc4>
		for (t1 = 0; t1 < 8; t1++)
 800f468:	7b7b      	ldrb	r3, [r7, #13]
 800f46a:	3301      	adds	r3, #1
 800f46c:	737b      	strb	r3, [r7, #13]
 800f46e:	7b7b      	ldrb	r3, [r7, #13]
 800f470:	2b07      	cmp	r3, #7
 800f472:	d9ce      	bls.n	800f412 <OLED_ShowChar+0x62>
	for (t = 0; t < size; t++)
 800f474:	7bbb      	ldrb	r3, [r7, #14]
 800f476:	3301      	adds	r3, #1
 800f478:	73bb      	strb	r3, [r7, #14]
 800f47a:	7bba      	ldrb	r2, [r7, #14]
 800f47c:	793b      	ldrb	r3, [r7, #4]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d3ad      	bcc.n	800f3de <OLED_ShowChar+0x2e>
			}
		}
	}
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd90      	pop	{r4, r7, pc}
 800f48c:	080103a0 	.word	0x080103a0
 800f490:	08010814 	.word	0x08010814

0800f494 <oled_pow>:

uint32_t oled_pow(uint8_t m, uint8_t n)
{
 800f494:	b480      	push	{r7}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	460a      	mov	r2, r1
 800f49e:	71fb      	strb	r3, [r7, #7]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	60fb      	str	r3, [r7, #12]
	while (n--)
 800f4a8:	e004      	b.n	800f4b4 <oled_pow+0x20>
		result *= m;
 800f4aa:	79fa      	ldrb	r2, [r7, #7]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	fb02 f303 	mul.w	r3, r2, r3
 800f4b2:	60fb      	str	r3, [r7, #12]
	while (n--)
 800f4b4:	79bb      	ldrb	r3, [r7, #6]
 800f4b6:	1e5a      	subs	r2, r3, #1
 800f4b8:	71ba      	strb	r2, [r7, #6]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d1f5      	bne.n	800f4aa <oled_pow+0x16>
	return result;
 800f4be:	68fb      	ldr	r3, [r7, #12]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3714      	adds	r7, #20
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <OLED_ShowNumber>:

/**************************************************************************
Show Two Number
**************************************************************************/
void OLED_ShowNumber(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size)
{
 800f4cc:	b590      	push	{r4, r7, lr}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af02      	add	r7, sp, #8
 800f4d2:	603a      	str	r2, [r7, #0]
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	71fb      	strb	r3, [r7, #7]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	71bb      	strb	r3, [r7, #6]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	717b      	strb	r3, [r7, #5]
	uint8_t t, temp;
	uint8_t enshow = 0;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	73bb      	strb	r3, [r7, #14]
	for (t = 0; t < len; t++)
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	73fb      	strb	r3, [r7, #15]
 800f4ea:	e051      	b.n	800f590 <OLED_ShowNumber+0xc4>
	{
		temp = (num / oled_pow(10, len - t - 1)) % 10;
 800f4ec:	797a      	ldrb	r2, [r7, #5]
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	200a      	movs	r0, #10
 800f4fc:	f7ff ffca 	bl	800f494 <oled_pow>
 800f500:	4602      	mov	r2, r0
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	fbb3 f1f2 	udiv	r1, r3, r2
 800f508:	4b26      	ldr	r3, [pc, #152]	; (800f5a4 <OLED_ShowNumber+0xd8>)
 800f50a:	fba3 2301 	umull	r2, r3, r3, r1
 800f50e:	08da      	lsrs	r2, r3, #3
 800f510:	4613      	mov	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	1aca      	subs	r2, r1, r3
 800f51a:	4613      	mov	r3, r2
 800f51c:	737b      	strb	r3, [r7, #13]
		if (enshow == 0 && t < (len - 1))
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d11d      	bne.n	800f560 <OLED_ShowNumber+0x94>
 800f524:	7bfa      	ldrb	r2, [r7, #15]
 800f526:	797b      	ldrb	r3, [r7, #5]
 800f528:	3b01      	subs	r3, #1
 800f52a:	429a      	cmp	r2, r3
 800f52c:	da18      	bge.n	800f560 <OLED_ShowNumber+0x94>
		{
			if (temp == 0)
 800f52e:	7b7b      	ldrb	r3, [r7, #13]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d113      	bne.n	800f55c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x + (size / 2) * t, y, ' ', size, 1);
 800f534:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f538:	085b      	lsrs	r3, r3, #1
 800f53a:	b2db      	uxtb	r3, r3
 800f53c:	7bfa      	ldrb	r2, [r7, #15]
 800f53e:	fb12 f303 	smulbb	r3, r2, r3
 800f542:	b2da      	uxtb	r2, r3
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	4413      	add	r3, r2
 800f548:	b2d8      	uxtb	r0, r3
 800f54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f54e:	79b9      	ldrb	r1, [r7, #6]
 800f550:	2201      	movs	r2, #1
 800f552:	9200      	str	r2, [sp, #0]
 800f554:	2220      	movs	r2, #32
 800f556:	f7ff ff2b 	bl	800f3b0 <OLED_ShowChar>
				continue;
 800f55a:	e016      	b.n	800f58a <OLED_ShowNumber+0xbe>
			}
			else
				enshow = 1;
 800f55c:	2301      	movs	r3, #1
 800f55e:	73bb      	strb	r3, [r7, #14]
		}
		OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size, 1);
 800f560:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f564:	085b      	lsrs	r3, r3, #1
 800f566:	b2db      	uxtb	r3, r3
 800f568:	7bfa      	ldrb	r2, [r7, #15]
 800f56a:	fb12 f303 	smulbb	r3, r2, r3
 800f56e:	b2da      	uxtb	r2, r3
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	4413      	add	r3, r2
 800f574:	b2d8      	uxtb	r0, r3
 800f576:	7b7b      	ldrb	r3, [r7, #13]
 800f578:	3330      	adds	r3, #48	; 0x30
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f580:	79b9      	ldrb	r1, [r7, #6]
 800f582:	2401      	movs	r4, #1
 800f584:	9400      	str	r4, [sp, #0]
 800f586:	f7ff ff13 	bl	800f3b0 <OLED_ShowChar>
	for (t = 0; t < len; t++)
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	3301      	adds	r3, #1
 800f58e:	73fb      	strb	r3, [r7, #15]
 800f590:	7bfa      	ldrb	r2, [r7, #15]
 800f592:	797b      	ldrb	r3, [r7, #5]
 800f594:	429a      	cmp	r2, r3
 800f596:	d3a9      	bcc.n	800f4ec <OLED_ShowNumber+0x20>
	}
}
 800f598:	bf00      	nop
 800f59a:	bf00      	nop
 800f59c:	3714      	adds	r7, #20
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd90      	pop	{r4, r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	cccccccd 	.word	0xcccccccd

0800f5a8 <OLED_ShowString>:
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af02      	add	r7, sp, #8
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	603a      	str	r2, [r7, #0]
 800f5b2:	71fb      	strb	r3, [r7, #7]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
	while (*p != '\0')
 800f5b8:	e01f      	b.n	800f5fa <OLED_ShowString+0x52>
	{
		if (x > MAX_CHAR_POSX)
 800f5ba:	79fb      	ldrb	r3, [r7, #7]
 800f5bc:	2b7a      	cmp	r3, #122	; 0x7a
 800f5be:	d904      	bls.n	800f5ca <OLED_ShowString+0x22>
		{
			x = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	71fb      	strb	r3, [r7, #7]
			y += 16;
 800f5c4:	79bb      	ldrb	r3, [r7, #6]
 800f5c6:	3310      	adds	r3, #16
 800f5c8:	71bb      	strb	r3, [r7, #6]
		}
		if (y > MAX_CHAR_POSY)
 800f5ca:	79bb      	ldrb	r3, [r7, #6]
 800f5cc:	2b3a      	cmp	r3, #58	; 0x3a
 800f5ce:	d905      	bls.n	800f5dc <OLED_ShowString+0x34>
		{
			y = x = 0;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	71fb      	strb	r3, [r7, #7]
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	71bb      	strb	r3, [r7, #6]
			OLED_Clear();
 800f5d8:	f7ff fe6a 	bl	800f2b0 <OLED_Clear>
		}
		OLED_ShowChar(x, y, *p, 12, 1);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	79b9      	ldrb	r1, [r7, #6]
 800f5e2:	79f8      	ldrb	r0, [r7, #7]
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	230c      	movs	r3, #12
 800f5ea:	f7ff fee1 	bl	800f3b0 <OLED_ShowChar>
		x += 8;
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	3308      	adds	r3, #8
 800f5f2:	71fb      	strb	r3, [r7, #7]
		p++;
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	603b      	str	r3, [r7, #0]
	while (*p != '\0')
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1db      	bne.n	800f5ba <OLED_ShowString+0x12>
	}
}
 800f602:	bf00      	nop
 800f604:	bf00      	nop
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <OLED_Init>:
		OLED_ShowChar(x + (size / 2) * (t + z_len) + 5, y, temp + '0', size, mode);
	}
}

void OLED_Init(void)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();		   // Enable access to the RTC and Backup Register
 800f610:	f7f9 fbb6 	bl	8008d80 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); // turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800f614:	4b41      	ldr	r3, [pc, #260]	; (800f71c <OLED_Init+0x110>)
 800f616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f618:	4a40      	ldr	r2, [pc, #256]	; (800f71c <OLED_Init+0x110>)
 800f61a:	f023 0301 	bic.w	r3, r3, #1
 800f61e:	6713      	str	r3, [r2, #112]	; 0x70
 800f620:	4b3e      	ldr	r3, [pc, #248]	; (800f71c <OLED_Init+0x110>)
 800f622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f624:	4a3d      	ldr	r2, [pc, #244]	; (800f71c <OLED_Init+0x110>)
 800f626:	f023 0304 	bic.w	r3, r3, #4
 800f62a:	6713      	str	r3, [r2, #112]	; 0x70
									   // LSE oscillator switch off to let PC13 PC14 PC15 be IO

	HAL_PWR_DisableBkUpAccess();
 800f62c:	f7f9 fbbc 	bl	8008da8 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800f630:	2200      	movs	r2, #0
 800f632:	2180      	movs	r1, #128	; 0x80
 800f634:	483a      	ldr	r0, [pc, #232]	; (800f720 <OLED_Init+0x114>)
 800f636:	f7f8 fbc9 	bl	8007dcc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800f63a:	2064      	movs	r0, #100	; 0x64
 800f63c:	f7f7 fc92 	bl	8006f64 <HAL_Delay>
	OLED_RST_Set();
 800f640:	2201      	movs	r2, #1
 800f642:	2180      	movs	r1, #128	; 0x80
 800f644:	4836      	ldr	r0, [pc, #216]	; (800f720 <OLED_Init+0x114>)
 800f646:	f7f8 fbc1 	bl	8007dcc <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD); // Off Display
 800f64a:	2100      	movs	r1, #0
 800f64c:	20ae      	movs	r0, #174	; 0xae
 800f64e:	f7ff fde5 	bl	800f21c <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD); // Set Oscillator Division
 800f652:	2100      	movs	r1, #0
 800f654:	20d5      	movs	r0, #213	; 0xd5
 800f656:	f7ff fde1 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);	  //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800f65a:	2100      	movs	r1, #0
 800f65c:	2050      	movs	r0, #80	; 0x50
 800f65e:	f7ff fddd 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD); // multiplex ratio
 800f662:	2100      	movs	r1, #0
 800f664:	20a8      	movs	r0, #168	; 0xa8
 800f666:	f7ff fdd9 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD); // duty = 0X3F(1/64)
 800f66a:	2100      	movs	r1, #0
 800f66c:	203f      	movs	r0, #63	; 0x3f
 800f66e:	f7ff fdd5 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD); // set display offset
 800f672:	2100      	movs	r1, #0
 800f674:	20d3      	movs	r0, #211	; 0xd3
 800f676:	f7ff fdd1 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD); // 0
 800f67a:	2100      	movs	r1, #0
 800f67c:	2000      	movs	r0, #0
 800f67e:	f7ff fdcd 	bl	800f21c <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD); // set display start line [5:0]- from 0-63. RESET
 800f682:	2100      	movs	r1, #0
 800f684:	2040      	movs	r0, #64	; 0x40
 800f686:	f7ff fdc9 	bl	800f21c <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD); // Set charge pump
 800f68a:	2100      	movs	r1, #0
 800f68c:	208d      	movs	r0, #141	; 0x8d
 800f68e:	f7ff fdc5 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); // Enable Charge Pump
 800f692:	2100      	movs	r1, #0
 800f694:	2014      	movs	r0, #20
 800f696:	f7ff fdc1 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD); // Set Memory Addressing Mode
 800f69a:	2100      	movs	r1, #0
 800f69c:	2020      	movs	r0, #32
 800f69e:	f7ff fdbd 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD); // Page Addressing Mode (RESET)
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	2002      	movs	r0, #2
 800f6a6:	f7ff fdb9 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD); // Set segment remap, bit0:0,0->0;1,0->127;
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	20a1      	movs	r0, #161	; 0xa1
 800f6ae:	f7ff fdb5 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD); // Set COM Output Scan Direction
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	20c0      	movs	r0, #192	; 0xc0
 800f6b6:	f7ff fdb1 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD); // Set COM Pins
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	20da      	movs	r0, #218	; 0xda
 800f6be:	f7ff fdad 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD); //[5:4] setting
 800f6c2:	2100      	movs	r1, #0
 800f6c4:	2012      	movs	r0, #18
 800f6c6:	f7ff fda9 	bl	800f21c <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD); // Contrast Control
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	2081      	movs	r0, #129	; 0x81
 800f6ce:	f7ff fda5 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD); // 1~256; Default: 0X7F
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	20ef      	movs	r0, #239	; 0xef
 800f6d6:	f7ff fda1 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD); // Set Pre-charge Period
 800f6da:	2100      	movs	r1, #0
 800f6dc:	20d9      	movs	r0, #217	; 0xd9
 800f6de:	f7ff fd9d 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	20f1      	movs	r0, #241	; 0xf1
 800f6e6:	f7ff fd99 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD); // Set VCOMH
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	20db      	movs	r0, #219	; 0xdb
 800f6ee:	f7ff fd95 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	2030      	movs	r0, #48	; 0x30
 800f6f6:	f7ff fd91 	bl	800f21c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD); // Enable display outputs according to the GDDRAM contents
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	20a4      	movs	r0, #164	; 0xa4
 800f6fe:	f7ff fd8d 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD); // Set normal display
 800f702:	2100      	movs	r1, #0
 800f704:	20a6      	movs	r0, #166	; 0xa6
 800f706:	f7ff fd89 	bl	800f21c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD); // DISPLAY ON
 800f70a:	2100      	movs	r1, #0
 800f70c:	20af      	movs	r0, #175	; 0xaf
 800f70e:	f7ff fd85 	bl	800f21c <OLED_WR_Byte>
	OLED_Clear();
 800f712:	f7ff fdcd 	bl	800f2b0 <OLED_Clear>
 800f716:	bf00      	nop
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	40023800 	.word	0x40023800
 800f720:	40021000 	.word	0x40021000

0800f724 <sniprintf>:
 800f724:	b40c      	push	{r2, r3}
 800f726:	b530      	push	{r4, r5, lr}
 800f728:	4b17      	ldr	r3, [pc, #92]	; (800f788 <sniprintf+0x64>)
 800f72a:	1e0c      	subs	r4, r1, #0
 800f72c:	681d      	ldr	r5, [r3, #0]
 800f72e:	b09d      	sub	sp, #116	; 0x74
 800f730:	da08      	bge.n	800f744 <sniprintf+0x20>
 800f732:	238b      	movs	r3, #139	; 0x8b
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f73a:	b01d      	add	sp, #116	; 0x74
 800f73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f740:	b002      	add	sp, #8
 800f742:	4770      	bx	lr
 800f744:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f748:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f74c:	bf14      	ite	ne
 800f74e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f752:	4623      	moveq	r3, r4
 800f754:	9304      	str	r3, [sp, #16]
 800f756:	9307      	str	r3, [sp, #28]
 800f758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f75c:	9002      	str	r0, [sp, #8]
 800f75e:	9006      	str	r0, [sp, #24]
 800f760:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f764:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f766:	ab21      	add	r3, sp, #132	; 0x84
 800f768:	a902      	add	r1, sp, #8
 800f76a:	4628      	mov	r0, r5
 800f76c:	9301      	str	r3, [sp, #4]
 800f76e:	f000 f8a9 	bl	800f8c4 <_svfiprintf_r>
 800f772:	1c43      	adds	r3, r0, #1
 800f774:	bfbc      	itt	lt
 800f776:	238b      	movlt	r3, #139	; 0x8b
 800f778:	602b      	strlt	r3, [r5, #0]
 800f77a:	2c00      	cmp	r4, #0
 800f77c:	d0dd      	beq.n	800f73a <sniprintf+0x16>
 800f77e:	9b02      	ldr	r3, [sp, #8]
 800f780:	2200      	movs	r2, #0
 800f782:	701a      	strb	r2, [r3, #0]
 800f784:	e7d9      	b.n	800f73a <sniprintf+0x16>
 800f786:	bf00      	nop
 800f788:	200001a0 	.word	0x200001a0

0800f78c <memset>:
 800f78c:	4402      	add	r2, r0
 800f78e:	4603      	mov	r3, r0
 800f790:	4293      	cmp	r3, r2
 800f792:	d100      	bne.n	800f796 <memset+0xa>
 800f794:	4770      	bx	lr
 800f796:	f803 1b01 	strb.w	r1, [r3], #1
 800f79a:	e7f9      	b.n	800f790 <memset+0x4>

0800f79c <__errno>:
 800f79c:	4b01      	ldr	r3, [pc, #4]	; (800f7a4 <__errno+0x8>)
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	200001a0 	.word	0x200001a0

0800f7a8 <__libc_init_array>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	4d0d      	ldr	r5, [pc, #52]	; (800f7e0 <__libc_init_array+0x38>)
 800f7ac:	4c0d      	ldr	r4, [pc, #52]	; (800f7e4 <__libc_init_array+0x3c>)
 800f7ae:	1b64      	subs	r4, r4, r5
 800f7b0:	10a4      	asrs	r4, r4, #2
 800f7b2:	2600      	movs	r6, #0
 800f7b4:	42a6      	cmp	r6, r4
 800f7b6:	d109      	bne.n	800f7cc <__libc_init_array+0x24>
 800f7b8:	4d0b      	ldr	r5, [pc, #44]	; (800f7e8 <__libc_init_array+0x40>)
 800f7ba:	4c0c      	ldr	r4, [pc, #48]	; (800f7ec <__libc_init_array+0x44>)
 800f7bc:	f000 fc6a 	bl	8010094 <_init>
 800f7c0:	1b64      	subs	r4, r4, r5
 800f7c2:	10a4      	asrs	r4, r4, #2
 800f7c4:	2600      	movs	r6, #0
 800f7c6:	42a6      	cmp	r6, r4
 800f7c8:	d105      	bne.n	800f7d6 <__libc_init_array+0x2e>
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7d0:	4798      	blx	r3
 800f7d2:	3601      	adds	r6, #1
 800f7d4:	e7ee      	b.n	800f7b4 <__libc_init_array+0xc>
 800f7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7da:	4798      	blx	r3
 800f7dc:	3601      	adds	r6, #1
 800f7de:	e7f2      	b.n	800f7c6 <__libc_init_array+0x1e>
 800f7e0:	08010e40 	.word	0x08010e40
 800f7e4:	08010e40 	.word	0x08010e40
 800f7e8:	08010e40 	.word	0x08010e40
 800f7ec:	08010e44 	.word	0x08010e44

0800f7f0 <__retarget_lock_acquire_recursive>:
 800f7f0:	4770      	bx	lr

0800f7f2 <__retarget_lock_release_recursive>:
 800f7f2:	4770      	bx	lr

0800f7f4 <memcpy>:
 800f7f4:	440a      	add	r2, r1
 800f7f6:	4291      	cmp	r1, r2
 800f7f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f7fc:	d100      	bne.n	800f800 <memcpy+0xc>
 800f7fe:	4770      	bx	lr
 800f800:	b510      	push	{r4, lr}
 800f802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f80a:	4291      	cmp	r1, r2
 800f80c:	d1f9      	bne.n	800f802 <memcpy+0xe>
 800f80e:	bd10      	pop	{r4, pc}

0800f810 <__ssputs_r>:
 800f810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f814:	688e      	ldr	r6, [r1, #8]
 800f816:	461f      	mov	r7, r3
 800f818:	42be      	cmp	r6, r7
 800f81a:	680b      	ldr	r3, [r1, #0]
 800f81c:	4682      	mov	sl, r0
 800f81e:	460c      	mov	r4, r1
 800f820:	4690      	mov	r8, r2
 800f822:	d82c      	bhi.n	800f87e <__ssputs_r+0x6e>
 800f824:	898a      	ldrh	r2, [r1, #12]
 800f826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f82a:	d026      	beq.n	800f87a <__ssputs_r+0x6a>
 800f82c:	6965      	ldr	r5, [r4, #20]
 800f82e:	6909      	ldr	r1, [r1, #16]
 800f830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f834:	eba3 0901 	sub.w	r9, r3, r1
 800f838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f83c:	1c7b      	adds	r3, r7, #1
 800f83e:	444b      	add	r3, r9
 800f840:	106d      	asrs	r5, r5, #1
 800f842:	429d      	cmp	r5, r3
 800f844:	bf38      	it	cc
 800f846:	461d      	movcc	r5, r3
 800f848:	0553      	lsls	r3, r2, #21
 800f84a:	d527      	bpl.n	800f89c <__ssputs_r+0x8c>
 800f84c:	4629      	mov	r1, r5
 800f84e:	f000 f957 	bl	800fb00 <_malloc_r>
 800f852:	4606      	mov	r6, r0
 800f854:	b360      	cbz	r0, 800f8b0 <__ssputs_r+0xa0>
 800f856:	6921      	ldr	r1, [r4, #16]
 800f858:	464a      	mov	r2, r9
 800f85a:	f7ff ffcb 	bl	800f7f4 <memcpy>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f868:	81a3      	strh	r3, [r4, #12]
 800f86a:	6126      	str	r6, [r4, #16]
 800f86c:	6165      	str	r5, [r4, #20]
 800f86e:	444e      	add	r6, r9
 800f870:	eba5 0509 	sub.w	r5, r5, r9
 800f874:	6026      	str	r6, [r4, #0]
 800f876:	60a5      	str	r5, [r4, #8]
 800f878:	463e      	mov	r6, r7
 800f87a:	42be      	cmp	r6, r7
 800f87c:	d900      	bls.n	800f880 <__ssputs_r+0x70>
 800f87e:	463e      	mov	r6, r7
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	4632      	mov	r2, r6
 800f884:	4641      	mov	r1, r8
 800f886:	f000 fb86 	bl	800ff96 <memmove>
 800f88a:	68a3      	ldr	r3, [r4, #8]
 800f88c:	1b9b      	subs	r3, r3, r6
 800f88e:	60a3      	str	r3, [r4, #8]
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	4433      	add	r3, r6
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	2000      	movs	r0, #0
 800f898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89c:	462a      	mov	r2, r5
 800f89e:	f000 fb4b 	bl	800ff38 <_realloc_r>
 800f8a2:	4606      	mov	r6, r0
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	d1e0      	bne.n	800f86a <__ssputs_r+0x5a>
 800f8a8:	6921      	ldr	r1, [r4, #16]
 800f8aa:	4650      	mov	r0, sl
 800f8ac:	f000 fb9e 	bl	800ffec <_free_r>
 800f8b0:	230c      	movs	r3, #12
 800f8b2:	f8ca 3000 	str.w	r3, [sl]
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8c2:	e7e9      	b.n	800f898 <__ssputs_r+0x88>

0800f8c4 <_svfiprintf_r>:
 800f8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c8:	4698      	mov	r8, r3
 800f8ca:	898b      	ldrh	r3, [r1, #12]
 800f8cc:	061b      	lsls	r3, r3, #24
 800f8ce:	b09d      	sub	sp, #116	; 0x74
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	460d      	mov	r5, r1
 800f8d4:	4614      	mov	r4, r2
 800f8d6:	d50e      	bpl.n	800f8f6 <_svfiprintf_r+0x32>
 800f8d8:	690b      	ldr	r3, [r1, #16]
 800f8da:	b963      	cbnz	r3, 800f8f6 <_svfiprintf_r+0x32>
 800f8dc:	2140      	movs	r1, #64	; 0x40
 800f8de:	f000 f90f 	bl	800fb00 <_malloc_r>
 800f8e2:	6028      	str	r0, [r5, #0]
 800f8e4:	6128      	str	r0, [r5, #16]
 800f8e6:	b920      	cbnz	r0, 800f8f2 <_svfiprintf_r+0x2e>
 800f8e8:	230c      	movs	r3, #12
 800f8ea:	603b      	str	r3, [r7, #0]
 800f8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8f0:	e0d0      	b.n	800fa94 <_svfiprintf_r+0x1d0>
 800f8f2:	2340      	movs	r3, #64	; 0x40
 800f8f4:	616b      	str	r3, [r5, #20]
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8fa:	2320      	movs	r3, #32
 800f8fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f900:	f8cd 800c 	str.w	r8, [sp, #12]
 800f904:	2330      	movs	r3, #48	; 0x30
 800f906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800faac <_svfiprintf_r+0x1e8>
 800f90a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f90e:	f04f 0901 	mov.w	r9, #1
 800f912:	4623      	mov	r3, r4
 800f914:	469a      	mov	sl, r3
 800f916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f91a:	b10a      	cbz	r2, 800f920 <_svfiprintf_r+0x5c>
 800f91c:	2a25      	cmp	r2, #37	; 0x25
 800f91e:	d1f9      	bne.n	800f914 <_svfiprintf_r+0x50>
 800f920:	ebba 0b04 	subs.w	fp, sl, r4
 800f924:	d00b      	beq.n	800f93e <_svfiprintf_r+0x7a>
 800f926:	465b      	mov	r3, fp
 800f928:	4622      	mov	r2, r4
 800f92a:	4629      	mov	r1, r5
 800f92c:	4638      	mov	r0, r7
 800f92e:	f7ff ff6f 	bl	800f810 <__ssputs_r>
 800f932:	3001      	adds	r0, #1
 800f934:	f000 80a9 	beq.w	800fa8a <_svfiprintf_r+0x1c6>
 800f938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f93a:	445a      	add	r2, fp
 800f93c:	9209      	str	r2, [sp, #36]	; 0x24
 800f93e:	f89a 3000 	ldrb.w	r3, [sl]
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 80a1 	beq.w	800fa8a <_svfiprintf_r+0x1c6>
 800f948:	2300      	movs	r3, #0
 800f94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f94e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f952:	f10a 0a01 	add.w	sl, sl, #1
 800f956:	9304      	str	r3, [sp, #16]
 800f958:	9307      	str	r3, [sp, #28]
 800f95a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f95e:	931a      	str	r3, [sp, #104]	; 0x68
 800f960:	4654      	mov	r4, sl
 800f962:	2205      	movs	r2, #5
 800f964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f968:	4850      	ldr	r0, [pc, #320]	; (800faac <_svfiprintf_r+0x1e8>)
 800f96a:	f7f0 fc31 	bl	80001d0 <memchr>
 800f96e:	9a04      	ldr	r2, [sp, #16]
 800f970:	b9d8      	cbnz	r0, 800f9aa <_svfiprintf_r+0xe6>
 800f972:	06d0      	lsls	r0, r2, #27
 800f974:	bf44      	itt	mi
 800f976:	2320      	movmi	r3, #32
 800f978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f97c:	0711      	lsls	r1, r2, #28
 800f97e:	bf44      	itt	mi
 800f980:	232b      	movmi	r3, #43	; 0x2b
 800f982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f986:	f89a 3000 	ldrb.w	r3, [sl]
 800f98a:	2b2a      	cmp	r3, #42	; 0x2a
 800f98c:	d015      	beq.n	800f9ba <_svfiprintf_r+0xf6>
 800f98e:	9a07      	ldr	r2, [sp, #28]
 800f990:	4654      	mov	r4, sl
 800f992:	2000      	movs	r0, #0
 800f994:	f04f 0c0a 	mov.w	ip, #10
 800f998:	4621      	mov	r1, r4
 800f99a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f99e:	3b30      	subs	r3, #48	; 0x30
 800f9a0:	2b09      	cmp	r3, #9
 800f9a2:	d94d      	bls.n	800fa40 <_svfiprintf_r+0x17c>
 800f9a4:	b1b0      	cbz	r0, 800f9d4 <_svfiprintf_r+0x110>
 800f9a6:	9207      	str	r2, [sp, #28]
 800f9a8:	e014      	b.n	800f9d4 <_svfiprintf_r+0x110>
 800f9aa:	eba0 0308 	sub.w	r3, r0, r8
 800f9ae:	fa09 f303 	lsl.w	r3, r9, r3
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	9304      	str	r3, [sp, #16]
 800f9b6:	46a2      	mov	sl, r4
 800f9b8:	e7d2      	b.n	800f960 <_svfiprintf_r+0x9c>
 800f9ba:	9b03      	ldr	r3, [sp, #12]
 800f9bc:	1d19      	adds	r1, r3, #4
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	9103      	str	r1, [sp, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	bfbb      	ittet	lt
 800f9c6:	425b      	neglt	r3, r3
 800f9c8:	f042 0202 	orrlt.w	r2, r2, #2
 800f9cc:	9307      	strge	r3, [sp, #28]
 800f9ce:	9307      	strlt	r3, [sp, #28]
 800f9d0:	bfb8      	it	lt
 800f9d2:	9204      	strlt	r2, [sp, #16]
 800f9d4:	7823      	ldrb	r3, [r4, #0]
 800f9d6:	2b2e      	cmp	r3, #46	; 0x2e
 800f9d8:	d10c      	bne.n	800f9f4 <_svfiprintf_r+0x130>
 800f9da:	7863      	ldrb	r3, [r4, #1]
 800f9dc:	2b2a      	cmp	r3, #42	; 0x2a
 800f9de:	d134      	bne.n	800fa4a <_svfiprintf_r+0x186>
 800f9e0:	9b03      	ldr	r3, [sp, #12]
 800f9e2:	1d1a      	adds	r2, r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	9203      	str	r2, [sp, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	bfb8      	it	lt
 800f9ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f9f0:	3402      	adds	r4, #2
 800f9f2:	9305      	str	r3, [sp, #20]
 800f9f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fabc <_svfiprintf_r+0x1f8>
 800f9f8:	7821      	ldrb	r1, [r4, #0]
 800f9fa:	2203      	movs	r2, #3
 800f9fc:	4650      	mov	r0, sl
 800f9fe:	f7f0 fbe7 	bl	80001d0 <memchr>
 800fa02:	b138      	cbz	r0, 800fa14 <_svfiprintf_r+0x150>
 800fa04:	9b04      	ldr	r3, [sp, #16]
 800fa06:	eba0 000a 	sub.w	r0, r0, sl
 800fa0a:	2240      	movs	r2, #64	; 0x40
 800fa0c:	4082      	lsls	r2, r0
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	3401      	adds	r4, #1
 800fa12:	9304      	str	r3, [sp, #16]
 800fa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa18:	4825      	ldr	r0, [pc, #148]	; (800fab0 <_svfiprintf_r+0x1ec>)
 800fa1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa1e:	2206      	movs	r2, #6
 800fa20:	f7f0 fbd6 	bl	80001d0 <memchr>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d038      	beq.n	800fa9a <_svfiprintf_r+0x1d6>
 800fa28:	4b22      	ldr	r3, [pc, #136]	; (800fab4 <_svfiprintf_r+0x1f0>)
 800fa2a:	bb1b      	cbnz	r3, 800fa74 <_svfiprintf_r+0x1b0>
 800fa2c:	9b03      	ldr	r3, [sp, #12]
 800fa2e:	3307      	adds	r3, #7
 800fa30:	f023 0307 	bic.w	r3, r3, #7
 800fa34:	3308      	adds	r3, #8
 800fa36:	9303      	str	r3, [sp, #12]
 800fa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa3a:	4433      	add	r3, r6
 800fa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa3e:	e768      	b.n	800f912 <_svfiprintf_r+0x4e>
 800fa40:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa44:	460c      	mov	r4, r1
 800fa46:	2001      	movs	r0, #1
 800fa48:	e7a6      	b.n	800f998 <_svfiprintf_r+0xd4>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	3401      	adds	r4, #1
 800fa4e:	9305      	str	r3, [sp, #20]
 800fa50:	4619      	mov	r1, r3
 800fa52:	f04f 0c0a 	mov.w	ip, #10
 800fa56:	4620      	mov	r0, r4
 800fa58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa5c:	3a30      	subs	r2, #48	; 0x30
 800fa5e:	2a09      	cmp	r2, #9
 800fa60:	d903      	bls.n	800fa6a <_svfiprintf_r+0x1a6>
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d0c6      	beq.n	800f9f4 <_svfiprintf_r+0x130>
 800fa66:	9105      	str	r1, [sp, #20]
 800fa68:	e7c4      	b.n	800f9f4 <_svfiprintf_r+0x130>
 800fa6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa6e:	4604      	mov	r4, r0
 800fa70:	2301      	movs	r3, #1
 800fa72:	e7f0      	b.n	800fa56 <_svfiprintf_r+0x192>
 800fa74:	ab03      	add	r3, sp, #12
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	462a      	mov	r2, r5
 800fa7a:	4b0f      	ldr	r3, [pc, #60]	; (800fab8 <_svfiprintf_r+0x1f4>)
 800fa7c:	a904      	add	r1, sp, #16
 800fa7e:	4638      	mov	r0, r7
 800fa80:	f3af 8000 	nop.w
 800fa84:	1c42      	adds	r2, r0, #1
 800fa86:	4606      	mov	r6, r0
 800fa88:	d1d6      	bne.n	800fa38 <_svfiprintf_r+0x174>
 800fa8a:	89ab      	ldrh	r3, [r5, #12]
 800fa8c:	065b      	lsls	r3, r3, #25
 800fa8e:	f53f af2d 	bmi.w	800f8ec <_svfiprintf_r+0x28>
 800fa92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa94:	b01d      	add	sp, #116	; 0x74
 800fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9a:	ab03      	add	r3, sp, #12
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	462a      	mov	r2, r5
 800faa0:	4b05      	ldr	r3, [pc, #20]	; (800fab8 <_svfiprintf_r+0x1f4>)
 800faa2:	a904      	add	r1, sp, #16
 800faa4:	4638      	mov	r0, r7
 800faa6:	f000 f919 	bl	800fcdc <_printf_i>
 800faaa:	e7eb      	b.n	800fa84 <_svfiprintf_r+0x1c0>
 800faac:	08010e04 	.word	0x08010e04
 800fab0:	08010e0e 	.word	0x08010e0e
 800fab4:	00000000 	.word	0x00000000
 800fab8:	0800f811 	.word	0x0800f811
 800fabc:	08010e0a 	.word	0x08010e0a

0800fac0 <sbrk_aligned>:
 800fac0:	b570      	push	{r4, r5, r6, lr}
 800fac2:	4e0e      	ldr	r6, [pc, #56]	; (800fafc <sbrk_aligned+0x3c>)
 800fac4:	460c      	mov	r4, r1
 800fac6:	6831      	ldr	r1, [r6, #0]
 800fac8:	4605      	mov	r5, r0
 800faca:	b911      	cbnz	r1, 800fad2 <sbrk_aligned+0x12>
 800facc:	f000 fa7e 	bl	800ffcc <_sbrk_r>
 800fad0:	6030      	str	r0, [r6, #0]
 800fad2:	4621      	mov	r1, r4
 800fad4:	4628      	mov	r0, r5
 800fad6:	f000 fa79 	bl	800ffcc <_sbrk_r>
 800fada:	1c43      	adds	r3, r0, #1
 800fadc:	d00a      	beq.n	800faf4 <sbrk_aligned+0x34>
 800fade:	1cc4      	adds	r4, r0, #3
 800fae0:	f024 0403 	bic.w	r4, r4, #3
 800fae4:	42a0      	cmp	r0, r4
 800fae6:	d007      	beq.n	800faf8 <sbrk_aligned+0x38>
 800fae8:	1a21      	subs	r1, r4, r0
 800faea:	4628      	mov	r0, r5
 800faec:	f000 fa6e 	bl	800ffcc <_sbrk_r>
 800faf0:	3001      	adds	r0, #1
 800faf2:	d101      	bne.n	800faf8 <sbrk_aligned+0x38>
 800faf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800faf8:	4620      	mov	r0, r4
 800fafa:	bd70      	pop	{r4, r5, r6, pc}
 800fafc:	2000544c 	.word	0x2000544c

0800fb00 <_malloc_r>:
 800fb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb04:	1ccd      	adds	r5, r1, #3
 800fb06:	f025 0503 	bic.w	r5, r5, #3
 800fb0a:	3508      	adds	r5, #8
 800fb0c:	2d0c      	cmp	r5, #12
 800fb0e:	bf38      	it	cc
 800fb10:	250c      	movcc	r5, #12
 800fb12:	2d00      	cmp	r5, #0
 800fb14:	4607      	mov	r7, r0
 800fb16:	db01      	blt.n	800fb1c <_malloc_r+0x1c>
 800fb18:	42a9      	cmp	r1, r5
 800fb1a:	d905      	bls.n	800fb28 <_malloc_r+0x28>
 800fb1c:	230c      	movs	r3, #12
 800fb1e:	603b      	str	r3, [r7, #0]
 800fb20:	2600      	movs	r6, #0
 800fb22:	4630      	mov	r0, r6
 800fb24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fbfc <_malloc_r+0xfc>
 800fb2c:	f000 f9f8 	bl	800ff20 <__malloc_lock>
 800fb30:	f8d8 3000 	ldr.w	r3, [r8]
 800fb34:	461c      	mov	r4, r3
 800fb36:	bb5c      	cbnz	r4, 800fb90 <_malloc_r+0x90>
 800fb38:	4629      	mov	r1, r5
 800fb3a:	4638      	mov	r0, r7
 800fb3c:	f7ff ffc0 	bl	800fac0 <sbrk_aligned>
 800fb40:	1c43      	adds	r3, r0, #1
 800fb42:	4604      	mov	r4, r0
 800fb44:	d155      	bne.n	800fbf2 <_malloc_r+0xf2>
 800fb46:	f8d8 4000 	ldr.w	r4, [r8]
 800fb4a:	4626      	mov	r6, r4
 800fb4c:	2e00      	cmp	r6, #0
 800fb4e:	d145      	bne.n	800fbdc <_malloc_r+0xdc>
 800fb50:	2c00      	cmp	r4, #0
 800fb52:	d048      	beq.n	800fbe6 <_malloc_r+0xe6>
 800fb54:	6823      	ldr	r3, [r4, #0]
 800fb56:	4631      	mov	r1, r6
 800fb58:	4638      	mov	r0, r7
 800fb5a:	eb04 0903 	add.w	r9, r4, r3
 800fb5e:	f000 fa35 	bl	800ffcc <_sbrk_r>
 800fb62:	4581      	cmp	r9, r0
 800fb64:	d13f      	bne.n	800fbe6 <_malloc_r+0xe6>
 800fb66:	6821      	ldr	r1, [r4, #0]
 800fb68:	1a6d      	subs	r5, r5, r1
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	f7ff ffa7 	bl	800fac0 <sbrk_aligned>
 800fb72:	3001      	adds	r0, #1
 800fb74:	d037      	beq.n	800fbe6 <_malloc_r+0xe6>
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	442b      	add	r3, r5
 800fb7a:	6023      	str	r3, [r4, #0]
 800fb7c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d038      	beq.n	800fbf6 <_malloc_r+0xf6>
 800fb84:	685a      	ldr	r2, [r3, #4]
 800fb86:	42a2      	cmp	r2, r4
 800fb88:	d12b      	bne.n	800fbe2 <_malloc_r+0xe2>
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	605a      	str	r2, [r3, #4]
 800fb8e:	e00f      	b.n	800fbb0 <_malloc_r+0xb0>
 800fb90:	6822      	ldr	r2, [r4, #0]
 800fb92:	1b52      	subs	r2, r2, r5
 800fb94:	d41f      	bmi.n	800fbd6 <_malloc_r+0xd6>
 800fb96:	2a0b      	cmp	r2, #11
 800fb98:	d917      	bls.n	800fbca <_malloc_r+0xca>
 800fb9a:	1961      	adds	r1, r4, r5
 800fb9c:	42a3      	cmp	r3, r4
 800fb9e:	6025      	str	r5, [r4, #0]
 800fba0:	bf18      	it	ne
 800fba2:	6059      	strne	r1, [r3, #4]
 800fba4:	6863      	ldr	r3, [r4, #4]
 800fba6:	bf08      	it	eq
 800fba8:	f8c8 1000 	streq.w	r1, [r8]
 800fbac:	5162      	str	r2, [r4, r5]
 800fbae:	604b      	str	r3, [r1, #4]
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	f104 060b 	add.w	r6, r4, #11
 800fbb6:	f000 f9b9 	bl	800ff2c <__malloc_unlock>
 800fbba:	f026 0607 	bic.w	r6, r6, #7
 800fbbe:	1d23      	adds	r3, r4, #4
 800fbc0:	1af2      	subs	r2, r6, r3
 800fbc2:	d0ae      	beq.n	800fb22 <_malloc_r+0x22>
 800fbc4:	1b9b      	subs	r3, r3, r6
 800fbc6:	50a3      	str	r3, [r4, r2]
 800fbc8:	e7ab      	b.n	800fb22 <_malloc_r+0x22>
 800fbca:	42a3      	cmp	r3, r4
 800fbcc:	6862      	ldr	r2, [r4, #4]
 800fbce:	d1dd      	bne.n	800fb8c <_malloc_r+0x8c>
 800fbd0:	f8c8 2000 	str.w	r2, [r8]
 800fbd4:	e7ec      	b.n	800fbb0 <_malloc_r+0xb0>
 800fbd6:	4623      	mov	r3, r4
 800fbd8:	6864      	ldr	r4, [r4, #4]
 800fbda:	e7ac      	b.n	800fb36 <_malloc_r+0x36>
 800fbdc:	4634      	mov	r4, r6
 800fbde:	6876      	ldr	r6, [r6, #4]
 800fbe0:	e7b4      	b.n	800fb4c <_malloc_r+0x4c>
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	e7cc      	b.n	800fb80 <_malloc_r+0x80>
 800fbe6:	230c      	movs	r3, #12
 800fbe8:	603b      	str	r3, [r7, #0]
 800fbea:	4638      	mov	r0, r7
 800fbec:	f000 f99e 	bl	800ff2c <__malloc_unlock>
 800fbf0:	e797      	b.n	800fb22 <_malloc_r+0x22>
 800fbf2:	6025      	str	r5, [r4, #0]
 800fbf4:	e7dc      	b.n	800fbb0 <_malloc_r+0xb0>
 800fbf6:	605b      	str	r3, [r3, #4]
 800fbf8:	deff      	udf	#255	; 0xff
 800fbfa:	bf00      	nop
 800fbfc:	20005448 	.word	0x20005448

0800fc00 <_printf_common>:
 800fc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc04:	4616      	mov	r6, r2
 800fc06:	4699      	mov	r9, r3
 800fc08:	688a      	ldr	r2, [r1, #8]
 800fc0a:	690b      	ldr	r3, [r1, #16]
 800fc0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc10:	4293      	cmp	r3, r2
 800fc12:	bfb8      	it	lt
 800fc14:	4613      	movlt	r3, r2
 800fc16:	6033      	str	r3, [r6, #0]
 800fc18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	460c      	mov	r4, r1
 800fc20:	b10a      	cbz	r2, 800fc26 <_printf_common+0x26>
 800fc22:	3301      	adds	r3, #1
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	0699      	lsls	r1, r3, #26
 800fc2a:	bf42      	ittt	mi
 800fc2c:	6833      	ldrmi	r3, [r6, #0]
 800fc2e:	3302      	addmi	r3, #2
 800fc30:	6033      	strmi	r3, [r6, #0]
 800fc32:	6825      	ldr	r5, [r4, #0]
 800fc34:	f015 0506 	ands.w	r5, r5, #6
 800fc38:	d106      	bne.n	800fc48 <_printf_common+0x48>
 800fc3a:	f104 0a19 	add.w	sl, r4, #25
 800fc3e:	68e3      	ldr	r3, [r4, #12]
 800fc40:	6832      	ldr	r2, [r6, #0]
 800fc42:	1a9b      	subs	r3, r3, r2
 800fc44:	42ab      	cmp	r3, r5
 800fc46:	dc26      	bgt.n	800fc96 <_printf_common+0x96>
 800fc48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fc4c:	1e13      	subs	r3, r2, #0
 800fc4e:	6822      	ldr	r2, [r4, #0]
 800fc50:	bf18      	it	ne
 800fc52:	2301      	movne	r3, #1
 800fc54:	0692      	lsls	r2, r2, #26
 800fc56:	d42b      	bmi.n	800fcb0 <_printf_common+0xb0>
 800fc58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	4638      	mov	r0, r7
 800fc60:	47c0      	blx	r8
 800fc62:	3001      	adds	r0, #1
 800fc64:	d01e      	beq.n	800fca4 <_printf_common+0xa4>
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	6922      	ldr	r2, [r4, #16]
 800fc6a:	f003 0306 	and.w	r3, r3, #6
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	bf02      	ittt	eq
 800fc72:	68e5      	ldreq	r5, [r4, #12]
 800fc74:	6833      	ldreq	r3, [r6, #0]
 800fc76:	1aed      	subeq	r5, r5, r3
 800fc78:	68a3      	ldr	r3, [r4, #8]
 800fc7a:	bf0c      	ite	eq
 800fc7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc80:	2500      	movne	r5, #0
 800fc82:	4293      	cmp	r3, r2
 800fc84:	bfc4      	itt	gt
 800fc86:	1a9b      	subgt	r3, r3, r2
 800fc88:	18ed      	addgt	r5, r5, r3
 800fc8a:	2600      	movs	r6, #0
 800fc8c:	341a      	adds	r4, #26
 800fc8e:	42b5      	cmp	r5, r6
 800fc90:	d11a      	bne.n	800fcc8 <_printf_common+0xc8>
 800fc92:	2000      	movs	r0, #0
 800fc94:	e008      	b.n	800fca8 <_printf_common+0xa8>
 800fc96:	2301      	movs	r3, #1
 800fc98:	4652      	mov	r2, sl
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	4638      	mov	r0, r7
 800fc9e:	47c0      	blx	r8
 800fca0:	3001      	adds	r0, #1
 800fca2:	d103      	bne.n	800fcac <_printf_common+0xac>
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcac:	3501      	adds	r5, #1
 800fcae:	e7c6      	b.n	800fc3e <_printf_common+0x3e>
 800fcb0:	18e1      	adds	r1, r4, r3
 800fcb2:	1c5a      	adds	r2, r3, #1
 800fcb4:	2030      	movs	r0, #48	; 0x30
 800fcb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fcba:	4422      	add	r2, r4
 800fcbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fcc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fcc4:	3302      	adds	r3, #2
 800fcc6:	e7c7      	b.n	800fc58 <_printf_common+0x58>
 800fcc8:	2301      	movs	r3, #1
 800fcca:	4622      	mov	r2, r4
 800fccc:	4649      	mov	r1, r9
 800fcce:	4638      	mov	r0, r7
 800fcd0:	47c0      	blx	r8
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	d0e6      	beq.n	800fca4 <_printf_common+0xa4>
 800fcd6:	3601      	adds	r6, #1
 800fcd8:	e7d9      	b.n	800fc8e <_printf_common+0x8e>
	...

0800fcdc <_printf_i>:
 800fcdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fce0:	7e0f      	ldrb	r7, [r1, #24]
 800fce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fce4:	2f78      	cmp	r7, #120	; 0x78
 800fce6:	4691      	mov	r9, r2
 800fce8:	4680      	mov	r8, r0
 800fcea:	460c      	mov	r4, r1
 800fcec:	469a      	mov	sl, r3
 800fcee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fcf2:	d807      	bhi.n	800fd04 <_printf_i+0x28>
 800fcf4:	2f62      	cmp	r7, #98	; 0x62
 800fcf6:	d80a      	bhi.n	800fd0e <_printf_i+0x32>
 800fcf8:	2f00      	cmp	r7, #0
 800fcfa:	f000 80d4 	beq.w	800fea6 <_printf_i+0x1ca>
 800fcfe:	2f58      	cmp	r7, #88	; 0x58
 800fd00:	f000 80c0 	beq.w	800fe84 <_printf_i+0x1a8>
 800fd04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd0c:	e03a      	b.n	800fd84 <_printf_i+0xa8>
 800fd0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd12:	2b15      	cmp	r3, #21
 800fd14:	d8f6      	bhi.n	800fd04 <_printf_i+0x28>
 800fd16:	a101      	add	r1, pc, #4	; (adr r1, 800fd1c <_printf_i+0x40>)
 800fd18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd1c:	0800fd75 	.word	0x0800fd75
 800fd20:	0800fd89 	.word	0x0800fd89
 800fd24:	0800fd05 	.word	0x0800fd05
 800fd28:	0800fd05 	.word	0x0800fd05
 800fd2c:	0800fd05 	.word	0x0800fd05
 800fd30:	0800fd05 	.word	0x0800fd05
 800fd34:	0800fd89 	.word	0x0800fd89
 800fd38:	0800fd05 	.word	0x0800fd05
 800fd3c:	0800fd05 	.word	0x0800fd05
 800fd40:	0800fd05 	.word	0x0800fd05
 800fd44:	0800fd05 	.word	0x0800fd05
 800fd48:	0800fe8d 	.word	0x0800fe8d
 800fd4c:	0800fdb5 	.word	0x0800fdb5
 800fd50:	0800fe47 	.word	0x0800fe47
 800fd54:	0800fd05 	.word	0x0800fd05
 800fd58:	0800fd05 	.word	0x0800fd05
 800fd5c:	0800feaf 	.word	0x0800feaf
 800fd60:	0800fd05 	.word	0x0800fd05
 800fd64:	0800fdb5 	.word	0x0800fdb5
 800fd68:	0800fd05 	.word	0x0800fd05
 800fd6c:	0800fd05 	.word	0x0800fd05
 800fd70:	0800fe4f 	.word	0x0800fe4f
 800fd74:	682b      	ldr	r3, [r5, #0]
 800fd76:	1d1a      	adds	r2, r3, #4
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	602a      	str	r2, [r5, #0]
 800fd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd84:	2301      	movs	r3, #1
 800fd86:	e09f      	b.n	800fec8 <_printf_i+0x1ec>
 800fd88:	6820      	ldr	r0, [r4, #0]
 800fd8a:	682b      	ldr	r3, [r5, #0]
 800fd8c:	0607      	lsls	r7, r0, #24
 800fd8e:	f103 0104 	add.w	r1, r3, #4
 800fd92:	6029      	str	r1, [r5, #0]
 800fd94:	d501      	bpl.n	800fd9a <_printf_i+0xbe>
 800fd96:	681e      	ldr	r6, [r3, #0]
 800fd98:	e003      	b.n	800fda2 <_printf_i+0xc6>
 800fd9a:	0646      	lsls	r6, r0, #25
 800fd9c:	d5fb      	bpl.n	800fd96 <_printf_i+0xba>
 800fd9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fda2:	2e00      	cmp	r6, #0
 800fda4:	da03      	bge.n	800fdae <_printf_i+0xd2>
 800fda6:	232d      	movs	r3, #45	; 0x2d
 800fda8:	4276      	negs	r6, r6
 800fdaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdae:	485a      	ldr	r0, [pc, #360]	; (800ff18 <_printf_i+0x23c>)
 800fdb0:	230a      	movs	r3, #10
 800fdb2:	e012      	b.n	800fdda <_printf_i+0xfe>
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	6820      	ldr	r0, [r4, #0]
 800fdb8:	1d19      	adds	r1, r3, #4
 800fdba:	6029      	str	r1, [r5, #0]
 800fdbc:	0605      	lsls	r5, r0, #24
 800fdbe:	d501      	bpl.n	800fdc4 <_printf_i+0xe8>
 800fdc0:	681e      	ldr	r6, [r3, #0]
 800fdc2:	e002      	b.n	800fdca <_printf_i+0xee>
 800fdc4:	0641      	lsls	r1, r0, #25
 800fdc6:	d5fb      	bpl.n	800fdc0 <_printf_i+0xe4>
 800fdc8:	881e      	ldrh	r6, [r3, #0]
 800fdca:	4853      	ldr	r0, [pc, #332]	; (800ff18 <_printf_i+0x23c>)
 800fdcc:	2f6f      	cmp	r7, #111	; 0x6f
 800fdce:	bf0c      	ite	eq
 800fdd0:	2308      	moveq	r3, #8
 800fdd2:	230a      	movne	r3, #10
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fdda:	6865      	ldr	r5, [r4, #4]
 800fddc:	60a5      	str	r5, [r4, #8]
 800fdde:	2d00      	cmp	r5, #0
 800fde0:	bfa2      	ittt	ge
 800fde2:	6821      	ldrge	r1, [r4, #0]
 800fde4:	f021 0104 	bicge.w	r1, r1, #4
 800fde8:	6021      	strge	r1, [r4, #0]
 800fdea:	b90e      	cbnz	r6, 800fdf0 <_printf_i+0x114>
 800fdec:	2d00      	cmp	r5, #0
 800fdee:	d04b      	beq.n	800fe88 <_printf_i+0x1ac>
 800fdf0:	4615      	mov	r5, r2
 800fdf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fdf6:	fb03 6711 	mls	r7, r3, r1, r6
 800fdfa:	5dc7      	ldrb	r7, [r0, r7]
 800fdfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe00:	4637      	mov	r7, r6
 800fe02:	42bb      	cmp	r3, r7
 800fe04:	460e      	mov	r6, r1
 800fe06:	d9f4      	bls.n	800fdf2 <_printf_i+0x116>
 800fe08:	2b08      	cmp	r3, #8
 800fe0a:	d10b      	bne.n	800fe24 <_printf_i+0x148>
 800fe0c:	6823      	ldr	r3, [r4, #0]
 800fe0e:	07de      	lsls	r6, r3, #31
 800fe10:	d508      	bpl.n	800fe24 <_printf_i+0x148>
 800fe12:	6923      	ldr	r3, [r4, #16]
 800fe14:	6861      	ldr	r1, [r4, #4]
 800fe16:	4299      	cmp	r1, r3
 800fe18:	bfde      	ittt	le
 800fe1a:	2330      	movle	r3, #48	; 0x30
 800fe1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fe24:	1b52      	subs	r2, r2, r5
 800fe26:	6122      	str	r2, [r4, #16]
 800fe28:	f8cd a000 	str.w	sl, [sp]
 800fe2c:	464b      	mov	r3, r9
 800fe2e:	aa03      	add	r2, sp, #12
 800fe30:	4621      	mov	r1, r4
 800fe32:	4640      	mov	r0, r8
 800fe34:	f7ff fee4 	bl	800fc00 <_printf_common>
 800fe38:	3001      	adds	r0, #1
 800fe3a:	d14a      	bne.n	800fed2 <_printf_i+0x1f6>
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe40:	b004      	add	sp, #16
 800fe42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe46:	6823      	ldr	r3, [r4, #0]
 800fe48:	f043 0320 	orr.w	r3, r3, #32
 800fe4c:	6023      	str	r3, [r4, #0]
 800fe4e:	4833      	ldr	r0, [pc, #204]	; (800ff1c <_printf_i+0x240>)
 800fe50:	2778      	movs	r7, #120	; 0x78
 800fe52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe56:	6823      	ldr	r3, [r4, #0]
 800fe58:	6829      	ldr	r1, [r5, #0]
 800fe5a:	061f      	lsls	r7, r3, #24
 800fe5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fe60:	d402      	bmi.n	800fe68 <_printf_i+0x18c>
 800fe62:	065f      	lsls	r7, r3, #25
 800fe64:	bf48      	it	mi
 800fe66:	b2b6      	uxthmi	r6, r6
 800fe68:	07df      	lsls	r7, r3, #31
 800fe6a:	bf48      	it	mi
 800fe6c:	f043 0320 	orrmi.w	r3, r3, #32
 800fe70:	6029      	str	r1, [r5, #0]
 800fe72:	bf48      	it	mi
 800fe74:	6023      	strmi	r3, [r4, #0]
 800fe76:	b91e      	cbnz	r6, 800fe80 <_printf_i+0x1a4>
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	f023 0320 	bic.w	r3, r3, #32
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	2310      	movs	r3, #16
 800fe82:	e7a7      	b.n	800fdd4 <_printf_i+0xf8>
 800fe84:	4824      	ldr	r0, [pc, #144]	; (800ff18 <_printf_i+0x23c>)
 800fe86:	e7e4      	b.n	800fe52 <_printf_i+0x176>
 800fe88:	4615      	mov	r5, r2
 800fe8a:	e7bd      	b.n	800fe08 <_printf_i+0x12c>
 800fe8c:	682b      	ldr	r3, [r5, #0]
 800fe8e:	6826      	ldr	r6, [r4, #0]
 800fe90:	6961      	ldr	r1, [r4, #20]
 800fe92:	1d18      	adds	r0, r3, #4
 800fe94:	6028      	str	r0, [r5, #0]
 800fe96:	0635      	lsls	r5, r6, #24
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	d501      	bpl.n	800fea0 <_printf_i+0x1c4>
 800fe9c:	6019      	str	r1, [r3, #0]
 800fe9e:	e002      	b.n	800fea6 <_printf_i+0x1ca>
 800fea0:	0670      	lsls	r0, r6, #25
 800fea2:	d5fb      	bpl.n	800fe9c <_printf_i+0x1c0>
 800fea4:	8019      	strh	r1, [r3, #0]
 800fea6:	2300      	movs	r3, #0
 800fea8:	6123      	str	r3, [r4, #16]
 800feaa:	4615      	mov	r5, r2
 800feac:	e7bc      	b.n	800fe28 <_printf_i+0x14c>
 800feae:	682b      	ldr	r3, [r5, #0]
 800feb0:	1d1a      	adds	r2, r3, #4
 800feb2:	602a      	str	r2, [r5, #0]
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	6862      	ldr	r2, [r4, #4]
 800feb8:	2100      	movs	r1, #0
 800feba:	4628      	mov	r0, r5
 800febc:	f7f0 f988 	bl	80001d0 <memchr>
 800fec0:	b108      	cbz	r0, 800fec6 <_printf_i+0x1ea>
 800fec2:	1b40      	subs	r0, r0, r5
 800fec4:	6060      	str	r0, [r4, #4]
 800fec6:	6863      	ldr	r3, [r4, #4]
 800fec8:	6123      	str	r3, [r4, #16]
 800feca:	2300      	movs	r3, #0
 800fecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fed0:	e7aa      	b.n	800fe28 <_printf_i+0x14c>
 800fed2:	6923      	ldr	r3, [r4, #16]
 800fed4:	462a      	mov	r2, r5
 800fed6:	4649      	mov	r1, r9
 800fed8:	4640      	mov	r0, r8
 800feda:	47d0      	blx	sl
 800fedc:	3001      	adds	r0, #1
 800fede:	d0ad      	beq.n	800fe3c <_printf_i+0x160>
 800fee0:	6823      	ldr	r3, [r4, #0]
 800fee2:	079b      	lsls	r3, r3, #30
 800fee4:	d413      	bmi.n	800ff0e <_printf_i+0x232>
 800fee6:	68e0      	ldr	r0, [r4, #12]
 800fee8:	9b03      	ldr	r3, [sp, #12]
 800feea:	4298      	cmp	r0, r3
 800feec:	bfb8      	it	lt
 800feee:	4618      	movlt	r0, r3
 800fef0:	e7a6      	b.n	800fe40 <_printf_i+0x164>
 800fef2:	2301      	movs	r3, #1
 800fef4:	4632      	mov	r2, r6
 800fef6:	4649      	mov	r1, r9
 800fef8:	4640      	mov	r0, r8
 800fefa:	47d0      	blx	sl
 800fefc:	3001      	adds	r0, #1
 800fefe:	d09d      	beq.n	800fe3c <_printf_i+0x160>
 800ff00:	3501      	adds	r5, #1
 800ff02:	68e3      	ldr	r3, [r4, #12]
 800ff04:	9903      	ldr	r1, [sp, #12]
 800ff06:	1a5b      	subs	r3, r3, r1
 800ff08:	42ab      	cmp	r3, r5
 800ff0a:	dcf2      	bgt.n	800fef2 <_printf_i+0x216>
 800ff0c:	e7eb      	b.n	800fee6 <_printf_i+0x20a>
 800ff0e:	2500      	movs	r5, #0
 800ff10:	f104 0619 	add.w	r6, r4, #25
 800ff14:	e7f5      	b.n	800ff02 <_printf_i+0x226>
 800ff16:	bf00      	nop
 800ff18:	08010e15 	.word	0x08010e15
 800ff1c:	08010e26 	.word	0x08010e26

0800ff20 <__malloc_lock>:
 800ff20:	4801      	ldr	r0, [pc, #4]	; (800ff28 <__malloc_lock+0x8>)
 800ff22:	f7ff bc65 	b.w	800f7f0 <__retarget_lock_acquire_recursive>
 800ff26:	bf00      	nop
 800ff28:	20005444 	.word	0x20005444

0800ff2c <__malloc_unlock>:
 800ff2c:	4801      	ldr	r0, [pc, #4]	; (800ff34 <__malloc_unlock+0x8>)
 800ff2e:	f7ff bc60 	b.w	800f7f2 <__retarget_lock_release_recursive>
 800ff32:	bf00      	nop
 800ff34:	20005444 	.word	0x20005444

0800ff38 <_realloc_r>:
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3c:	4680      	mov	r8, r0
 800ff3e:	4614      	mov	r4, r2
 800ff40:	460e      	mov	r6, r1
 800ff42:	b921      	cbnz	r1, 800ff4e <_realloc_r+0x16>
 800ff44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff48:	4611      	mov	r1, r2
 800ff4a:	f7ff bdd9 	b.w	800fb00 <_malloc_r>
 800ff4e:	b92a      	cbnz	r2, 800ff5c <_realloc_r+0x24>
 800ff50:	f000 f84c 	bl	800ffec <_free_r>
 800ff54:	4625      	mov	r5, r4
 800ff56:	4628      	mov	r0, r5
 800ff58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5c:	f000 f892 	bl	8010084 <_malloc_usable_size_r>
 800ff60:	4284      	cmp	r4, r0
 800ff62:	4607      	mov	r7, r0
 800ff64:	d802      	bhi.n	800ff6c <_realloc_r+0x34>
 800ff66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff6a:	d812      	bhi.n	800ff92 <_realloc_r+0x5a>
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	4640      	mov	r0, r8
 800ff70:	f7ff fdc6 	bl	800fb00 <_malloc_r>
 800ff74:	4605      	mov	r5, r0
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d0ed      	beq.n	800ff56 <_realloc_r+0x1e>
 800ff7a:	42bc      	cmp	r4, r7
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	4631      	mov	r1, r6
 800ff80:	bf28      	it	cs
 800ff82:	463a      	movcs	r2, r7
 800ff84:	f7ff fc36 	bl	800f7f4 <memcpy>
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4640      	mov	r0, r8
 800ff8c:	f000 f82e 	bl	800ffec <_free_r>
 800ff90:	e7e1      	b.n	800ff56 <_realloc_r+0x1e>
 800ff92:	4635      	mov	r5, r6
 800ff94:	e7df      	b.n	800ff56 <_realloc_r+0x1e>

0800ff96 <memmove>:
 800ff96:	4288      	cmp	r0, r1
 800ff98:	b510      	push	{r4, lr}
 800ff9a:	eb01 0402 	add.w	r4, r1, r2
 800ff9e:	d902      	bls.n	800ffa6 <memmove+0x10>
 800ffa0:	4284      	cmp	r4, r0
 800ffa2:	4623      	mov	r3, r4
 800ffa4:	d807      	bhi.n	800ffb6 <memmove+0x20>
 800ffa6:	1e43      	subs	r3, r0, #1
 800ffa8:	42a1      	cmp	r1, r4
 800ffaa:	d008      	beq.n	800ffbe <memmove+0x28>
 800ffac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffb4:	e7f8      	b.n	800ffa8 <memmove+0x12>
 800ffb6:	4402      	add	r2, r0
 800ffb8:	4601      	mov	r1, r0
 800ffba:	428a      	cmp	r2, r1
 800ffbc:	d100      	bne.n	800ffc0 <memmove+0x2a>
 800ffbe:	bd10      	pop	{r4, pc}
 800ffc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffc8:	e7f7      	b.n	800ffba <memmove+0x24>
	...

0800ffcc <_sbrk_r>:
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	4d06      	ldr	r5, [pc, #24]	; (800ffe8 <_sbrk_r+0x1c>)
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	602b      	str	r3, [r5, #0]
 800ffd8:	f7f6 ff10 	bl	8006dfc <_sbrk>
 800ffdc:	1c43      	adds	r3, r0, #1
 800ffde:	d102      	bne.n	800ffe6 <_sbrk_r+0x1a>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	b103      	cbz	r3, 800ffe6 <_sbrk_r+0x1a>
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	bd38      	pop	{r3, r4, r5, pc}
 800ffe8:	20005450 	.word	0x20005450

0800ffec <_free_r>:
 800ffec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffee:	2900      	cmp	r1, #0
 800fff0:	d044      	beq.n	801007c <_free_r+0x90>
 800fff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fff6:	9001      	str	r0, [sp, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f1a1 0404 	sub.w	r4, r1, #4
 800fffe:	bfb8      	it	lt
 8010000:	18e4      	addlt	r4, r4, r3
 8010002:	f7ff ff8d 	bl	800ff20 <__malloc_lock>
 8010006:	4a1e      	ldr	r2, [pc, #120]	; (8010080 <_free_r+0x94>)
 8010008:	9801      	ldr	r0, [sp, #4]
 801000a:	6813      	ldr	r3, [r2, #0]
 801000c:	b933      	cbnz	r3, 801001c <_free_r+0x30>
 801000e:	6063      	str	r3, [r4, #4]
 8010010:	6014      	str	r4, [r2, #0]
 8010012:	b003      	add	sp, #12
 8010014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010018:	f7ff bf88 	b.w	800ff2c <__malloc_unlock>
 801001c:	42a3      	cmp	r3, r4
 801001e:	d908      	bls.n	8010032 <_free_r+0x46>
 8010020:	6825      	ldr	r5, [r4, #0]
 8010022:	1961      	adds	r1, r4, r5
 8010024:	428b      	cmp	r3, r1
 8010026:	bf01      	itttt	eq
 8010028:	6819      	ldreq	r1, [r3, #0]
 801002a:	685b      	ldreq	r3, [r3, #4]
 801002c:	1949      	addeq	r1, r1, r5
 801002e:	6021      	streq	r1, [r4, #0]
 8010030:	e7ed      	b.n	801000e <_free_r+0x22>
 8010032:	461a      	mov	r2, r3
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	b10b      	cbz	r3, 801003c <_free_r+0x50>
 8010038:	42a3      	cmp	r3, r4
 801003a:	d9fa      	bls.n	8010032 <_free_r+0x46>
 801003c:	6811      	ldr	r1, [r2, #0]
 801003e:	1855      	adds	r5, r2, r1
 8010040:	42a5      	cmp	r5, r4
 8010042:	d10b      	bne.n	801005c <_free_r+0x70>
 8010044:	6824      	ldr	r4, [r4, #0]
 8010046:	4421      	add	r1, r4
 8010048:	1854      	adds	r4, r2, r1
 801004a:	42a3      	cmp	r3, r4
 801004c:	6011      	str	r1, [r2, #0]
 801004e:	d1e0      	bne.n	8010012 <_free_r+0x26>
 8010050:	681c      	ldr	r4, [r3, #0]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	6053      	str	r3, [r2, #4]
 8010056:	440c      	add	r4, r1
 8010058:	6014      	str	r4, [r2, #0]
 801005a:	e7da      	b.n	8010012 <_free_r+0x26>
 801005c:	d902      	bls.n	8010064 <_free_r+0x78>
 801005e:	230c      	movs	r3, #12
 8010060:	6003      	str	r3, [r0, #0]
 8010062:	e7d6      	b.n	8010012 <_free_r+0x26>
 8010064:	6825      	ldr	r5, [r4, #0]
 8010066:	1961      	adds	r1, r4, r5
 8010068:	428b      	cmp	r3, r1
 801006a:	bf04      	itt	eq
 801006c:	6819      	ldreq	r1, [r3, #0]
 801006e:	685b      	ldreq	r3, [r3, #4]
 8010070:	6063      	str	r3, [r4, #4]
 8010072:	bf04      	itt	eq
 8010074:	1949      	addeq	r1, r1, r5
 8010076:	6021      	streq	r1, [r4, #0]
 8010078:	6054      	str	r4, [r2, #4]
 801007a:	e7ca      	b.n	8010012 <_free_r+0x26>
 801007c:	b003      	add	sp, #12
 801007e:	bd30      	pop	{r4, r5, pc}
 8010080:	20005448 	.word	0x20005448

08010084 <_malloc_usable_size_r>:
 8010084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010088:	1f18      	subs	r0, r3, #4
 801008a:	2b00      	cmp	r3, #0
 801008c:	bfbc      	itt	lt
 801008e:	580b      	ldrlt	r3, [r1, r0]
 8010090:	18c0      	addlt	r0, r0, r3
 8010092:	4770      	bx	lr

08010094 <_init>:
 8010094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010096:	bf00      	nop
 8010098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801009a:	bc08      	pop	{r3}
 801009c:	469e      	mov	lr, r3
 801009e:	4770      	bx	lr

080100a0 <_fini>:
 80100a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a2:	bf00      	nop
 80100a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100a6:	bc08      	pop	{r3}
 80100a8:	469e      	mov	lr, r3
 80100aa:	4770      	bx	lr
